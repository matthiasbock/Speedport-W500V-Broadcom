cscope 15 /project/BCMDT_3.0/kernel/linux/net/ipv4/netfilter               0000951489
	@arp_tables.c

12 
	~<löux/c⁄fig.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/skbuff.h
>

15 
	~<löux/√tdevi˚.h
>

16 
	~<löux/if_¨p.h
>

17 
	~<löux/kmod.h
>

18 
	~<löux/vmÆloc.h
>

19 
	~<löux/¥oc_fs.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/öô.h
>

23 
	~<asm/uac˚ss.h
>

24 
	~<asm/£m≠h‹e.h
>

26 
	~<löux/√tfûãr_¨p/¨p_èbÀs.h
>

28 
MODULE_LICENSE
("GPL");

29 
MODULE_AUTHOR
("David S. Miller <davem@redhat.com>");

30 
MODULE_DESCRIPTION
("arptables core");

35 #ifde‡
DEBUG_ARP_TABLES


36 
	#d¥ötf
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(f‹m© , ##árgs)

	)

38 
	#d¥ötf
(
f‹m©
, 
¨gs
...)

	)

41 #ifde‡
DEBUG_ARP_TABLES_USER


42 
	#du¥ötf
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(f‹m© , ##árgs)

	)

44 
	#du¥ötf
(
f‹m©
, 
¨gs
...)

	)

47 #ifde‡
CONFIG_NETFILTER_DEBUG


48 
	#ARP_NF_ASSERT
(
x
) \

50 i‡(!(
x
)) \

51 
	`¥ötk
("ARP_NF_ASSERT: %s:%s:%u\n", \

52 
__FUNCTION__
, 
__FILE__
, 
__LINE__
); \

53 } 0)

	)

55 
	#ARP_NF_ASSERT
(
x
)

	)

57 
	#SMP_ALIGN
(
x
Ë(((xË+ 
SMP_CACHE_BYTES
-1Ë& ~(SMP_CACHE_BYTES-1))

	)

59 
DECLARE_MUTEX
(
¨±_muãx
);

61 
	#ASSERT_READ_LOCK
(
x
Ë
	`ARP_NF_ASSERT
(
	`down_åylock
(&
¨±_muãx
Ë!0)

	)

62 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`ARP_NF_ASSERT
(
	`down_åylock
(&
¨±_muãx
Ë!0)

	)

63 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

64 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

66 
	s¨±_èbÀ_öfo
 {

67 
	msize
;

68 
	mnumbî
;

69 
	möôül_íåõs
;

70 
	mhook_íåy
[
NF_ARP_NUMHOOKS
];

71 
	mundîÊow
[
NF_ARP_NUMHOOKS
];

72 
	míåõs
[0] 
__©åibuã__
((
Æig√d
(
SMP_CACHE_BYTES
)));

75 
LIST_HEAD
(
¨±_èrgë
);

76 
LIST_HEAD
(
¨±_èbÀs
);

77 
	#ADD_COUNTER
(
c
,
b
,
p
Ëdÿ{ (c).
b˙t
 +(b); (c).
p˙t
 +’); } 0)

	)

79 #ifde‡
CONFIG_SMP


80 
	#TABLE_OFFSET
(
t
,
p
Ë(
	`SMP_ALIGN
(—)->
size
)*’))

	)

82 
	#TABLE_OFFSET
(
t
,
p
Ë0

	)

85 
ölöe
 
	$¨p_devaddr_com∑ª
(c⁄° 
¨±_devaddr_öfo
 *
≠
,

86 *
hdr_addr
, 
Àn
)

88 
i
, 
ªt
;

90 i‡(
Àn
 > 
ARPT_DEV_ADDR_LEN_MAX
)

91 
Àn
 = 
ARPT_DEV_ADDR_LEN_MAX
;

93 
ªt
 = 0;

94 
i
 = 0; i < 
Àn
; i++)

95 
ªt
 |(
hdr_addr
[
i
] ^ 
≠
->
addr
[i]Ë&áp->
mask
[i];

97  (
ªt
 != 0);

98 
	}
}

101 
ölöe
 
	$¨p_∑ckë_m©ch
(c⁄° 
¨phdr
 *arphdr,

102 
√t_devi˚
 *
dev
,

103 c⁄° *
ödev
,

104 c⁄° *
outdev
,

105 c⁄° 
¨±_¨p
 *
¨pöfo
)

107 *
¨µå
 = (*)(
¨phdr
 + 1);

108 *
§c_devaddr
, *
tgt_devaddr
;

109 
u32
 *
§c_ùaddr
, *
tgt_ùaddr
;

110 
i
, 
ªt
;

112 
	#FWINV
(
boﬁ
,
övÊg
Ë((boﬁË^ !!(
¨pöfo
->
övÊags
 & invÊg))

	)

114 i‡(
	`FWINV
((
¨phdr
->
¨_›
 & 
¨pöfo
->
¨p›_mask
Ë!¨pöfo->
¨p›
,

115 
ARPT_INV_ARPOP
)) {

116 
	`d¥ötf
("ARP operation field mismatch.\n");

117 
	`d¥ötf
("ar_op: %04x info->arpop: %04x info->arpop_mask: %04x\n",

118 
¨phdr
->
¨_›
, 
¨pöfo
->
¨p›
,áΩöfo->
¨p›_mask
);

122 i‡(
	`FWINV
((
¨phdr
->
¨_hrd
 & 
¨pöfo
->
¨hrd_mask
Ë!¨pöfo->
¨hrd
,

123 
ARPT_INV_ARPHRD
)) {

124 
	`d¥ötf
("ARP hardwareáddress format mismatch.\n");

125 
	`d¥ötf
("ar_hrd: %04x info->arhrd: %04x info->arhrd_mask: %04x\n",

126 
¨phdr
->
¨_hrd
, 
¨pöfo
->
¨hrd
,áΩöfo->
¨hrd_mask
);

130 i‡(
	`FWINV
((
¨phdr
->
¨_¥o
 & 
¨pöfo
->
¨¥o_mask
Ë!¨pöfo->
¨¥o
,

131 
ARPT_INV_ARPPRO
)) {

132 
	`d¥ötf
("ARPÖrotocoláddress format mismatch.\n");

133 
	`d¥ötf
("ar_pro: %04x info->arpro: %04x info->arpro_mask: %04x\n",

134 
¨phdr
->
¨_¥o
, 
¨pöfo
->
¨¥o
,áΩöfo->
¨¥o_mask
);

138 i‡(
	`FWINV
((
¨phdr
->
¨_h 
 & 
¨pöfo
->
¨h _mask
Ë!¨pöfo->
¨h 
,

139 
ARPT_INV_ARPHLN
)) {

140 
	`d¥ötf
("ARP hardwareáddressÜength mismatch.\n");

141 
	`d¥ötf
("ar_hln: %02x info->arhln: %02x info->arhln_mask: %02x\n",

142 
¨phdr
->
¨_h 
, 
¨pöfo
->
¨h 
,áΩöfo->
¨h _mask
);

146 
§c_devaddr
 = 
¨µå
;

147 
¨µå
 +
dev
->
addr_Àn
;

148 
§c_ùaddr
 = (
u32
 *Ë
¨µå
;

149 
¨µå
 +(
u32
);

150 
tgt_devaddr
 = 
¨µå
;

151 
¨µå
 +
dev
->
addr_Àn
;

152 
tgt_ùaddr
 = (
u32
 *Ë
¨µå
;

154 i‡(
	`FWINV
(
	`¨p_devaddr_com∑ª
(&
¨pöfo
->
§c_devaddr
, src_devaddr, 
dev
->
addr_Àn
),

155 
ARPT_INV_SRCDEVADDR
) ||

156 
	`FWINV
(
	`¨p_devaddr_com∑ª
(&
¨pöfo
->
tgt_devaddr
,Ågt_devaddr, 
dev
->
addr_Àn
),

157 
ARPT_INV_TGTDEVADDR
)) {

158 
	`d¥ötf
("Source orÅarget deviceáddress mismatch.\n");

163 i‡(
	`FWINV
(((*
§c_ùaddr
Ë& 
¨pöfo
->
smsk
.
s_addr
Ë!¨pöfo->
§c
.s_addr,

164 
ARPT_INV_SRCIP
) ||

165 
	`FWINV
((((*
tgt_ùaddr
Ë& 
¨pöfo
->
tmsk
.
s_addr
Ë!¨pöfo->
tgt
.s_addr),

166 
ARPT_INV_TGTIP
)) {

167 
	`d¥ötf
("Source orÅarget IPáddress mismatch.\n");

169 
	`d¥ötf
("SRC: %u.%u.%u.%u. Mask: %u.%u.%u.%u. Target: %u.%u.%u.%u.%s\n",

170 
	`NIPQUAD
(*
§c_ùaddr
),

171 
	`NIPQUAD
(
¨pöfo
->
smsk
.
s_addr
),

172 
	`NIPQUAD
(
¨pöfo
->
§c
.
s_addr
),

173 
¨pöfo
->
övÊags
 & 
ARPT_INV_SRCIP
 ? " (INV)" : "");

174 
	`d¥ötf
("TGT: %u.%u.%u.%u Mask: %u.%u.%u.%u Target: %u.%u.%u.%u.%s\n",

175 
	`NIPQUAD
(*
tgt_ùaddr
),

176 
	`NIPQUAD
(
¨pöfo
->
tmsk
.
s_addr
),

177 
	`NIPQUAD
(
¨pöfo
->
tgt
.
s_addr
),

178 
¨pöfo
->
övÊags
 & 
ARPT_INV_TGTIP
 ? " (INV)" : "");

183 
i
 = 0, 
ªt
 = 0; i < 
IFNAMSIZ
; i++) {

184 
ªt
 |(
ödev
[
i
] ^ 
¨pöfo
->
öiÁ˚
[i])

185 & 
¨pöfo
->
öiÁ˚_mask
[
i
];

188 i‡(
	`FWINV
(
ªt
 !0, 
ARPT_INV_VIA_IN
)) {

189 
	`d¥ötf
("VIA in mismatch (%s vs %s).%s\n",

190 
ödev
, 
¨pöfo
->
öiÁ˚
,

191 
¨pöfo
->
övÊags
&
ARPT_INV_VIA_IN
 ?" (INV)":"");

195 
i
 = 0, 
ªt
 = 0; i < 
IFNAMSIZ
/(); i++) {

196 
ªt
 |(((c⁄° *)
outdev
)[
i
]

197 ^ ((c⁄° *)
¨pöfo
->
outiÁ˚
)[
i
])

198 & ((c⁄° *)
¨pöfo
->
outiÁ˚_mask
)[
i
];

201 i‡(
	`FWINV
(
ªt
 !0, 
ARPT_INV_VIA_OUT
)) {

202 
	`d¥ötf
("VIA out mismatch (%s vs %s).%s\n",

203 
outdev
, 
¨pöfo
->
outiÁ˚
,

204 
¨pöfo
->
övÊags
&
ARPT_INV_VIA_OUT
 ?" (INV)":"");

209 
	}
}

211 
ölöe
 
	$¨p_checkíåy
(c⁄° 
¨±_¨p
 *
¨p
)

213 i‡(
¨p
->
Êags
 & ~
ARPT_F_MASK
) {

214 
	`du¥ötf
("Unknown flag bits set: %08X\n",

215 
¨p
->
Êags
 & ~
ARPT_F_MASK
);

218 i‡(
¨p
->
övÊags
 & ~
ARPT_INV_MASK
) {

219 
	`du¥ötf
("Unknown invflag bits set: %08X\n",

220 
¨p
->
övÊags
 & ~
ARPT_INV_MASK
);

225 
	}
}

227 
	$¨±_îr‹
(
sk_buff
 **
pskb
,

228 
hooknum
,

229 c⁄° 
√t_devi˚
 *
ö
,

230 c⁄° 
√t_devi˚
 *
out
,

231 c⁄° *
èrgöfo
,

232 *
u£röfo
)

234 i‡(
	`√t_øãlimô
())

235 
	`¥ötk
("¨p_èbÀs:Éº‹: '%s'\n", (*)
èrgöfo
);

237  
NF_DROP
;

238 
	}
}

240 
ölöe
 
¨±_íåy
 *
	$gë_íåy
(*
ba£
, 
off£t
)

242  (
¨±_íåy
 *)(
ba£
 + 
off£t
);

243 
	}
}

245 
	$¨±_do_èbÀ
(
sk_buff
 **
pskb
,

246 
hook
,

247 c⁄° 
√t_devi˚
 *
ö
,

248 c⁄° 
√t_devi˚
 *
out
,

249 
¨±_èbÀ
 *
èbÀ
,

250 *
u£rd©a
)

252 c⁄° 
nuŒdev«me
[
IFNAMSIZ
];

253 
vîdi˘
 = 
NF_DROP
;

254 
¨phdr
 *
¨p
;

255 
hŸdr›
 = 0;

256 
¨±_íåy
 *
e
, *
back
;

257 c⁄° *
ödev
, *
outdev
;

258 *
èbÀ_ba£
;

261 i‡(!
	`pskb_may_puŒ
((*
pskb
), ((
¨phdr
) +

262 (2 * (*
pskb
)->
dev
->
addr_Àn
) +

263 (2 * (
u32
)))))

264  
NF_DROP
;

266 
ödev
 = 
ö
 ? in->
«me
 : 
nuŒdev«me
;

267 
outdev
 = 
out
 ? out->
«me
 : 
nuŒdev«me
;

269 
	`ªad_lock_bh
(&
èbÀ
->
lock
);

270 
èbÀ_ba£
 = (*)
èbÀ
->
¥iv©e
->
íåõs


271 + 
	`TABLE_OFFSET
(
èbÀ
->
¥iv©e
,

272 
	`smp_¥o˚ss‹_id
());

273 
e
 = 
	`gë_íåy
(
èbÀ_ba£
, 
èbÀ
->
¥iv©e
->
hook_íåy
[
hook
]);

274 
back
 = 
	`gë_íåy
(
èbÀ_ba£
, 
èbÀ
->
¥iv©e
->
undîÊow
[
hook
]);

276 
¨p
 = (*
pskb
)->
nh
.
¨ph
;

278 i‡(
	`¨p_∑ckë_m©ch
(
¨p
, (*
pskb
)->
dev
, 
ödev
, 
outdev
, &
e
->arp)) {

279 
¨±_íåy_èrgë
 *
t
;

280 
hdr_Àn
;

282 
hdr_Àn
 = (*
¨p
Ë+ (2 * (
ö_addr
)) +

283 (2 * (*
pskb
)->
dev
->
addr_Àn
);

284 
	`ADD_COUNTER
(
e
->
cou¡îs
, 
hdr_Àn
, 1);

286 
t
 = 
	`¨±_gë_èrgë
(
e
);

289 i‡(!
t
->
u
.
kî√l
.
èrgë
->target) {

290 
v
;

292 
v
 = ((
¨±_°™d¨d_èrgë
 *)
t
)->
vîdi˘
;

293 i‡(
v
 < 0) {

295 i‡(
v
 !
ARPT_RETURN
) {

296 
vîdi˘
 = ()(-
v
) - 1;

299 
e
 = 
back
;

300 
back
 = 
	`gë_íåy
(
èbÀ_ba£
,

301 
back
->
come‰om
);

304 i‡(
èbÀ_ba£
 + 
v


305 !(*)
e
 +É->
√xt_off£t
) {

307 
¨±_íåy
 *
√xt


308 (*)
e
 +É->
√xt_off£t
;

309 
√xt
->
come‰om
 =

310 (*)
back
 - 
èbÀ_ba£
;

313 
back
 = 
√xt
;

316 
e
 = 
	`gë_íåy
(
èbÀ_ba£
, 
v
);

321 
vîdi˘
 = 
t
->
u
.
kî√l
.
èrgë
->
	`èrgë
(
pskb
,

322 
hook
,

323 
ö
, 
out
,

324 
t
->
d©a
,

325 
u£rd©a
);

328 
¨p
 = (*
pskb
)->
nh
.
¨ph
;

330 i‡(
vîdi˘
 =
ARPT_CONTINUE
)

331 
e
 = (*Î +É->
√xt_off£t
;

337 
e
 = (*Î +É->
√xt_off£t
;

339 } !
hŸdr›
);

340 
	`ªad_u∆ock_bh
(&
èbÀ
->
lock
);

342 i‡(
hŸdr›
)

343  
NF_DROP
;

345  
vîdi˘
;

346 
	}
}

348 
ölöe
 *
	$föd_öli°_lock_nﬁﬂd
(
li°_hód
 *
hód
,

349 c⁄° *
«me
,

350 *
îr‹
,

351 
£m≠h‹e
 *
muãx
)

353 *
ªt
;

355 *
îr‹
 = 
	`down_öãºu±ibÀ
(
muãx
);

356 i‡(*
îr‹
 != 0)

357  
NULL
;

359 
ªt
 = 
	`li°_«med_föd
(
hód
, 
«me
);

360 i‡(!
ªt
) {

361 *
îr‹
 = -
ENOENT
;

362 
	`up
(
muãx
);

364  
ªt
;

365 
	}
}

367 #i‚de‡
CONFIG_KMOD


368 
	#föd_öli°_lock
(
h
,
n
,
p
,
e
,
m
Ë
	`föd_öli°_lock_nﬁﬂd
((h),“),”),(m))

	)

371 
	$föd_öli°_lock
(
li°_hód
 *
hód
,

372 c⁄° *
«me
,

373 c⁄° *
¥efix
,

374 *
îr‹
,

375 
£m≠h‹e
 *
muãx
)

377 *
ªt
;

379 
ªt
 = 
	`föd_öli°_lock_nﬁﬂd
(
hód
, 
«me
, 
îr‹
, 
muãx
);

380 i‡(!
ªt
) {

381 
	`du¥ötf
("föd_öli°:Üﬂdög `%s%s'.\n", 
¥efix
, 
«me
);

382 
	`ªque°_moduÀ
("%s%s", 
¥efix
, 
«me
);

383 
ªt
 = 
	`föd_öli°_lock_nﬁﬂd
(
hód
, 
«me
, 
îr‹
, 
muãx
);

386  
ªt
;

387 
	}
}

390 
ölöe
 
¨±_èbÀ
 *
	$¨±_föd_èbÀ_lock
(c⁄° *
«me
, *
îr‹
, 
£m≠h‹e
 *
muãx
)

392  
	`föd_öli°_lock
(&
¨±_èbÀs
, 
«me
, "¨±abÀ_", 
îr‹
, 
muãx
);

393 
	}
}

395 
¨±_èrgë
 *
	$¨±_föd_èrgë_lock
(c⁄° *
«me
, *
îr‹
, 
£m≠h‹e
 *
muãx
)

397  
	`föd_öli°_lock
(&
¨±_èrgë
, 
«me
, "¨±_", 
îr‹
, 
muãx
);

398 
	}
}

401 
ölöe
 
	$unc⁄dôi⁄Æ
(c⁄° 
¨±_¨p
 *
¨p
)

403 
i
;

405 
i
 = 0; i < (*
¨p
)/(
__u32
); i++)

406 i‡(((
__u32
 *)
¨p
)[
i
])

410 
	}
}

415 
	$m¨k_sour˚_chaös
(
¨±_èbÀ_öfo
 *
√wöfo
, 
vÆid_hooks
)

417 
hook
;

422 
hook
 = 0; hook < 
NF_ARP_NUMHOOKS
; hook++) {

423 
pos
 = 
√wöfo
->
hook_íåy
[
hook
];

424 
¨±_íåy
 *
e


425 (
¨±_íåy
 *)(
√wöfo
->
íåõs
 + 
pos
);

427 i‡(!(
vÆid_hooks
 & (1 << 
hook
)))

431 
e
->
cou¡îs
.
p˙t
 = 
pos
;

434 
¨±_°™d¨d_èrgë
 *
t


435 (*)
	`¨±_gë_èrgë
(
e
);

437 i‡(
e
->
come‰om
 & (1 << 
NF_ARP_NUMHOOKS
)) {

438 
	`¥ötk
("arptables:Üoop hook %uÖos %u %08X.\n",

439 
hook
, 
pos
, 
e
->
come‰om
);

442 
e
->
come‰om


443 |((1 << 
hook
Ë| (1 << 
NF_ARP_NUMHOOKS
));

446 i‡(
e
->
èrgë_off£t
 =(
¨±_íåy
)

447 && (
	`°rcmp
(
t
->
èrgë
.
u
.
u£r
.
«me
,

448 
ARPT_STANDARD_TARGET
) == 0)

449 && 
t
->
vîdi˘
 < 0

450 && 
	`unc⁄dôi⁄Æ
(&
e
->
¨p
)) {

451 
ﬁdpos
, 
size
;

457 
e
->
come‰om
 ^(1<<
NF_ARP_NUMHOOKS
);

458 
ﬁdpos
 = 
pos
;

459 
pos
 = 
e
->
cou¡îs
.
p˙t
;

460 
e
->
cou¡îs
.
p˙t
 = 0;

463 i‡(
pos
 =
ﬁdpos
)

464 
√xt
;

466 
e
 = (
¨±_íåy
 *)

467 (
√wöfo
->
íåõs
 + 
pos
);

468 } 
ﬁdpos
 =
pos
 + 
e
->
√xt_off£t
);

471 
size
 = 
e
->
√xt_off£t
;

472 
e
 = (
¨±_íåy
 *)

473 (
√wöfo
->
íåõs
 + 
pos
 + 
size
);

474 
e
->
cou¡îs
.
p˙t
 = 
pos
;

475 
pos
 +
size
;

477 
√wpos
 = 
t
->
vîdi˘
;

479 i‡(
	`°rcmp
(
t
->
èrgë
.
u
.
u£r
.
«me
,

480 
ARPT_STANDARD_TARGET
) == 0

481 && 
√wpos
 >= 0) {

483 
	`du¥ötf
("JumpÑule %u -> %u\n",

484 
pos
, 
√wpos
);

487 
√wpos
 = 
pos
 + 
e
->
√xt_off£t
;

489 
e
 = (
¨±_íåy
 *)

490 (
√wöfo
->
íåõs
 + 
√wpos
);

491 
e
->
cou¡îs
.
p˙t
 = 
pos
;

492 
pos
 = 
√wpos
;

495 
√xt
:

496 
	`du¥ötf
("Föished chaö %u\n", 
hook
);

499 
	}
}

501 
ölöe
 
	$°™d¨d_check
(c⁄° 
¨±_íåy_èrgë
 *
t
,

502 
max_off£t
)

504 
¨±_°™d¨d_èrgë
 *
èrg
 = (*)
t
;

507 i‡(
t
->
u
.
èrgë_size


508 !
	`ARPT_ALIGN
((
¨±_°™d¨d_èrgë
))) {

509 
	`du¥ötf
("arpt_standard_check:Åarget size %u != %Zu\n",

510 
t
->
u
.
èrgë_size
,

511 
	`ARPT_ALIGN
((
¨±_°™d¨d_èrgë
)));

515 i‡(
èrg
->
vîdi˘
 >= 0

516 && 
èrg
->
vîdi˘
 > 
max_off£t
 - (
¨±_íåy
)) {

517 
	`du¥ötf
("arpt_standard_check: bad verdict (%i)\n",

518 
èrg
->
vîdi˘
);

522 i‡(
èrg
->
vîdi˘
 < -
NF_MAX_VERDICT
 - 1) {

523 
	`du¥ötf
("arpt_standard_check: badÇegative verdict (%i)\n",

524 
èrg
->
vîdi˘
);

528 
	}
}

530 
¨±_èrgë
 
	g¨±_°™d¨d_èrgë
;

532 
ölöe
 
	$check_íåy
(
¨±_íåy
 *
e
, c⁄° *
«me
, 
size
,

533 *
i
)

535 
¨±_íåy_èrgë
 *
t
;

536 
¨±_èrgë
 *
èrgë
;

537 
ªt
;

539 i‡(!
	`¨p_checkíåy
(&
e
->
¨p
)) {

540 
	`du¥ötf
("¨p_èbÀs:áΩ check faûed %∞%s.\n", 
e
, 
«me
);

541  -
EINVAL
;

544 
t
 = 
	`¨±_gë_èrgë
(
e
);

545 
èrgë
 = 
	`¨±_föd_èrgë_lock
(
t
->
u
.
u£r
.
«me
, &
ªt
, &
¨±_muãx
);

546 i‡(!
èrgë
) {

547 
	`du¥ötf
("check_íåy: `%s'ÇŸ found\n", 
t
->
u
.
u£r
.
«me
);

548 
out
;

550 i‡(!
	`åy_moduÀ_gë
((
èrgë
->
me
))) {

551 
ªt
 = -
ENOENT
;

552 
out_u∆ock
;

554 
t
->
u
.
kî√l
.
èrgë
 =Åarget;

555 
	`up
(&
¨±_muãx
);

557 i‡(
t
->
u
.
kî√l
.
èrgë
 =&
¨±_°™d¨d_èrgë
) {

558 i‡(!
	`°™d¨d_check
(
t
, 
size
)) {

559 
ªt
 = -
EINVAL
;

560 
out
;

562 } i‡(
t
->
u
.
kî√l
.
èrgë
->
checkíåy


563 && !
t
->
u
.
kî√l
.
èrgë
->
	`checkíåy
(
«me
, 
e
,Å->
d©a
,

564 
t
->
u
.
èrgë_size


565 - (*
t
),

566 
e
->
come‰om
)) {

567 
	`moduÀ_put
(
t
->
u
.
kî√l
.
èrgë
->
me
);

568 
	`du¥ötf
("arp_tables: check failed for `%s'.\n",

569 
t
->
u
.
kî√l
.
èrgë
->
«me
);

570 
ªt
 = -
EINVAL
;

571 
out
;

574 (*
i
)++;

577 
out_u∆ock
:

578 
	`up
(&
¨±_muãx
);

579 
out
:

580  
ªt
;

581 
	}
}

583 
ölöe
 
	$check_íåy_size_™d_hooks
(
¨±_íåy
 *
e
,

584 
¨±_èbÀ_öfo
 *
√wöfo
,

585 *
ba£
,

586 *
limô
,

587 c⁄° *
hook_íåõs
,

588 c⁄° *
undîÊows
,

589 *
i
)

591 
h
;

593 i‡(()
e
 % 
	`__Æignof__
(
¨±_íåy
) != 0

594 || (*)
e
 + (
¨±_íåy
Ë>
limô
) {

595 
	`du¥ötf
("Bad off£à%p\n", 
e
);

596  -
EINVAL
;

599 i‡(
e
->
√xt_off£t


600 < (
¨±_íåy
Ë+ (
¨±_íåy_èrgë
)) {

601 
	`du¥ötf
("checking:Élement %p size %u\n",

602 
e
,É->
√xt_off£t
);

603  -
EINVAL
;

607 
h
 = 0; h < 
NF_ARP_NUMHOOKS
; h++) {

608 i‡((*)
e
 - 
ba£
 =
hook_íåõs
[
h
])

609 
√wöfo
->
hook_íåy
[
h
] = 
hook_íåõs
[h];

610 i‡((*)
e
 - 
ba£
 =
undîÊows
[
h
])

611 
√wöfo
->
undîÊow
[
h
] = 
undîÊows
[h];

618 
e
->
cou¡îs
 = ((
¨±_cou¡îs
) { 0, 0 });

619 
e
->
come‰om
 = 0;

621 (*
i
)++;

623 
	}
}

625 
ölöe
 
	$˛ónup_íåy
(
¨±_íåy
 *
e
, *
i
)

627 
¨±_íåy_èrgë
 *
t
;

629 i‡(
i
 && (*i)-- == 0)

632 
t
 = 
	`¨±_gë_èrgë
(
e
);

633 i‡(
t
->
u
.
kî√l
.
èrgë
->
de°roy
)

634 
t
->
u
.
kî√l
.
èrgë
->
	`de°roy
—->
d©a
,

635 
t
->
u
.
èrgë_size
 - (*t));

636 
	`moduÀ_put
(
t
->
u
.
kî√l
.
èrgë
->
me
);

638 
	}
}

643 
	$å™¶©e_èbÀ
(c⁄° *
«me
,

644 
vÆid_hooks
,

645 
¨±_èbÀ_öfo
 *
√wöfo
,

646 
size
,

647 
numbî
,

648 c⁄° *
hook_íåõs
,

649 c⁄° *
undîÊows
)

651 
i
;

652 
ªt
;

654 
√wöfo
->
size
 = size;

655 
√wöfo
->
numbî
 =Çumber;

658 
i
 = 0; i < 
NF_ARP_NUMHOOKS
; i++) {

659 
√wöfo
->
hook_íåy
[
i
] = 0xFFFFFFFF;

660 
√wöfo
->
undîÊow
[
i
] = 0xFFFFFFFF;

663 
	`du¥ötf
("å™¶©e_èbÀ: sizê%u\n", 
√wöfo
->
size
);

664 
i
 = 0;

667 
ªt
 = 
	`ARPT_ENTRY_ITERATE
(
√wöfo
->
íåõs
,Çewöfo->
size
,

668 
check_íåy_size_™d_hooks
,

669 
√wöfo
,

670 
√wöfo
->
íåõs
,

671 
√wöfo
->
íåõs
 + 
size
,

672 
hook_íåõs
, 
undîÊows
, &
i
);

673 
	`du¥ötf
("å™¶©e_èbÀ: ARPT_ENTRY_ITERATE give†%d\n", 
ªt
);

674 i‡(
ªt
 != 0)

675  
ªt
;

677 i‡(
i
 !
numbî
) {

678 
	`du¥ötf
("translate_table: %uÇot %uÉntries\n",

679 
i
, 
numbî
);

680  -
EINVAL
;

684 
i
 = 0; i < 
NF_ARP_NUMHOOKS
; i++) {

686 i‡(!(
vÆid_hooks
 & (1 << 
i
)))

688 i‡(
√wöfo
->
hook_íåy
[
i
] == 0xFFFFFFFF) {

689 
	`du¥ötf
("Invalid hookÉntry %u %u\n",

690 
i
, 
hook_íåõs
[i]);

691  -
EINVAL
;

693 i‡(
√wöfo
->
undîÊow
[
i
] == 0xFFFFFFFF) {

694 
	`du¥ötf
("Invalid underflow %u %u\n",

695 
i
, 
undîÊows
[i]);

696  -
EINVAL
;

700 i‡(!
	`m¨k_sour˚_chaös
(
√wöfo
, 
vÆid_hooks
)) {

701 
	`du¥ötf
("Looping hook\n");

702  -
ELOOP
;

706 
i
 = 0;

707 
ªt
 = 
	`ARPT_ENTRY_ITERATE
(
√wöfo
->
íåõs
,Çewöfo->
size
,

708 
check_íåy
, 
«me
, 
size
, &
i
);

710 i‡(
ªt
 != 0) {

711 
	`ARPT_ENTRY_ITERATE
(
√wöfo
->
íåõs
,Çewöfo->
size
,

712 
˛ónup_íåy
, &
i
);

713  
ªt
;

717 
i
 = 1; i < 
NR_CPUS
; i++) {

718 
	`mem˝y
(
√wöfo
->
íåõs
 + 
	`SMP_ALIGN
“ewöfo->
size
)*
i
,

719 
√wöfo
->
íåõs
,

720 
	`SMP_ALIGN
(
√wöfo
->
size
));

723  
ªt
;

724 
	}
}

726 
¨±_èbÀ_öfo
 *
	$ª∂a˚_èbÀ
(
¨±_èbÀ
 *
èbÀ
,

727 
num_cou¡îs
,

728 
¨±_èbÀ_öfo
 *
√wöfo
,

729 *
îr‹
)

731 
¨±_èbÀ_öfo
 *
ﬁdöfo
;

734 
	`wrôe_lock_bh
(&
èbÀ
->
lock
);

736 i‡(
num_cou¡îs
 !
èbÀ
->
¥iv©e
->
numbî
) {

737 
	`du¥ötf
("num_counters !=Åable->private->number (%u/%u)\n",

738 
num_cou¡îs
, 
èbÀ
->
¥iv©e
->
numbî
);

739 
	`wrôe_u∆ock_bh
(&
èbÀ
->
lock
);

740 *
îr‹
 = -
EAGAIN
;

741  
NULL
;

743 
ﬁdöfo
 = 
èbÀ
->
¥iv©e
;

744 
èbÀ
->
¥iv©e
 = 
√wöfo
;

745 
√wöfo
->
öôül_íåõs
 = 
ﬁdöfo
->initial_entries;

746 
	`wrôe_u∆ock_bh
(&
èbÀ
->
lock
);

748  
ﬁdöfo
;

749 
	}
}

752 
ölöe
 
	$add_íåy_to_cou¡î
(c⁄° 
¨±_íåy
 *
e
,

753 
¨±_cou¡îs
 
tŸÆ
[],

754 *
i
)

756 
	`ADD_COUNTER
(
tŸÆ
[*
i
], 
e
->
cou¡îs
.
b˙t
,É->cou¡îs.
p˙t
);

758 (*
i
)++;

760 
	}
}

762 
	$gë_cou¡îs
(c⁄° 
¨±_èbÀ_öfo
 *
t
,

763 
¨±_cou¡îs
 
cou¡îs
[])

765 
˝u
;

766 
i
;

768 
˝u
 = 0; cpu < 
NR_CPUS
; cpu++) {

769 
i
 = 0;

770 
	`ARPT_ENTRY_ITERATE
(
t
->
íåõs
 + 
	`TABLE_OFFSET
—, 
˝u
),

771 
t
->
size
,

772 
add_íåy_to_cou¡î
,

773 
cou¡îs
,

774 &
i
);

776 
	}
}

778 
	$c›y_íåõs_to_u£r
(
tŸÆ_size
,

779 
¨±_èbÀ
 *
èbÀ
,

780 
__u£r
 *
u£Ωå
)

782 
off
, 
num
, 
cou¡îsize
;

783 
¨±_íåy
 *
e
;

784 
¨±_cou¡îs
 *
cou¡îs
;

785 
ªt
 = 0;

791 
cou¡îsize
 = (
¨±_cou¡îs
Ë* 
èbÀ
->
¥iv©e
->
numbî
;

792 
cou¡îs
 = 
	`vmÆloc
(
cou¡îsize
);

794 i‡(
cou¡îs
 =
NULL
)

795  -
ENOMEM
;

798 
	`mem£t
(
cou¡îs
, 0, 
cou¡îsize
);

799 
	`wrôe_lock_bh
(&
èbÀ
->
lock
);

800 
	`gë_cou¡îs
(
èbÀ
->
¥iv©e
, 
cou¡îs
);

801 
	`wrôe_u∆ock_bh
(&
èbÀ
->
lock
);

804 i‡(
	`c›y_to_u£r
(
u£Ωå
, 
èbÀ
->
¥iv©e
->
íåõs
, 
tŸÆ_size
) != 0) {

805 
ªt
 = -
EFAULT
;

806 
‰ì_cou¡îs
;

811 
off
 = 0, 
num
 = 0; of‡< 
tŸÆ_size
; of‡+
e
->
√xt_off£t
,Çum++){

812 
¨±_íåy_èrgë
 *
t
;

814 
e
 = (
¨±_íåy
 *)(
èbÀ
->
¥iv©e
->
íåõs
 + 
off
);

815 i‡(
	`c›y_to_u£r
(
u£Ωå
 + 
off


816 + 
	`off£tof
(
¨±_íåy
, 
cou¡îs
),

817 &
cou¡îs
[
num
],

818 (
cou¡îs
[
num
])) != 0) {

819 
ªt
 = -
EFAULT
;

820 
‰ì_cou¡îs
;

823 
t
 = 
	`¨±_gë_èrgë
(
e
);

824 i‡(
	`c›y_to_u£r
(
u£Ωå
 + 
off
 + 
e
->
èrgë_off£t


825 + 
	`off£tof
(
¨±_íåy_èrgë
,

826 
u
.
u£r
.
«me
),

827 
t
->
u
.
kî√l
.
èrgë
->
«me
,

828 
	`°æí
(
t
->
u
.
kî√l
.
èrgë
->
«me
)+1) != 0) {

829 
ªt
 = -
EFAULT
;

830 
‰ì_cou¡îs
;

834 
‰ì_cou¡îs
:

835 
	`v‰ì
(
cou¡îs
);

836  
ªt
;

837 
	}
}

839 
	$gë_íåõs
(c⁄° 
¨±_gë_íåõs
 *
íåõs
,

840 
¨±_gë_íåõs
 
__u£r
 *
u±r
)

842 
ªt
;

843 
¨±_èbÀ
 *
t
;

845 
t
 = 
	`¨±_föd_èbÀ_lock
(
íåõs
->
«me
, &
ªt
, &
¨±_muãx
);

846 i‡(
t
) {

847 
	`du¥ötf
("t->private->number = %u\n",

848 
t
->
¥iv©e
->
numbî
);

849 i‡(
íåõs
->
size
 =
t
->
¥iv©e
->size)

850 
ªt
 = 
	`c›y_íåõs_to_u£r
(
t
->
¥iv©e
->
size
,

851 
t
, 
u±r
->
íåyèbÀ
);

853 
	`du¥ötf
("get_entries: I've got %uÇot %u!\n",

854 
t
->
¥iv©e
->
size
,

855 
íåõs
->
size
);

856 
ªt
 = -
EINVAL
;

858 
	`up
(&
¨±_muãx
);

860 
	`du¥ötf
("get_entries: Can't find %s!\n",

861 
íåõs
->
«me
);

863  
ªt
;

864 
	}
}

866 
	$do_ª∂a˚
(
__u£r
 *
u£r
, 
Àn
)

868 
ªt
;

869 
¨±_ª∂a˚
 
tmp
;

870 
¨±_èbÀ
 *
t
;

871 
¨±_èbÀ_öfo
 *
√wöfo
, *
ﬁdöfo
;

872 
¨±_cou¡îs
 *
cou¡îs
;

874 i‡(
	`c›y_‰om_u£r
(&
tmp
, 
u£r
, (tmp)) != 0)

875  -
EFAULT
;

878 i‡(
Àn
 !(
tmp
Ë+Åmp.
size
)

879  -
ENOPROTOOPT
;

882 i‡((
	`SMP_ALIGN
(
tmp
.
size
Ë>> 
PAGE_SHIFT
Ë+ 2 > 
num_phy•ages
)

883  -
ENOMEM
;

885 
√wöfo
 = 
	`vmÆloc
((
¨±_èbÀ_öfo
)

886 + 
	`SMP_ALIGN
(
tmp
.
size
Ë* 
NR_CPUS
);

887 i‡(!
√wöfo
)

888  -
ENOMEM
;

890 i‡(
	`c›y_‰om_u£r
(
√wöfo
->
íåõs
, 
u£r
 + (
tmp
),

891 
tmp
.
size
) != 0) {

892 
ªt
 = -
EFAULT
;

893 
‰ì_√wöfo
;

896 
cou¡îs
 = 
	`vmÆloc
(
tmp
.
num_cou¡îs
 * (
¨±_cou¡îs
));

897 i‡(!
cou¡îs
) {

898 
ªt
 = -
ENOMEM
;

899 
‰ì_√wöfo
;

901 
	`mem£t
(
cou¡îs
, 0, 
tmp
.
num_cou¡îs
 * (
¨±_cou¡îs
));

903 
ªt
 = 
	`å™¶©e_èbÀ
(
tmp
.
«me
,Åmp.
vÆid_hooks
,

904 
√wöfo
, 
tmp
.
size
,Åmp.
num_íåõs
,

905 
tmp
.
hook_íåy
,Åmp.
undîÊow
);

906 i‡(
ªt
 != 0)

907 
‰ì_√wöfo_cou¡îs
;

909 
	`du¥ötf
("arp_tables: TranslatedÅable\n");

911 
t
 = 
	`¨±_föd_èbÀ_lock
(
tmp
.
«me
, &
ªt
, &
¨±_muãx
);

912 i‡(!
t
)

913 
‰ì_√wöfo_cou¡îs_u¡øns
;

916 i‡(
tmp
.
vÆid_hooks
 !
t
->valid_hooks) {

917 
	`du¥ötf
("Valid hook crap: %08X vs %08X\n",

918 
tmp
.
vÆid_hooks
, 
t
->valid_hooks);

919 
ªt
 = -
EINVAL
;

920 
‰ì_√wöfo_cou¡îs_u¡øns_u∆ock
;

924 i‡(!
	`åy_moduÀ_gë
(
t
->
me
)) {

925 
ªt
 = -
EBUSY
;

926 
‰ì_√wöfo_cou¡îs_u¡øns_u∆ock
;

929 
ﬁdöfo
 = 
	`ª∂a˚_èbÀ
(
t
, 
tmp
.
num_cou¡îs
, 
√wöfo
, &
ªt
);

930 i‡(!
ﬁdöfo
)

931 
put_moduÀ
;

934 
	`du¥ötf
("do_replace: oldnum=%u, initnum=%u,Çewnum=%u\n",

935 
ﬁdöfo
->
numbî
, oldöfo->
öôül_íåõs
, 
√wöfo
->number);

936 i‡((
ﬁdöfo
->
numbî
 > oldöfo->
öôül_íåõs
) ||

937 (
√wöfo
->
numbî
 <
ﬁdöfo
->
öôül_íåõs
))

938 
	`moduÀ_put
(
t
->
me
);

939 i‡((
ﬁdöfo
->
numbî
 > oldöfo->
öôül_íåõs
) &&

940 (
√wöfo
->
numbî
 <
ﬁdöfo
->
öôül_íåõs
))

941 
	`moduÀ_put
(
t
->
me
);

944 
	`gë_cou¡îs
(
ﬁdöfo
, 
cou¡îs
);

946 
	`ARPT_ENTRY_ITERATE
(
ﬁdöfo
->
íåõs
, oldöfo->
size
, 
˛ónup_íåy
,
NULL
);

947 
	`v‰ì
(
ﬁdöfo
);

949 
	`c›y_to_u£r
(
tmp
.
cou¡îs
, counters,

950 (
¨±_cou¡îs
Ë* 
tmp
.
num_cou¡îs
);

951 
	`v‰ì
(
cou¡îs
);

952 
	`up
(&
¨±_muãx
);

955 
put_moduÀ
:

956 
	`moduÀ_put
(
t
->
me
);

957 
‰ì_√wöfo_cou¡îs_u¡øns_u∆ock
:

958 
	`up
(&
¨±_muãx
);

959 
‰ì_√wöfo_cou¡îs_u¡øns
:

960 
	`ARPT_ENTRY_ITERATE
(
√wöfo
->
íåõs
,Çewöfo->
size
, 
˛ónup_íåy
, 
NULL
);

961 
‰ì_√wöfo_cou¡îs
:

962 
	`v‰ì
(
cou¡îs
);

963 
‰ì_√wöfo
:

964 
	`v‰ì
(
√wöfo
);

965  
ªt
;

966 
	}
}

971 
ölöe
 
	$add_cou¡î_to_íåy
(
¨±_íåy
 *
e
,

972 c⁄° 
¨±_cou¡îs
 
addme
[],

973 *
i
)

976 
	`ADD_COUNTER
(
e
->
cou¡îs
, 
addme
[*
i
].
b˙t
,áddme[*i].
p˙t
);

978 (*
i
)++;

980 
	}
}

982 
	$do_add_cou¡îs
(
__u£r
 *
u£r
, 
Àn
)

984 
i
;

985 
¨±_cou¡îs_öfo
 
tmp
, *
∑ddc
;

986 
¨±_èbÀ
 *
t
;

987 
ªt
;

989 i‡(
	`c›y_‰om_u£r
(&
tmp
, 
u£r
, (tmp)) != 0)

990  -
EFAULT
;

992 i‡(
Àn
 !(
tmp
Ë+Åmp.
num_cou¡îs
*(
¨±_cou¡îs
))

993  -
EINVAL
;

995 
∑ddc
 = 
	`vmÆloc
(
Àn
);

996 i‡(!
∑ddc
)

997  -
ENOMEM
;

999 i‡(
	`c›y_‰om_u£r
(
∑ddc
, 
u£r
, 
Àn
) != 0) {

1000 
ªt
 = -
EFAULT
;

1001 
‰ì
;

1004 
t
 = 
	`¨±_föd_èbÀ_lock
(
tmp
.
«me
, &
ªt
, &
¨±_muãx
);

1005 i‡(!
t
)

1006 
‰ì
;

1008 
	`wrôe_lock_bh
(&
t
->
lock
);

1009 i‡(
t
->
¥iv©e
->
numbî
 !
∑ddc
->
num_cou¡îs
) {

1010 
ªt
 = -
EINVAL
;

1011 
u∆ock_up_‰ì
;

1014 
i
 = 0;

1015 
	`ARPT_ENTRY_ITERATE
(
t
->
¥iv©e
->
íåõs
,

1016 
t
->
¥iv©e
->
size
,

1017 
add_cou¡î_to_íåy
,

1018 
∑ddc
->
cou¡îs
,

1019 &
i
);

1020 
u∆ock_up_‰ì
:

1021 
	`wrôe_u∆ock_bh
(&
t
->
lock
);

1022 
	`up
(&
¨±_muãx
);

1023 
‰ì
:

1024 
	`v‰ì
(
∑ddc
);

1026  
ªt
;

1027 
	}
}

1029 
	$do_¨±_£t_˘l
(
sock
 *
sk
, 
cmd
, 
__u£r
 *
u£r
, 
Àn
)

1031 
ªt
;

1033 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

1034  -
EPERM
;

1036 
cmd
) {

1037 
ARPT_SO_SET_REPLACE
:

1038 
ªt
 = 
	`do_ª∂a˚
(
u£r
, 
Àn
);

1041 
ARPT_SO_SET_ADD_COUNTERS
:

1042 
ªt
 = 
	`do_add_cou¡îs
(
u£r
, 
Àn
);

1046 
	`du¥ötf
("do_¨±_£t_˘l: unknow¿ªque° %i\n", 
cmd
);

1047 
ªt
 = -
EINVAL
;

1050  
ªt
;

1051 
	}
}

1053 
	$do_¨±_gë_˘l
(
sock
 *
sk
, 
cmd
, 
__u£r
 *
u£r
, *
Àn
)

1055 
ªt
;

1057 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

1058  -
EPERM
;

1060 
cmd
) {

1061 
ARPT_SO_GET_INFO
: {

1062 
«me
[
ARPT_TABLE_MAXNAMELEN
];

1063 
¨±_èbÀ
 *
t
;

1065 i‡(*
Àn
 !(
¨±_gëöfo
)) {

1066 
	`du¥ötf
("Àngth %u !%Zu\n", *
Àn
,

1067 (
¨±_gëöfo
));

1068 
ªt
 = -
EINVAL
;

1072 i‡(
	`c›y_‰om_u£r
(
«me
, 
u£r
, (name)) != 0) {

1073 
ªt
 = -
EFAULT
;

1076 
«me
[
ARPT_TABLE_MAXNAMELEN
-1] = '\0';

1077 
t
 = 
	`¨±_föd_èbÀ_lock
(
«me
, &
ªt
, &
¨±_muãx
);

1078 i‡(
t
) {

1079 
¨±_gëöfo
 
öfo
;

1081 
öfo
.
vÆid_hooks
 = 
t
->valid_hooks;

1082 
	`mem˝y
(
öfo
.
hook_íåy
, 
t
->
¥iv©e
->hook_entry,

1083 (
öfo
.
hook_íåy
));

1084 
	`mem˝y
(
öfo
.
undîÊow
, 
t
->
¥iv©e
->underflow,

1085 (
öfo
.
undîÊow
));

1086 
öfo
.
num_íåõs
 = 
t
->
¥iv©e
->
numbî
;

1087 
öfo
.
size
 = 
t
->
¥iv©e
->size;

1088 
	`°r˝y
(
öfo
.
«me
,Çame);

1090 i‡(
	`c›y_to_u£r
(
u£r
, &
öfo
, *
Àn
) != 0)

1091 
ªt
 = -
EFAULT
;

1093 
ªt
 = 0;

1095 
	`up
(&
¨±_muãx
);

1100 
ARPT_SO_GET_ENTRIES
: {

1101 
¨±_gë_íåõs
 
gë
;

1103 i‡(*
Àn
 < (
gë
)) {

1104 
	`du¥ötf
("gë_íåõs: %u < %Zu\n", *
Àn
, (
gë
));

1105 
ªt
 = -
EINVAL
;

1106 } i‡(
	`c›y_‰om_u£r
(&
gë
, 
u£r
, (get)) != 0) {

1107 
ªt
 = -
EFAULT
;

1108 } i‡(*
Àn
 !(
¨±_gë_íåõs
Ë+ 
gë
.
size
) {

1109 
	`du¥ötf
("gë_íåõs: %u !%Zu\n", *
Àn
,

1110 (
¨±_gë_íåõs
Ë+ 
gë
.
size
);

1111 
ªt
 = -
EINVAL
;

1113 
ªt
 = 
	`gë_íåõs
(&
gë
, 
u£r
);

1118 
	`du¥ötf
("do_¨±_gë_˘l: unknow¿ªque° %i\n", 
cmd
);

1119 
ªt
 = -
EINVAL
;

1122  
ªt
;

1123 
	}
}

1126 
	$¨±_ªgi°î_èrgë
(
¨±_èrgë
 *
èrgë
)

1128 
ªt
;

1130 
ªt
 = 
	`down_öãºu±ibÀ
(&
¨±_muãx
);

1131 i‡(
ªt
 != 0)

1132  
ªt
;

1134 i‡(!
	`li°_«med_ö£π
(&
¨±_èrgë
, 
èrgë
)) {

1135 
	`du¥ötf
("arpt_register_target: `%s'álready inÜist!\n",

1136 
èrgë
->
«me
);

1137 
ªt
 = -
EINVAL
;

1139 
	`up
(&
¨±_muãx
);

1140  
ªt
;

1141 
	}
}

1143 
	$¨±_uƒegi°î_èrgë
(
¨±_èrgë
 *
èrgë
)

1145 
	`down
(&
¨±_muãx
);

1146 
	`LIST_DELETE
(&
¨±_èrgë
, 
èrgë
);

1147 
	`up
(&
¨±_muãx
);

1148 
	}
}

1150 
	$¨±_ªgi°î_èbÀ
(
¨±_èbÀ
 *
èbÀ
)

1152 
ªt
;

1153 
¨±_èbÀ_öfo
 *
√wöfo
;

1154 
¨±_èbÀ_öfo
 
boŸ°øp


1157 
√wöfo
 = 
	`vmÆloc
((
¨±_èbÀ_öfo
)

1158 + 
	`SMP_ALIGN
(
èbÀ
->èbÀ->
size
Ë* 
NR_CPUS
);

1159 i‡(!
√wöfo
) {

1160 
ªt
 = -
ENOMEM
;

1161  
ªt
;

1163 
	`mem˝y
(
√wöfo
->
íåõs
, 
èbÀ
->èbÀ->íåõs,ÅabÀ->èbÀ->
size
);

1165 
ªt
 = 
	`å™¶©e_èbÀ
(
èbÀ
->
«me
,ÅabÀ->
vÆid_hooks
,

1166 
√wöfo
, 
èbÀ
->èbÀ->
size
,

1167 
èbÀ
->èbÀ->
num_íåõs
,

1168 
èbÀ
->èbÀ->
hook_íåy
,

1169 
èbÀ
->èbÀ->
undîÊow
);

1170 
	`du¥ötf
("¨±_ªgi°î_èbÀ:Åøn¶©êèbÀ give†%d\n", 
ªt
);

1171 i‡(
ªt
 != 0) {

1172 
	`v‰ì
(
√wöfo
);

1173  
ªt
;

1176 
ªt
 = 
	`down_öãºu±ibÀ
(&
¨±_muãx
);

1177 i‡(
ªt
 != 0) {

1178 
	`v‰ì
(
√wöfo
);

1179  
ªt
;

1183 i‡(
	`li°_«med_föd
(&
¨±_èbÀs
, 
èbÀ
->
«me
)) {

1184 
ªt
 = -
EEXIST
;

1185 
‰ì_u∆ock
;

1189 
èbÀ
->
¥iv©e
 = &
boŸ°øp
;

1190 i‡(!
	`ª∂a˚_èbÀ
(
èbÀ
, 0, 
√wöfo
, &
ªt
))

1191 
‰ì_u∆ock
;

1193 
	`du¥ötf
("table->private->number = %u\n",

1194 
èbÀ
->
¥iv©e
->
numbî
);

1197 
èbÀ
->
¥iv©e
->
öôül_íåõs
 =ÅabÀ->¥iv©e->
numbî
;

1199 
èbÀ
->
lock
 = 
RW_LOCK_UNLOCKED
;

1200 
	`li°_¥ïíd
(&
¨±_èbÀs
, 
èbÀ
);

1202 
u∆ock
:

1203 
	`up
(&
¨±_muãx
);

1204  
ªt
;

1206 
‰ì_u∆ock
:

1207 
	`v‰ì
(
√wöfo
);

1208 
u∆ock
;

1209 
	}
}

1211 
	$¨±_uƒegi°î_èbÀ
(
¨±_èbÀ
 *
èbÀ
)

1213 
	`down
(&
¨±_muãx
);

1214 
	`LIST_DELETE
(&
¨±_èbÀs
, 
èbÀ
);

1215 
	`up
(&
¨±_muãx
);

1218 
	`ARPT_ENTRY_ITERATE
(
èbÀ
->
¥iv©e
->
íåõs
,ÅabÀ->¥iv©e->
size
,

1219 
˛ónup_íåy
, 
NULL
);

1220 
	`v‰ì
(
èbÀ
->
¥iv©e
);

1221 
	}
}

1224 
¨±_èrgë
 
	g¨±_°™d¨d_èrgë
 = {

1225 .
«me
 = 
ARPT_STANDARD_TARGET
,

1228 
¨±_èrgë
 
	g¨±_îr‹_èrgë
 = {

1229 .
«me
 = 
ARPT_ERROR_TARGET
,

1230 .
	gèrgë
 = 
¨±_îr‹
,

1233 
nf_sock›t_›s
 
	g¨±_sock›ts
 = {

1234 .
pf
 = 
PF_INET
,

1235 .
	g£t_›tmö
 = 
ARPT_BASE_CTL
,

1236 .
	g£t_›tmax
 = 
ARPT_SO_SET_MAX
+1,

1237 .
	g£t
 = 
do_¨±_£t_˘l
,

1238 .
	ggë_›tmö
 = 
ARPT_BASE_CTL
,

1239 .
	ggë_›tmax
 = 
ARPT_SO_GET_MAX
+1,

1240 .
	ggë
 = 
do_¨±_gë_˘l
,

1243 #ifde‡
CONFIG_PROC_FS


1244 
ölöe
 
	$¥öt_«me
(c⁄° 
¨±_èbÀ
 *
t
,

1245 
off_t
 
°¨t_off£t
, *
buf„r
, 
Àngth
,

1246 
off_t
 *
pos
, *
cou¡
)

1248 i‡((*
cou¡
)++ >
°¨t_off£t
) {

1249 
«mñí
;

1251 
«mñí
 = 
	`•rötf
(
buf„r
 + *
pos
, "%s\n", 
t
->
«me
);

1252 i‡(*
pos
 + 
«mñí
 > 
Àngth
) {

1256 *
pos
 +
«mñí
;

1259 
	}
}

1261 
	$¨±_gë_èbÀs
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

1263 
off_t
 
pos
 = 0;

1264 
cou¡
 = 0;

1266 i‡(
	`down_öãºu±ibÀ
(&
¨±_muãx
) != 0)

1269 
	`LIST_FIND
(&
¨±_èbÀs
, 
¥öt_«me
, 
¨±_èbÀ
 *,

1270 
off£t
, 
buf„r
, 
Àngth
, &
pos
, &
cou¡
);

1272 
	`up
(&
¨±_muãx
);

1275 *
°¨t
=(*)(()
cou¡
-
off£t
);

1276  
pos
;

1277 
	}
}

1280 
__öô
 
	$öô
()

1282 
ªt
;

1285 
	`down
(&
¨±_muãx
);

1286 
	`li°_≠≥nd
(&
¨±_èrgë
, &
¨±_°™d¨d_èrgë
);

1287 
	`li°_≠≥nd
(&
¨±_èrgë
, &
¨±_îr‹_èrgë
);

1288 
	`up
(&
¨±_muãx
);

1291 
ªt
 = 
	`nf_ªgi°î_sock›t
(&
¨±_sock›ts
);

1292 i‡(
ªt
 < 0) {

1293 
	`du¥ötf
("UnableÅoÑegister sockopts.\n");

1294  
ªt
;

1297 #ifde‡
CONFIG_PROC_FS


1299 
¥oc_dú_íåy
 *
¥oc
;

1301 
¥oc
 = 
	`¥oc_√t_¸óã
("¨p_èbÀs_«mes", 0, 
¨±_gë_èbÀs
);

1302 i‡(!
¥oc
) {

1303 
	`nf_uƒegi°î_sock›t
(&
¨±_sock›ts
);

1304  -
ENOMEM
;

1306 
¥oc
->
ow√r
 = 
THIS_MODULE
;

1310 
	`¥ötk
("arp_tables: (C) 2002 David S. Miller\n");

1312 
	}
}

1314 
__exô
 
	$föi
()

1316 
	`nf_uƒegi°î_sock›t
(&
¨±_sock›ts
);

1317 #ifde‡
CONFIG_PROC_FS


1318 
	`¥oc_√t_ªmove
("arp_tables_names");

1320 
	}
}

1322 
EXPORT_SYMBOL
(
¨±_ªgi°î_èbÀ
);

1323 
EXPORT_SYMBOL
(
¨±_uƒegi°î_èbÀ
);

1324 
EXPORT_SYMBOL
(
¨±_do_èbÀ
);

1325 
EXPORT_SYMBOL
(
¨±_föd_èrgë_lock
);

1326 
EXPORT_SYMBOL
(
¨±_ªgi°î_èrgë
);

1327 
EXPORT_SYMBOL
(
¨±_uƒegi°î_èrgë
);

1329 
moduÀ_öô
(
öô
);

1330 
moduÀ_exô
(
föi
);

	@arpt_mangle.c

2 
	~<löux/moduÀ.h
>

3 
	~<löux/√tfûãr_¨p/¨±_m™gÀ.h
>

4 
	~<√t/sock.h
>

6 
MODULE_LICENSE
("GPL");

7 
MODULE_AUTHOR
("Bart De Schuymer <bdschuym@pandora.be>");

8 
MODULE_DESCRIPTION
("arptablesárpÖayload mangleÅarget");

11 
	$èrgë
(
sk_buff
 **
pskb
, 
hooknum
, c⁄° 
√t_devi˚
 *
ö
,

12 c⁄° 
√t_devi˚
 *
out
, c⁄° *
èrgöfo
, *
u£röfo
)

14 c⁄° 
¨±_m™gÀ
 *
m™gÀ
 = 
èrgöfo
;

15 
¨phdr
 *
¨p
;

16 *
¨µå
;

17 
∂n
, 
h 
;

19 i‡(
	`skb_sh¨ed
(*
pskb
Ë|| 
	`skb_˛⁄ed
(*pskb)) {

20 
sk_buff
 *
nskb
;

22 
nskb
 = 
	`skb_c›y
(*
pskb
, 
GFP_ATOMIC
);

23 i‡(!
nskb
)

24  
NF_DROP
;

25 i‡((*
pskb
)->
sk
)

26 
	`skb_£t_ow√r_w
(
nskb
, (*
pskb
)->
sk
);

27 
	`k‰ì_skb
(*
pskb
);

28 *
pskb
 = 
nskb
;

31 
¨p
 = (*
pskb
)->
nh
.
¨ph
;

32 
¨µå
 = (*
pskb
)->
nh
.
øw
 + (*
¨p
);

33 
∂n
 = 
¨p
->
¨_∂n
;

34 
h 
 = 
¨p
->
¨_h 
;

36 i‡(
m™gÀ
->
Êags
 & 
ARPT_MANGLE_SDEV
) {

37 i‡(
ARPT_DEV_ADDR_LEN_MAX
 < 
h 
 ||

38 (
¨µå
 + 
h 
 > (**
pskb
).
èû
))

39  
NF_DROP
;

40 
	`mem˝y
(
¨µå
, 
m™gÀ
->
§c_devaddr
, 
h 
);

42 
¨µå
 +
h 
;

43 i‡(
m™gÀ
->
Êags
 & 
ARPT_MANGLE_SIP
) {

44 i‡(
ARPT_MANGLE_ADDR_LEN_MAX
 < 
∂n
 ||

45 (
¨µå
 + 
∂n
 > (**
pskb
).
èû
))

46  
NF_DROP
;

47 
	`mem˝y
(
¨µå
, &
m™gÀ
->
u_s
.
§c_ù
, 
∂n
);

49 
¨µå
 +
∂n
;

50 i‡(
m™gÀ
->
Êags
 & 
ARPT_MANGLE_TDEV
) {

51 i‡(
ARPT_DEV_ADDR_LEN_MAX
 < 
h 
 ||

52 (
¨µå
 + 
h 
 > (**
pskb
).
èû
))

53  
NF_DROP
;

54 
	`mem˝y
(
¨µå
, 
m™gÀ
->
tgt_devaddr
, 
h 
);

56 
¨µå
 +
h 
;

57 i‡(
m™gÀ
->
Êags
 & 
ARPT_MANGLE_TIP
) {

58 i‡(
ARPT_MANGLE_ADDR_LEN_MAX
 < 
∂n
 ||

59 (
¨µå
 + 
∂n
 > (**
pskb
).
èû
))

60  
NF_DROP
;

61 
	`mem˝y
(
¨µå
, &
m™gÀ
->
u_t
.
tgt_ù
, 
∂n
);

63  
m™gÀ
->
èrgë
;

64 
	}
}

67 
	$checkíåy
(c⁄° *
èbÀ«me
, c⁄° 
¨±_íåy
 *
e
, *
èrgöfo
,

68 
èrgöfosize
, 
hook_mask
)

70 c⁄° 
¨±_m™gÀ
 *
m™gÀ
 = 
èrgöfo
;

72 i‡(
m™gÀ
->
Êags
 & ~
ARPT_MANGLE_MASK
 ||

73 !(
m™gÀ
->
Êags
 & 
ARPT_MANGLE_MASK
))

76 i‡(
m™gÀ
->
èrgë
 !
NF_DROP
 && m™gÀ->èrgë !
NF_ACCEPT
 &&

77 
m™gÀ
->
èrgë
 !
ARPT_CONTINUE
)

80 
	}
}

82 
¨±_èrgë
 
	g¨±_m™gÀ_ªg


84 .
«me
 = "mangle",

85 .
	gèrgë
 = 
èrgë
,

86 .
	gcheckíåy
 = 
checkíåy
,

87 .
	gme
 = 
THIS_MODULE
,

90 
__öô
 
	$öô
()

92 i‡(
	`¨±_ªgi°î_èrgë
(&
¨±_m™gÀ_ªg
))

93  -
EINVAL
;

96 
	}
}

98 
__exô
 
	$föi
()

100 
	`¨±_uƒegi°î_èrgë
(&
¨±_m™gÀ_ªg
);

101 
	}
}

103 
moduÀ_öô
(
öô
);

104 
moduÀ_exô
(
föi
);

	@arptable_filter.c

8 
	~<löux/moduÀ.h
>

9 
	~<löux/√tfûãr_¨p/¨p_èbÀs.h
>

11 
MODULE_LICENSE
("GPL");

12 
MODULE_AUTHOR
("David S. Miller <davem@redhat.com>");

13 
MODULE_DESCRIPTION
("arptables filterÅable");

15 
	#FILTER_VALID_HOOKS
 ((1 << 
NF_ARP_IN
Ë| (1 << 
NF_ARP_OUT
) | \

16 (1 << 
NF_ARP_FORWARD
))

	)

19 
	s¨±_°™d¨d


21 
¨±_íåy
 
	míåy
;

22 
¨±_°™d¨d_èrgë
 
	mèrgë
;

25 
	s¨±_îr‹_èrgë


27 
¨±_íåy_èrgë
 
	mèrgë
;

28 
	mîr‹«me
[
ARPT_FUNCTION_MAXNAMELEN
];

31 
	s¨±_îr‹


33 
¨±_íåy
 
	míåy
;

34 
¨±_îr‹_èrgë
 
	mèrgë
;

39 
¨±_ª∂a˚
 
	mª∂
;

40 
¨±_°™d¨d
 
	míåõs
[3];

41 
¨±_îr‹
 
	mãrm
;

42 } 
öôül_èbÀ
 
	g__öôd©a


43 { { "fûãr", 
FILTER_VALID_HOOKS
, 4,

44 (
¨±_°™d¨d
Ë* 3 + (
¨±_îr‹
),

45 { [
NF_ARP_IN
] = 0,

46 [
NF_ARP_OUT
] = (
¨±_°™d¨d
),

47 [
NF_ARP_FORWARD
] = 2 * (
¨±_°™d¨d
), },

48 { [
NF_ARP_IN
] = 0,

49 [
NF_ARP_OUT
] = (
¨±_°™d¨d
),

50 [
NF_ARP_FORWARD
] = 2 * (
¨±_°™d¨d
), },

51 0, 
	gNULL
, { } },

67 (
	g¨±_íåy
),

68 (
	g¨±_°™d¨d
),

71 { { { { 
ARPT_ALIGN
((
¨±_°™d¨d_èrgë
)), "" } }, { } },

72 -
	gNF_ACCEPT
 - 1 }

88 (
	g¨±_íåy
),

89 (
	g¨±_°™d¨d
),

92 { { { { 
ARPT_ALIGN
((
¨±_°™d¨d_èrgë
)), "" } }, { } },

93 -
	gNF_ACCEPT
 - 1 }

109 (
	g¨±_íåy
),

110 (
	g¨±_°™d¨d
),

113 { { { { 
ARPT_ALIGN
((
¨±_°™d¨d_èrgë
)), "" } }, { } },

114 -
	gNF_ACCEPT
 - 1 }

131 (
	g¨±_íåy
),

132 (
	g¨±_îr‹
),

135 { { { { 
ARPT_ALIGN
((
¨±_îr‹_èrgë
)), 
	gARPT_ERROR_TARGET
 } },

142 
¨±_èbÀ
 
	g∑ckë_fûãr
 = {

143 .
«me
 = "filter",

144 .
	gèbÀ
 = &
öôül_èbÀ
.
ª∂
,

145 .
	gvÆid_hooks
 = 
FILTER_VALID_HOOKS
,

146 .
	glock
 = 
RW_LOCK_UNLOCKED
,

147 .
	g¥iv©e
 = 
NULL
,

148 .
	gme
 = 
THIS_MODULE
,

152 
¨±_hook
(
hook
,

153 
sk_buff
 **
pskb
,

154 c⁄° 
√t_devi˚
 *
ö
,

155 c⁄° 
√t_devi˚
 *
out
,

156 (*
ok‚
)(
sk_buff
 *))

158  
	`¨±_do_èbÀ
(
pskb
, 
hook
, 
ö
, 
out
, &
∑ckë_fûãr
, 
NULL
);

159 
	}
}

161 
nf_hook_›s
 
	g¨±_›s
[] = {

163 .
hook
 = 
¨±_hook
,

164 .
	gow√r
 = 
THIS_MODULE
,

165 .
	gpf
 = 
NF_ARP
,

166 .
	ghooknum
 = 
NF_ARP_IN
,

169 .
	ghook
 = 
¨±_hook
,

170 .
	gow√r
 = 
THIS_MODULE
,

171 .
	gpf
 = 
NF_ARP
,

172 .
	ghooknum
 = 
NF_ARP_OUT
,

175 .
	ghook
 = 
¨±_hook
,

176 .
	gow√r
 = 
THIS_MODULE
,

177 .
	gpf
 = 
NF_ARP
,

178 .
	ghooknum
 = 
NF_ARP_FORWARD
,

182 
__öô
 
	$öô
()

184 
ªt
, 
i
;

187 
ªt
 = 
	`¨±_ªgi°î_èbÀ
(&
∑ckë_fûãr
);

188 i‡(
ªt
 < 0)

189  
ªt
;

191 
i
 = 0; i < 
	`ARRAY_SIZE
(
¨±_›s
); i++)

192 i‡((
ªt
 = 
	`nf_ªgi°î_hook
(&
¨±_›s
[
i
])) < 0)

193 
˛ónup_hooks
;

194  
ªt
;

196 
˛ónup_hooks
:

197 --
i
 >= 0)

198 
	`nf_uƒegi°î_hook
(&
¨±_›s
[
i
]);

200 
	`¨±_uƒegi°î_èbÀ
(&
∑ckë_fûãr
);

201  
ªt
;

202 
	}
}

204 
__exô
 
	$föi
()

206 
i
;

208 
i
 = 0; i < 
	`ARRAY_SIZE
(
¨±_›s
); i++)

209 
	`nf_uƒegi°î_hook
(&
¨±_›s
[
i
]);

211 
	`¨±_uƒegi°î_èbÀ
(&
∑ckë_fûãr
);

212 
	}
}

214 
moduÀ_öô
(
öô
);

215 
moduÀ_exô
(
föi
);

	@broadcom/ip_conntrack_dtx8.c

20 
	~<löux/c⁄fig.h
>

21 
	~<löux/moduÀ.h
>

22 
	~<löux/√tfûãr.h
>

23 
	~<löux/ù.h
>

24 
	~<löux/˘y≥.h
>

25 
	~<√t/checksum.h
>

26 
	~<√t/udp.h
>

27 
	~<√t/t˝.h
>

29 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

30 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

31 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_dtx8.h
>

33 
DECLARE_LOCK
(
ù_dtx8_lock
);

34 
moduÀ
 *
	gù_c⁄¡øck_dtx8
 = 
THIS_MODULE
;

42 
	gp‹ts
[
MAXDTX8_PORTS
];

43 
	gp‹ts_c
;

47 
	#DEBUGP
 
¥ötk


	)

49 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

54 
	$hñp
(
sk_buff
 *
skb
,

55 
ù_c⁄¡øck
 *
˘
,

56 
ù_c⁄¡øck_öfo
 
˘öfo
)

58 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

59 
t˝hdr
 
t˝h
;

60 
ù_c⁄¡øck_ex≥˘
 
exp
;

61 
i
;

64 i‡–
˘öfo
 !
IP_CT_NEW
)

65  
NF_ACCEPT
;

66 i‡–
dú
 != 0)

67  
NF_ACCEPT
;

69 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
t˝h
, (tcph)) != 0)

70  
NF_ACCEPT
;

72 
	`DEBUGP
("dtx8_hñp: C⁄¡øcköfÿ%u dú=%d\n", 
˘öfo
,
dú
);

73 
	`DEBUGP
("");

74 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

75 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

76 
	`LOCK_BH
(&
ù_dtx8_lock
);

78 
i
 = 
DTX8MIN
; i <
DTX8MAX
; i++) {

79 
	`mem£t
(&
exp
, 0, (exp));

80 
exp
.
tu∂e
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].tuple;

81 
exp
.
tu∂e
.
d°
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(
i
);

82 
exp
.
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

83 
exp
.
mask
.
§c
.
ù
 = 0xffffffff;

84 
exp
.
mask
.
d°
.
ù
 = 0xffffffff;

85 
exp
.
mask
.
d°
.
u
.
udp
.
p‹t
 = 0xffff;

86 
exp
.
mask
.
d°
.
¥Ÿ⁄um
 = 0xffff;

87 
exp
.
ex≥˘‚
 = 
NULL
;

88 
exp
.
£q
 = 
	`¡ohl
(
t˝h
.seq);

90 
	`DEBUGP
("expect: ");

91 
	`DUMP_TUPLE
(&
exp
.
tu∂e
);

92 
	`DUMP_TUPLE
(&
exp
.
mask
);

93 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(&
exp
, 
˘
);

95 
	`UNLOCK_BH
(&
ù_dtx8_lock
);

96  
NF_ACCEPT
;

97 
	}
}

99 
ù_c⁄¡øck_hñ≥r
 
	gdtx8
[
MAXDTX8_PORTS
];

102 
	$föi
()

104 
i
;

105 
i
 = 0; (ò< 
MAXDTX8_PORTS
Ë&& 
p‹ts
[i]; i++) {

106 
	`DEBUGP
("ip_conntrack_dtx8: unregistering helper forÖort %d\n",

107 
p‹ts
[
i
]);

108 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
dtx8
[
i
]);

110 
	}
}

112 
__öô
 
	$öô
()

114 
i
, 
ªt
;

116 i‡(
p‹ts
[0] == 0)

117 
p‹ts
[0] =
DTX8INITIAL
;

119 
i
 = 0; (ò< 
MAXDTX8_PORTS
Ë&& 
p‹ts
[i]; i++) {

120 
	`mem£t
(&
dtx8
[
i
], 0, (
ù_c⁄¡øck_hñ≥r
));

121 
dtx8
[
i
].
tu∂e
.
§c
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[i]);

122 
dtx8
[
i
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

123 
dtx8
[
i
].
mask
.
§c
.
u
.
udp
.
p‹t
 = 0xFFFF;

125 
dtx8
[
i
].
mask
.
d°
.
¥Ÿ⁄um
 = 0;

126 
dtx8
[
i
].
max_ex≥˘ed
 = 
DTX8MAXEXPECTED
;

127 
dtx8
[
i
].
timeout
 = 0;

128 
dtx8
[
i
].
Êags
 = 
IP_CT_HELPER_F_REUSE_EXPECT
;

129 
dtx8
[
i
].
me
 = 
ù_c⁄¡øck_dtx8
;

130 
dtx8
[
i
].
hñp
 = help;

132 
	`DEBUGP
("ip_conntrack_dtx8:Ñegistering helper forÖort %d\n",

133 
p‹ts
[
i
]);

134 
ªt
 = 
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(&
dtx8
[
i
]);

136 i‡(
ªt
) {

137 
	`föi
();

138 
	`¥ötk
("ip_conntrack_dtx8:Ñegistering helper forÖort FAILED \n");

139  
ªt
;

141 
p‹ts_c
++;

144 
	}
}

147 
MODULE_AUTHOR
("Eddie Shi <eddieshi@broadcom.com>");

148 
MODULE_DESCRIPTION
("Netfilter Conntrack helper for DTX8 ");

149 
MODULE_LICENSE
("Proprietary");

152 
PROVIDES_CONNTRACK
(
dtx8
);

153 
moduÀ_öô
(
öô
);

154 
moduÀ_exô
(
föi
);

	@broadcom/ip_conntrack_ipsec.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/ù.h
>

25 
	~<löux/udp.h
>

27 
	~<löux/√tfûãr.h
>

28 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

29 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

30 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_ù£c.h
>

32 
MODULE_AUTHOR
("Pavan Kumar <pavank@broadcom.com>");

33 
MODULE_DESCRIPTION
("Netfilter connectionÅracking module for ipsec");

34 
MODULE_LICENSE
("Proprietary");

36 
	#IPSEC_FREE
 0

	)

37 
	#IPSEC_INUSE
 1

	)

38 
	#MAX_PORTS
 64

	)

40 
	s_ù£c_èbÀ
 {

41 
ul⁄g
 
	möôcookõ
[2];

42 
ul⁄g
 
	mª•cookõ
[2];

43 
u_öt32_t
 
	ml_ù
;

44 
u_öt32_t
 
	mr_ù
;

45 
u_öt32_t
 
	mtimeout
;

46 
	möu£
;

47 } 
	gù£c_èbÀ
[
MAX_PORTS
];

49 
	gp‹ts
[
MAX_PORTS
];

50 
	gp‹ts_c
 = 0;

51 #ifde‡
MODULE_PARM


52 
MODULE_PARM
(
p‹ts
, "1-" 
__MODULE_STRING
(
MAX_PORTS
) "i");

53 
MODULE_PARM_DESC
(
p‹ts
, "portÇumbers of IPSEC");

57 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(
__FILE__
 ":" 
__FUNCTION__
 ": " \

58 
f‹m©
, ## 
¨gs
)

	)

60 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

66 
_ù£c_èbÀ
 *
	$Æloc_ù£c_íåy
 ( )

68 
idx
 = 0;

69 
_ù£c_èbÀ
 *
ù£c_íåy
 = 
ù£c_èbÀ
;

71  ; 
idx
 < 
MAX_PORTS
; idx++ ) {

72 i‡–
ù£c_íåy
->
öu£
 =
IPSEC_FREE
 ) {

73  
ù£c_íåy
;

75 
ù£c_íåy
++;

77  
NULL
;

78 
	}
}

83 
_ù£c_èbÀ
 *
	$£¨ch_ù£c_íåy_by_addr
 ( 
ißkmphdr
 *
ißkmph
,

84 c⁄° 
ùhdr
 *
ùh
 )

86 
idx
 = 0;

87 
_ù£c_èbÀ
 *
ù£c_íåy
 = 
ù£c_èbÀ
;

89  ; 
idx
 < 
MAX_PORTS
; idx++ ) {

90 i‡–
	`¡ohl
(
ù£c_íåy
->
l_ù
Ë=¡ohl(
ùh
->
ßddr
) ) {

91  
ù£c_íåy
;

93 
ù£c_íåy
++;

95  
NULL
;

96 
	}
}

101 
_ù£c_èbÀ
 *
	$£¨ch_ù£c_íåy_by_cookõ
 ( 
ißkmphdr
 *
ißkmph
 )

103 
idx
 = 0;

104 
_ù£c_èbÀ
 *
ù£c_íåy
 = 
ù£c_èbÀ
;

106  ; 
idx
 < 
MAX_PORTS
; idx++ ) {

107 i‡–(
	`¡ohl
(
ißkmph
->
öôcookõ
[0]Ë=¡ohl(
ù£c_íåy
->initcookie[0])) &&

108 (
	`¡ohl
(
ißkmph
->
öôcookõ
[1]Ë=¡ohl(
ù£c_íåy
->initcookie[1]))) {

109  
ù£c_íåy
;

111 
ù£c_íåy
++;

113  
NULL
;

114 
	}
}

119 
	$ù£c_hñp
(
sk_buff
 *
skb
,

120 
ù_c⁄¡øck
 *
˘
,

121 
ù_c⁄¡øck_öfo
 
˘öfo
)

123 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

124 
udphdr
 *
udph
 = (*)
ùh
 + iph->
ihl
 * 4;

125 
ißkmphdr
 *
ißkmph
 = (*)
udph
 + 8;

126 
ù_c⁄¡øck_ex≥˘
 
exp
;

127 
_ù£c_èbÀ
 *
ù£c_íåy
;

134 i‡–
	`¡ohl
(
ißkmph
->
ª•cookõ
[0]) == 0 &&Çtohl(isakmph->respcookie[1]) == 0 ) {

140 i‡–(
ù£c_íåy
 = 
	`£¨ch_ù£c_íåy_by_addr
 ( 
ißkmph
,

141 
ùh
 )Ë=
NULL
 ) {

142 
ù£c_íåy
 = 
	`Æloc_ù£c_íåy
 ();

143 i‡–
ù£c_íåy
 =
NULL
 ) {

145  
NF_DROP
;

148 
ù£c_íåy
->
öôcookõ
[0] = 
	`¡ohl
(
ißkmph
->initcookie[0]);

149 
ù£c_íåy
->
öôcookõ
[1] = 
	`¡ohl
(
ißkmph
->initcookie[1]);

150 
ù£c_íåy
->
ª•cookõ
[0] = 
	`¡ohl
(
ißkmph
->respcookie[0]);

151 
ù£c_íåy
->
ª•cookõ
[1] = 
	`¡ohl
(
ißkmph
->respcookie[1]);

152 
ù£c_íåy
->
l_ù
 = 
	`¡ohl
(
ùh
->
ßddr
);

153 
ù£c_íåy
->
r_ù
 = 
	`¡ohl
(
ùh
->
daddr
);

154 
ù£c_íåy
->
timeout
 = 30;

159 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

160 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

161 
	`mem£t
(&
exp
, 0, (exp));

163 
exp
.
tu∂e
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].tuple;

164 
exp
.
mask
.
§c
.
ù
 = 0xFFFFFFFF;

165 
exp
.
mask
.
d°
.
ù
 = 0xFFFFFFFF;

166 
exp
.
mask
.
d°
.
u
.
udp
.
p‹t
 = 
	`¡ohs
(
IPSEC_UDP_PORT
);

167 
exp
.
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

168 
exp
.
ex≥˘‚
 = 
NULL
;

174 
	`DUMP_TUPLE
(&
exp
.
tu∂e
);

175 
	`DUMP_TUPLE
(&
exp
.
mask
);

176 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(&
exp
, 
˘
);

177  
NF_ACCEPT
;

179 i‡–(
ù£c_íåy
 = 
	`£¨ch_ù£c_íåy_by_cookõ
 ( 
ißkmph
 ) ) !
NULL
 ) {

180 i‡–
˘öfo
 >
IP_CT_IS_REPLY
 ) {

183 
˘
->
«t
.
hñp
.
ù£c_öfo
.
ßddr
 = 
ù£c_íåy
->
l_ù
;

186  
NF_ACCEPT
;

194  
NF_DROP
;

195 
	}
}

197 
ù_c⁄¡øck_hñ≥r
 
	gù£c
[
MAX_PORTS
];

198 
	gù£c_«mes
[
MAX_PORTS
][10];

200 
	$föi
()

202 
i
;

204 
i
 = 0 ; i < 
p‹ts_c
; i++) {

207 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
ù£c
[
i
]);

209 
	}
}

211 
__öô
 
	$öô
()

213 
i
, 
ªt
;

214 *
tm≤ame
;

216 i‡(!
p‹ts
[0])

217 
p‹ts
[0] = 
IPSEC_UDP_PORT
;

219 
i
 = 0 ; (ò< 
MAX_PORTS
Ë&& 
p‹ts
[i] ; i++) {

221 
ù£c
[
i
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

222 
ù£c
[
i
].
tu∂e
.
§c
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[i]);

223 
ù£c
[
i
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

224 
ù£c
[
i
].
mask
.
§c
.
u
.
udp
.
p‹t
 = 0xFFFF;

225 
ù£c
[
i
].
max_ex≥˘ed
 = 1;

226 
ù£c
[
i
].
timeout
 = 0;

227 
ù£c
[
i
].
Êags
 = 
IP_CT_HELPER_F_REUSE_EXPECT
;

228 
ù£c
[
i
].
me
 = 
THIS_MODULE
;

229 
ù£c
[
i
].
hñp
 = 
ù£c_hñp
;

230 
tm≤ame
 = &
ù£c_«mes
[
i
][0];

231 i‡(
p‹ts
[
i
] =
IPSEC_UDP_PORT
)

232 
	`•rötf
(
tm≤ame
, "ipsec");

234 
	`•rötf
(
tm≤ame
, "ù£c-%d", 
i
);

235 
ù£c
[
i
].
«me
 = 
tm≤ame
;

240 
ªt
=
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(&
ù£c
[
i
]);

241 i‡(
ªt
) {

243 
	`föi
();

244 (
ªt
);

246 
p‹ts_c
++;

249 
	}
}

251 
PROVIDES_CONNTRACK
(
ù£c
);

252 
moduÀ_öô
(
öô
);

253 
moduÀ_exô
(
föi
);

	@broadcom/ip_conntrack_ipsec.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@broadcom/ip_conntrack_pt.c

21 
	~<löux/c⁄fig.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/moduÀ∑øm.h
>

24 
	~<löux/√tfûãr.h
>

25 
	~<löux/ù.h
>

26 
	~<löux/˘y≥.h
>

27 
	~<√t/checksum.h
>

28 
	~<√t/udp.h
>

30 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

31 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

33 
moduÀ
 *
	gù_c⁄¡øck_±
 = 
THIS_MODULE
;

47 
	gouç‹t
[300];

48 
	göp‹t
[300];

49 
	gíåõs
;

50 
	goutcou¡
;

51 
	göcou¡
;

52 
u_öt16_t
 
	gÁûed_p‹t
=0;

55 
MODULE_PARM
(
ouç‹t
,"0-" "i");

56 
MODULE_PARM
(
öp‹t
,"0-" "i");

57 
MODULE_PARM
(
íåõs
,"i");

60 
moduÀ_∑øm_¨øy
(
ouç‹t
, , 
outcou¡
, 0);

61 
moduÀ_∑øm_¨øy
(
öp‹t
, , 
öcou¡
, 0);

62 
moduÀ_∑øm
(
íåõs
, , 0);

64 
	#MAXPT_PORTS
 1000

	)

65 
	#PTMAXEXPECTED
 1000

	)

66 
	#MAXENTRIES
 200

	)

68 
	gªgi°îed_p‹t
=0;

70 
	s±_ªc‹d
 {

71 
u_öt16_t
 
	mouç‹t
[2];

72 
u_öt16_t
 
	möp‹t
[2];

73 
u_öt16_t
 
	mouçrŸo
;

74 
u_öt16_t
 
	mö¥Ÿo
;

76 
±_ªc‹d
 
	g±_ªc‹d
[
MAXENTRIES
];

78 
n‹mÆize
();

81 
	#DEBUGP
 
¥ötk


	)

83 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

88 
	$hñp
(
sk_buff
 *
skb
,

89 
ù_c⁄¡øck
 *
˘
,

90 
ù_c⁄¡øck_öfo
 
˘öfo
)

92 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

93 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

94 
udphdr
 *
udph
 = (*)
ùh
 + iph->
ihl
 * 4;

95 
ù_c⁄¡øck_ex≥˘
 *
exp
;

96 
i
;

97 
u_öt16_t
 
p‹t
;

98 
u_öt16_t
 
ouçrŸo
;

99 
u_öt16_t
 
ouç‹t
;

101 
	`DEBUGP
("±_hñp: C⁄¡øcköfÿ%u dú=%d\n", 
˘öfo
,
dú
);

102 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

103 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

112 
ouçrŸo
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
¥Ÿ⁄um
;

113 
ouç‹t
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
u
.
Æl
 >> 48;

117 i‡(
ouçrŸo
 =
IPPROTO_TCP
)

118 
ouçrŸo
=1;

119 i‡(
ouçrŸo
 =
IPPROTO_UDP
)

120 
ouçrŸo
=2;

122 
ouçrŸo
=0;

125 
i
 = 0; i < 
íåõs
; i++) {

127 i‡((
ouçrŸo
 =
±_ªc‹d
[
i
].ouçrŸÿ||Öt_ªc‹d[i].ouçrŸo=0Ë&& (
	`¡ohs
(
ouç‹t
) >=Öt_record[i].outport[0] &&Çtohs(outport) <=Öt_record[i].outport[1])) {

128 
p‹t
 = 
±_ªc‹d
[
i
].
öp‹t
[0];Öort <=Öt_record[i].inport[1];port++) {

129 
exp
 = 
	`ù_c⁄¡øck_ex≥˘_Æloc
();

130 i‡–
exp
 =
NULL
 ) {

131 
	`¥ötk
("**** ip_conntrack_expect_alloc() failed ***\n");

132 
out
;

134 
	`mem£t
(
exp
, 0, (exp));

135 
exp
->
tu∂e
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].tuple;

137 i‡–
±_ªc‹d
[
i
].
ö¥Ÿo
 == 1 ) {

138 
exp
->
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

139 
exp
->
tu∂e
.
d°
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(port);

141 
exp
->
mask
.
§c
.
ù
 = 0;

142 
exp
->
mask
.
§c
.
u
.
Æl
 = 0;

143 
exp
->
mask
.
d°
.
ù
 = 0xffffffff;

144 
exp
->
mask
.
d°
.
u
.
t˝
.
p‹t
 = 0xffff;

145 
exp
->
mask
.
d°
.
¥Ÿ⁄um
 = 0xffff;

147 i‡–
±_ªc‹d
[
i
].
ö¥Ÿo
 == 2 ) {

148 
exp
->
tu∂e
.
d°
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(port);

150 
exp
->
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

152 
exp
->
mask
.
§c
.
ù
 = 0;

153 
exp
->
mask
.
§c
.
u
.
Æl
 = 0;

154 
exp
->
mask
.
d°
.
ù
 = 0xffffffff;

155 
exp
->
mask
.
d°
.
u
.
udp
.
p‹t
 = 0xffff;

156 
exp
->
mask
.
d°
.
¥Ÿ⁄um
 = 0xffff;

159 
exp
->
tu∂e
.
d°
.
u
.
Æl
 = 
	`ht⁄s
(
p‹t
);

160 
exp
->
tu∂e
.
d°
.
u
.
Æl
 <<= 48;

162 
exp
->
mask
.
§c
.
ù
 = 0;

163 
exp
->
mask
.
§c
.
u
.
Æl
 = 0;

164 
exp
->
mask
.
d°
.
ù
 = 0xffffffff;

165 
exp
->
mask
.
d°
.
u
.
Æl
 = 0xffffffffffffffff;

166 
exp
->
mask
.
d°
.
¥Ÿ⁄um
 = 0;

168 
exp
->
ex≥˘‚
 = 
NULL
;

173 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(
exp
, 
˘
);

177 
out
:

178  
NF_ACCEPT
;

179 
	}
}

181 
ù_c⁄¡øck_hñ≥r
 
	g±
[
MAXPT_PORTS
];

184 
	$föi
()

186 
i
;

187 i‡(
Áûed_p‹t
 == 0)

188 
i
 = 0; i < 
ªgi°îed_p‹t
 ; i++) {

189 
	`DEBUGP
("ù_c⁄¡øck_±: uƒegi°îög hñ≥∏f‹Ö‹à%d\n",
	`¡ohs
(
±
[
i
].
tu∂e
.
§c
.
u
.
Æl
));

190 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
±
[
i
]);

193 
i
 = 0; i < 
ªgi°îed_p‹t
-1 ; i++) {

194 
	`DEBUGP
("ù_c⁄¡øck_±: uƒegi°îög hñ≥∏f‹Ö‹à%d\n",
	`¡ohs
(
±
[
i
].
tu∂e
.
§c
.
u
.
Æl
));

195 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
±
[
i
]);

197 
	}
}

198 
	$dump_±_ªc‹d
()

200 
i
;

202 
i
=0;i<
íåõs
;i++) {

203 
	`¥ötk
("íåy %d: \n",
i
);

204 
	`¥ötk
("¥Ÿÿ%d: outgoög: %d - %d\n",
±_ªc‹d
[
i
].
ouçrŸo
,±_ªc‹d[i].
ouç‹t
[0],pt_record[i].outport[1]);

205 
	`¥ötk
("¥Ÿÿ%d: incomög: %d - %d\n",
±_ªc‹d
[
i
].
ö¥Ÿo
,±_ªc‹d[i].
öp‹t
[0],pt_record[i].inport[1]);

206 
	`¥ötk
("\n");

209 
	}
}

210 
	$n‹mÆize
()

212 
i
;

214 
	`DEBUGP
("n‹mÆize:É¡rõs=%d \n",
íåõs
);

215 i‡(
íåõs
 > 
MAXENTRIES
) {

216 
íåõs
 = 
MAXENTRIES
;

217 
	`¥ötk
("ù_c⁄¡øck_±: O∆y suµ‹à maximumÇumbî o‡íåõ†%d \n",
MAXENTRIES
);

219  
i
=0; i< 
íåõs
 ; i++ ) {

221 
±_ªc‹d
[
i
].
ouçrŸo
=
ouç‹t
[3*i];

222 
±_ªc‹d
[
i
].
ouç‹t
[0]=outport[3*i + 1];

223 
±_ªc‹d
[
i
].
ouç‹t
[1]=outport[3*i + 2];

225 
±_ªc‹d
[
i
].
ö¥Ÿo
=
öp‹t
[3*i];

226 
±_ªc‹d
[
i
].
öp‹t
[0]=inport[3*i + 1];

227 
±_ªc‹d
[
i
].
öp‹t
[1]=inport[3*i + 2];

229 
	`dump_±_ªc‹d
();

231 
	}
}

244 
	$check_p‹t
(
p‹t
)

246 i‡(
p‹t
 == 21 ||

247 
p‹t
 == 6667 ||

248 
p‹t
 == 69 ||

249 
p‹t
 == 161 ||

250 
p‹t
 == 162 ||

251 
p‹t
 == 517 ||

252 
p‹t
 == 518 ||

253 
p‹t
 == 1720 ||

254 
p‹t
 == 1723 ||

255 
p‹t
 == 80)

259 
	}
}

261 
__öô
 
	$öô
()

263 
i
, 
ªt
=0;

264 
u_öt16_t
 
p‹t
;

267 
	`n‹mÆize
();

269 
i
=0;i<
MAXPT_PORTS
;i++)

270 
	`mem£t
(&
±
[
i
], 0, (
ù_c⁄¡øck_hñ≥r
));

272 
i
 = 0; i < 
íåõs
 && 
ªgi°îed_p‹t
 < 
MAXPT_PORTS
; i++) {

273 
p‹t
 = 
±_ªc‹d
[
i
].
ouç‹t
[0];Öort <=Öt_record[i].outport[1];Öort++ ) {

275 
±
[
ªgi°îed_p‹t
].
max_ex≥˘ed
 = 
PTMAXEXPECTED
;

276 
±
[
ªgi°îed_p‹t
].
timeout
 = 0;

277 
±
[
ªgi°îed_p‹t
].
Êags
 = 
IP_CT_HELPER_F_REUSE_EXPECT
;

278 
±
[
ªgi°îed_p‹t
].
me
 = 
ù_c⁄¡øck_±
;

279 
±
[
ªgi°îed_p‹t
].
hñp
 = help;

281 i‡–
±_ªc‹d
[
i
].
ouçrŸo
 == 1 ) {

282 
±
[
ªgi°îed_p‹t
].
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(port);

283 
±
[
ªgi°îed_p‹t
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

284 
±
[
ªgi°îed_p‹t
].
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

285 
±
[
ªgi°îed_p‹t
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

287 i‡–
±_ªc‹d
[
i
].
ouçrŸo
 == 2 ) {

288 
±
[
ªgi°îed_p‹t
].
tu∂e
.
§c
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(port);

289 
±
[
ªgi°îed_p‹t
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

290 
±
[
ªgi°îed_p‹t
].
mask
.
§c
.
u
.
udp
.
p‹t
 = 0xFFFF;

291 
±
[
ªgi°îed_p‹t
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

295 
±
[
ªgi°îed_p‹t
].
tu∂e
.
§c
.
u
.
Æl
 = 
	`ht⁄s
(
p‹t
)<< 48;

297 
±
[
ªgi°îed_p‹t
].
mask
.
§c
.
u
.
Æl
 = 0xFFFFFFFFFFFFFFFF;

298 
±
[
ªgi°îed_p‹t
].
mask
.
d°
.
¥Ÿ⁄um
 = 0;

300 
	`DEBUGP
("ù_c⁄¡øck_±:Ñegi°îög hñ≥∏f‹Ö‹à%d\n",
p‹t
);

301 i‡–
	`check_p‹t
(
p‹t
) )

302 
	`¥ötk
("ù_c⁄¡øck_±: c™nŸÑegi°îÖ‹à%d (ÆªadyÑegi°îed by othî moduÀ)\n",
p‹t
);

304 
ªt
 = 
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(&
±
[
ªgi°îed_p‹t
++]);

306 if–
ªgi°îed_p‹t
 >
MAXPT_PORTS
 ) {

307 
	`¥ötk
( "ConntrackÖort forwardingÅable is full. RemainingÉntriesáreÇotÖrocessed.\n" );

308 
±_ªc‹d
[
i
].
ouç‹t
[1] = 
p‹t
;

309 
íåõs
 = 
i
 + 1;

313 i‡(
ªt
) {

314 
Áûed_p‹t
 = 
p‹t
;

315 
	`¥ötk
("ù_c⁄¡øck_±:Ö‹à%dÑegi°î FAILED,p‹àÆªadyÑegi°îed \n",
p‹t
);

316 
	`föi
();

317  
ªt
;

323 
	}
}

326 
MODULE_AUTHOR
("Eddie Shi <eddieshi@broadcom.com>");

327 
MODULE_DESCRIPTION
("Netfilter Conntrack helper for PT ");

328 
MODULE_LICENSE
("Proprietary");

330 
PROVIDES_CONNTRACK
(
±
);

331 
moduÀ_öô
(
öô
);

332 
moduÀ_exô
(
föi
);

	@broadcom/ip_conntrack_pt.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@broadcom/ip_conntrack_wm.c

21 
	~<löux/c⁄fig.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/√tfûãr.h
>

24 
	~<löux/ù.h
>

25 
	~<löux/˘y≥.h
>

26 
	~<√t/checksum.h
>

27 
	~<√t/udp.h
>

28 
	~<√t/t˝.h
>

30 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

31 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

32 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_wm.h
>

34 
DECLARE_LOCK
(
ù_wm_lock
);

35 
moduÀ
 *
	gù_c⁄¡øck_wm
 = 
THIS_MODULE
;

43 
	gouç‹t
[2];

44 
	göp‹t
[2];

45 *
	gouçrŸo
="t";

46 *
	gö¥Ÿo
="t";

48 
MODULE_PARM
(
ouç‹t
,"2i");

49 
MODULE_PARM
(
öp‹t
,"2i");

50 
MODULE_PARM
(
ouçrŸo
,"s");

51 
MODULE_PARM
(
ö¥Ÿo
,"s");

54 
	gp‹ts
[
MAXWM_PORTS
];

55 
	gp‹ts_c
;

59 
	#DEBUGP
 
¥ötk


	)

61 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

66 
	$hñp
(
sk_buff
 *
skb
,

67 
ù_c⁄¡øck
 *
˘
,

68 
ù_c⁄¡øck_öfo
 
˘öfo
)

70 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

71 
t˝hdr
 
t˝h
;

72 
ù_c⁄¡øck_ex≥˘
 
exp
;

73 
i
;

79 i‡–
˘öfo
 !
IP_CT_NEW
)

80  
NF_ACCEPT
;

81 i‡–
dú
 != 0)

82  
NF_ACCEPT
;

86 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
t˝h
, (tcph)) != 0)

87  
NF_ACCEPT
;

89 
	`LOCK_BH
(&
ù_wm_lock
);

91 
i
 = 
WMMIN
; i <
WMMAX
; i++) {

92 
	`mem£t
(&
exp
, 0, (exp));

93 
exp
.
tu∂e
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].tuple;

94 
exp
.
tu∂e
.
d°
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(
i
);

95 
exp
.
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

96 
exp
.
mask
.
§c
.
ù
 = 0xffffffff;

97 
exp
.
mask
.
d°
.
ù
 = 0xffffffff;

98 
exp
.
mask
.
d°
.
u
.
udp
.
p‹t
 = 0xffff;

99 
exp
.
mask
.
d°
.
¥Ÿ⁄um
 = 0xffff;

100 
exp
.
ex≥˘‚
 = 
NULL
;

101 
exp
.
£q
 = 
	`¡ohl
(
t˝h
.seq);

103 
	`DEBUGP
("wm_help:Éxpect: ");

104 
	`DUMP_TUPLE
(&
exp
.
tu∂e
);

105 
	`DUMP_TUPLE
(&
exp
.
mask
);

106 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(&
exp
, 
˘
);

108 
	`UNLOCK_BH
(&
ù_wm_lock
);

109  
NF_ACCEPT
;

110 
	}
}

112 
ù_c⁄¡øck_hñ≥r
 
	gwm
[
MAXWM_PORTS
];

115 
	$föi
()

117 
i
;

118 
i
 = 0; (ò< 
MAXWM_PORTS
Ë&& 
p‹ts
[i]; i++) {

119 
	`DEBUGP
("ip_conntrack_wm: unregistering helper forÖort %d\n",

120 
p‹ts
[
i
]);

121 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
wm
[
i
]);

123 
	}
}

125 
__öô
 
	$öô
()

127 
i
, 
ªt
;

129 i‡(
p‹ts
[0] == 0)

130 
p‹ts
[0] = 
WMINITIAL
;

132 
i
 = 0; (ò< 
MAXWM_PORTS
Ë&& 
p‹ts
[i]; i++) {

133 
	`mem£t
(&
wm
[
i
], 0, (
ù_c⁄¡øck_hñ≥r
));

134 
wm
[
i
].
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[i]);

135 
wm
[
i
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

136 
wm
[
i
].
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

138 
wm
[
i
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

139 
wm
[
i
].
max_ex≥˘ed
 = 
WMMAXEXPECTED
;

140 
wm
[
i
].
timeout
 = 0;

141 
wm
[
i
].
Êags
 = 
IP_CT_HELPER_F_REUSE_EXPECT
;

142 
wm
[
i
].
me
 = 
ù_c⁄¡øck_wm
;

143 
wm
[
i
].
hñp
 = help;

145 
	`DEBUGP
("ip_conntrack_wm:Ñegistering helper forÖort %d\n",

146 
p‹ts
[
i
]);

147 
ªt
 = 
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(&
wm
[
i
]);

149 i‡(
ªt
) {

150 
	`föi
();

151 
	`¥ötk
("ip_conntrack_wm:Ñegistering helper forÖort FAILED \n");

152  
ªt
;

154 
p‹ts_c
++;

157 
	}
}

160 
MODULE_AUTHOR
("Eddie Shi <eddieshi@broadcom.com>");

161 
MODULE_DESCRIPTION
("Netfilter Conntrack helper for WM ");

162 
MODULE_LICENSE
("Proprietary");

164 
PROVIDES_CONNTRACK
(
wm
);

166 
moduÀ_öô
(
öô
);

167 
moduÀ_exô
(
föi
);

	@broadcom/ip_conntrack_wm.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@broadcom/ip_nat_dtx8.c

21 
	~<löux/moduÀ.h
>

22 
	~<löux/√tfûãr_ùv4.h
>

23 
	~<löux/ù.h
>

24 
	~<löux/udp.h
>

25 
	~<√t/udp.h
>

27 
	~<löux/√tfûãr.h
>

28 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

29 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

30 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_dtx8.h
>

31 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

32 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

34 
MODULE_AUTHOR
("Eddie Shi <eddieshi@broadcom.com>");

35 
MODULE_DESCRIPTION
("Netfilter NAT helper for DirectX8");

36 
MODULE_LICENSE
("Proprietary");

38 
	gp‹ts
[
MAXDTX8_PORTS
];

39 
	gp‹ts_c
 = 0;

40 #ifde‡
MODULE_PARM


41 
MODULE_PARM
(
p‹ts
,"1-" 
__MODULE_STRING
(
MAXDTX8_PORTS
) "i");

42 
MODULE_PARM_DESC
(
p‹ts
, "portÇumbers of dtx8");

46 
	#DEBUGP
 
¥ötk


	)

48 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

51 
	$hñp
(
ù_c⁄¡øck
 *
˘
,

52 
ù_c⁄¡øck_ex≥˘
 *
exp
,

53 
ù_«t_öfo
 *
öfo
,

54 
ù_c⁄¡øck_öfo
 
˘öfo
,

55 
hooknum
,

56 
sk_buff
 **
pskb
)

58 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

61 
ù_c⁄¡øck_tu∂e
 
ª∂
;

63 
	`DEBUGP
("............... dtx8 hooknum=%d\n",
hooknum
);

64 i‡(!((
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

65 || (
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
))) {

66 
	`DEBUGP
(" dtx8 hooknum=%dÑëu∫ NF_ACCEPT\n",
hooknum
);

67  
NF_ACCEPT
;

70 i‡(!
exp
) {

71 
	`¥ötk
("no conntrackÉxpectationÅo modify\n");

72 
	`DEBUGP
("no conntrackÉxpectationÅo modify\n");

73  
NF_ACCEPT
;

76 
	`DEBUGP
(" dtx8 .....................\n");

77 
ª∂
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
;

78 
ª∂
.
d°
.
u
.
udp
.
p‹t
 = 
exp
->
tu∂e
.dst.u.udp.port;

79 
ª∂
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

80 
	`DEBUGP
(" dtx8Ñïl.d°p‹t=%d\n",
	`ht⁄s
(
ª∂
.
d°
.
u
.
udp
.
p‹t
));

81 
	`DEBUGP
("\n");

82 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

83 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

85 
	`DEBUGP
("expecting:\n ");

86 
	`DUMP_TUPLE
(&
ª∂
);

87 
	`DUMP_TUPLE
(&
exp
->
mask
);

88 
	`DEBUGP
("dtx8:calling ip_conntrack_change_expect \n");

89 
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
exp
, &
ª∂
);

91  
NF_ACCEPT
;

92 
	}
}

95 
	$dtx8_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

96 
hooknum
,

97 
ù_c⁄¡øck
 *
˘
,

98 
ù_«t_öfo
 *
öfo
)

100 c⁄° 
ù_c⁄¡øck
 *
ma°î
 = 
˘
->ma°î->
ex≥˘™t
;

101 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
 =

102 &
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
;

103 
ù_«t_mu…i_ønge
 
mr
;

105 
	`DEBUGP
("dtx8_«t_ex≥˘ed hooknum=%d\n",
hooknum
);

106 
	`IP_NF_ASSERT
(
öfo
);

107 
	`IP_NF_ASSERT
(
ma°î
);

108 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))));

110 
mr
.
øngesize
 = 1;

111 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
;

119 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
) {

120 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
‹ig
->
d°
.
ù
;

121 
	`DEBUGP
("MANIPSRC:orig: %u.%u.%u.%u:%u <-> %u.%u.%u.%u:%u "

123 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
udph
->
sour˚
),

124 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
), 
	`¡ohs
(
udph
->
de°
),

125 
	`NIPQUAD
(
‹ig
->
d°
.
ù
));

127 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
‹ig
->
§c
.
ù
;

128 
mr
.
ønge
[0].
mö
.
udp
.
p‹t
 = mr.ønge[0].
max
.udp.port =

129 
‹ig
->
§c
.
u
.
udp
.
p‹t
;

132 
	`DEBUGP
("MANIPDST:orig: %u.%u.%u.%u:%u <-> %u.%u.%u.%u:%u "

134 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
udph
->
sour˚
),

135 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
), 
	`¡ohs
(
udph
->
de°
),

136 
	`NIPQUAD
(
‹ig
->
§c
.
ù
), 
	`¡ohs
(‹ig->§c.
u
.
udp
.
p‹t
));

139 
	`DEBUGP
("dtx8_nat_expected:calling ip_nat_setup_info\n");

140  
	`ù_«t_£tup_öfo
(
˘
,&
mr
,
hooknum
);

141 
	}
}

143 
ù_«t_hñ≥r
 
	gdtx8
[
MAXDTX8_PORTS
];

144 
	gdtx8_«mes
[
MAXDTX8_PORTS
][10];

146 
	$föi
()

148 
i
;

150 
i
 = 0 ; i < 
p‹ts_c
; i++) {

151 
	`DEBUGP
("uƒegi°îög hñ≥∏f‹Ö‹à%d\n", 
p‹ts
[
i
]);

152 
	`ù_«t_hñ≥r_uƒegi°î
(&
dtx8
[
i
]);

154 
	}
}

156 
__öô
 
	$öô
()

158 
i
, 
ªt
=0;

159 *
tm≤ame
;

161 i‡(!
p‹ts
[0])

162 
p‹ts
[0] = 
DTX8INITIAL
;

164 
i
 = 0 ; (ò< 
MAXDTX8_PORTS
Ë&& 
p‹ts
[i] ; i++) {

165 
	`mem£t
(&
dtx8
[
i
], 0, (
ù_«t_hñ≥r
));

167 
dtx8
[
i
].
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[i]);

168 
dtx8
[
i
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

169 
dtx8
[
i
].
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

170 
dtx8
[
i
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

171 
dtx8
[
i
].
hñp
 = help;

172 
dtx8
[
i
].
Êags
 = 0;

173 
dtx8
[
i
].
me
 = 
THIS_MODULE
;

174 
dtx8
[
i
].
ex≥˘
 = 
dtx8_«t_ex≥˘ed
;

176 
tm≤ame
 = &
dtx8_«mes
[
i
][0];

177 i‡(
p‹ts
[
i
] =
DTX8INITIAL
)

178 
	`•rötf
(
tm≤ame
, "dtx8");

180 
	`•rötf
(
tm≤ame
, "dtx8-%d", 
i
);

181 
dtx8
[
i
].
«me
 = 
tm≤ame
;

183 
	`DEBUGP
("ip_nat_dtx8:Ñegistering forÖort %d:Çame %s\n",

184 
p‹ts
[
i
], 
dtx8
[i].
«me
);

185 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(&
dtx8
[
i
]);

187 i‡(
ªt
) {

188 
	`¥ötk
("ip_nat_dtx8: unableÅoÑegister forÖort %d\n",

189 
p‹ts
[
i
]);

190 
	`föi
();

191  
ªt
;

193 
p‹ts_c
++;

195  
ªt
;

196 
	}
}

198 
moduÀ_öô
(
öô
);

199 
moduÀ_exô
(
föi
);

	@broadcom/ip_nat_ipsec.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/√tfûãr_ùv4.h
>

25 
	~<löux/ù.h
>

26 
	~<löux/udp.h
>

27 
	~<löux/t˝.h
>

28 
	~<√t/t˝.h
>

30 
	~<löux/√tfûãr.h
>

31 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

32 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

33 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

34 
	~<löux/√tfûãr_ùv4/ù_«t_ù£c.h
>

35 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_ù£c.h
>

36 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

38 
MODULE_AUTHOR
("Pavan Kumar <pavank@broadcom.com>");

39 
MODULE_DESCRIPTION
("Netfilter NAT helper for ipsec");

40 
MODULE_LICENSE
("Proprietary");

42 
	#MAX_PORTS
 64

	)

43 
	#UDP_HLEN
 8

	)

45 
	gp‹ts
[
MAX_PORTS
];

46 
	gp‹ts_c
 = 0;

47 #ifde‡
MODULE_PARM


48 
MODULE_PARM
(
p‹ts
,"1-" 
__MODULE_STRING
(
MAX_PORTS
) "i");

49 
MODULE_PARM_DESC
(
p‹ts
, "portÇumbers of IPSEC");

53 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(
__FILE__
 ":" 
__FUNCTION__
 ": " \

54 
f‹m©
, ## 
¨gs
)

	)

56 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

59 
	$ù£c_«t_hñp
(
ù_c⁄¡øck
 *
˘
,

60 
ù_c⁄¡øck_ex≥˘
 *
exp
,

61 
ù_«t_öfo
 *
öfo
,

62 
ù_c⁄¡øck_öfo
 
˘öfo
,

63 
hooknum
,

64 
sk_buff
 **
pskb
)

66 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

67 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

68 
udphdr
 *
udph
 = (*)
ùh
 + iph->
ihl
 * 4;

69 
ù_«t_ù£c_öfo
 *
«t
 = &
˘
->«t.
hñp
.
ù£c_öfo
;

75 i‡(!((
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

76 || (
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
)))

77  
NF_ACCEPT
;

83 
	`LOCK_BH
(&
ù_ù£c_lock
);

84 if(
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

89 
udph
->
de°
 = 
	`ht⁄s
(
IPSEC_UDP_PORT
);

90 
udph
->
check
 = 0;

102 if(
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
)

108 
udph
->
de°
 = 
	`ht⁄s
(
IPSEC_UDP_PORT
);

109 
ùh
->
daddr
 = 
	`ht⁄l
(
«t
->
ßddr
);

110 
udph
->
check
 = 0;

115 
	`UNLOCK_BH
(&
ù_ù£c_lock
);

117  
NF_ACCEPT
;

118 
	}
}

121 
	$ù£c_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

122 
hooknum
,

123 
ù_c⁄¡øck
 *
˘
,

124 
ù_«t_öfo
 *
öfo
)

126 c⁄° 
ù_c⁄¡øck
 *
ma°î
 = 
˘
->ma°î->
ex≥˘™t
;

127 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
 =

128 &
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
;

129 
ù_«t_mu…i_ønge
 
mr
;

133 
	`IP_NF_ASSERT
(
öfo
);

134 
	`IP_NF_ASSERT
(
ma°î
);

135 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))));

137 
mr
.
øngesize
 = 1;

138 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
;

140 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
) {

141 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
‹ig
->
d°
.
ù
;

148 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
‹ig
->
§c
.
ù
;

149 
mr
.
ønge
[0].
mö
.
udp
.
p‹t
 = mr.ønge[0].
max
.udp.port =

150 
‹ig
->
§c
.
u
.
udp
.
p‹t
;

151 
mr
.
ønge
[0].
Êags
 |
IP_NAT_RANGE_PROTO_SPECIFIED
;

160  
	`ù_«t_£tup_öfo
(
˘
,&
mr
,
hooknum
);

161 
	}
}

163 
ù_«t_hñ≥r
 
	gù£c
[
MAX_PORTS
];

164 
	gù£c_«mes
[
MAX_PORTS
][10];

166 
	$föi
()

168 
i
;

170 
i
 = 0 ; i < 
p‹ts_c
; i++) {

173 
	`ù_«t_hñ≥r_uƒegi°î
(&
ù£c
[
i
]);

175 
	}
}

177 
__öô
 
	$öô
()

179 
i
, 
ªt
 = 0;

180 *
tm≤ame
;

182 i‡(!
p‹ts
[0])

183 
p‹ts
[0] = 
IPSEC_UDP_PORT
;

185 
i
 = 0 ; (ò< 
MAX_PORTS
Ë&& 
p‹ts
[i] ; i++) {

186 
ù£c
[
i
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

187 
ù£c
[
i
].
tu∂e
.
§c
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[i]);

188 
ù£c
[
i
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

189 
ù£c
[
i
].
mask
.
§c
.
u
.
udp
.
p‹t
 = 0xFFFF;

190 
ù£c
[
i
].
hñp
 = 
ù£c_«t_hñp
;

191 
ù£c
[
i
].
Êags
 = 0;

192 
ù£c
[
i
].
me
 = 
THIS_MODULE
;

193 
ù£c
[
i
].
ex≥˘
 = 
ù£c_«t_ex≥˘ed
;

195 
tm≤ame
 = &
ù£c_«mes
[
i
][0];

196 i‡(
p‹ts
[
i
] =
IPSEC_UDP_PORT
)

197 
	`•rötf
(
tm≤ame
, "ipsec");

199 
	`•rötf
(
tm≤ame
, "ù£c-%d", 
i
);

200 
ù£c
[
i
].
«me
 = 
tm≤ame
;

204 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(&
ù£c
[
i
]);

206 i‡(
ªt
) {

209 
	`föi
();

210  
ªt
;

212 
p‹ts_c
++;

214  
ªt
;

215 
	}
}

217 
moduÀ_öô
(
öô
);

218 
moduÀ_exô
(
föi
);

	@broadcom/ip_nat_ipsec.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@broadcom/ip_nat_pt.c

20 
	~<löux/moduÀ.h
>

21 
	~<löux/moduÀ∑øm.h
>

22 
	~<löux/√tfûãr_ùv4.h
>

23 
	~<löux/ù.h
>

24 
	~<löux/udp.h
>

25 
	~<√t/udp.h
>

27 
	~<löux/√tfûãr.h
>

28 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

29 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

30 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

31 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

33 
MODULE_AUTHOR
("Eddie Shi <eddieshi@broadcom.com>");

34 
MODULE_DESCRIPTION
("Netfilter NAT helper for PT ");

35 
MODULE_LICENSE
("Proprietary");

50 
	gouç‹t
[300];

51 
	göp‹t
[300];

52 
	gíåõs
;

53 
	goutcou¡
;

54 
	göcou¡
;

55 
u_öt16_t
 
	gÁûed_p‹t
=0;

58 
MODULE_PARM
(
ouç‹t
,"0-" "i");

59 
MODULE_PARM
(
öp‹t
,"0-" "i");

60 
MODULE_PARM
(
íåõs
,"i");

63 
moduÀ_∑øm_¨øy
(
ouç‹t
,,
outcou¡
,0);

64 
moduÀ_∑øm_¨øy
(
öp‹t
,,
öcou¡
,0);

65 
moduÀ_∑øm
(
íåõs
,,0);

67 
	#MAXPT_PORTS
 1000

	)

68 
	#PTMAXEXPECTED
 1000

	)

69 
	#MAXENTRIES
 200

	)

71 
	gªgi°îed_p‹t
=0;

73 
	s±_ªc‹d
 {

74 
	mouç‹t
[2];

75 
	möp‹t
[2];

76 
	mouçrŸo
;

77 
	mö¥Ÿo
;

80 
±_ªc‹d
 
	g±_ªc‹d
[
MAXENTRIES
];

83 
	#DEBUGP
 
¥ötk


	)

85 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

88 
	$hñp
(
ù_c⁄¡øck
 *
˘
,

89 
ù_c⁄¡øck_ex≥˘
 *
exp
,

90 
ù_«t_öfo
 *
öfo
,

91 
ù_c⁄¡øck_öfo
 
˘öfo
,

92 
hooknum
,

93 
sk_buff
 **
pskb
)

95 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

98 
ù_c⁄¡øck_tu∂e
 
ª∂
;

100 
	`DEBUGP
("...............Öt_«t_hñ∞hooknum=%d\n",
hooknum
);

101 i‡(!((
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

102 || (
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
))) {

103 
	`DEBUGP
("Öt_«t_hñ∞hooknum=%dÑëu∫ NF_ACCEPT\n",
hooknum
);

104  
NF_ACCEPT
;

107 i‡(!
exp
) {

108 
	`DEBUGP
("no conntrackÉxpectationÅo modify\n");

109  
NF_ACCEPT
;

112 
	`DEBUGP
("Öt_nat_help .....................\n");

113 
ª∂
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
;

114 
ª∂
.
d°
.
u
.
Æl
 = 
exp
->
tu∂e
.dst.u.all;

115 
	`DEBUGP
("Öt_«t_hñ∞ª∂.d°p‹t=%d\n",
	`ht⁄s
(
ª∂
.
d°
.
u
.
Æl
));

116 
	`DEBUGP
("\n");

117 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

118 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

120 
	`DEBUGP
("expecting:\n ");

121 
	`DUMP_TUPLE
(&
ª∂
);

122 
	`DUMP_TUPLE
(&
exp
->
mask
);

123 
	`DEBUGP
("pt_nat_help:calling ip_conntrack_change_expect \n");

124 
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
exp
, &
ª∂
);

126  
NF_ACCEPT
;

127 
	}
}

130 
	$±_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

131 
hooknum
,

132 
ù_c⁄¡øck
 *
˘
,

133 
ù_«t_öfo
 *
öfo
)

135 c⁄° 
ù_c⁄¡øck
 *
ma°î
 = 
˘
->ma°î->
ex≥˘™t
;

136 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
 =

137 &
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
;

138 
ù_«t_mu…i_ønge
 
mr
;

140 
	`DEBUGP
("±_«t_ex≥˘ed hooknum=%d\n",
hooknum
);

141 
	`IP_NF_ASSERT
(
öfo
);

142 
	`IP_NF_ASSERT
(
ma°î
);

143 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))));

145 
mr
.
øngesize
 = 1;

146 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
;

149 c⁄° 
ù_c⁄¡øck_tu∂e
 *
ª∂
 =

150 &
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
;

151 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

152 
udphdr
 *
udph
 = (*)
ùh
 + iph->
ihl
*4;

154 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
) {

156 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = (*
pskb
)->
nh
.
ùh
->
ßddr
;

157 
	`DEBUGP
("MANIPSRC:orig: %u.%u.%u.%u:%u <-> %u.%u.%u.%u:%u "

159 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
udph
->
sour˚
),

160 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
), 
	`¡ohs
(
udph
->
de°
),

161 
	`NIPQUAD
(
‹ig
->
d°
.
ù
));

163 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
‹ig
->
§c
.
ù
;

164 
mr
.
ønge
[0].
mö
.
Æl
 = mr.ønge[0].
max
.all =

165 
‹ig
->
§c
.
u
.
Æl
;

168 
	`DEBUGP
("MANIPDST:orig: %u.%u.%u.%u:%u <-> %u.%u.%u.%u:%u "

170 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
udph
->
sour˚
),

171 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
), 
	`¡ohs
(
udph
->
de°
),

172 
	`NIPQUAD
(
‹ig
->
§c
.
ù
), 
	`¡ohs
(‹ig->§c.
u
.
udp
.
p‹t
));

175 
	`DEBUGP
("pt_nat_expected:calling ip_nat_setup_info\n");

176  
	`ù_«t_£tup_öfo
(
˘
,&
mr
,
hooknum
);

177 
	}
}

179 
ù_«t_hñ≥r
 
	g±
[
MAXPT_PORTS
];

181 
	$föi
()

183 
i
;

185 i‡(
Áûed_p‹t
 == 0)

186 
i
 = 0 ; i < 
ªgi°îed_p‹t
; i++) {

187 
	`DEBUGP
("uƒegi°îög hñ≥∏f‹Ö‹à%d\n", 
	`¡ohs
(
±
[
i
].
tu∂e
.
§c
.
u
.
Æl
));

188 
	`ù_«t_hñ≥r_uƒegi°î
(&
±
[
i
]);

191 
i
 = 0; i < 
ªgi°îed_p‹t
-1; i++) {

192 
	`DEBUGP
("uƒegi°îög hñ≥∏f‹Ö‹à%d\n", 
	`¡ohs
(
±
[
i
].
tu∂e
.
§c
.
u
.
Æl
));

193 
	`ù_«t_hñ≥r_uƒegi°î
(&
±
[
i
]);

195 
	}
}

196 
	$dump_±_ªc‹d
()

198 
i
;

200 
i
=0; i < 
íåõs
; i++) {

201 
	`¥ötk
("íåy %d: \n",
i
);

202 
	`¥ötk
("¥Ÿÿ%d: outgoög: %d - %d\n",
±_ªc‹d
[
i
].
ouçrŸo
,±_ªc‹d[i].
ouç‹t
[0],pt_record[i].outport[1]);

203 
	`¥ötk
("¥Ÿÿ%d: incomög: %d - %d\n",
±_ªc‹d
[
i
].
ö¥Ÿo
,±_ªc‹d[i].
öp‹t
[0],pt_record[i].inport[1]);

204 
	`¥ötk
("\n");

207 
	}
}

209 
	$n‹mÆize
()

211 
i
;

213 
	`DEBUGP
("n‹mÆize:É¡rõs=%d \n",
íåõs
);

214 i‡(
íåõs
 > 
MAXENTRIES
) {

215 
íåõs
 = 
MAXENTRIES
;

216 
	`¥ötk
("ù_c⁄¡øck_±: O∆y suµ‹à maximumÇumbî o‡íåõ†%d \n",
MAXENTRIES
);

218  
i
=0; i< 
íåõs
 ; i++ ) {

220 
±_ªc‹d
[
i
].
ouçrŸo
=
ouç‹t
[3*i];

221 
±_ªc‹d
[
i
].
ouç‹t
[0]=outport[3*i + 1];

222 
±_ªc‹d
[
i
].
ouç‹t
[1]=outport[3*i + 2];

224 
±_ªc‹d
[
i
].
ö¥Ÿo
=
öp‹t
[3*i];

225 
±_ªc‹d
[
i
].
öp‹t
[0]=inport[3*i + 1];

226 
±_ªc‹d
[
i
].
öp‹t
[1]=inport[3*i + 2];

228 
	`dump_±_ªc‹d
();

230 
	}
}

243 
	$check_p‹t
(
p‹t
)

245 i‡(
p‹t
 == 21 ||

246 
p‹t
 == 6667 ||

247 
p‹t
 == 69 ||

248 
p‹t
 == 161 ||

249 
p‹t
 == 162 ||

250 
p‹t
 == 517 ||

251 
p‹t
 == 518 ||

252 
p‹t
 == 1720 ||

253 
p‹t
 == 1723 ||

254 
p‹t
 == 80)

258 
	}
}

260 
__öô
 
	$öô
()

262 
i
, 
ªt
=0;

263 
u_öt16_t
 
p‹t
;

265 
i
 = 0; i < 
MAXPT_PORTS
; i++) {

266 
	`mem£t
(&
±
[
i
], 0, (
ù_«t_hñ≥r
));

268 
	`n‹mÆize
();

269 
i
 = 0; i < 
íåõs
 && 
ªgi°îed_p‹t
 < 
MAXPT_PORTS
; i++) {

270 
p‹t
 = 
±_ªc‹d
[
i
].
ouç‹t
[0];Öort <=Öt_record[i].outport[1];Öort++ ) {

271 
±
[
ªgi°îed_p‹t
].
hñp
 = help;

272 
±
[
ªgi°îed_p‹t
].
Êags
 = 0;

273 
±
[
ªgi°îed_p‹t
].
me
 = 
THIS_MODULE
;

274 
±
[
ªgi°îed_p‹t
].
ex≥˘
 = 
±_«t_ex≥˘ed
;

276 i‡–
±_ªc‹d
[
i
].
ouçrŸo
 == 1 ) {

278 
±
[
ªgi°îed_p‹t
].
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(port);

279 
±
[
ªgi°îed_p‹t
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

280 
±
[
ªgi°îed_p‹t
].
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

281 
±
[
ªgi°îed_p‹t
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

283 i‡–
±_ªc‹d
[
i
].
ouçrŸo
 == 2 ) {

285 
±
[
ªgi°îed_p‹t
].
tu∂e
.
§c
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(port);

286 
±
[
ªgi°îed_p‹t
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

287 
±
[
ªgi°îed_p‹t
].
mask
.
§c
.
u
.
udp
.
p‹t
 = 0xFFFF;

288 
±
[
ªgi°îed_p‹t
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

292 
±
[
ªgi°îed_p‹t
].
tu∂e
.
§c
.
u
.
Æl
 = 
	`ht⁄s
(
p‹t
)<<48;

293 
±
[
ªgi°îed_p‹t
].
mask
.
§c
.
u
.
Æl
 = 0xFFFFFFFFFFFFFFFF;

294 
±
[
ªgi°îed_p‹t
].
mask
.
d°
.
¥Ÿ⁄um
 = 0;

296 
	`DEBUGP
("ù_«t_±:Ñegi°îög f‹Öt:%d \n",
p‹t
);

297 i‡–
	`check_p‹t
(
p‹t
))

298 
	`¥ötk
("ù_«t_±: c™nŸÑegi°îÖ‹à%d (ÆªadyÑegi°îed by othî moduÀs)\n",
p‹t
);

300 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(&
±
[
ªgi°îed_p‹t
++]);

302 i‡–
ªt
 < 0Ë
ªgi°îed_p‹t
--;

304 if–
ªgi°îed_p‹t
 >
MAXPT_PORTS
 ) {

305 
	`¥ötk
( "NATÖort forwardingÅable is full. RemainingÉntriesáreÇotÖrocessed.\n" );

306 
±_ªc‹d
[
i
].
ouç‹t
[1] = 
p‹t
;

307 
íåõs
 = 
i
 + 1;

313 i‡(
ªt
) {

314 
Áûed_p‹t
=
p‹t
;

315 
	`¥ötk
("ù_«t_±:Ö‹à%dÑegi°î FAILED,p‹àÆªadyÑegi°îed \n",
p‹t
);

316 
	`föi
();

317  
ªt
;

325 
	}
}

326 
NEEDS_CONNTRACK
(
±
);

328 
moduÀ_öô
(
öô
);

329 
moduÀ_exô
(
föi
);

	@broadcom/ip_nat_pt.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@broadcom/ip_nat_wm.c

19 
	~<löux/moduÀ.h
>

20 
	~<löux/√tfûãr_ùv4.h
>

21 
	~<löux/ù.h
>

22 
	~<löux/udp.h
>

23 
	~<√t/udp.h
>

25 
	~<löux/√tfûãr.h
>

26 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

27 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

28 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_wm.h
>

29 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

30 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

33 
MODULE_AUTHOR
("Eddie Shi <eddieshi@broadcom.com>");

34 
MODULE_DESCRIPTION
("Netfilter NAT helper for WM");

35 
MODULE_LICENSE
("Proprietary");

37 
	gp‹ts
[
MAXWM_PORTS
];

38 
	gp‹ts_c
 = 0;

39 #ifde‡
MODULE_PARM


40 
MODULE_PARM
(
p‹ts
,"1-" 
__MODULE_STRING
(
MAXWM_PORTS
) "i");

41 
MODULE_PARM_DESC
(
p‹ts
, "portÇumbers of wm");

45 
	#DEBUGP
 
¥ötk


	)

47 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

50 
	$hñp
(
ù_c⁄¡øck
 *
˘
,

51 
ù_c⁄¡øck_ex≥˘
 *
exp
,

52 
ù_«t_öfo
 *
öfo
,

53 
ù_c⁄¡øck_öfo
 
˘öfo
,

54 
hooknum
,

55 
sk_buff
 **
pskb
)

57 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

60 
ù_c⁄¡øck_tu∂e
 
ª∂
;

63 i‡(!((
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

64 || (
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
))) {

65 
	`DEBUGP
(" wm«àhooknum=%dÑëu∫ NF_ACCEPT\n",
hooknum
);

66  
NF_ACCEPT
;

69 i‡(!
exp
) {

71 
	`DEBUGP
("no conntrackÉxpectationÅo modify\n");

72  
NF_ACCEPT
;

75 
	`DEBUGP
(" wm_nat_help.....................\n");

76 
ª∂
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
;

77 
ª∂
.
d°
.
u
.
udp
.
p‹t
 = 
exp
->
tu∂e
.dst.u.udp.port;

78 
ª∂
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

80 
	`DEBUGP
("\n");

81 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

82 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

84 
	`DEBUGP
("expecting:\n ");

85 
	`DUMP_TUPLE
(&
ª∂
);

86 
	`DUMP_TUPLE
(&
exp
->
mask
);

88 
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
exp
, &
ª∂
);

90  
NF_ACCEPT
;

91 
	}
}

94 
	$wm_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

95 
hooknum
,

96 
ù_c⁄¡øck
 *
˘
,

97 
ù_«t_öfo
 *
öfo
)

99 c⁄° 
ù_c⁄¡øck
 *
ma°î
 = 
˘
->ma°î->
ex≥˘™t
;

100 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
 =

101 &
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
;

102 
ù_«t_mu…i_ønge
 
mr
;

105 
	`IP_NF_ASSERT
(
öfo
);

106 
	`IP_NF_ASSERT
(
ma°î
);

107 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))));

109 
mr
.
øngesize
 = 1;

110 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
;

118 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
) {

119 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
‹ig
->
d°
.
ù
;

120 
	`DEBUGP
("MANIPSRC:orig: %u.%u.%u.%u:%u <-> %u.%u.%u.%u:%u "

122 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
udph
->
sour˚
),

123 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
), 
	`¡ohs
(
udph
->
de°
),

124 
	`NIPQUAD
(
‹ig
->
d°
.
ù
));

126 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
‹ig
->
§c
.
ù
;

127 
mr
.
ønge
[0].
mö
.
udp
.
p‹t
 = mr.ønge[0].
max
.udp.port =

128 
‹ig
->
§c
.
u
.
udp
.
p‹t
;

131 
	`DEBUGP
("MANIPDST:orig: %u.%u.%u.%u:%u <-> %u.%u.%u.%u:%u "

133 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
udph
->
sour˚
),

134 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
), 
	`¡ohs
(
udph
->
de°
),

135 
	`NIPQUAD
(
‹ig
->
§c
.
ù
), 
	`¡ohs
(‹ig->§c.
u
.
udp
.
p‹t
));

138 
	`DEBUGP
("wm_nat_expected:calling ip_nat_setup_info\n");

139  
	`ù_«t_£tup_öfo
(
˘
,&
mr
,
hooknum
);

140 
	}
}

142 
ù_«t_hñ≥r
 
	gwm
[
MAXWM_PORTS
];

143 
	gwm_«mes
[
MAXWM_PORTS
][10];

145 
	$föi
()

147 
i
;

149 
i
 = 0 ; i < 
p‹ts_c
; i++) {

150 
	`DEBUGP
("uƒegi°îög hñ≥∏f‹Ö‹à%d\n", 
p‹ts
[
i
]);

151 
	`ù_«t_hñ≥r_uƒegi°î
(&
wm
[
i
]);

153 
	}
}

155 
__öô
 
	$öô
()

157 
i
, 
ªt
=0;

158 *
tm≤ame
;

160 i‡(!
p‹ts
[0])

161 
p‹ts
[0] = 
WMINITIAL
;

163 
i
 = 0 ; (ò< 
MAXWM_PORTS
Ë&& 
p‹ts
[i] ; i++) {

164 
	`mem£t
(&
wm
[
i
], 0, (
ù_«t_hñ≥r
));

166 
wm
[
i
].
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[i]);

167 
wm
[
i
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

168 
wm
[
i
].
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

169 
wm
[
i
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

170 
wm
[
i
].
hñp
 = help;

171 
wm
[
i
].
Êags
 = 0;

172 
wm
[
i
].
me
 = 
THIS_MODULE
;

173 
wm
[
i
].
ex≥˘
 = 
wm_«t_ex≥˘ed
;

175 
tm≤ame
 = &
wm_«mes
[
i
][0];

176 i‡(
p‹ts
[
i
] =
WMINITIAL
)

177 
	`•rötf
(
tm≤ame
, "wm");

179 
	`•rötf
(
tm≤ame
, "wm-%d", 
i
);

180 
wm
[
i
].
«me
 = 
tm≤ame
;

182 
	`DEBUGP
("ip_nat_wm:Ñegistering forÖort %d:Çame %s\n",

183 
p‹ts
[
i
], 
wm
[i].
«me
);

184 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(&
wm
[
i
]);

186 i‡(
ªt
) {

187 
	`¥ötk
("ip_nat_wm: unableÅoÑegister forÖort %d\n",

188 
p‹ts
[
i
]);

189 
	`föi
();

190  
ªt
;

192 
p‹ts_c
++;

194  
ªt
;

195 
	}
}

197 
moduÀ_öô
(
öô
);

198 
moduÀ_exô
(
föi
);

	@broadcom/ip_nat_wm.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_conntrack.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_conntrack_amanda.c

21 
	~<löux/kî√l.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/√tfûãr.h
>

24 
	~<löux/ù.h
>

25 
	~<√t/checksum.h
>

26 
	~<√t/udp.h
>

28 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

29 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

30 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_am™da.h
>

32 
	gma°î_timeout
 = 300;

34 
MODULE_AUTHOR
("Brian J. Murrell <netfilter@interlinx.bc.ca>");

35 
MODULE_DESCRIPTION
("Amanda connectionÅracking module");

36 
MODULE_LICENSE
("GPL");

37 
MODULE_PARM
(
ma°î_timeout
, "i");

38 
MODULE_PARM_DESC
(
ma°î_timeout
, "timeout forÅhe master connection");

40 *
	gc⁄ns
[] = { "DATA ", "MESG ", "INDEX " };

43 
	gam™da_buf„r
[65536];

44 
DECLARE_LOCK
(
am™da_buf„r_lock
);

46 
	$hñp
(
sk_buff
 *
skb
,

47 
ù_c⁄¡øck
 *
˘
, 
ù_c⁄¡øck_öfo
 
˘öfo
)

49 
ù_c⁄¡øck_ex≥˘
 *
exp
;

50 
ù_˘_am™da_ex≥˘
 *
exp_am™da_öfo
;

51 *
d©a
, *
d©a_limô
, *
tmp
;

52 
d©aoff
, 
i
;

53 
u_öt16_t
 
p‹t
, 
Àn
;

56 i‡(
	`CTINFO2DIR
(
˘öfo
Ë=
IP_CT_DIR_ORIGINAL
)

57  
NF_ACCEPT
;

61 
	`ù_˘_ª‰esh
(
˘
, 
ma°î_timeout
 * 
HZ
);

64 
d©aoff
 = 
skb
->
nh
.
ùh
->
ihl
*4 + (
udphdr
);

65 i‡(
d©aoff
 >
skb
->
Àn
) {

66 i‡(
	`√t_øãlimô
())

67 
	`¥ötk
("am™da_hñp: skbÀ¿%u\n", 
skb
->
Àn
);

68  
NF_ACCEPT
;

71 
	`LOCK_BH
(&
am™da_buf„r_lock
);

72 
	`skb_c›y_bôs
(
skb
, 
d©aoff
, 
am™da_buf„r
, skb->
Àn
 - dataoff);

73 
d©a
 = 
am™da_buf„r
;

74 
d©a_limô
 = 
am™da_buf„r
 + 
skb
->
Àn
 - 
d©aoff
;

75 *
d©a_limô
 = '\0';

78 
d©a
 = 
	`°r°r
(data, "CONNECT ");

79 i‡(!
d©a
)

80 
out
;

81 
d©a
 +
	`°æí
("CONNECT ");

84 i‡((
tmp
 = 
	`°rchr
(
d©a
, '\n')))

85 *
tmp
 = '\0';

87 
i
 = 0; i < 
	`ARRAY_SIZE
(
c⁄ns
); i++) {

88 *
m©ch
 = 
	`°r°r
(
d©a
, 
c⁄ns
[
i
]);

89 i‡(!
m©ch
)

91 
tmp
 = 
d©a
 = 
m©ch
 + 
	`°æí
(
c⁄ns
[
i
]);

92 
p‹t
 = 
	`sim∂e_°πoul
(
d©a
, &data, 10);

93 
Àn
 = 
d©a
 - 
tmp
;

94 i‡(
p‹t
 =0 || 
Àn
 > 5)

97 
exp
 = 
	`ù_c⁄¡øck_ex≥˘_Æloc
();

98 i‡(
exp
 =
NULL
)

99 
out
;

101 
exp
->
tu∂e
.
§c
.
ù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].tuple.src.ip;

102 
exp
->
tu∂e
.
d°
.
ù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].tuple.dst.ip;

103 
exp
->
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

104 
exp
->
mask
.
§c
.
ù
 = 0xFFFFFFFF;

105 
exp
->
mask
.
d°
.
ù
 = 0xFFFFFFFF;

106 
exp
->
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

107 
exp
->
mask
.
d°
.
u
.
t˝
.
p‹t
 = 0xFFFF;

109 
exp_am™da_öfo
 = &
exp
->
hñp
.exp_amanda_info;

110 
exp_am™da_öfo
->
off£t
 = 
tmp
 - 
am™da_buf„r
;

111 
exp_am™da_öfo
->
p‹t
 =Öort;

112 
exp_am™da_öfo
->
Àn
 =Üen;

114 
exp
->
tu∂e
.
d°
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(port);

116 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(
exp
, 
˘
);

119 
out
:

120 
	`UNLOCK_BH
(&
am™da_buf„r_lock
);

121  
NF_ACCEPT
;

122 
	}
}

124 
ù_c⁄¡øck_hñ≥r
 
	gam™da_hñ≥r
 = {

125 .
max_ex≥˘ed
 = 
ARRAY_SIZE
(
c⁄ns
),

126 .
	gtimeout
 = 180,

127 .
	gÊags
 = 
IP_CT_HELPER_F_REUSE_EXPECT
,

128 .
	gme
 = 
THIS_MODULE
,

129 .
	ghñp
 = 
hñp
,

130 .
	g«me
 = "amanda",

132 .
	gtu∂e
 = { .
§c
 = { .
u
 = { 
__c⁄°™t_ht⁄s
(10080) } },

133 .
	gd°
 = { .
¥Ÿ⁄um
 = 
IPPROTO_UDP
 },

135 .
	gmask
 = { .
§c
 = { .
u
 = { 0xFFFF } },

136 .
	gd°
 = { .
¥Ÿ⁄um
 = 0xFFFF },

140 
__exô
 
	$föi
()

142 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
am™da_hñ≥r
);

143 
	}
}

145 
__öô
 
	$öô
()

147  
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(&
am™da_hñ≥r
);

148 
	}
}

150 
PROVIDES_CONNTRACK
(
am™da
);

151 
moduÀ_öô
(
öô
);

152 
moduÀ_exô
(
föi
);

	@ip_conntrack_core.c

20 
	~<löux/c⁄fig.h
>

21 
	~<löux/ty≥s.h
>

22 
	~<löux/icmp.h
>

23 
	~<löux/ù.h
>

24 
	~<löux/√tfûãr.h
>

25 
	~<löux/√tfûãr_ùv4.h
>

26 
	~<löux/moduÀ.h
>

27 
	~<löux/skbuff.h
>

28 
	~<löux/¥oc_fs.h
>

29 
	~<löux/vmÆloc.h
>

30 
	~<√t/checksum.h
>

31 
	~<√t/ù.h
>

32 
	~<löux/°ddef.h
>

33 
	~<löux/sys˘l.h
>

34 
	~<löux/¶ab.h
>

35 
	~<löux/øndom.h
>

36 
	~<löux/jhash.h
>

38 
	~<löux/fs.h
>

42 
	#ASSERT_READ_LOCK
(
x
Ë
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_lock
)

	)

43 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`MUST_BE_WRITE_LOCKED
(&
ù_c⁄¡øck_lock
)

	)

45 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

46 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿocﬁ.h
>

47 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

48 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_c‹e.h
>

49 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

51 
	#IP_CONNTRACK_VERSION
 "2.1"

	)

54 
	#DEBUGP
 
¥ötk


	)

56 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

59 
DECLARE_RWLOCK
(
ù_c⁄¡øck_lock
);

60 
DECLARE_RWLOCK
(
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

62 (*
ù_c⁄¡øck_de°royed
)(
ù_c⁄¡øck
 *
c⁄¡øck
Ë
NULL
;

63 
	`LIST_HEAD
(
ù_c⁄¡øck_ex≥˘_li°
);

64 
	`LIST_HEAD
(
¥Ÿocﬁ_li°
);

65 
	`LIST_HEAD
(
hñ≥rs
);

66 
ù_c⁄¡øck_hèbÀ_size
 = 0;

67 #ifde‡
CONFIG_MIPS_BRCM


68 
ù_c⁄¡øck_max
=0;

70 
ù_c⁄¡øck_max
=0;

72 
©omic_t
 
ù_c⁄¡øck_cou¡
 = 
	`ATOMIC_INIT
(0);

73 
li°_hód
 *
ù_c⁄¡øck_hash
;

74 
kmem_ˇche_t
 *
ù_c⁄¡øck_ˇchï
;

75 
ù_c⁄¡øck
 
ù_c⁄¡øck_u¡øcked
;

77 
ù_c⁄¡øck_¥Ÿocﬁ
 
ù_c⁄¡øck_gíîic_¥Ÿocﬁ
;

79 
ölöe
 
	$¥Ÿo_cmp‚
(c⁄° 
ù_c⁄¡øck_¥Ÿocﬁ
 *
cuº
,

80 
u_öt8_t
 
¥Ÿocﬁ
)

82  
¥Ÿocﬁ
 =
cuº
->
¥Ÿo
;

83 
	}
}

85 
ù_c⁄¡øck_¥Ÿocﬁ
 *
	$__ù_˘_föd_¥Ÿo
(
u_öt8_t
 
¥Ÿocﬁ
)

87 
ù_c⁄¡øck_¥Ÿocﬁ
 *
p
;

89 
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_lock
);

90 
p
 = 
	`LIST_FIND
(&
¥Ÿocﬁ_li°
, 
¥Ÿo_cmp‚
,

91 
ù_c⁄¡øck_¥Ÿocﬁ
 *, 
¥Ÿocﬁ
);

92 i‡(!
p
)

93 
p
 = &
ù_c⁄¡øck_gíîic_¥Ÿocﬁ
;

95  
p
;

96 
	}
}

98 
ù_c⁄¡øck_¥Ÿocﬁ
 *
	$ù_˘_föd_¥Ÿo
(
u_öt8_t
 
¥Ÿocﬁ
)

100 
ù_c⁄¡øck_¥Ÿocﬁ
 *
p
;

102 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

103 
p
 = 
	`__ù_˘_föd_¥Ÿo
(
¥Ÿocﬁ
);

104 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

105  
p
;

106 
	}
}

108 
ölöe
 

109 
	$ù_c⁄¡øck_put
(
ù_c⁄¡øck
 *
˘
)

111 
	`IP_NF_ASSERT
(
˘
);

112 
	`IP_NF_ASSERT
(
˘
->
öfos
[0].
ma°î
);

115 
	`nf_c⁄¡øck_put
(&
˘
->
öfos
[0]);

116 
	}
}

118 
	gù_c⁄¡øck_hash_∫d_öôãd
;

119 
	gù_c⁄¡øck_hash_∫d
;

121 
u_öt32_t


122 
	$hash_c⁄¡øck
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

125 
	`dump_tu∂e
(
tu∂e
);

127  (
	`jhash_3w‹ds
(
tu∂e
->
§c
.
ù
,

128 (
tu∂e
->
d°
.
ù
 ^Åu∂e->d°.
¥Ÿ⁄um
),

129 (
tu∂e
->
§c
.
u
.
Æl
 | (tu∂e->
d°
.u.all << 16)),

130 
ù_c⁄¡øck_hash_∫d
Ë% 
ù_c⁄¡øck_hèbÀ_size
);

131 
	}
}

134 
	$gë_tu∂e
(c⁄° 
ùhdr
 *
ùh
,

135 c⁄° 
sk_buff
 *
skb
,

136 
d©aoff
,

137 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

138 c⁄° 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿocﬁ
)

141 i‡(
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_OFFSET
)) {

142 
	`¥ötk
("ip_conntrack_core: Frag ofÖroto %u.\n",

143 
ùh
->
¥Ÿocﬁ
);

147 
tu∂e
->
§c
.
ù
 = 
ùh
->
ßddr
;

148 
tu∂e
->
d°
.
ù
 = 
ùh
->
daddr
;

149 
tu∂e
->
d°
.
¥Ÿ⁄um
 = 
ùh
->
¥Ÿocﬁ
;

150 
tu∂e
->
§c
.
u
.
Æl
 =Åu∂e->
d°
.u.all = 0;

152  
¥Ÿocﬁ
->
	`pkt_to_tu∂e
(
skb
, 
d©aoff
, 
tu∂e
);

153 
	}
}

156 
	$övît_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
övî£
,

157 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
,

158 c⁄° 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿocﬁ
)

160 
övî£
->
§c
.
ù
 = 
‹ig
->
d°
.ip;

161 
övî£
->
d°
.
ù
 = 
‹ig
->
§c
.ip;

162 
övî£
->
d°
.
¥Ÿ⁄um
 = 
‹ig
->dst.protonum;

164 
övî£
->
§c
.
u
.
Æl
 = invî£->
d°
.u.all = 0;

166  
¥Ÿocﬁ
->
	`övît_tu∂e
(
övî£
, 
‹ig
);

167 
	}
}

173 
ölöe
 
	$ex≥˘_cmp
(c⁄° 
ù_c⁄¡øck_ex≥˘
 *
i
,

174 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

176 
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

177  
	`ù_˘_tu∂e_mask_cmp
(
tu∂e
, &
i
->tu∂e, &i->
mask
);

178 
	}
}

181 
	$de°roy_ex≥˘
(
ù_c⁄¡øck_ex≥˘
 *
exp
)

183 
	`DEBUGP
("de°roy_ex≥˘(%pËu£=%d\n", 
exp
, 
	`©omic_ªad
(&exp->
u£
));

184 
	`IP_NF_ASSERT
(
	`©omic_ªad
(&
exp
->
u£
) == 0);

185 
	`IP_NF_ASSERT
(!
	`timî_≥ndög
(&
exp
->
timeout
));

187 
	`k‰ì
(
exp
);

188 
	}
}

190 
ölöe
 
	$ù_c⁄¡øck_ex≥˘_put
(
ù_c⁄¡øck_ex≥˘
 *
exp
)

192 
	`IP_NF_ASSERT
(
exp
);

194 i‡(
	`©omic_dec_™d_ã°
(&
exp
->
u£
)) {

196 
	`de°roy_ex≥˘
(
exp
);

198 
	}
}

200 
ölöe
 
ù_c⁄¡øck_ex≥˘
 *

201 
	$__ù_˘_ex≥˘_föd
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

203 
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_lock
);

204 
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

205  
	`LIST_FIND
(&
ù_c⁄¡øck_ex≥˘_li°
, 
ex≥˘_cmp
,

206 
ù_c⁄¡øck_ex≥˘
 *, 
tu∂e
);

207 
	}
}

210 
ù_c⁄¡øck_ex≥˘
 *

211 
	$ù_c⁄¡øck_ex≥˘_föd_gë
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

213 
ù_c⁄¡øck_ex≥˘
 *
exp
;

215 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

216 
	`READ_LOCK
(&
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

217 
exp
 = 
	`__ù_˘_ex≥˘_föd
(
tu∂e
);

218 i‡(
exp
)

219 
	`©omic_öc
(&
exp
->
u£
);

220 
	`READ_UNLOCK
(&
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

221 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

223  
exp
;

224 
	}
}

228 
	$__u√x≥˘_ªœãd
(
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
)

230 
	`DEBUGP
("u√x≥˘_ªœãd(%p)\n", 
ex≥˘
);

231 
	`MUST_BE_WRITE_LOCKED
(&
ù_c⁄¡øck_lock
);

234 
	`IP_NF_ASSERT
(!
ex≥˘
->
siblög
);

237 
	`li°_dñ
(&
ex≥˘
->
li°
);

238 
	`li°_dñ
(&
ex≥˘
->
ex≥˘ed_li°
);

241 i‡(
ex≥˘
->
ex≥˘™t
)

242 
ex≥˘
->
ex≥˘™t
->
ex≥˘ög
--;

244 
	`ù_c⁄¡øck_ex≥˘_put
(
ex≥˘
);

245 
	}
}

250 
	$u√x≥˘_ªœãd
(
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
)

252 
	`IP_NF_ASSERT
(
ex≥˘
->
ex≥˘™t
);

253 
	`IP_NF_ASSERT
(
ex≥˘
->
ex≥˘™t
->
hñ≥r
);

257 i‡(
ex≥˘
->
ex≥˘™t
->
hñ≥r
->
timeout


258 && !
	`dñ_timî
(&
ex≥˘
->
timeout
))

261 
	`__u√x≥˘_ªœãd
(
ex≥˘
);

262 
	}
}

265 
	$ªmove_ex≥˘©i⁄s
(
ù_c⁄¡øck
 *
˘
, 
dr›_ªfcou¡
)

267 
li°_hód
 *
exp_íåy
, *
√xt
;

268 
ù_c⁄¡øck_ex≥˘
 *
exp
;

270 
	`DEBUGP
("ªmove_ex≥˘©i⁄s(%p)\n", 
˘
);

272 
	`li°_f‹_óch_ß„
(
exp_íåy
, 
√xt
, &
˘
->
siblög_li°
) {

273 
exp
 = 
	`li°_íåy
(
exp_íåy
, 
ù_c⁄¡øck_ex≥˘
,

274 
ex≥˘ed_li°
);

278 i‡(
exp
->
siblög
) {

279 
	`DEBUGP
("ªmove_ex≥˘©i⁄s: skùpögÉ°ablished %∞o‡%p\n", 
exp
->
siblög
, 
˘
);

280 i‡(
dr›_ªfcou¡
) {

282 
	`ù_c⁄¡øck_put
(
exp
->
ex≥˘™t
);

283 
exp
->
ex≥˘™t
 = 
NULL
;

288 
	`IP_NF_ASSERT
(
	`li°_öli°
(&
ù_c⁄¡øck_ex≥˘_li°
, 
exp
));

289 
	`IP_NF_ASSERT
(
exp
->
ex≥˘™t
 =
˘
);

292 
	`u√x≥˘_ªœãd
(
exp
);

294 
	}
}

297 
	$˛ón_‰om_li°s
(
ù_c⁄¡øck
 *
˘
)

299 
ho
, 
hr
;

301 
	`DEBUGP
("˛ón_‰om_li°s(%p)\n", 
˘
);

302 
	`MUST_BE_WRITE_LOCKED
(&
ù_c⁄¡øck_lock
);

304 
ho
 = 
	`hash_c⁄¡øck
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

305 
hr
 = 
	`hash_c⁄¡øck
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

306 
	`LIST_DELETE
(&
ù_c⁄¡øck_hash
[
ho
], &
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]);

307 
	`LIST_DELETE
(&
ù_c⁄¡øck_hash
[
hr
], &
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
]);

310 
	`ªmove_ex≥˘©i⁄s
(
˘
, 1);

311 
	}
}

314 
	$de°roy_c⁄¡øck
(
nf_c⁄¡øck
 *
nf˘
)

316 
ù_c⁄¡øck
 *
˘
 = (ù_c⁄¡øck *)
nf˘
, *
ma°î
 = 
NULL
;

317 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿo
;

319 
	`DEBUGP
("de°roy_c⁄¡øck(%p)\n", 
˘
);

320 
	`IP_NF_ASSERT
(
	`©omic_ªad
(&
nf˘
->
u£
) == 0);

321 
	`IP_NF_ASSERT
(!
	`timî_≥ndög
(&
˘
->
timeout
));

326 
¥Ÿo
 = 
	`ù_˘_föd_¥Ÿo
(
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
¥Ÿ⁄um
);

327 i‡(
¥Ÿo
 &&ÖrŸo->
de°roy
)

328 
¥Ÿo
->
	`de°roy
(
˘
);

330 i‡(
ù_c⁄¡øck_de°royed
)

331 
	`ù_c⁄¡øck_de°royed
(
˘
);

333 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

335 i‡(
˘
->
ex≥˘ög
)

336 
	`ªmove_ex≥˘©i⁄s
(
˘
, 1);

339 i‡(
˘
->
ma°î
) {

340 i‡(
˘
->
ma°î
->
ex≥˘™t
) {

343 
	`li°_dñ
(&
˘
->
ma°î
->
ex≥˘ed_li°
);

344 
ma°î
 = 
˘
->ma°î->
ex≥˘™t
;

346 
	`k‰ì
(
˘
->
ma°î
);

348 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

350 i‡(
ma°î
)

351 
	`ù_c⁄¡øck_put
(
ma°î
);

353 
	`DEBUGP
("de°roy_c⁄¡øck:Ñëu∫ög ct=%∞tÿ¶ab\n", 
˘
);

354 
	`kmem_ˇche_‰ì
(
ù_c⁄¡øck_ˇchï
, 
˘
);

355 
	`©omic_dec
(&
ù_c⁄¡øck_cou¡
);

356 
	}
}

358 
	$dóth_by_timeout
(
ul_c⁄¡øck
)

360 
ù_c⁄¡øck
 *
˘
 = (*)
ul_c⁄¡øck
;

362 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

363 
	`˛ón_‰om_li°s
(
˘
);

364 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

365 
	`ù_c⁄¡øck_put
(
˘
);

366 
	}
}

368 
ölöe
 

369 
	$c⁄¡øck_tu∂e_cmp
(c⁄° 
ù_c⁄¡øck_tu∂e_hash
 *
i
,

370 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

371 c⁄° 
ù_c⁄¡øck
 *
ign‹ed_c⁄¡øck
)

373 
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_lock
);

374  
i
->
˘øck
 !
ign‹ed_c⁄¡øck


375 && 
	`ù_˘_tu∂e_equÆ
(
tu∂e
, &
i
->tuple);

376 
	}
}

378 
ù_c⁄¡øck_tu∂e_hash
 *

379 
	$__ù_c⁄¡øck_föd
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

380 c⁄° 
ù_c⁄¡øck
 *
ign‹ed_c⁄¡øck
)

382 
ù_c⁄¡øck_tu∂e_hash
 *
h
;

383 
hash
 = 
	`hash_c⁄¡øck
(
tu∂e
);

385 
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_lock
);

386 
h
 = 
	`LIST_FIND
(&
ù_c⁄¡øck_hash
[
hash
],

387 
c⁄¡øck_tu∂e_cmp
,

388 
ù_c⁄¡øck_tu∂e_hash
 *,

389 
tu∂e
, 
ign‹ed_c⁄¡øck
);

390  
h
;

391 
	}
}

394 
ù_c⁄¡øck_tu∂e_hash
 *

395 
	$ù_c⁄¡øck_föd_gë
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

396 c⁄° 
ù_c⁄¡øck
 *
ign‹ed_c⁄¡øck
)

398 
ù_c⁄¡øck_tu∂e_hash
 *
h
;

400 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

401 
h
 = 
	`__ù_c⁄¡øck_föd
(
tu∂e
, 
ign‹ed_c⁄¡øck
);

402 i‡(
h
)

403 
	`©omic_öc
(&
h
->
˘øck
->
˘_gíîÆ
.
u£
);

404 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

406  
h
;

407 
	}
}

409 
ölöe
 
ù_c⁄¡øck
 *

410 
	$__ù_c⁄¡øck_gë
(
nf_˘_öfo
 *
nf˘
, 
ù_c⁄¡øck_öfo
 *
˘öfo
)

412 
ù_c⁄¡øck
 *
˘


413 (
ù_c⁄¡øck
 *)
nf˘
->
ma°î
;

416 *
˘öfo
 = 
nf˘
 - 
˘
->
öfos
;

417 
	`IP_NF_ASSERT
(*
˘öfo
 >0 && *˘öfÿ< 
IP_CT_NUMBER
);

418  
˘
;

419 
	}
}

422 
ù_c⁄¡øck
 *

423 
	$ù_c⁄¡øck_gë
(
sk_buff
 *
skb
, 
ù_c⁄¡øck_öfo
 *
˘öfo
)

425 i‡(
skb
->
nf˘
)

426  
	`__ù_c⁄¡øck_gë
(
skb
->
nf˘
, 
˘öfo
);

427  
NULL
;

428 
	}
}

432 
	$__ù_c⁄¡øck_c⁄fúm
(
nf_˘_öfo
 *
nf˘
)

434 
hash
, 
ª∂_hash
;

435 
ù_c⁄¡øck
 *
˘
;

436 
ù_c⁄¡øck_öfo
 
˘öfo
;

438 
˘
 = 
	`__ù_c⁄¡øck_gë
(
nf˘
, &
˘öfo
);

444 i‡(
	`CTINFO2DIR
(
˘öfo
Ë!
IP_CT_DIR_ORIGINAL
)

445  
NF_ACCEPT
;

447 
hash
 = 
	`hash_c⁄¡øck
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

448 
ª∂_hash
 = 
	`hash_c⁄¡øck
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

457 
	`IP_NF_ASSERT
(!
	`is_c⁄fúmed
(
˘
));

458 
	`DEBUGP
("C⁄fúmög c⁄¡øck %p\n", 
˘
);

460 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

464 i‡(!
	`LIST_FIND
(&
ù_c⁄¡øck_hash
[
hash
],

465 
c⁄¡øck_tu∂e_cmp
,

466 
ù_c⁄¡øck_tu∂e_hash
 *,

467 &
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
, 
NULL
)

468 && !
	`LIST_FIND
(&
ù_c⁄¡øck_hash
[
ª∂_hash
],

469 
c⁄¡øck_tu∂e_cmp
,

470 
ù_c⁄¡øck_tu∂e_hash
 *,

471 &
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
, 
NULL
)) {

472 
	`li°_¥ïíd
(&
ù_c⁄¡øck_hash
[
hash
],

473 &
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]);

474 
	`li°_¥ïíd
(&
ù_c⁄¡øck_hash
[
ª∂_hash
],

475 &
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
]);

479 
˘
->
timeout
.
expúes
 +
jiffõs
;

480 
	`add_timî
(&
˘
->
timeout
);

481 
	`©omic_öc
(&
˘
->
˘_gíîÆ
.
u£
);

482 
	`£t_bô
(
IPS_CONFIRMED_BIT
, &
˘
->
°©us
);

483 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

484  
NF_ACCEPT
;

487 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

488  
NF_DROP
;

489 
	}
}

494 
	$ù_c⁄¡øck_tu∂e_èkí
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

495 c⁄° 
ù_c⁄¡øck
 *
ign‹ed_c⁄¡øck
)

497 
ù_c⁄¡øck_tu∂e_hash
 *
h
;

499 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

500 
h
 = 
	`__ù_c⁄¡øck_föd
(
tu∂e
, 
ign‹ed_c⁄¡øck
);

501 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

503  
h
 !
NULL
;

504 
	}
}

507 
ù_c⁄¡øck
 *

508 
	$icmp_îr‹_åack
(
sk_buff
 *
skb
,

509 
ù_c⁄¡øck_öfo
 *
˘öfo
,

510 
hooknum
)

512 
ù_c⁄¡øck_tu∂e
 
ö√πu∂e
, 
‹igtu∂e
;

514 
icmphdr
 
icmp
;

515 
ùhdr
 
ù
;

516 } 
öside
;

517 
ù_c⁄¡øck_¥Ÿocﬁ
 *
ö√ΩrŸo
;

518 
ù_c⁄¡øck_tu∂e_hash
 *
h
;

519 
d©aoff
;

521 
	`IP_NF_ASSERT
(
skb
->
nf˘
 =
NULL
);

524 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
öside
, (inside))!=0)

525  
NULL
;

527 i‡(
öside
.
icmp
.
ty≥
 !
ICMP_DEST_UNREACH


528 && 
öside
.
icmp
.
ty≥
 !
ICMP_SOURCE_QUENCH


529 && 
öside
.
icmp
.
ty≥
 !
ICMP_TIME_EXCEEDED


530 && 
öside
.
icmp
.
ty≥
 !
ICMP_PARAMETERPROB


531 && 
öside
.
icmp
.
ty≥
 !
ICMP_REDIRECT
)

532  
NULL
;

535 i‡(
öside
.
ù
.
‰ag_off
 & 
	`ht⁄s
(
IP_OFFSET
)) {

536 
	`DEBUGP
("icmp_error_track: fragment ofÖroto %u\n",

537 
öside
.
ù
.
¥Ÿocﬁ
);

538  
NULL
;

541 
ö√ΩrŸo
 = 
	`ù_˘_föd_¥Ÿo
(
öside
.
ù
.
¥Ÿocﬁ
);

542 
d©aoff
 = 
skb
->
nh
.
ùh
->
ihl
*4 + (
öside
.
icmp
Ë+ inside.
ù
.ihl*4;

544 i‡(!
	`gë_tu∂e
(&
öside
.
ù
, 
skb
, 
d©aoff
, &
‹igtu∂e
, 
ö√ΩrŸo
)) {

545 
	`DEBUGP
("icmp_îr‹: ! gë_tu∂êp=%u", 
öside
.
ù
.
¥Ÿocﬁ
);

546  
NULL
;

551 i‡(!
	`övît_tu∂e
(&
ö√πu∂e
, &
‹igtu∂e
, 
ö√ΩrŸo
)) {

552 
	`DEBUGP
("icmp_error_track: Can't invertÅuple\n");

553  
NULL
;

556 *
˘öfo
 = 
IP_CT_RELATED
;

558 
h
 = 
	`ù_c⁄¡øck_föd_gë
(&
ö√πu∂e
, 
NULL
);

559 i‡(!
h
) {

563 i‡(
hooknum
 =
NF_IP_LOCAL_OUT
)

564 
h
 = 
	`ù_c⁄¡øck_föd_gë
(&
‹igtu∂e
, 
NULL
);

566 i‡(!
h
) {

567 
	`DEBUGP
("icmp_error_track:Ço match\n");

568  
NULL
;

571 i‡(
	`DIRECTION
(
h
Ë!
IP_CT_DIR_REPLY
)

572 *
˘öfo
 +
IP_CT_IS_REPLY
;

574 i‡(
	`DIRECTION
(
h
Ë=
IP_CT_DIR_REPLY
)

575 *
˘öfo
 +
IP_CT_IS_REPLY
;

579 
skb
->
nf˘
 = &
h
->
˘øck
->
öfos
[*
˘öfo
];

580  
h
->
˘øck
;

581 
	}
}

585 
ölöe
 
	$uƒïlõd
(c⁄° 
ù_c⁄¡øck_tu∂e_hash
 *
i
)

587  !(
	`ã°_bô
(
IPS_ASSURED_BIT
, &
i
->
˘øck
->
°©us
));

588 
	}
}

590 
	$óæy_dr›
(
li°_hód
 *
chaö
)

593 
ù_c⁄¡øck_tu∂e_hash
 *
h
;

594 
dr›≥d
 = 0;

596 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

597 
h
 = 
	`LIST_FIND_B
(
chaö
, 
uƒïlõd
, 
ù_c⁄¡øck_tu∂e_hash
 *);

598 i‡(
h
)

599 
	`©omic_öc
(&
h
->
˘øck
->
˘_gíîÆ
.
u£
);

600 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

602 i‡(!
h
)

603  
dr›≥d
;

605 i‡(
	`dñ_timî
(&
h
->
˘øck
->
timeout
)) {

606 
	`dóth_by_timeout
(()
h
->
˘øck
);

607 
dr›≥d
 = 1;

609 
	`ù_c⁄¡øck_put
(
h
->
˘øck
);

610  
dr›≥d
;

611 
	}
}

613 #i‡
deföed
(
CONFIG_MIPS_BRCM
)

614 
ölöe
 
	$ªg¨dÀss
(c⁄° 
ù_c⁄¡øck_tu∂e_hash
 *
i
)

617 
	}
}

619 
	$ªg¨dÀss_dr›
(
li°_hód
 *
chaö
)

622 
ù_c⁄¡øck_tu∂e_hash
 *
h
;

623 
dr›≥d
 = 0;

625 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

626 
h
 = 
	`LIST_FIND_B
(
chaö
, 
ªg¨dÀss
, 
ù_c⁄¡øck_tu∂e_hash
 *);

627 i‡(
h
)

628 
	`©omic_öc
(&
h
->
˘øck
->
˘_gíîÆ
.
u£
);

629 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

631 i‡(!
h
)

632  
dr›≥d
;

634 i‡(
	`dñ_timî
(&
h
->
˘øck
->
timeout
)) {

635 
	`dóth_by_timeout
(()
h
->
˘øck
);

636 
dr›≥d
 = 1;

638 
	`ù_c⁄¡øck_put
(
h
->
˘øck
);

639  
dr›≥d
;

640 
	}
}

643 
ölöe
 
	$hñ≥r_cmp
(c⁄° 
ù_c⁄¡øck_hñ≥r
 *
i
,

644 c⁄° 
ù_c⁄¡øck_tu∂e
 *
πu∂e
)

646  
	`ù_˘_tu∂e_mask_cmp
(
πu∂e
, &
i
->
tu∂e
, &i->
mask
);

647 
	}
}

649 
ù_c⁄¡øck_hñ≥r
 *
	$ù_˘_föd_hñ≥r
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

651  
	`LIST_FIND
(&
hñ≥rs
, 
hñ≥r_cmp
,

652 
ù_c⁄¡øck_hñ≥r
 *,

653 
tu∂e
);

654 
	}
}

658 
ù_c⁄¡øck_tu∂e_hash
 *

659 
	$öô_c⁄¡øck
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

660 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿocﬁ
,

661 
sk_buff
 *
skb
)

663 
ù_c⁄¡øck
 *
c⁄¡øck
;

664 
ù_c⁄¡øck_tu∂e
 
ª∂_tu∂e
;

665 
size_t
 
hash
;

666 
ù_c⁄¡øck_ex≥˘
 *
ex≥˘ed
;

667 
i
;

668 
dr›_√xt
;

670 i‡(!
ù_c⁄¡øck_hash_∫d_öôãd
) {

671 
	`gë_øndom_byãs
(&
ù_c⁄¡øck_hash_∫d
, 4);

672 
ù_c⁄¡øck_hash_∫d_öôãd
 = 1;

675 
hash
 = 
	`hash_c⁄¡øck
(
tu∂e
);

677 i‡(
ù_c⁄¡øck_max
 &&

678 
	`©omic_ªad
(&
ù_c⁄¡øck_cou¡
Ë>
ù_c⁄¡øck_max
) {

682 
√xt
 = (
dr›_√xt
++)%
ù_c⁄¡øck_hèbÀ_size
;

684 i‡(!
	`óæy_dr›
(&
ù_c⁄¡øck_hash
[
√xt
])

685 && !
	`óæy_dr›
(&
ù_c⁄¡øck_hash
[
hash
])) {

686 #i‡
	`deföed
(
CONFIG_MIPS_BRCM
)

688 !
	`ªg¨dÀss_dr›
(&
ù_c⁄¡øck_hash
[
√xt
]))

689 
√xt
 = (
dr›_√xt
++)%
ù_c⁄¡øck_hèbÀ_size
;

691 i‡(
	`√t_øãlimô
())

692 
	`¥ötk
(
KERN_WARNING


695  
	`ERR_PTR
(-
ENOMEM
);

700 i‡(!
	`övît_tu∂e
(&
ª∂_tu∂e
, 
tu∂e
, 
¥Ÿocﬁ
)) {

701 
	`DEBUGP
("Can't invertÅuple.\n");

702  
NULL
;

705 
c⁄¡øck
 = 
	`kmem_ˇche_Æloc
(
ù_c⁄¡øck_ˇchï
, 
GFP_ATOMIC
);

706 i‡(!
c⁄¡øck
) {

707 
	`DEBUGP
("Can'tállocate conntrack.\n");

708  
	`ERR_PTR
(-
ENOMEM
);

711 
	`mem£t
(
c⁄¡øck
, 0, (*conntrack));

712 
	`©omic_£t
(&
c⁄¡øck
->
˘_gíîÆ
.
u£
, 1);

713 
c⁄¡øck
->
˘_gíîÆ
.
de°roy
 = 
de°roy_c⁄¡øck
;

714 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
 = *tuple;

715 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
˘øck
 = conntrack;

716 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
 = 
ª∂_tu∂e
;

717 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
˘øck
 = conntrack;

718 
i
=0; i < 
IP_CT_NUMBER
; i++)

719 
c⁄¡øck
->
öfos
[
i
].
ma°î
 = &c⁄¡øck->
˘_gíîÆ
;

721 i‡(!
¥Ÿocﬁ
->
	`√w
(
c⁄¡øck
, 
skb
)) {

722 
	`kmem_ˇche_‰ì
(
ù_c⁄¡øck_ˇchï
, 
c⁄¡øck
);

723  
NULL
;

726 
	`öô_timî
(&
c⁄¡øck
->
timeout
);

727 
c⁄¡øck
->
timeout
.
d©a
 = ()conntrack;

728 
c⁄¡øck
->
timeout
.
fun˘i⁄
 = 
dóth_by_timeout
;

730 
	`INIT_LIST_HEAD
(&
c⁄¡øck
->
siblög_li°
);

732 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

734 
	`READ_LOCK
(&
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

735 
ex≥˘ed
 = 
	`LIST_FIND
(&
ù_c⁄¡øck_ex≥˘_li°
, 
ex≥˘_cmp
,

736 
ù_c⁄¡øck_ex≥˘
 *, 
tu∂e
);

737 
	`READ_UNLOCK
(&
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

744 i‡(
ex≥˘ed
 && !
	`is_c⁄fúmed
”x≥˘ed->
ex≥˘™t
))

745 
ex≥˘ed
 = 
NULL
;

748 i‡(!
ex≥˘ed
)

749 
c⁄¡øck
->
hñ≥r
 = 
	`ù_˘_föd_hñ≥r
(&
ª∂_tu∂e
);

752 i‡(
ex≥˘ed


753 && 
ex≥˘ed
->
ex≥˘™t
->
hñ≥r
->
timeout


754 && ! 
	`dñ_timî
(&
ex≥˘ed
->
timeout
))

755 
ex≥˘ed
 = 
NULL
;

757 i‡(
ex≥˘ed
) {

758 
	`DEBUGP
("conntrack:Éxpectationárrives ct=%pÉxp=%p\n",

759 
c⁄¡øck
, 
ex≥˘ed
);

761 
	`__£t_bô
(
IPS_EXPECTED_BIT
, &
c⁄¡øck
->
°©us
);

762 
c⁄¡øck
->
ma°î
 = 
ex≥˘ed
;

763 
ex≥˘ed
->
siblög
 = 
c⁄¡øck
;

764 #i‡
CONFIG_IP_NF_CONNTRACK_MARK


765 
c⁄¡øck
->
m¨k
 = 
ex≥˘ed
->
ex≥˘™t
->mark;

767 
	`LIST_DELETE
(&
ù_c⁄¡øck_ex≥˘_li°
, 
ex≥˘ed
);

768 
ex≥˘ed
->
ex≥˘™t
->
ex≥˘ög
--;

769 
	`nf_c⁄¡øck_gë
(&
	`ma°î_˘
(
c⁄¡øck
)->
öfos
[0]);

771 
	`©omic_öc
(&
ù_c⁄¡øck_cou¡
);

772 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

774 i‡(
ex≥˘ed
 &&Éx≥˘ed->
ex≥˘‚
)

775 
ex≥˘ed
->
	`ex≥˘‚
(
c⁄¡øck
);

776  &
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
];

777 
	}
}

780 
ölöe
 
ù_c⁄¡øck
 *

781 
	$ªsﬁve_n‹mÆ_˘
(
sk_buff
 *
skb
,

782 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿo
,

783 *
£t_ª∂y
,

784 
hooknum
,

785 
ù_c⁄¡øck_öfo
 *
˘öfo
)

787 
ù_c⁄¡øck_tu∂e
 
tu∂e
;

788 
ù_c⁄¡øck_tu∂e_hash
 *
h
;

790 
	`IP_NF_ASSERT
((
skb
->
nh
.
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_OFFSET
)) == 0);

792 i‡(!
	`gë_tu∂e
(
skb
->
nh
.
ùh
, skb, skb->nh.ùh->
ihl
*4, &
tu∂e
, 
¥Ÿo
))

793  
NULL
;

796 
h
 = 
	`ù_c⁄¡øck_föd_gë
(&
tu∂e
, 
NULL
);

797 i‡(!
h
) {

798 
h
 = 
	`öô_c⁄¡øck
(&
tu∂e
, 
¥Ÿo
, 
skb
);

799 i‡(!
h
)

800  
NULL
;

801 i‡(
	`IS_ERR
(
h
))

802  (*)
h
;

806 i‡(
	`DIRECTION
(
h
Ë=
IP_CT_DIR_REPLY
) {

807 *
˘öfo
 = 
IP_CT_ESTABLISHED
 + 
IP_CT_IS_REPLY
;

809 *
£t_ª∂y
 = 1;

812 i‡(
	`ã°_bô
(
IPS_SEEN_REPLY_BIT
, &
h
->
˘øck
->
°©us
)) {

813 
	`DEBUGP
("ip_conntrack_in:ÇormalÖacket for %p\n",

814 
h
->
˘øck
);

815 *
˘öfo
 = 
IP_CT_ESTABLISHED
;

816 } i‡(
	`ã°_bô
(
IPS_EXPECTED_BIT
, &
h
->
˘øck
->
°©us
)) {

817 
	`DEBUGP
("ip_conntrack_in:ÑelatedÖacket for %p\n",

818 
h
->
˘øck
);

819 *
˘öfo
 = 
IP_CT_RELATED
;

821 
	`DEBUGP
("ip_conntrack_in:ÇewÖacket for %p\n",

822 
h
->
˘øck
);

823 *
˘öfo
 = 
IP_CT_NEW
;

825 *
£t_ª∂y
 = 0;

827 
skb
->
nf˘
 = &
h
->
˘øck
->
öfos
[*
˘öfo
];

828  
h
->
˘øck
;

829 
	}
}

832 
ù_c⁄¡øck_ö
(
hooknum
,

833 
sk_buff
 **
pskb
,

834 c⁄° 
√t_devi˚
 *
ö
,

835 c⁄° 
√t_devi˚
 *
out
,

836 (*
ok‚
)(
sk_buff
 *))

838 
ù_c⁄¡øck
 *
˘
;

839 
ù_c⁄¡øck_öfo
 
˘öfo
;

840 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿo
;

841 
£t_ª∂y
;

842 
ªt
;

845 i‡((*
pskb
)->
nh
.
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_OFFSET
)) {

846 i‡(
	`√t_øãlimô
()) {

847 
	`¥ötk
(
KERN_ERR
 "ip_conntrack_in: Frag ofÖroto %u (hook=%u)\n",

848 (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
, 
hooknum
);

850  
NF_DROP
;

854 (*
pskb
)->
nfˇche
 |
NFC_UNKNOWN
;

859 i‡((*
pskb
)->
pkt_ty≥
 =
PACKET_BROADCAST
) {

860 
	`¥ötk
("BroadcastÖacket!\n");

861  
NF_ACCEPT
;

862 } i‡(((*
pskb
)->
nh
.
ùh
->
daddr
 & 
	`ht⁄l
(0x000000FF))

863 =
	`ht⁄l
(0x000000FF)) {

864 
	`¥ötk
("Should bcast: %u.%u.%u.%u->%u.%u.%u.%u (sk=%p,Ötype=%u)\n",

865 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
),

866 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
),

867 (*
pskb
)->
sk
, (*pskb)->
pkt_ty≥
);

872 i‡((*
pskb
)->
nf˘
)

873  
NF_ACCEPT
;

875 
¥Ÿo
 = 
	`ù_˘_föd_¥Ÿo
((*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
);

878 i‡((*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 =
IPPROTO_ICMP


879 && 
	`icmp_îr‹_åack
(*
pskb
, &
˘öfo
, 
hooknum
))

880  
NF_ACCEPT
;

882 i‡(!(
˘
 = 
	`ªsﬁve_n‹mÆ_˘
(*
pskb
, 
¥Ÿo
,&
£t_ª∂y
,
hooknum
,&
˘öfo
)))

884  
NF_ACCEPT
;

886 i‡(
	`IS_ERR
(
˘
))

888  
NF_DROP
;

890 
	`IP_NF_ASSERT
((*
pskb
)->
nf˘
);

892 
ªt
 = 
¥Ÿo
->
	`∑ckë
(
˘
, *
pskb
, 
˘öfo
);

893 i‡(
ªt
 == -1) {

895 
	`nf_c⁄¡øck_put
((*
pskb
)->
nf˘
);

896 (*
pskb
)->
nf˘
 = 
NULL
;

897  
NF_ACCEPT
;

900 i‡(
ªt
 !
NF_DROP
 && 
˘
->
hñ≥r
) {

901 
ªt
 = 
˘
->
hñ≥r
->
	`hñp
(*
pskb
, ct, 
˘öfo
);

902 i‡(
ªt
 == -1) {

904 
	`nf_c⁄¡øck_put
((*
pskb
)->
nf˘
);

905 (*
pskb
)->
nf˘
 = 
NULL
;

906  
NF_ACCEPT
;

909 i‡(
£t_ª∂y
)

910 
	`£t_bô
(
IPS_SEEN_REPLY_BIT
, &
˘
->
°©us
);

912  
ªt
;

913 
	}
}

915 
	$övît_tu∂ïr
(
ù_c⁄¡øck_tu∂e
 *
övî£
,

916 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
)

918  
	`övît_tu∂e
(
övî£
, 
‹ig
, 
	`ù_˘_föd_¥Ÿo
(‹ig->
d°
.
¥Ÿ⁄um
));

919 
	}
}

921 
ölöe
 
	$ª£¡_ex≥˘
(c⁄° 
ù_c⁄¡øck_ex≥˘
 *
i
,

922 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

923 c⁄° 
ù_c⁄¡øck_tu∂e
 *
mask
)

925 
	`DEBUGP
("resent_expect\n");

926 
	`DEBUGP
("Åu∂e: "); 
	`DUMP_TUPLE
(&
i
->
tu∂e
);

927 
	`DEBUGP
("˘_tu∂e: "); 
	`DUMP_TUPLE
(&
i
->
˘_tu∂e
);

928 
	`DEBUGP
("ã°Åu∂e: "); 
	`DUMP_TUPLE
(
tu∂e
);

929  (((
i
->
˘_tu∂e
.
d°
.
¥Ÿ⁄um
 =0 && 
	`ù_˘_tu∂e_equÆ
(&i->
tu∂e
,Åuple))

930 || (
i
->
˘_tu∂e
.
d°
.
¥Ÿ⁄um
 && 
	`ù_˘_tu∂e_equÆ
(&i->˘_tu∂e, 
tu∂e
)))

931 && 
	`ù_˘_tu∂e_equÆ
(&
i
->
mask
, mask));

932 
	}
}

935 
ölöe
 
	$ex≥˘_˛ash
(c⁄° 
ù_c⁄¡øck_ex≥˘
 *
i
,

936 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

937 c⁄° 
ù_c⁄¡øck_tu∂e
 *
mask
)

941 
ù_c⁄¡øck_tu∂e
 
öãr£˘_mask


942 { { 
i
->
mask
.
§c
.
ù
 & mask->src.ip,

943 { 
i
->
mask
.
§c
.
u
.
Æl
 & mask->src.u.all } },

944 { 
i
->
mask
.
d°
.
ù
 & mask->dst.ip,

945 { 
i
->
mask
.
d°
.
u
.
Æl
 & mask->dst.u.all },

946 
i
->
mask
.
d°
.
¥Ÿ⁄um
 & mask->dst.protonum } };

948  
	`ù_˘_tu∂e_mask_cmp
(&
i
->
tu∂e
,Åu∂e, &
öãr£˘_mask
);

949 
	}
}

951 
ölöe
 
	$ù_c⁄¡øck_u√x≥˘_ªœãd
(
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
)

953 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

954 
	`u√x≥˘_ªœãd
(
ex≥˘
);

955 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

956 
	}
}

958 
	$ex≥˘©i⁄_timed_out
(
ul_ex≥˘
)

960 
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
 = (*Ë
ul_ex≥˘
;

962 
	`DEBUGP
("ex≥˘©i⁄ %∞timed out\n", 
ex≥˘
);

963 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

964 
	`__u√x≥˘_ªœãd
(
ex≥˘
);

965 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

966 
	}
}

968 
ù_c⁄¡øck_ex≥˘
 *

969 
	$ù_c⁄¡øck_ex≥˘_Æloc
()

971 
ù_c⁄¡øck_ex≥˘
 *
√w
;

973 
√w
 = (
ù_c⁄¡øck_ex≥˘
 *)

974 
	`kmÆloc
((
ù_c⁄¡øck_ex≥˘
), 
GFP_ATOMIC
);

975 i‡(!
√w
) {

976 
	`DEBUGP
("expect_related: OOMállocatingÉxpect\n");

977  
NULL
;

981 
	`mem£t
(
√w
, 0, (
ù_c⁄¡øck_ex≥˘
));

983  
√w
;

984 
	}
}

987 
	$ù_c⁄¡øck_ex≥˘_ö£π
(
ù_c⁄¡øck_ex≥˘
 *
√w
,

988 
ù_c⁄¡øck
 *
ªœãd_to
)

990 
	`DEBUGP
("√wÉx≥˘©i⁄ %∞o‡c⁄¡øck %p\n", 
√w
, 
ªœãd_to
);

991 
√w
->
ex≥˘™t
 = 
ªœãd_to
;

992 
√w
->
siblög
 = 
NULL
;

993 
	`©omic_£t
(&
√w
->
u£
, 1);

996 
	`li°_add_èû
(&
√w
->
ex≥˘ed_li°
, &
ªœãd_to
->
siblög_li°
);

998 
	`li°_¥ïíd
(&
ù_c⁄¡øck_ex≥˘_li°
, &
√w
->
li°
);

1000 i‡(
ªœãd_to
->
hñ≥r
->
timeout
) {

1001 
	`öô_timî
(&
√w
->
timeout
);

1002 
√w
->
timeout
.
d©a
 = ()new;

1003 
√w
->
timeout
.
fun˘i⁄
 = 
ex≥˘©i⁄_timed_out
;

1004 
√w
->
timeout
.
expúes
 = 
jiffõs
 +

1005 
ªœãd_to
->
hñ≥r
->
timeout
 * 
HZ
;

1006 
	`add_timî
(&
√w
->
timeout
);

1008 
ªœãd_to
->
ex≥˘ög
++;

1009 
	}
}

1012 
	$ù_c⁄¡øck_ex≥˘_ªœãd
(
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
,

1013 
ù_c⁄¡øck
 *
ªœãd_to
)

1015 
ù_c⁄¡øck_ex≥˘
 *
ﬁd
;

1016 
ªt
 = 0;

1018 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

1022 
	`DEBUGP
("ù_c⁄¡øck_ex≥˘_ªœãd %p\n", 
ªœãd_to
);

1023 
	`DEBUGP
("tu∂e: "); 
	`DUMP_TUPLE_RAW
(&
ex≥˘
->
tu∂e
);

1024 
	`DEBUGP
("mask: "); 
	`DUMP_TUPLE_RAW
(&
ex≥˘
->
mask
);

1026 
ﬁd
 = 
	`LIST_FIND
(&
ù_c⁄¡øck_ex≥˘_li°
, 
ª£¡_ex≥˘
,

1027 
ù_c⁄¡øck_ex≥˘
 *, &
ex≥˘
->
tu∂e
,

1028 &
ex≥˘
->
mask
);

1029 i‡(
ﬁd
) {

1033 
	`DEBUGP
("expect_related:ÑesentÖacket\n");

1034 i‡(
ªœãd_to
->
hñ≥r
->
timeout
) {

1035 i‡(!
	`dñ_timî
(&
ﬁd
->
timeout
)) {

1037 
out
;

1039 
ﬁd
->
timeout
.
expúes
 = 
jiffõs
 +

1040 
ªœãd_to
->
hñ≥r
->
timeout
 * 
HZ
;

1041 
	`add_timî
(&
ﬁd
->
timeout
);

1045 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

1046 
	`k‰ì
(
ex≥˘
);

1047  -
EEXIST
;

1049 } i‡(
ªœãd_to
->
hñ≥r
->
max_ex≥˘ed
 &&

1050 
ªœãd_to
->
ex≥˘ög
 >ªœãd_to->
hñ≥r
->
max_ex≥˘ed
) {

1052 i‡(!(
ªœãd_to
->
hñ≥r
->
Êags
 &

1053 
IP_CT_HELPER_F_REUSE_EXPECT
)) {

1054 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

1055 i‡(
	`√t_øãlimô
())

1056 
	`¥ötk
(
KERN_WARNING


1060 
ªœãd_to
->
hñ≥r
->
max_ex≥˘ed
,

1061 
ªœãd_to
->
hñ≥r
->
«me
,

1062 
	`NIPQUAD
(
ªœãd_to
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
),

1063 
	`NIPQUAD
(
ªœãd_to
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
));

1064 
	`k‰ì
(
ex≥˘
);

1065  -
EPERM
;

1067 
	`DEBUGP
("ip_conntrack: maxÇumber ofÉxpected "

1070 
ªœãd_to
->
hñ≥r
->
max_ex≥˘ed
,

1071 
ªœãd_to
->
hñ≥r
->
«me
,

1072 
	`NIPQUAD
(
ªœãd_to
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
),

1073 
	`NIPQUAD
(
ªœãd_to
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
));

1076 
	`li°_f‹_óch_íåy
(
ﬁd
, &
ªœãd_to
->
siblög_li°
,

1077 
ex≥˘ed_li°
)

1078 i‡(
ﬁd
->
siblög
 =
NULL
)

1083 
	`IP_NF_ASSERT
(
ﬁd
 && old->
siblög
 =
NULL
);

1090 
	`u√x≥˘_ªœãd
(
ﬁd
);

1091 
ªt
 = -
EPERM
;

1092 } i‡(
	`LIST_FIND
(&
ù_c⁄¡øck_ex≥˘_li°
, 
ex≥˘_˛ash
,

1093 
ù_c⁄¡øck_ex≥˘
 *, &
ex≥˘
->
tu∂e
,

1094 &
ex≥˘
->
mask
)) {

1095 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

1096 
	`DEBUGP
("expect_related: busy!\n");

1098 
	`k‰ì
(
ex≥˘
);

1099  -
EBUSY
;

1102 
out
: 
	`ù_c⁄¡øck_ex≥˘_ö£π
(
ex≥˘
, 
ªœãd_to
);

1104 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

1106  
ªt
;

1107 
	}
}

1110 
	$ù_c⁄¡øck_ch™ge_ex≥˘
(
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
,

1111 
ù_c⁄¡øck_tu∂e
 *
√wtu∂e
)

1113 
ªt
;

1115 
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_lock
);

1116 
	`WRITE_LOCK
(&
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

1118 
	`DEBUGP
("change_expect:\n");

1119 
	`DEBUGP
("ex∞tu∂e: "); 
	`DUMP_TUPLE_RAW
(&
ex≥˘
->
tu∂e
);

1120 
	`DEBUGP
("ex∞mask: "); 
	`DUMP_TUPLE_RAW
(&
ex≥˘
->
mask
);

1121 
	`DEBUGP
("√wtu∂e: "); 
	`DUMP_TUPLE_RAW
(
√wtu∂e
);

1122 i‡(
ex≥˘
->
˘_tu∂e
.
d°
.
¥Ÿ⁄um
 == 0) {

1124 
	`DEBUGP
("changeÉxpect:Çever seen before\n");

1125 i‡(!
	`ù_˘_tu∂e_mask_cmp
(&
ex≥˘
->
tu∂e
, 
√wtu∂e
, &ex≥˘->
mask
)

1126 && 
	`LIST_FIND
(&
ù_c⁄¡øck_ex≥˘_li°
, 
ex≥˘_˛ash
,

1127 
ù_c⁄¡øck_ex≥˘
 *, 
√wtu∂e
, &
ex≥˘
->
mask
)) {

1129 
ªt
 = -1;

1131 
	`mem˝y
(&
ex≥˘
->
˘_tu∂e
, &ex≥˘->
tu∂e
, (expect->tuple));

1132 
	`mem˝y
(&
ex≥˘
->
tu∂e
, 
√wtu∂e
, (expect->tuple));

1133 
ªt
 = 0;

1137 
	`DEBUGP
("changeÉxpect:ÑesentÖacket\n");

1138 i‡(
	`ù_˘_tu∂e_equÆ
(&
ex≥˘
->
tu∂e
, 
√wtu∂e
)) {

1139 
ªt
 = 0;

1142 
ªt
 = -1;

1145 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

1147  
ªt
;

1148 
	}
}

1152 
	$ù_c⁄¡øck_Æãr_ª∂y
(
ù_c⁄¡øck
 *
c⁄¡øck
,

1153 c⁄° 
ù_c⁄¡øck_tu∂e
 *
√wª∂y
)

1155 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

1156 i‡(
	`__ù_c⁄¡øck_föd
(
√wª∂y
, 
c⁄¡øck
)) {

1157 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

1161 
	`IP_NF_ASSERT
(!
	`is_c⁄fúmed
(
c⁄¡øck
));

1163 
	`DEBUGP
("A…îögÑïlyÅu∂êo‡%∞tÿ", 
c⁄¡øck
);

1164 
	`DUMP_TUPLE
(
√wª∂y
);

1166 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
 = *
√wª∂y
;

1167 i‡(!
c⁄¡øck
->
ma°î
 && 
	`li°_em±y
(&c⁄¡øck->
siblög_li°
))

1168 
c⁄¡øck
->
hñ≥r
 = 
	`ù_˘_föd_hñ≥r
(
√wª∂y
);

1169 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

1172 
	}
}

1174 
	$ù_c⁄¡øck_hñ≥r_ªgi°î
(
ù_c⁄¡øck_hñ≥r
 *
me
)

1176 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

1177 
	`li°_¥ïíd
(&
hñ≥rs
, 
me
);

1178 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

1181 
	}
}

1183 
ölöe
 
	$unhñp
(
ù_c⁄¡øck_tu∂e_hash
 *
i
,

1184 c⁄° 
ù_c⁄¡øck_hñ≥r
 *
me
)

1186 i‡(
i
->
˘øck
->
hñ≥r
 =
me
) {

1188 
	`ªmove_ex≥˘©i⁄s
(
i
->
˘øck
, 0);

1190 
i
->
˘øck
->
hñ≥r
 = 
NULL
;

1193 
	}
}

1195 
	$ù_c⁄¡øck_hñ≥r_uƒegi°î
(
ù_c⁄¡øck_hñ≥r
 *
me
)

1197 
i
;

1200 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

1201 
	`LIST_DELETE
(&
hñ≥rs
, 
me
);

1204 
i
 = 0; i < 
ù_c⁄¡øck_hèbÀ_size
; i++)

1205 
	`LIST_FIND_W
(&
ù_c⁄¡øck_hash
[
i
], 
unhñp
,

1206 
ù_c⁄¡øck_tu∂e_hash
 *, 
me
);

1207 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

1210 
	`synchr⁄ize_√t
();

1211 
	}
}

1214 
	$ù_˘_ª‰esh
(
ù_c⁄¡øck
 *
˘
, 
exåa_jiffõs
)

1216 
	`IP_NF_ASSERT
(
˘
->
timeout
.
d©a
 == ()ct);

1219 i‡(!
	`is_c⁄fúmed
(
˘
))

1220 
˘
->
timeout
.
expúes
 = 
exåa_jiffõs
;

1222 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

1224 i‡(
	`dñ_timî
(&
˘
->
timeout
)) {

1225 
˘
->
timeout
.
expúes
 = 
jiffõs
 + 
exåa_jiffõs
;

1226 
	`add_timî
(&
˘
->
timeout
);

1228 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

1230 
	}
}

1233 
sk_buff
 *

1234 
	$ù_˘_g©hî_‰ags
(
sk_buff
 *
skb
)

1236 
sock
 *
sk
 = 
skb
->sk;

1237 #ifde‡
CONFIG_NETFILTER_DEBUG


1238 
ﬁddebug
 = 
skb
->
nf_debug
;

1240 i‡(
sk
) {

1241 
	`sock_hﬁd
(
sk
);

1242 
	`skb_‹ph™
(
skb
);

1245 
	`loˇl_bh_dißbÀ
();

1246 
skb
 = 
	`ù_de‰ag
(skb);

1247 
	`loˇl_bh_íabÀ
();

1249 i‡(!
skb
) {

1250 i‡(
sk
)

1251 
	`sock_put
(
sk
);

1252  
skb
;

1255 i‡(
sk
) {

1256 
	`skb_£t_ow√r_w
(
skb
, 
sk
);

1257 
	`sock_put
(
sk
);

1260 
	`ù_£nd_check
(
skb
->
nh
.
ùh
);

1261 
skb
->
nfˇche
 |
NFC_ALTERED
;

1262 #ifde‡
CONFIG_NETFILTER_DEBUG


1264 
skb
->
nf_debug
 = 
ﬁddebug
;

1266  
skb
;

1267 
	}
}

1270 
	$ù_c⁄¡øck_©èch
(
sk_buff
 *
nskb
, 
nf_˘_öfo
 *
nf˘
)

1272 
ù_c⁄¡øck
 *
˘
;

1273 
ù_c⁄¡øck_öfo
 
˘öfo
;

1275 
˘
 = 
	`__ù_c⁄¡øck_gë
(
nf˘
, &
˘öfo
);

1279 i‡(
	`CTINFO2DIR
(
˘öfo
Ë=
IP_CT_DIR_ORIGINAL
)

1280 
˘öfo
 = 
IP_CT_RELATED
 + 
IP_CT_IS_REPLY
;

1282 
˘öfo
 = 
IP_CT_RELATED
;

1285 
nskb
->
nf˘
 = &
˘
->
öfos
[
˘öfo
];

1286 
	`©omic_öc
(&
˘
->
˘_gíîÆ
.
u£
);

1287 
	}
}

1289 
ölöe
 

1290 
do_kûl
(c⁄° 
ù_c⁄¡øck_tu∂e_hash
 *
i
,

1291 (*
kûl
)(c⁄° 
ù_c⁄¡øck
 *
i
, *
d©a
),

1292 *
d©a
)

1294  
	`kûl
(
i
->
˘øck
, 
d©a
);

1295 
	}
}

1298 
ù_c⁄¡øck_tu∂e_hash
 *

1299 
gë_√xt_c‹p£
((*
kûl
)(c⁄° 
ù_c⁄¡øck
 *
i
, *
d©a
),

1300 *
d©a
, *
buckë
)

1302 
ù_c⁄¡øck_tu∂e_hash
 *
h
 = 
NULL
;

1304 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

1305 ; !
h
 && *
buckë
 < 
ù_c⁄¡øck_hèbÀ_size
; (*bucket)++) {

1306 
h
 = 
	`LIST_FIND
(&
ù_c⁄¡øck_hash
[*
buckë
], 
do_kûl
,

1307 
ù_c⁄¡øck_tu∂e_hash
 *, 
kûl
, 
d©a
);

1309 i‡(
h
)

1310 
	`©omic_öc
(&
h
->
˘øck
->
˘_gíîÆ
.
u£
);

1311 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

1313  
h
;

1314 
	}
}

1317 
ù_˘_£À˘ive_˛ónup
((*
kûl
)(c⁄° 
ù_c⁄¡øck
 *
i
, *
d©a
),

1318 *
d©a
)

1320 
ù_c⁄¡øck_tu∂e_hash
 *
h
;

1321 
buckë
 = 0;

1323 (
h
 = 
	`gë_√xt_c‹p£
(
kûl
, 
d©a
, &
buckë
)Ë!
NULL
) {

1325 i‡(
	`dñ_timî
(&
h
->
˘øck
->
timeout
))

1326 
	`dóth_by_timeout
(()
h
->
˘øck
);

1329 
	`ù_c⁄¡øck_put
(
h
->
˘øck
);

1331 
	}
}

1338 
	$gë‹igd°
(
sock
 *
sk
, 
›tvÆ
, 
__u£r
 *
u£r
, *
Àn
)

1340 
öë_›t
 *
öë
 = 
	`öë_sk
(
sk
);

1341 
ù_c⁄¡øck_tu∂e_hash
 *
h
;

1342 
ù_c⁄¡øck_tu∂e
 
tu∂e
;

1344 
	`IP_CT_TUPLE_U_BLANK
(&
tu∂e
);

1345 
tu∂e
.
§c
.
ù
 = 
öë
->
rcv_ßddr
;

1346 
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
öë
->
•‹t
;

1347 
tu∂e
.
d°
.
ù
 = 
öë
->
daddr
;

1348 
tu∂e
.
d°
.
u
.
t˝
.
p‹t
 = 
öë
->
dp‹t
;

1349 
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

1352 i‡(
	`°rcmp
(
sk
->
sk_¥Ÿ
->
«me
, "TCP")) {

1353 
	`DEBUGP
("SO_ORIGINAL_DST: Notá TCP socket\n");

1354  -
ENOPROTOOPT
;

1357 i‡((Ë*
Àn
 < (
sockaddr_ö
)) {

1358 
	`DEBUGP
("SO_ORIGINAL_DST:Üen %uÇot %u\n",

1359 *
Àn
, (
sockaddr_ö
));

1360  -
EINVAL
;

1363 
h
 = 
	`ù_c⁄¡øck_föd_gë
(&
tu∂e
, 
NULL
);

1364 i‡(
h
) {

1365 
sockaddr_ö
 
sö
;

1367 
sö
.
sö_Ámûy
 = 
AF_INET
;

1368 
sö
.
sö_p‹t
 = 
h
->
˘øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]

1369 .
tu∂e
.
d°
.
u
.
t˝
.
p‹t
;

1370 
sö
.
sö_addr
.
s_addr
 = 
h
->
˘øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]

1371 .
tu∂e
.
d°
.
ù
;

1373 
	`DEBUGP
("SO_ORIGINAL_DST: %u.%u.%u.%u %u\n",

1374 
	`NIPQUAD
(
sö
.
sö_addr
.
s_addr
), 
	`¡ohs
(sö.
sö_p‹t
));

1375 
	`ù_c⁄¡øck_put
(
h
->
˘øck
);

1376 i‡(
	`c›y_to_u£r
(
u£r
, &
sö
, (sin)) != 0)

1377  -
EFAULT
;

1381 
	`DEBUGP
("SO_ORIGINAL_DST: Can't find %u.%u.%u.%u/%u-%u.%u.%u.%u/%u.\n",

1382 
	`NIPQUAD
(
tu∂e
.
§c
.
ù
), 
	`¡ohs
—u∂e.§c.
u
.
t˝
.
p‹t
),

1383 
	`NIPQUAD
(
tu∂e
.
d°
.
ù
), 
	`¡ohs
—u∂e.d°.
u
.
t˝
.
p‹t
));

1384  -
ENOENT
;

1385 
	}
}

1387 
nf_sock›t_›s
 
	gso_gë‹igd°
 = {

1388 .
pf
 = 
PF_INET
,

1389 .
	ggë_›tmö
 = 
SO_ORIGINAL_DST
,

1390 .
	ggë_›tmax
 = 
SO_ORIGINAL_DST
+1,

1391 .
	ggë
 = &
gë‹igd°
,

1394 
	$kûl_Æl
(c⁄° 
ù_c⁄¡øck
 *
i
, *
d©a
)

1397 
	}
}

1401 
	$ù_c⁄¡øck_˛ónup
()

1403 
ù_˘_©èch
 = 
NULL
;

1407 
	`synchr⁄ize_√t
();

1409 
i_£e_dód_≥›À
:

1410 
	`ù_˘_£À˘ive_˛ónup
(
kûl_Æl
, 
NULL
);

1411 i‡(
	`©omic_ªad
(&
ù_c⁄¡øck_cou¡
) != 0) {

1412 
	`scheduÀ
();

1413 
i_£e_dód_≥›À
;

1416 
	`kmem_ˇche_de°roy
(
ù_c⁄¡øck_ˇchï
);

1417 
	`v‰ì
(
ù_c⁄¡øck_hash
);

1418 
	`nf_uƒegi°î_sock›t
(&
so_gë‹igd°
);

1419 
	}
}

1421 
	ghashsize
;

1422 
MODULE_PARM
(
hashsize
, "i");

1424 
__öô
 
	$ù_c⁄¡øck_öô
()

1426 
i
;

1427 
ªt
;

1431 i‡(
hashsize
) {

1432 
ù_c⁄¡øck_hèbÀ_size
 = 
hashsize
;

1434 
ù_c⁄¡øck_hèbÀ_size


1435 (((
num_phy•ages
 << 
PAGE_SHIFT
) / 16384)

1436 / (
li°_hód
));

1437 i‡(
num_phy•ages
 > (1024 * 1024 * 1024 / 
PAGE_SIZE
))

1438 
ù_c⁄¡øck_hèbÀ_size
 = 8192;

1439 i‡(
ù_c⁄¡øck_hèbÀ_size
 < 16)

1440 
ù_c⁄¡øck_hèbÀ_size
 = 16;

1442 
ù_c⁄¡øck_max
 = 8 * 
ù_c⁄¡øck_hèbÀ_size
;

1444 #ifde‡
CONFIG_MIPS_BRCM


1445 
ù_c⁄¡øck_max
=0;

1447 
	`¥ötk
("ip_conntrack version %s (%u buckets, %d max)"

1448 " - %Zd byã†≥∏c⁄¡øck\n", 
IP_CONNTRACK_VERSION
,

1449 
ù_c⁄¡øck_hèbÀ_size
, 
ù_c⁄¡øck_max
,

1450 (
ù_c⁄¡øck
));

1452 
ªt
 = 
	`nf_ªgi°î_sock›t
(&
so_gë‹igd°
);

1453 i‡(
ªt
 != 0) {

1454 
	`¥ötk
(
KERN_ERR
 "UnableÅoÑegisterÇetfilter socket option\n");

1455  
ªt
;

1458 
ù_c⁄¡øck_hash
 = 
	`vmÆloc
((
li°_hód
)

1459 * 
ù_c⁄¡øck_hèbÀ_size
);

1460 i‡(!
ù_c⁄¡øck_hash
) {

1461 
	`¥ötk
(
KERN_ERR
 "UnableÅo create ip_conntrack_hash\n");

1462 
îr_uƒeg_sock›t
;

1465 
ù_c⁄¡øck_ˇchï
 = 
	`kmem_ˇche_¸óã
("ip_conntrack",

1466 (
ù_c⁄¡øck
), 0,

1467 
SLAB_HWCACHE_ALIGN
, 
NULL
, NULL);

1468 i‡(!
ù_c⁄¡øck_ˇchï
) {

1469 
	`¥ötk
(
KERN_ERR
 "UnableÅo create ip_conntrack slab cache\n");

1470 
îr_‰ì_hash
;

1473 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

1475 
	`li°_≠≥nd
(&
¥Ÿocﬁ_li°
, &
ù_c⁄¡øck_¥Ÿocﬁ_t˝
);

1476 
	`li°_≠≥nd
(&
¥Ÿocﬁ_li°
, &
ù_c⁄¡øck_¥Ÿocﬁ_udp
);

1477 
	`li°_≠≥nd
(&
¥Ÿocﬁ_li°
, &
ù_c⁄¡øck_¥Ÿocﬁ_icmp
);

1478 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

1480 
i
 = 0; i < 
ù_c⁄¡øck_hèbÀ_size
; i++)

1481 
	`INIT_LIST_HEAD
(&
ù_c⁄¡øck_hash
[
i
]);

1484 
ù_˘_©èch
 = 
ù_c⁄¡øck_©èch
;

1488 
	`©omic_£t
(&
ù_c⁄¡øck_u¡øcked
.
˘_gíîÆ
.
u£
, 1);

1490 
	`£t_bô
(
IPS_CONFIRMED_BIT
, &
ù_c⁄¡øck_u¡øcked
.
°©us
);

1492 
ù_c⁄¡øck_u¡øcked
.
öfos
[
IP_CT_NEW
].
ma°î
 =

1493 
ù_c⁄¡øck_u¡øcked
.
öfos
[
IP_CT_RELATED
].
ma°î
 =

1494 
ù_c⁄¡øck_u¡øcked
.
öfos
[
IP_CT_RELATED
 + 
IP_CT_IS_REPLY
].
ma°î
 =

1495 &
ù_c⁄¡øck_u¡øcked
.
˘_gíîÆ
;

1497  
ªt
;

1499 
îr_‰ì_hash
:

1500 
	`v‰ì
(
ù_c⁄¡øck_hash
);

1501 
îr_uƒeg_sock›t
:

1502 
	`nf_uƒegi°î_sock›t
(&
so_gë‹igd°
);

1504  -
ENOMEM
;

1505 
	}
}

	@ip_conntrack_ftp.c

11 
	~<löux/c⁄fig.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/√tfûãr.h
>

14 
	~<löux/ù.h
>

15 
	~<löux/˘y≥.h
>

16 
	~<√t/checksum.h
>

17 
	~<√t/t˝.h
>

19 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

20 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

21 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_·p.h
>

23 
MODULE_LICENSE
("GPL");

24 
MODULE_AUTHOR
("Rusty Russell <rusty@rustcorp.com.au>");

25 
MODULE_DESCRIPTION
("ftp connectionÅracking helper");

28 #i‡
deföed
(
CONFIG_MIPS_BRCM
)

29 
	g·p_buf„r
[16384];

31 
	g·p_buf„r
[65536];

34 
DECLARE_LOCK
(
ù_·p_lock
);

35 
moduÀ
 *
	gù_c⁄¡øck_·p
 = 
THIS_MODULE
;

37 
	#MAX_PORTS
 8

	)

38 
	gp‹ts
[
MAX_PORTS
];

39 
	gp‹ts_c
;

40 
MODULE_PARM
(
p‹ts
, "1-" 
__MODULE_STRING
(
MAX_PORTS
) "i");

42 
	gloo£
;

43 
MODULE_PARM
(
loo£
, "i");

46 
	#DEBUGP
 
¥ötk


	)

48 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

51 
åy_rfc959
(c⁄° *, 
size_t
, 
u_öt32_t
 [], );

52 
åy_ïπ
(c⁄° *, 
size_t
, 
u_öt32_t
 [], );

53 
åy_ïsv_ª•⁄£
(c⁄° *, 
size_t
, 
u_öt32_t
 [], );

55 
	s·p_£¨ch
 {

56 
ù_c⁄¡øck_dú
 
	mdú
;

57 c⁄° *
	m∑âîn
;

58 
size_t
 
	m∂í
;

59 
	mskù
;

60 
	mãrm
;

61 
ù_˘_·p_ty≥
 
	m·±y≥
;

62 (*
	mgënum
)(c⁄° *, 
	msize_t
, 
	mu_öt32_t
[], );

63 } 
	g£¨ch
[] = {

65 
IP_CT_DIR_ORIGINAL
,

67 
IP_CT_FTP_PORT
,

68 
åy_rfc959
,

71 
IP_CT_DIR_REPLY
,

73 
IP_CT_FTP_PASV
,

74 
åy_rfc959
,

77 
IP_CT_DIR_ORIGINAL
,

79 
IP_CT_FTP_EPRT
,

80 
åy_ïπ
,

83 
IP_CT_DIR_REPLY
,

85 
IP_CT_FTP_EPSV
,

86 
åy_ïsv_ª•⁄£
,

90 
	$åy_numbî
(c⁄° *
d©a
, 
size_t
 
dÀn
, 
u_öt32_t
 
¨øy
[],

91 
¨øy_size
, 
£p
, 
ãrm
)

93 
u_öt32_t
 
i
, 
Àn
;

95 
	`mem£t
(
¨øy
, 0, ◊ºay[0])*
¨øy_size
);

98 
i
 = 0, 
Àn
 = 0;Üí < 
dÀn
 && i < 
¨øy_size
;Üí++, 
d©a
++) {

99 i‡(*
d©a
 >= '0' && *data <= '9') {

100 
¨øy
[
i
] =áºay[i]*10 + *
d©a
 - '0';

102 i‡(*
d©a
 =
£p
)

103 
i
++;

107 i‡(*
d©a
 =
ãrm
 && 
i
 =
¨øy_size
 - 1)

108  
Àn
;

110 
	`DEBUGP
("Char %u (got %uÇums) `%u' unexpected\n",

111 
Àn
, 
i
, *
d©a
);

115 
	`DEBUGP
("FaûedÅÿfû»%uÇumbî†£∑øãd by %c\n", 
¨øy_size
, 
£p
);

118 
	}
}

121 
åy_rfc959
(c⁄° *
d©a
, 
size_t
 
dÀn
, 
u_öt32_t
 
¨øy
[6],

122 
ãrm
)

124  
åy_numbî
(
d©a
, 
dÀn
, 
¨øy
, 6, ',', 
ãrm
);

128 
gë_p‹t
(c⁄° *
d©a
, 
°¨t
, 
size_t
 
dÀn
, 
dñim
,

129 
u_öt32_t
 
¨øy
[2])

131 
u_öt16_t
 
	gp‹t
 = 0;

132 
	gi
;

134 
	gi
 = 
°¨t
; i < 
	gdÀn
; i++) {

136 i‡(
	gd©a
[
i
] =
dñim
) {

137 i‡(
p‹t
 == 0)

139 
	g¨øy
[0] = 
p‹t
 >> 8;

140 
	g¨øy
[1] = 
p‹t
;

141  
	gi
 + 1;

143 i‡(
	gd©a
[
i
] >'0' && 
d©a
[i] <= '9')

144 
p‹t
 =Ö‹t*10 + 
d©a
[
i
] - '0';

152 
åy_ïπ
(c⁄° *
d©a
, 
size_t
 
dÀn
, 
u_öt32_t
 
¨øy
[6],

153 
ãrm
)

155 
	gdñim
;

156 
	gÀngth
;

160 i‡(
	gdÀn
 <= 3)  0;

161 
	gdñim
 = 
d©a
[0];

162 i‡(
isdigô
(
dñim
Ë|| 
	gdñim
 < 33 || delim > 126

163 || 
	gd©a
[1] !'1' || 
d©a
[2] !
dñim
)

166 
DEBUGP
("EPRT: Got |1|!\n");

168 
	gÀngth
 = 
åy_numbî
(
d©a
 + 3, 
dÀn
 - 3, 
¨øy
, 4, '.', 
dñim
);

169 i‡(
	gÀngth
 == 0)

172 
DEBUGP
("EPRT: Got IPáddress!\n");

174  
gë_p‹t
(
d©a
, 3 + 
Àngth
 + 1, 
dÀn
, 
dñim
, 
¨øy
+4);

178 
åy_ïsv_ª•⁄£
(c⁄° *
d©a
, 
size_t
 
dÀn
, 
u_öt32_t
 
¨øy
[6],

179 
ãrm
)

181 
	gdñim
;

184 i‡(
	gdÀn
 <= 3)  0;

185 
	gdñim
 = 
d©a
[0];

186 i‡(
isdigô
(
dñim
Ë|| 
	gdñim
 < 33 || delim > 126

187 || 
	gd©a
[1] !
dñim
 || 
d©a
[2] != delim)

190  
gë_p‹t
(
d©a
, 3, 
dÀn
, 
dñim
, 
¨øy
+4);

194 
föd_∑âîn
(c⁄° *
d©a
, 
size_t
 
dÀn
,

195 c⁄° *
∑âîn
, 
size_t
 
∂í
,

196 
skù
, 
ãrm
,

197 *
numoff
,

198 *
numÀn
,

199 
u_öt32_t
 
¨øy
[6],

200 (*
gënum
)(c⁄° *, 
size_t
, 
u_öt32_t
[], ))

202 
size_t
 
i
;

204 
	`DEBUGP
("föd_∑âî¿`%s': dÀ¿%u\n", 
∑âîn
, 
dÀn
);

205 i‡(
dÀn
 == 0)

208 i‡(
dÀn
 <
∂í
) {

210 i‡(
	`°∫icmp
(
d©a
, 
∑âîn
, 
dÀn
) == 0)

215 i‡(
	`°∫icmp
(
d©a
, 
∑âîn
, 
∂í
) != 0) {

217 
size_t
 
i
;

219 
	`DEBUGP
("ftp: string mismatch\n");

220 
i
 = 0; i < 
∂í
; i++) {

221 
	`DEBUGP
("ftp:char %u `%c'(%u) vs `%c'(%u)\n",

222 
i
, 
d©a
[i], data[i],

223 
∑âîn
[
i
],Öattern[i]);

229 
	`DEBUGP
("Pattern matches!\n");

232 
i
 = 
∂í
; 
d©a
[i] !
skù
; i++)

233 i‡(
i
 =
dÀn
 - 1)  -1;

236 
i
++;

238 
	`DEBUGP
("Skù≥d u∞tÿ`%c'!\n", 
skù
);

240 *
numoff
 = 
i
;

241 *
numÀn
 = 
	`gënum
(
d©a
 + 
i
, 
dÀn
 - i, 
¨øy
, 
ãrm
);

242 i‡(!*
numÀn
)

245 
	`DEBUGP
("Match succeeded!\n");

247 
	}
}

249 
	$hñp
(
sk_buff
 *
skb
,

250 
ù_c⁄¡øck
 *
˘
,

251 
ù_c⁄¡øck_öfo
 
˘öfo
)

253 
d©aoff
, 
d©Æí
;

254 
t˝hdr
 
t˝h
;

255 
u_öt32_t
 
ﬁd_£q_a·_∆
;

256 
ﬁd_£q_a·_∆_£t
, 
ªt
;

257 
u_öt32_t
 
¨øy
[6] = { 0 };

258 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

259 
m©chÀn
, 
m©choff
;

260 
ù_˘_·p_ma°î
 *
˘_·p_öfo
 = &
˘
->
hñp
.ct_ftp_info;

261 
ù_c⁄¡øck_ex≥˘
 *
exp
;

262 
ù_˘_·p_ex≥˘
 *
exp_·p_öfo
;

264 
i
;

265 
found
 = 0;

268 i‡(
˘öfo
 !
IP_CT_ESTABLISHED


269 && 
˘öfo
 !
IP_CT_ESTABLISHED
+
IP_CT_IS_REPLY
) {

270 
	`DEBUGP
("·p: C⁄¡øcköfÿ%u\n", 
˘öfo
);

271  
NF_ACCEPT
;

274 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
t˝h
, (tcph)) != 0)

275  
NF_ACCEPT
;

277 
d©aoff
 = 
skb
->
nh
.
ùh
->
ihl
*4 + 
t˝h
.
doff
*4;

279 i‡(
d©aoff
 >
skb
->
Àn
) {

280 
	`DEBUGP
("·p: skbÀ¿%u\n", 
skb
->
Àn
);

281  
NF_ACCEPT
;

283 
d©Æí
 = 
skb
->
Àn
 - 
d©aoff
;

285 
	`LOCK_BH
(&
ù_·p_lock
);

286 
	`skb_c›y_bôs
(
skb
, 
d©aoff
, 
·p_buf„r
, skb->
Àn
 - dataoff);

288 
ﬁd_£q_a·_∆_£t
 = 
˘_·p_öfo
->
£q_a·_∆_£t
[
dú
];

289 
ﬁd_£q_a·_∆
 = 
˘_·p_öfo
->
£q_a·_∆
[
dú
];

291 
	`DEBUGP
("c⁄¡øck_·p: d©Æí %u\n", 
d©Æí
);

292 i‡(
·p_buf„r
[
d©Æí
 - 1] == '\n') {

293 
	`DEBUGP
("c⁄¡øck_·p: d©Æí %uÉnd†ö \\n\n", 
d©Æí
);

294 i‡(!
ﬁd_£q_a·_∆_£t


295 || 
	`a·î
(
	`¡ohl
(
t˝h
.
£q
Ë+ 
d©Æí
, 
ﬁd_£q_a·_∆
)) {

296 
	`DEBUGP
("conntrack_ftp: updatingÇlÅo %u\n",

297 
	`¡ohl
(
t˝h
.
£q
Ë+ 
d©Æí
);

298 
˘_·p_öfo
->
£q_a·_∆
[
dú
] =

299 
	`¡ohl
(
t˝h
.
£q
Ë+ 
d©Æí
;

300 
˘_·p_öfo
->
£q_a·_∆_£t
[
dú
] = 1;

304 if(!
ﬁd_£q_a·_∆_£t
 ||

305 (
	`¡ohl
(
t˝h
.
£q
Ë!
ﬁd_£q_a·_∆
)) {

306 
	`DEBUGP
("ip_conntrack_ftp_help: wrong seqÖos %s(%u)\n",

307 
ﬁd_£q_a·_∆_£t
 ? "":"(UNSETË", 
ﬁd_£q_a·_∆
);

308 
ªt
 = 
NF_ACCEPT
;

309 
out
;

314 
¨øy
[0] = (
	`¡ohl
(
˘
->
tu∂ehash
[
dú
].
tu∂e
.
§c
.
ù
) >> 24) & 0xFF;

315 
¨øy
[1] = (
	`¡ohl
(
˘
->
tu∂ehash
[
dú
].
tu∂e
.
§c
.
ù
) >> 16) & 0xFF;

316 
¨øy
[2] = (
	`¡ohl
(
˘
->
tu∂ehash
[
dú
].
tu∂e
.
§c
.
ù
) >> 8) & 0xFF;

317 
¨øy
[3] = 
	`¡ohl
(
˘
->
tu∂ehash
[
dú
].
tu∂e
.
§c
.
ù
) & 0xFF;

319 
i
 = 0; i < 
	`ARRAY_SIZE
(
£¨ch
); i++) {

320 i‡(
£¨ch
[
i
].
dú
 != dir) ;

322 
found
 = 
	`föd_∑âîn
(
·p_buf„r
, 
skb
->
Àn
 - 
d©aoff
,

323 
£¨ch
[
i
].
∑âîn
,

324 
£¨ch
[
i
].
∂í
,

325 
£¨ch
[
i
].
skù
,

326 
£¨ch
[
i
].
ãrm
,

327 &
m©choff
, &
m©chÀn
,

328 
¨øy
,

329 
£¨ch
[
i
].
gënum
);

330 i‡(
found
) ;

332 i‡(
found
 == -1) {

337 i‡(
	`√t_øãlimô
())

338 
	`¥ötk
("conntrack_ftp:Öartial %s %u+%u\n",

339 
£¨ch
[
i
].
∑âîn
,

340 
	`¡ohl
(
t˝h
.
£q
), 
d©Æí
);

341 
ªt
 = 
NF_DROP
;

342 
out
;

343 } i‡(
found
 == 0) {

344 
ªt
 = 
NF_ACCEPT
;

345 
out
;

348 
	`DEBUGP
("conntrack_ftp: match `%.*s' (%u bytesát %u)\n",

349 ()
m©chÀn
, 
d©a
 + 
m©choff
,

350 
m©chÀn
, 
	`¡ohl
(
t˝h
.
£q
Ë+ 
m©choff
);

353 
exp
 = 
	`ù_c⁄¡øck_ex≥˘_Æloc
();

354 i‡(
exp
 =
NULL
) {

355 
ªt
 = 
NF_ACCEPT
;

356 
out
;

359 
exp_·p_öfo
 = &
exp
->
hñp
.exp_ftp_info;

362 i‡(
	`ht⁄l
((
¨øy
[0] << 24) | (array[1] << 16) | (array[2] << 8) |árray[3])

363 =
˘
->
tu∂ehash
[
dú
].
tu∂e
.
§c
.
ù
) {

364 
exp
->
£q
 = 
	`¡ohl
(
t˝h
.£qË+ 
m©choff
;

365 
exp_·p_öfo
->
Àn
 = 
m©chÀn
;

366 
exp_·p_öfo
->
·±y≥
 = 
£¨ch
[
i
].ftptype;

367 
exp_·p_öfo
->
p‹t
 = 
¨øy
[4] << 8 |árray[5];

373 
	`DEBUGP
("conntrack_ftp: NOT RECORDING: %u,%u,%u,%u != %u.%u.%u.%u\n",

374 
¨øy
[0],árray[1],árray[2],árray[3],

375 
	`NIPQUAD
(
˘
->
tu∂ehash
[
dú
].
tu∂e
.
§c
.
ù
));

381 i‡(!
loo£
) {

382 
ªt
 = 
NF_ACCEPT
;

383 
out
;

387 
exp
->
tu∂e
 = ((
ù_c⁄¡øck_tu∂e
)

388 { { 
˘
->
tu∂ehash
[!
dú
].
tu∂e
.
§c
.
ù
,

390 { 
	`ht⁄l
((
¨øy
[0] << 24) | (array[1] << 16)

391 | (
¨øy
[2] << 8) |árray[3]),

392 { .
t˝
 = { 
	`ht⁄s
(
¨øy
[4] << 8 |árray[5]) } },

393 
IPPROTO_TCP
 }});

394 
exp
->
mask
 = ((
ù_c⁄¡øck_tu∂e
)

396 { 0xFFFFFFFF, { .
t˝
 = { 0xFFFF } }, 0xFFFF }});

398 
exp
->
ex≥˘‚
 = 
NULL
;

401 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(
exp
, 
˘
);

402 
ªt
 = 
NF_ACCEPT
;

403 
out
:

404 
	`UNLOCK_BH
(&
ù_·p_lock
);

405  
ªt
;

406 
	}
}

408 
ù_c⁄¡øck_hñ≥r
 
	g·p
[
MAX_PORTS
];

409 
	g·p_«mes
[
MAX_PORTS
][10];

412 
	$föi
()

414 
i
;

415 
i
 = 0; i < 
p‹ts_c
; i++) {

416 
	`DEBUGP
("ip_ct_ftp: unregistering helper forÖort %d\n",

417 
p‹ts
[
i
]);

418 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
·p
[
i
]);

420 
	}
}

422 
__öô
 
	$öô
()

424 
i
, 
ªt
;

425 *
tm≤ame
;

427 i‡(
p‹ts
[0] == 0)

428 
p‹ts
[0] = 
FTP_PORT
;

430 
i
 = 0; (ò< 
MAX_PORTS
Ë&& 
p‹ts
[i]; i++) {

431 
·p
[
i
].
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[i]);

432 
·p
[
i
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

433 
·p
[
i
].
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

434 
·p
[
i
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

435 
·p
[
i
].
max_ex≥˘ed
 = 1;

436 
·p
[
i
].
timeout
 = 0;

437 
·p
[
i
].
Êags
 = 
IP_CT_HELPER_F_REUSE_EXPECT
;

438 
·p
[
i
].
me
 = 
ù_c⁄¡øck_·p
;

439 
·p
[
i
].
hñp
 = help;

441 
tm≤ame
 = &
·p_«mes
[
i
][0];

442 i‡(
p‹ts
[
i
] =
FTP_PORT
)

443 
	`•rötf
(
tm≤ame
, "ftp");

445 
	`•rötf
(
tm≤ame
, "·p-%d", 
p‹ts
[
i
]);

446 
·p
[
i
].
«me
 = 
tm≤ame
;

448 
	`DEBUGP
("ip_ct_ftp:Ñegistering helper forÖort %d\n",

449 
p‹ts
[
i
]);

450 
ªt
 = 
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(&
·p
[
i
]);

452 i‡(
ªt
) {

453 
	`föi
();

454  
ªt
;

456 
p‹ts_c
++;

459 
	}
}

461 
PROVIDES_CONNTRACK
(
·p
);

462 
EXPORT_SYMBOL
(
ù_·p_lock
);

464 
moduÀ_öô
(
öô
);

465 
moduÀ_exô
(
föi
);

	@ip_conntrack_ftp.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_conntrack_gre.c

26 
	~<löux/c⁄fig.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/ty≥s.h
>

29 
	~<löux/timî.h
>

30 
	~<löux/√tfûãr.h
>

31 
	~<löux/ù.h
>

32 
	~<löux/ö.h
>

33 
	~<löux/li°.h
>

35 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

37 
DECLARE_RWLOCK
(
ù_˘_gª_lock
);

38 
	#ASSERT_READ_LOCK
(
x
Ë
	`MUST_BE_READ_LOCKED
(&
ù_˘_gª_lock
)

	)

39 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`MUST_BE_WRITE_LOCKED
(&
ù_˘_gª_lock
)

	)

41 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

42 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿocﬁ.h
>

43 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

44 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_c‹e.h
>

46 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿo_gª.h
>

47 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_µç.h
>

49 
MODULE_LICENSE
("GPL");

50 
MODULE_AUTHOR
("Harald Welte <laforge@gnumonks.org>");

51 
MODULE_DESCRIPTION
("netfilter connectionÅrackingÖrotocol helper for GRE");

54 
	#GRE_TIMEOUT
 (30*
HZ
)

	)

55 
	#GRE_STREAM_TIMEOUT
 (180*
HZ
)

	)

58 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(
KERN_DEBUG
 
__FILE__
 ":" 
__FUNCTION__
 \

59 ": " 
f‹m©
, ## 
¨gs
)

	)

60 
	#DUMP_TUPLE_GRE
(
x
Ë
	`¥ötk
("%u.%u.%u.%u:0x%x -> %u.%u.%u.%u:0x%x:%u:0x%x\n", \

61 
	`NIPQUAD
((
x
)->
§c
.
ù
), 
	`¡ohl
((x)->§c.
u
.
gª
.
key
), \

62 
	`NIPQUAD
((
x
)->
d°
.
ù
), 
	`¡ohl
((x)->d°.
u
.
gª
.
key
), \

63 (
x
)->
d°
.
u
.
gª
.
vîsi⁄
, \

64 
	`¡ohs
((
x
)->
d°
.
u
.
gª
.
¥Ÿocﬁ
))

	)

66 
	#DEBUGP
(
x
, 
¨gs
...)

	)

67 
	#DUMP_TUPLE_GRE
(
x
)

	)

71 
LIST_HEAD
(
gª_keym≠_li°
);

73 
ölöe
 
	$gª_key_cmp‚
(c⁄° 
ù_˘_gª_keym≠
 *
km
,

74 c⁄° 
ù_c⁄¡øck_tu∂e
 *
t
)

76  ((
km
->
tu∂e
.
§c
.
ù
 =
t
->src.ip) &&

77 (
km
->
tu∂e
.
d°
.
ù
 =
t
->dst.ip) &&

78 (
km
->
tu∂e
.
d°
.
¥Ÿ⁄um
 =
t
->dst.protonum) &&

79 (
km
->
tu∂e
.
d°
.
u
.
Æl
 =
t
->dst.u.all));

80 
	}
}

83 
u_öt32_t
 
	$gª_keym≠_lookup
(
ù_c⁄¡øck_tu∂e
 *
t
)

85 
ù_˘_gª_keym≠
 *
km
;

86 
u_öt32_t
 
key
;

88 
	`READ_LOCK
(&
ù_˘_gª_lock
);

89 
km
 = 
	`LIST_FIND
(&
gª_keym≠_li°
, 
gª_key_cmp‚
,

90 
ù_˘_gª_keym≠
 *, 
t
);

91 i‡(!
km
) {

92 
	`READ_UNLOCK
(&
ù_˘_gª_lock
);

96 
key
 = 
km
->
tu∂e
.
§c
.
u
.
gª
.key;

97 
	`READ_UNLOCK
(&
ù_˘_gª_lock
);

99  
key
;

100 
	}
}

103 
	$ù_˘_gª_keym≠_add
(
ù_c⁄¡øck_ex≥˘
 *
exp
,

104 
ù_c⁄¡øck_tu∂e
 *
t
, 
ª∂y
)

106 
ù_˘_gª_keym≠
 *
km
;

108 
km
 = 
	`kmÆloc
((*km), 
GFP_ATOMIC
);

109 i‡(!
km
)

113 
	`mem£t
(
km
, 0, (*km));

115 
	`mem˝y
(&
km
->
tu∂e
, 
t
, (*t));

117 i‡(!
ª∂y
)

118 
exp
->
¥Ÿo
.
gª
.
keym≠_‹ig
 = 
km
;

120 
exp
->
¥Ÿo
.
gª
.
keym≠_ª∂y
 = 
km
;

122 
	`DEBUGP
("addögÇewÉ¡ry %p: ", 
km
);

123 
	`DUMP_TUPLE_GRE
(&
km
->
tu∂e
);

125 
	`WRITE_LOCK
(&
ù_˘_gª_lock
);

126 
	`li°_≠≥nd
(&
gª_keym≠_li°
, 
km
);

127 
	`WRITE_UNLOCK
(&
ù_˘_gª_lock
);

130 
	}
}

133 
	$ù_˘_gª_keym≠_ch™ge
(
ù_˘_gª_keym≠
 *
km
,

134 
ù_c⁄¡øck_tu∂e
 *
t
)

136 
	`DEBUGP
("ch™gögÉ¡ry %∞to: ", 
km
);

137 
	`DUMP_TUPLE_GRE
(
t
);

139 
	`WRITE_LOCK
(&
ù_˘_gª_lock
);

140 
	`mem˝y
(&
km
->
tu∂e
, 
t
, (km->tuple));

141 
	`WRITE_UNLOCK
(&
ù_˘_gª_lock
);

142 
	}
}

145 
	$ù_˘_gª_keym≠_de°roy
(
ù_c⁄¡øck_ex≥˘
 *
exp
)

147 
	`DEBUGP
("íãrög f‹Éx∞%p\n", 
exp
);

148 
	`WRITE_LOCK
(&
ù_˘_gª_lock
);

149 i‡(
exp
->
¥Ÿo
.
gª
.
keym≠_‹ig
) {

150 
	`DEBUGP
("ªmovög %∞‰omÜi°\n", 
exp
->
¥Ÿo
.
gª
.
keym≠_‹ig
);

151 
	`li°_dñ
(&
exp
->
¥Ÿo
.
gª
.
keym≠_‹ig
->
li°
);

152 
	`k‰ì
(
exp
->
¥Ÿo
.
gª
.
keym≠_‹ig
);

153 
exp
->
¥Ÿo
.
gª
.
keym≠_‹ig
 = 
NULL
;

155 i‡(
exp
->
¥Ÿo
.
gª
.
keym≠_ª∂y
) {

156 
	`DEBUGP
("ªmovög %∞‰omÜi°\n", 
exp
->
¥Ÿo
.
gª
.
keym≠_ª∂y
);

157 
	`li°_dñ
(&
exp
->
¥Ÿo
.
gª
.
keym≠_ª∂y
->
li°
);

158 
	`k‰ì
(
exp
->
¥Ÿo
.
gª
.
keym≠_ª∂y
);

159 
exp
->
¥Ÿo
.
gª
.
keym≠_ª∂y
 = 
NULL
;

161 
	`WRITE_UNLOCK
(&
ù_˘_gª_lock
);

162 
	}
}

168 
	$gª_övît_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

169 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
)

171 
tu∂e
->
d°
.
u
.
gª
.
¥Ÿocﬁ
 = 
‹ig
->dst.u.gre.protocol;

172 
tu∂e
->
d°
.
u
.
gª
.
vîsi⁄
 = 
‹ig
->dst.u.gre.version;

174 
tu∂e
->
d°
.
u
.
gª
.
key
 = 
‹ig
->
§c
.u.gre.key;

175 
tu∂e
->
§c
.
u
.
gª
.
key
 = 
‹ig
->
d°
.u.gre.key;

178 
	}
}

181 
	$gª_pkt_to_tu∂e
(c⁄° 
sk_buff
 *
skb
,

182 
d©aoff
,

183 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

190 
gª_hdr
 
gªhdr
;

191 
gª_hdr_µç
 
pgªhdr
;

192 
u_öt32_t
 
§ckey
;

194 i‡(
	`skb_c›y_bôs
(
skb
, 
d©aoff
, &
gªhdr
, (
gª_hdr
)) != 0)

196 i‡(
	`skb_c›y_bôs
(
skb
, 
d©aoff
, &
pgªhdr
, (
gª_hdr_µç
)) != 0)

201 
tu∂e
->
d°
.
u
.
gª
.
vîsi⁄
 = 
gªhdr
.version;

202 
tu∂e
->
d°
.
u
.
gª
.
¥Ÿocﬁ
 = 
gªhdr
.protocol;

204 
gªhdr
.
vîsi⁄
) {

205 
GRE_VERSION_1701
:

206 i‡(!
gªhdr
.
key
) {

207 
	`DEBUGP
("Can'tÅrack GRE without key\n");

210 
tu∂e
->
d°
.
u
.
gª
.
key
 = *(
	`gª_key
(&
gªhdr
));

213 
GRE_VERSION_PPTP
:

214 i‡(
	`¡ohs
(
gªhdr
.
¥Ÿocﬁ
Ë!
GRE_PROTOCOL_PPTP
) {

215 
	`DEBUGP
("GRE_VERSION_PPTP but unknownÖroto\n");

218 
tu∂e
->
d°
.
u
.
gª
.
key
 = 
	`ht⁄l
(
	`¡ohs
(
pgªhdr
.
ˇŒ_id
));

222 
	`¥ötk
(
KERN_WARNING
 "unknown GRE version %hu\n",

223 
tu∂e
->
d°
.
u
.
gª
.
vîsi⁄
);

227 
§ckey
 = 
	`gª_keym≠_lookup
(
tu∂e
);

230 
	`DEBUGP
("found sr¯key %x f‹Åu∂ê", 
	`¡ohl
(
§ckey
));

231 
	`DUMP_TUPLE_GRE
(
tu∂e
);

233 
tu∂e
->
§c
.
u
.
gª
.
key
 = 
§ckey
;

236 
	}
}

239 
	$gª_¥öt_tu∂e
(*
buf„r
,

240 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

242  
	`•rötf
(
buf„r
, "version=%dÖrotocol=0x%04x srckey=0x%x dstkey=0x%x ",

243 
tu∂e
->
d°
.
u
.
gª
.
vîsi⁄
,

244 
	`¡ohs
(
tu∂e
->
d°
.
u
.
gª
.
¥Ÿocﬁ
),

245 
	`¡ohl
(
tu∂e
->
§c
.
u
.
gª
.
key
),

246 
	`¡ohl
(
tu∂e
->
d°
.
u
.
gª
.
key
));

247 
	}
}

250 
	$gª_¥öt_c⁄¡øck
(*
buf„r
,

251 c⁄° 
ù_c⁄¡øck
 *
˘
)

253  
	`•rötf
(
buf„r
, "timeout=%u, stream_timeout=%u ",

254 (
˘
->
¥Ÿo
.
gª
.
timeout
 / 
HZ
),

255 (
˘
->
¥Ÿo
.
gª
.
°ªam_timeout
 / 
HZ
));

256 
	}
}

259 
	$gª_∑ckë
(
ù_c⁄¡øck
 *
˘
,

260 c⁄° 
sk_buff
 *
skb
,

261 
ù_c⁄¡øck_öfo
 
c⁄¡øcköfo
)

265 i‡(
˘
->
°©us
 & 
IPS_SEEN_REPLY
) {

266 
	`ù_˘_ª‰esh
(
˘
, ct->
¥Ÿo
.
gª
.
°ªam_timeout
);

268 
	`£t_bô
(
IPS_ASSURED_BIT
, &
˘
->
°©us
);

270 
	`ù_˘_ª‰esh
(
˘
, ct->
¥Ÿo
.
gª
.
timeout
);

272  
NF_ACCEPT
;

273 
	}
}

276 
	$gª_√w
(
ù_c⁄¡øck
 *
˘
,

277 c⁄° 
sk_buff
 *
skb
)

279 
	`DEBUGP
(": ");

280 
	`DUMP_TUPLE_GRE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

284 
˘
->
¥Ÿo
.
gª
.
°ªam_timeout
 = 
GRE_STREAM_TIMEOUT
;

285 
˘
->
¥Ÿo
.
gª
.
timeout
 = 
GRE_TIMEOUT
;

288 
	}
}

292 
	$gª_de°roy
(
ù_c⁄¡øck
 *
˘
)

294 
ù_c⁄¡øck_ex≥˘
 *
ma°î
 = 
˘
->master;

296 
	`DEBUGP
("Éntering\n");

298 i‡(!
ma°î
) {

299 
	`DEBUGP
("nÿma°îÉx∞f‹ cà%p\n", 
˘
);

303 
	`ù_˘_gª_keym≠_de°roy
(
ma°î
);

304 
	}
}

307 
ù_c⁄¡øck_¥Ÿocﬁ
 
	ggª
 = { { 
NULL
, NULL }, 
IPPROTO_GRE
,

309 
gª_pkt_to_tu∂e
,

310 
gª_övît_tu∂e
,

311 
gª_¥öt_tu∂e
,

312 
gª_¥öt_c⁄¡øck
,

313 
gª_∑ckë
,

314 
gª_√w
,

315 
gª_de°roy
,

316 
NULL
,

317 
THIS_MODULE
 };

320 
__öô
 
	$öô
()

322 
ªtcode
;

325 i‡((
ªtcode
 = 
	`ù_c⁄¡øck_¥Ÿocﬁ_ªgi°î
(&
gª
))) {

326 
	`¥ötk
(
KERN_ERR
 "UnableÅoÑegister conntrackÖrotocol "

327 "hñ≥∏f‹ gª: %d\n", 
ªtcode
);

328  -
EIO
;

332 
	}
}

334 
__exô
 
	$föi
()

336 
li°_hód
 *
pos
, *
n
;

340 
	`WRITE_LOCK
(&
ù_˘_gª_lock
);

341 
	`li°_f‹_óch_ß„
(
pos
, 
n
, &
gª_keym≠_li°
) {

342 
	`DEBUGP
("dñëög keym≠ %∞© moduÀ u∆ﬂdÅime\n", 
pos
);

343 
	`li°_dñ
(
pos
);

344 
	`k‰ì
(
pos
);

346 
	`WRITE_UNLOCK
(&
ù_˘_gª_lock
);

348 
	`ù_c⁄¡øck_¥Ÿocﬁ_uƒegi°î
(&
gª
);

349 
	}
}

351 
EXPORT_SYMBOL
(
ù_˘_gª_keym≠_add
);

352 
EXPORT_SYMBOL
(
ù_˘_gª_keym≠_ch™ge
);

353 
EXPORT_SYMBOL
(
ù_˘_gª_keym≠_de°roy
);

355 
moduÀ_öô
(
öô
);

356 
moduÀ_exô
(
föi
);

	@ip_conntrack_gre.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_conntrack_h323.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/√tfûãr.h
>

14 
	~<löux/ù.h
>

15 
	~<√t/checksum.h
>

16 
	~<√t/t˝.h
>

18 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

19 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

20 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_c‹e.h
>

21 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

22 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_tu∂e.h
>

23 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_h323.h
>

25 
MODULE_AUTHOR
("Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>");

26 
MODULE_DESCRIPTION
("H.323 'brute force' connectionÅracking module");

27 
MODULE_LICENSE
("GPL");

29 
DECLARE_LOCK
(
ù_h323_lock
);

30 
moduÀ
 *
	gù_c⁄¡øck_h323
 = 
THIS_MODULE
;

33 
	#DEBUGP
 
¥ötk


	)

35 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

39 
	$h245_hñp
(
sk_buff
 *
skb
,

40 
ù_c⁄¡øck
 *
˘
,

41 
ù_c⁄¡øck_öfo
 
˘öfo
)

43 
t˝hdr
 *
t˝h
 = (*)
skb
->
nh
.
ùh
 + skb->nh.ùh->
ihl
 * 4;

44 *
d©a
 = (*Ë
t˝h
 +Å˝h->
doff
 * 4;

45 *
d©a_limô
;

46 
u_öt32_t
 
t˝Àn
 = 
skb
->
Àn
 - skb->
nh
.
ùh
->
ihl
 * 4;

47 
u_öt32_t
 
d©Æí
 = 
t˝Àn
 - 
t˝h
->
doff
 * 4;

48 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

49 
ù_˘_h225_ma°î
 *
öfo
 = &
˘
->
hñp
.
˘_h225_öfo
;

50 
ù_c⁄¡øck_ex≥˘
 
ex≥˘
, *
exp
 = &expect;

51 
ù_˘_h225_ex≥˘
 *
exp_öfo
 = &
exp
->
hñp
.
exp_h225_öfo
;

52 
u_öt16_t
 
d©a_p‹t
;

53 
u_öt32_t
 
d©a_ù
;

54 
i
;

56 
	`DEBUGP
("ct_h245_help: helpÉntered %u.%u.%u.%u:%u->%u.%u.%u.%u:%u\n",

57 
	`NIPQUAD
(
ùh
->
ßddr
), 
	`¡ohs
(
t˝h
->
sour˚
),

58 
	`NIPQUAD
(
ùh
->
daddr
), 
	`¡ohs
(
t˝h
->
de°
));

61 i‡(!
öfo
)

62  
NF_ACCEPT
;

65 i‡(
˘öfo
 !
IP_CT_ESTABLISHED


66 && 
˘öfo
 !
IP_CT_ESTABLISHED
 + 
IP_CT_IS_REPLY
) {

67 
	`DEBUGP
("˘_h245_hñp: C⁄¡øcköfÿ%u\n", 
˘öfo
);

68  
NF_ACCEPT
;

72 i‡(
t˝Àn
 < (
t˝hdr
Ë||Å˝À¿< 
t˝h
->
doff
 * 4 + 5) {

73 
	`DEBUGP
("˘_h245_hñp:Å˝À¿%u\n", ()
t˝Àn
);

74  
NF_ACCEPT
;

79 i‡(
	`t˝_v4_check
(
t˝h
, 
t˝Àn
, 
skb
->
nh
.
ùh
->
ßddr
, skb->nh.ùh->
daddr
,

80 
	`csum_∑πül
((*)
t˝h
, 
t˝Àn
, 0))) {

81 
	`DEBUGP
("ct_h245_help: bad csum: %p %u %u.%u.%u.%u %u.%u.%u.%u\n",

82 
t˝h
, 
t˝Àn
, 
	`NIPQUAD
(
skb
->
nh
.
ùh
->
ßddr
),

83 
	`NIPQUAD
(
skb
->
nh
.
ùh
->
daddr
));

84  
NF_ACCEPT
;

87 
d©a_limô
 = (*Ë
d©a
 + 
d©Æí
;

90 
i
 = 0; 
d©a
 < (
d©a_limô
 - 5); data++, i++) {

91 
d©a_ù
 = *((
u_öt32_t
 *)
d©a
);

92 i‡(
d©a_ù
 =
skb
->
nh
.
ùh
->
ßddr
) {

93 
d©a_p‹t
 = *((
u_öt16_t
 *)(
d©a
 + 4));

94 
	`mem£t
(&
ex≥˘
, 0, (expect));

96 
	`DEBUGP
("ct_h245_help:Çew RTCP/RTPÑequested %u.%u.%u.%u:->%u.%u.%u.%u:%u\n",

97 
	`NIPQUAD
(
˘
->
tu∂ehash
[!
dú
].
tu∂e
.
§c
.
ù
),

98 
	`NIPQUAD
(
skb
->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
d©a_p‹t
));

99 
	`LOCK_BH
(&
ù_h323_lock
);

100 
öfo
->
is_h225
 = 
H225_PORT
 + 1;

101 
exp_öfo
->
p‹t
 = 
d©a_p‹t
;

102 
exp_öfo
->
dú
 = dir;

103 
exp_öfo
->
off£t
 = 
i
;

105 
exp
->
£q
 = 
	`¡ohl
(
t˝h
->£qË+ 
i
;

107 
exp
->
tu∂e
 = ((
ù_c⁄¡øck_tu∂e
)

108 { { 
˘
->
tu∂ehash
[!
dú
].
tu∂e
.
§c
.
ù
,

110 { 
d©a_ù
,

111 { .
t˝
 = { 
d©a_p‹t
 } },

112 
IPPROTO_UDP
 }});

113 
exp
->
mask
 = ((
ù_c⁄¡øck_tu∂e
)

115 { 0xFFFFFFFF, { .
t˝
 = { 0xFFFF } }, 0xFFFF }});

117 
exp
->
ex≥˘‚
 = 
NULL
;

120 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(
exp
, 
˘
);

122 
	`UNLOCK_BH
(&
ù_h323_lock
);

126  
NF_ACCEPT
;

128 
	}
}

131 
ù_c⁄¡øck_hñ≥r
 
	gh245
 =

132 { { 
NULL
, NULL },

133 
«me
 : "H.245",

134 
Êags
: 
IP_CT_HELPER_F_REUSE_EXPECT
,

135 
me
: 
THIS_MODULE
,

136 
max_ex≥˘ed
: 8,

137 
timeout
: 240,

138 
tu∂e
: { { 0, { 0 } },

139 { 0, { 0 }, 
IPPROTO_TCP
 } },

140 
mask
: { { 0, { 0xFFFF } },

142 
h245_hñp


145 
	$h225_ex≥˘
(
ù_c⁄¡øck
 *
˘
)

147 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

148 
˘
->
hñ≥r
 = &
h245
;

149 
	`DEBUGP
("h225_ex≥˘: hñ≥∏f‹ %∞added\n", 
˘
);

150 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

152  
NF_ACCEPT
;

153 
	}
}

156 
	$h225_hñp
(
sk_buff
 *
skb
,

157 
ù_c⁄¡øck
 *
˘
,

158 
ù_c⁄¡øck_öfo
 
˘öfo
)

160 
t˝hdr
 *
t˝h
 = (*)
skb
->
nh
.
ùh
 + skb->nh.ùh->
ihl
 * 4;

161 *
d©a
 = (*Ë
t˝h
 +Å˝h->
doff
 * 4;

162 *
d©a_limô
;

163 
u_öt32_t
 
t˝Àn
 = 
skb
->
Àn
 - skb->
nh
.
ùh
->
ihl
 * 4;

164 
u_öt32_t
 
d©Æí
 = 
t˝Àn
 - 
t˝h
->
doff
 * 4;

165 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

166 
ù_˘_h225_ma°î
 *
öfo
 = &
˘
->
hñp
.
˘_h225_öfo
;

167 
ù_c⁄¡øck_ex≥˘
 
ex≥˘
, *
exp
 = &expect;

168 
ù_˘_h225_ex≥˘
 *
exp_öfo
 = &
exp
->
hñp
.
exp_h225_öfo
;

169 
u_öt16_t
 
d©a_p‹t
;

170 
u_öt32_t
 
d©a_ù
;

171 
i
;

173 
	`DEBUGP
("ct_h225_help: helpÉntered %u.%u.%u.%u:%u->%u.%u.%u.%u:%u\n",

174 
	`NIPQUAD
(
skb
->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
t˝h
->
sour˚
),

175 
	`NIPQUAD
(
skb
->
nh
.
ùh
->
daddr
), 
	`¡ohs
(
t˝h
->
de°
));

178 i‡(!
öfo
)

179  
NF_ACCEPT
;

182 i‡(
˘öfo
 !
IP_CT_ESTABLISHED


183 && 
˘öfo
 !
IP_CT_ESTABLISHED
 + 
IP_CT_IS_REPLY
) {

184 
	`DEBUGP
("˘_h225_hñp: C⁄¡øcköfÿ%u\n", 
˘öfo
);

185  
NF_ACCEPT
;

189 i‡(
t˝Àn
 < (
t˝hdr
Ë||Å˝À¿< 
t˝h
->
doff
 * 4 + 5) {

190 
	`DEBUGP
("˘_h225_hñp:Å˝À¿%u\n", ()
t˝Àn
);

191  
NF_ACCEPT
;

196 i‡(
	`t˝_v4_check
(
t˝h
, 
t˝Àn
, 
skb
->
nh
.
ùh
->
ßddr
, skb->nh.ùh->
daddr
,

197 
	`csum_∑πül
((*)
t˝h
, 
t˝Àn
, 0))) {

198 
	`DEBUGP
("ct_h225_help: bad csum: %p %u %u.%u.%u.%u %u.%u.%u.%u\n",

199 
t˝h
, 
t˝Àn
, 
	`NIPQUAD
(
skb
->
nh
.
ùh
->
ßddr
),

200 
	`NIPQUAD
(
skb
->
nh
.
ùh
->
daddr
));

201  
NF_ACCEPT
;

204 
d©a_limô
 = (*Ë
d©a
 + 
d©Æí
;

207 
i
 = 0; 
d©a
 < (
d©a_limô
 - 5); data++, i++) {

208 
d©a_ù
 = *((
u_öt32_t
 *)
d©a
);

209 i‡(
d©a_ù
 =
skb
->
nh
.
ùh
->
ßddr
) {

210 
d©a_p‹t
 = *((
u_öt16_t
 *)(
d©a
 + 4));

211 i‡(
d©a_p‹t
 =
t˝h
->
sour˚
) {

213 
	`DEBUGP
("ct_h225_help: sourceCallSignalAddress from %u.%u.%u.%u\n",

214 
	`NIPQUAD
(
skb
->
nh
.
ùh
->
ßddr
));

217 #ifde‡
CONFIG_IP_NF_NAT_NEEDED


218 
	`LOCK_BH
(&
ù_h323_lock
);

219 
öfo
->
dú
 = dir;

220 
öfo
->
£q
[
IP_CT_DIR_ORIGINAL
] = 
	`¡ohl
(
t˝h
->£qË+ 
i
;

221 
öfo
->
off£t
[
IP_CT_DIR_ORIGINAL
] = 
i
;

222 
	`UNLOCK_BH
(&
ù_h323_lock
);

225 
	`mem£t
(&
ex≥˘
, 0, (expect));

228 
	`LOCK_BH
(&
ù_h323_lock
);

229 
öfo
->
is_h225
 = 
H225_PORT
;

230 
exp_öfo
->
p‹t
 = 
d©a_p‹t
;

231 
exp_öfo
->
dú
 = dir;

232 
exp_öfo
->
off£t
 = 
i
;

234 
exp
->
£q
 = 
	`¡ohl
(
t˝h
->£qË+ 
i
;

236 
exp
->
tu∂e
 = ((
ù_c⁄¡øck_tu∂e
)

237 { { 
˘
->
tu∂ehash
[!
dú
].
tu∂e
.
§c
.
ù
,

239 { 
d©a_ù
,

240 { .
t˝
 = { 
d©a_p‹t
 } },

241 
IPPROTO_TCP
 }});

242 
exp
->
mask
 = ((
ù_c⁄¡øck_tu∂e
)

244 { 0xFFFFFFFF, { .
t˝
 = { 0xFFFF } }, 0xFFFF }});

246 
exp
->
ex≥˘‚
 = 
h225_ex≥˘
;

249 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(
exp
, 
˘
);

251 
	`DEBUGP
("ct_h225_help:Çew H.245Ñequested %u.%u.%u.%u->%u.%u.%u.%u:%u\n",

252 
	`NIPQUAD
(
˘
->
tu∂ehash
[!
dú
].
tu∂e
.
§c
.
ù
),

253 
	`NIPQUAD
(
skb
->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
d©a_p‹t
));

255 
	`UNLOCK_BH
(&
ù_h323_lock
);

257 #ifde‡
CONFIG_IP_NF_NAT_NEEDED


258 } i‡(
d©a_ù
 =
skb
->
nh
.
ùh
->
daddr
) {

259 
d©a_p‹t
 = *((
u_öt16_t
 *)(
d©a
 + 4));

260 i‡(
d©a_p‹t
 =
t˝h
->
de°
) {

262 
	`DEBUGP
("ct_h225_help: destCallSignalAddress %u.%u.%u.%u\n",

263 
	`NIPQUAD
(
skb
->
nh
.
ùh
->
daddr
));

266 
	`LOCK_BH
(&
ù_h323_lock
);

267 
öfo
->
dú
 = dir;

268 
öfo
->
£q
[
IP_CT_DIR_REPLY
] = 
	`¡ohl
(
t˝h
->£qË+ 
i
;

269 
öfo
->
off£t
[
IP_CT_DIR_REPLY
] = 
i
;

270 
	`UNLOCK_BH
(&
ù_h323_lock
);

276  
NF_ACCEPT
;

278 
	}
}

280 
ù_c⁄¡øck_hñ≥r
 
	gh225
 =

281 { { 
NULL
, NULL },

283 
IP_CT_HELPER_F_REUSE_EXPECT
,

284 
THIS_MODULE
,

287 { { 0, { 
__c⁄°™t_ht⁄s
(
H225_PORT
) } },

288 { 0, { 0 }, 
IPPROTO_TCP
 } },

291 
h225_hñp


294 
__öô
 
	$öô
()

296  
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(&
h225
);

297 
	}
}

299 
__exô
 
	$föi
()

302 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
h225
);

303 
	}
}

305 
EXPORT_SYMBOL
(
ù_h323_lock
);

307 
moduÀ_öô
(
öô
);

308 
moduÀ_exô
(
föi
);

	@ip_conntrack_h323.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_conntrack_irc.c

25 
	~<löux/c⁄fig.h
>

26 
	~<löux/moduÀ.h
>

27 
	~<löux/√tfûãr.h
>

28 
	~<löux/ù.h
>

29 
	~<√t/checksum.h
>

30 
	~<√t/t˝.h
>

32 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

33 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

34 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_úc.h
>

36 
	#MAX_PORTS
 8

	)

37 
	gp‹ts
[
MAX_PORTS
];

38 
	gp‹ts_c
;

39 
	gmax_dcc_ch™√ls
 = 8;

40 
	gdcc_timeout
 = 300;

42 
	gúc_buf„r
[65536];

44 
MODULE_AUTHOR
("Harald Welte <laforge@netfilter.org>");

45 
MODULE_DESCRIPTION
("IRC (DCC) connectionÅracking helper");

46 
MODULE_LICENSE
("GPL");

47 
MODULE_PARM
(
p‹ts
, "1-" 
__MODULE_STRING
(
MAX_PORTS
) "i");

48 
MODULE_PARM_DESC
(
p‹ts
, "portÇumbers of IRC servers");

49 
MODULE_PARM
(
max_dcc_ch™√ls
, "i");

50 
MODULE_PARM_DESC
(
max_dcc_ch™√ls
, "maxÇumber ofÉxpected DCC channelsÖer IRC session");

51 
MODULE_PARM
(
dcc_timeout
, "i");

52 
MODULE_PARM_DESC
(
dcc_timeout
, "timeout on for unestablished DCC channels");

54 *
	gdc˝rŸos
[] = { "SEND ", "CHAT ", "MOVE ", "TSEND ", "SCHAT " };

55 
	#MINMATCHLEN
 5

	)

57 
DECLARE_LOCK
(
ù_úc_lock
);

58 
moduÀ
 *
	gù_c⁄¡øck_úc
 = 
THIS_MODULE
;

61 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(
KERN_DEBUG
 "%s:%s:" format, \

62 
__FILE__
, 
__FUNCTION__
 , ## 
¨gs
)

	)

64 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

67 
	$∑r£_dcc
(*
d©a
, *
d©a_íd
, 
u_öt32_t
 * 
ù
, 
u_öt16_t
 * 
p‹t
,

68 **
ad_beg_p
, **
ad_íd_p
)

80 *
d©a
++ != ' ')

81 i‡(
d©a
 > 
d©a_íd
 - 12)

84 *
ad_beg_p
 = 
d©a
;

85 *
ù
 = 
	`sim∂e_°πoul
(
d©a
, &data, 10);

88 *
d©a
 == ' ') {

89 i‡(
d©a
 >
d©a_íd
)

91 
d©a
++;

94 *
p‹t
 = 
	`sim∂e_°πoul
(
d©a
, &data, 10);

95 *
ad_íd_p
 = 
d©a
;

98 
	}
}

100 
	$hñp
(
sk_buff
 *
skb
,

101 
ù_c⁄¡øck
 *
˘
, 
ù_c⁄¡øck_öfo
 
˘öfo
)

103 
d©aoff
;

104 
t˝hdr
 
t˝h
;

105 *
d©a
, *
d©a_limô
;

106 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

107 
ù_c⁄¡øck_ex≥˘
 *
exp
;

108 
ù_˘_úc_ex≥˘
 *
exp_úc_öfo
 = 
NULL
;

110 
u_öt32_t
 
dcc_ù
;

111 
u_öt16_t
 
dcc_p‹t
;

112 
i
;

113 *
addr_beg_p
, *
addr_íd_p
;

115 
	`DEBUGP
("entered\n");

118 i‡(
dú
 =
IP_CT_DIR_REPLY
)

119  
NF_ACCEPT
;

122 i‡(
˘öfo
 !
IP_CT_ESTABLISHED


123 && 
˘öfo
 !
IP_CT_ESTABLISHED
 + 
IP_CT_IS_REPLY
) {

124 
	`DEBUGP
("C⁄¡øcköfÿ%u\n", 
˘öfo
);

125  
NF_ACCEPT
;

129 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
t˝h
, (tcph)) != 0)

130  
NF_ACCEPT
;

133 
d©aoff
 = 
skb
->
nh
.
ùh
->
ihl
*4 + 
t˝h
.
doff
*4;

134 i‡(
d©aoff
 >
skb
->
Àn
)

135  
NF_ACCEPT
;

137 
	`LOCK_BH
(&
ù_úc_lock
);

138 
	`skb_c›y_bôs
(
skb
, 
d©aoff
, 
úc_buf„r
, skb->
Àn
 - dataoff);

140 
d©a
 = 
úc_buf„r
;

141 
d©a_limô
 = 
úc_buf„r
 + 
skb
->
Àn
 - 
d©aoff
;

145 
d©a
 < (
d©a_limô
 - (19 + 
MINMATCHLEN
))) {

146 i‡(
	`memcmp
(
d©a
, "\1DCC ", 5)) {

147 
d©a
++;

151 
d©a
 += 5;

154 
	`DEBUGP
("DCC found in master %u.%u.%u.%u:%u %u.%u.%u.%u:%u...\n",

155 
	`NIPQUAD
(
ùh
->
ßddr
), 
	`¡ohs
(
t˝h
.
sour˚
),

156 
	`NIPQUAD
(
ùh
->
daddr
), 
	`¡ohs
(
t˝h
.
de°
));

158 
i
 = 0; i < 
	`ARRAY_SIZE
(
dc˝rŸos
); i++) {

159 i‡(
	`memcmp
(
d©a
, 
dc˝rŸos
[
i
], 
	`°æí
(dccprotos[i]))) {

164 
	`DEBUGP
("DCC %†dëe˘ed\n", 
dc˝rŸos
[
i
]);

165 
d©a
 +
	`°æí
(
dc˝rŸos
[
i
]);

169 i‡(
	`∑r£_dcc
((*)
d©a
, 
d©a_limô
, &
dcc_ù
,

170 &
dcc_p‹t
, &
addr_beg_p
, &
addr_íd_p
)) {

172 
	`DEBUGP
("unableÅoÖarse dcc command\n");

175 
	`DEBUGP
("DCC bound ip/port: %u.%u.%u.%u:%u\n",

176 
	`HIPQUAD
(
dcc_ù
), 
dcc_p‹t
);

180 i‡(
˘
->
tu∂ehash
[
dú
].
tu∂e
.
§c
.
ù
 !
	`ht⁄l
(
dcc_ù
)

181 && 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
 !
	`ht⁄l
(
dcc_ù
)) {

182 i‡(
	`√t_øãlimô
())

183 
	`¥ötk
(
KERN_WARNING


186 
	`NIPQUAD
(
˘
->
tu∂ehash
[
dú
].
tu∂e
.
§c
.
ù
),

187 
	`HIPQUAD
(
dcc_ù
), 
dcc_p‹t
);

192 
exp
 = 
	`ù_c⁄¡øck_ex≥˘_Æloc
();

193 i‡(
exp
 =
NULL
)

194 
out
;

196 
exp_úc_öfo
 = &
exp
->
hñp
.exp_irc_info;

200 
	`DEBUGP
("t˝h->£q = %u\n", 
t˝h
.
£q
);

201 
exp
->
£q
 = 
	`¡ohl
(
t˝h
.£qË+ (
addr_beg_p
 - 
úc_buf„r
);

202 
exp_úc_öfo
->
Àn
 = (
addr_íd_p
 - 
addr_beg_p
);

203 
exp_úc_öfo
->
p‹t
 = 
dcc_p‹t
;

204 
	`DEBUGP
("wrote info seq=%u (ofs=%u),Üen=%d\n",

205 
exp
->
£q
, (
addr_íd_p
 - 
_d©a
), 
exp_úc_öfo
->
Àn
);

207 
exp
->
tu∂e
 = ((
ù_c⁄¡øck_tu∂e
)

209 { 
˘
->
tu∂ehash
[
dú
].
tu∂e
.
§c
.
ù
, { .
t˝
 = { 
	`ht⁄s
(
dcc_p‹t
) } },

210 
IPPROTO_TCP
 }});

211 
exp
->
mask
 = ((
ù_c⁄¡øck_tu∂e
)

213 { 0xFFFFFFFF, { .
t˝
 = { 0xFFFF } }, 0xFFFF }});

215 
exp
->
ex≥˘‚
 = 
NULL
;

217 
	`DEBUGP
("expect_related %u.%u.%u.%u:%u-%u.%u.%u.%u:%u\n",

218 
	`NIPQUAD
(
exp
->
tu∂e
.
§c
.
ù
),

219 
	`¡ohs
(
exp
->
tu∂e
.
§c
.
u
.
t˝
.
p‹t
),

220 
	`NIPQUAD
(
exp
->
tu∂e
.
d°
.
ù
),

221 
	`¡ohs
(
exp
->
tu∂e
.
d°
.
u
.
t˝
.
p‹t
));

223 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(
exp
, 
˘
);

225 
out
;

229 
out
:

230 
	`UNLOCK_BH
(&
ù_úc_lock
);

231  
NF_ACCEPT
;

232 
	}
}

234 
ù_c⁄¡øck_hñ≥r
 
	gúc_hñ≥rs
[
MAX_PORTS
];

235 
	gúc_«mes
[
MAX_PORTS
][10];

237 
föi
();

239 
__öô
 
	$öô
()

241 
i
, 
ªt
;

242 
ù_c⁄¡øck_hñ≥r
 *
hÕr
;

243 *
tm≤ame
;

245 i‡(
max_dcc_ch™√ls
 < 1) {

246 
	`¥ötk
("ip_conntrack_irc: max_dcc_channels must beáÖositive integer\n");

247  -
EBUSY
;

249 i‡(
dcc_timeout
 < 0) {

250 
	`¥ötk
("ip_conntrack_irc: dcc_timeout must beáÖositive integer\n");

251  -
EBUSY
;

255 i‡(
p‹ts
[0] == 0)

256 
p‹ts
[0] = 
IRC_PORT
;

258 
i
 = 0; (ò< 
MAX_PORTS
Ë&& 
p‹ts
[i]; i++) {

259 
hÕr
 = &
úc_hñ≥rs
[
i
];

260 
hÕr
->
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[
i
]);

261 
hÕr
->
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

262 
hÕr
->
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

263 
hÕr
->
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

264 
hÕr
->
max_ex≥˘ed
 = 
max_dcc_ch™√ls
;

265 
hÕr
->
timeout
 = 
dcc_timeout
;

266 
hÕr
->
Êags
 = 
IP_CT_HELPER_F_REUSE_EXPECT
;

267 
hÕr
->
me
 = 
ù_c⁄¡øck_úc
;

268 
hÕr
->
hñp
 = help;

270 
tm≤ame
 = &
úc_«mes
[
i
][0];

271 i‡(
p‹ts
[
i
] =
IRC_PORT
)

272 
	`•rötf
(
tm≤ame
, "irc");

274 
	`•rötf
(
tm≤ame
, "úc-%d", 
i
);

275 
hÕr
->
«me
 = 
tm≤ame
;

277 
	`DEBUGP
("p‹à#%d: %d\n", 
i
, 
p‹ts
[i]);

279 
ªt
 = 
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(
hÕr
);

281 i‡(
ªt
) {

282 
	`¥ötk
("ip_conntrack_irc: ERRORÑegisteringÖort %d\n",

283 
p‹ts
[
i
]);

284 
	`föi
();

285  -
EBUSY
;

287 
p‹ts_c
++;

290 
	}
}

294 
	$föi
()

296 
i
;

297 
i
 = 0; i < 
p‹ts_c
; i++) {

298 
	`DEBUGP
("unregisteringÖort %d\n",

299 
p‹ts
[
i
]);

300 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
úc_hñ≥rs
[
i
]);

302 
	}
}

304 
PROVIDES_CONNTRACK
(
úc
);

305 
EXPORT_SYMBOL
(
ù_úc_lock
);

307 
moduÀ_öô
(
öô
);

308 
moduÀ_exô
(
föi
);

	@ip_conntrack_irc.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_conntrack_pptp.c

38 
	~<löux/c⁄fig.h
>

39 
	~<löux/moduÀ.h
>

40 
	~<löux/√tfûãr.h
>

41 
	~<löux/ù.h
>

42 
	~<√t/checksum.h
>

43 
	~<√t/t˝.h
>

45 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

46 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

47 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿo_gª.h
>

48 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_µç.h
>

50 
	#IP_CT_PPTP_VERSION
 "1.9"

	)

52 
MODULE_LICENSE
("GPL");

53 
MODULE_AUTHOR
("Harald Welte <laforge@gnumonks.org>");

54 
MODULE_DESCRIPTION
("Netfilter connectionÅracking helper module for PPTP");

56 
DECLARE_LOCK
(
ù_µç_lock
);

59 
	~"ù_c⁄¡øck_µç_¥iv.h
"

60 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(
KERN_DEBUG
 
__FILE__
 ":" 
__FUNCTION__
 \

61 ": " 
f‹m©
, ## 
¨gs
)

	)

63 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

66 
	#SECS
 *
HZ


	)

67 
	#MINS
 * 60 
SECS


	)

68 
	#HOURS
 * 60 
MINS


	)

69 
	#DAYS
 * 24 
HOURS


	)

71 
	#PPTP_GRE_TIMEOUT
 (10 
MINS
)

	)

72 
	#PPTP_GRE_STREAM_TIMEOUT
 (5 
DAYS
)

	)

74 
	$µç_ex≥˘‚
(
ù_c⁄¡øck
 *
˘
)

76 
ù_c⁄¡øck
 *
ma°î
;

77 
ù_c⁄¡øck_ex≥˘
 *
exp
;

79 
	`DEBUGP
("increasingÅimeouts\n");

81 
˘
->
¥Ÿo
.
gª
.
timeout
 = 
PPTP_GRE_TIMEOUT
;

82 
˘
->
¥Ÿo
.
gª
.
°ªam_timeout
 = 
PPTP_GRE_STREAM_TIMEOUT
;

84 
ma°î
 = 
	`ma°î_˘
(
˘
);

85 i‡(!
ma°î
) {

86 
	`DEBUGP
("Ço master!!!\n");

90 
exp
 = 
˘
->
ma°î
;

91 i‡(!
exp
) {

92 
	`DEBUGP
("noÉxpectation!!\n");

96 
	`DEBUGP
("completingÅuples with ct info\n");

98 i‡(
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
u
.
gª
.
key
 ==

99 
	`ht⁄l
(
ma°î
->
hñp
.
˘_µç_öfo
.
∑c_ˇŒ_id
)) {

101 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
u
.
gª
.
key
 =

102 
	`ht⁄l
(
ma°î
->
hñp
.
˘_µç_öfo
.
≤s_ˇŒ_id
);

103 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
u
.
gª
.
key
 =

104 
	`ht⁄l
(
ma°î
->
hñp
.
˘_µç_öfo
.
≤s_ˇŒ_id
);

107 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
u
.
gª
.
key
 =

108 
	`ht⁄l
(
ma°î
->
hñp
.
˘_µç_öfo
.
∑c_ˇŒ_id
);

109 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
u
.
gª
.
key
 =

110 
	`ht⁄l
(
ma°î
->
hñp
.
˘_µç_öfo
.
∑c_ˇŒ_id
);

114 i‡(
exp
->
ex≥˘ed_li°
.
√xt
 != &exp->expected_list) {

115 
ù_c⁄¡øck_ex≥˘
 *
Ÿhî_exp
;

116 
li°_hód
 *
cur_ôem
, *
√xt
;

118 
cur_ôem
 = 
ma°î
->
siblög_li°
.
√xt
;

119 
cur_ôem
 !&
ma°î
->
siblög_li°
; cur_ôem = 
√xt
) {

120 
√xt
 = 
cur_ôem
->next;

121 
Ÿhî_exp
 = 
	`li°_íåy
(
cur_ôem
,

122 
ù_c⁄¡øck_ex≥˘
,

123 
ex≥˘ed_li°
);

125 i‡(
Ÿhî_exp
 !
exp
 && othî_exp->
£q
 ==Éxp->seq) {

126 
	`DEBUGP
("unexpecting other direction\n");

127 
	`ù_˘_gª_keym≠_de°roy
(
Ÿhî_exp
);

128 
	`ù_c⁄¡øck_u√x≥˘_ªœãd
(
Ÿhî_exp
);

134 
	}
}

137 
	$µç_timeout_ªœãd
(
ù_c⁄¡øck
 *
˘
)

139 
li°_hód
 *
cur_ôem
, *
√xt
;

140 
ù_c⁄¡øck_ex≥˘
 *
exp
;

143 
cur_ôem
 = 
˘
->
siblög_li°
.
√xt
;

144 
cur_ôem
 !&
˘
->
siblög_li°
; cur_ôem = 
√xt
) {

145 
√xt
 = 
cur_ôem
->next;

146 
exp
 = 
	`li°_íåy
(
cur_ôem
, 
ù_c⁄¡øck_ex≥˘
,

147 
ex≥˘ed_li°
);

149 
	`ù_˘_gª_keym≠_de°roy
(
exp
);

150 i‡(!
exp
->
siblög
) {

151 
	`ù_c⁄¡øck_u√x≥˘_ªœãd
(
exp
);

155 
	`DEBUGP
("settingÅimeout of conntrack %pÅo 0\n",

156 
exp
->
siblög
);

157 
exp
->
siblög
->
¥Ÿo
.
gª
.
timeout
 = 0;

158 
exp
->
siblög
->
¥Ÿo
.
gª
.
°ªam_timeout
 = 0;

159 
	`ù_˘_ª‰esh
(
exp
->
siblög
, 0);

163 
	}
}

166 
ölöe
 

167 
	$exp_gª
(
ù_c⁄¡øck
 *
ma°î
,

168 
u_öt32_t
 
£q
,

169 
u_öt16_t
 
ˇŒid
,

170 
u_öt16_t
 
≥î_ˇŒid
)

172 
ù_c⁄¡øck_ex≥˘
 
exp
;

173 
ù_c⁄¡øck_tu∂e
 
öv_tu∂e
;

175 
	`mem£t
(&
exp
, 0, (exp));

177 
exp
.
tu∂e
.
§c
.
ù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].tuple.src.ip;

178 
exp
.
tu∂e
.
§c
.
u
.
gª
.
key
 = 
	`ht⁄l
(
	`¡ohs
(
≥î_ˇŒid
));

179 
exp
.
tu∂e
.
d°
.
ù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].tuple.dst.ip;

180 
exp
.
tu∂e
.
d°
.
u
.
gª
.
key
 = 
	`ht⁄l
(
	`¡ohs
(
ˇŒid
));

181 
exp
.
tu∂e
.
d°
.
u
.
gª
.
¥Ÿocﬁ
 = 
	`__c⁄°™t_ht⁄s
(
GRE_PROTOCOL_PPTP
);

182 
exp
.
tu∂e
.
d°
.
u
.
gª
.
vîsi⁄
 = 
GRE_VERSION_PPTP
;

183 
exp
.
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_GRE
;

185 
exp
.
mask
.
§c
.
ù
 = 0xffffffff;

186 
exp
.
mask
.
§c
.
u
.
Æl
 = 0;

187 
exp
.
mask
.
d°
.
u
.
Æl
 = 0;

188 
exp
.
mask
.
d°
.
u
.
gª
.
key
 = 0xffffffff;

189 
exp
.
mask
.
d°
.
u
.
gª
.
vîsi⁄
 = 0xff;

190 
exp
.
mask
.
d°
.
u
.
gª
.
¥Ÿocﬁ
 = 0xffff;

191 
exp
.
mask
.
d°
.
ù
 = 0xffffffff;

192 
exp
.
mask
.
d°
.
¥Ÿ⁄um
 = 0xffff;

194 
exp
.
£q
 = seq;

195 
exp
.
ex≥˘‚
 = 
µç_ex≥˘‚
;

197 
exp
.
hñp
.
exp_µç_öfo
.
∑c_ˇŒ_id
 = 
	`¡ohs
(
ˇŒid
);

198 
exp
.
hñp
.
exp_µç_öfo
.
≤s_ˇŒ_id
 = 
	`¡ohs
(
≥î_ˇŒid
);

200 
	`DEBUGP
("callingÉxpect_related ");

201 
	`DUMP_TUPLE_RAW
(&
exp
.
tu∂e
);

204 i‡(
	`ù_˘_gª_keym≠_add
(&
exp
, &exp.
tu∂e
, 0) != 0)

207 
	`övît_tu∂ïr
(&
öv_tu∂e
, &
exp
.
tu∂e
);

208 i‡(
	`ù_˘_gª_keym≠_add
(&
exp
, &
öv_tu∂e
, 1) != 0) {

209 
	`ù_˘_gª_keym≠_de°roy
(&
exp
);

213 i‡(
	`ù_c⁄¡øck_ex≥˘_ªœãd
(&
exp
, 
ma°î
) != 0) {

214 
	`ù_˘_gª_keym≠_de°roy
(&
exp
);

215 
	`DEBUGP
("cannotÉxpect_related()\n");

220 
exp
.
tu∂e
.
§c
.
ù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].tuple.src.ip;

221 
exp
.
tu∂e
.
§c
.
u
.
gª
.
key
 = 
	`ht⁄l
(
	`¡ohs
(
ˇŒid
));

222 
exp
.
tu∂e
.
d°
.
ù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].tuple.dst.ip;

223 
exp
.
tu∂e
.
d°
.
u
.
gª
.
key
 = 
	`ht⁄l
(
	`¡ohs
(
≥î_ˇŒid
));

225 
	`DEBUGP
("callingÉxpect_related ");

226 
	`DUMP_TUPLE_RAW
(&
exp
.
tu∂e
);

229 
	`ù_˘_gª_keym≠_add
(&
exp
, &exp.
tu∂e
, 0);

230 
	`övît_tu∂ïr
(&
öv_tu∂e
, &
exp
.
tu∂e
);

231 
	`ù_˘_gª_keym≠_add
(&
exp
, &
öv_tu∂e
, 1);

235 i‡(
	`ù_c⁄¡øck_ex≥˘_ªœãd
(&
exp
, 
ma°î
) != 0) {

237 
	`ù_˘_gª_keym≠_de°roy
(&
exp
);

238 
	`DEBUGP
("cannotÉxpect_related():\n");

243 
	}
}

245 
ölöe
 

246 
	$µç_öbound_pkt
(
t˝hdr
 *
t˝h
,

247 
µç_pkt_hdr
 *
µçh
,

248 
size_t
 
d©Æí
,

249 
ù_c⁄¡øck
 *
˘
,

250 
ù_c⁄¡øck_öfo
 
˘öfo
)

252 
P±pC⁄åﬁHódî
 *
˘lh
;

253 
µç_˘æ_uni⁄
 
µçReq
;

255 
ù_˘_µç_ma°î
 *
öfo
 = &
˘
->
hñp
.
˘_µç_öfo
;

256 
u_öt16_t
 
msg
, *
cid
, *
pcid
;

257 
u_öt32_t
 
£q
;

259 
˘lh
 = (
P±pC⁄åﬁHódî
 *)

260 ((*Ë
µçh
 + (
µç_pkt_hdr
));

261 
µçReq
.
øwªq
 = (*)

262 ((*Ë
˘lh
 + (
P±pC⁄åﬁHódî
));

264 
msg
 = 
	`¡ohs
(
˘lh
->
mesßgeTy≥
);

265 
	`DEBUGP
("öbound c⁄åﬁ mesßgê%s\n", 
°rMName
[
msg
]);

267 
msg
) {

268 
PPTP_START_SESSION_REPLY
:

270 i‡(
öfo
->
s°©e
 < 
PPTP_SESSION_REQUESTED
) {

271 
	`DEBUGP
("%s without START_SESS_REQUEST\n",

272 
°rMName
[
msg
]);

275 i‡(
µçReq
.
§ï
->
ªsu…Code
 =
PPTP_START_OK
)

276 
öfo
->
s°©e
 = 
PPTP_SESSION_CONFIRMED
;

278 
öfo
->
s°©e
 = 
PPTP_SESSION_ERROR
;

281 
PPTP_STOP_SESSION_REPLY
:

283 i‡(
öfo
->
s°©e
 > 
PPTP_SESSION_STOPREQ
) {

284 
	`DEBUGP
("%s without STOP_SESS_REQUEST\n",

285 
°rMName
[
msg
]);

288 i‡(
µçReq
.
°ªp
->
ªsu…Code
 =
PPTP_STOP_OK
)

289 
öfo
->
s°©e
 = 
PPTP_SESSION_NONE
;

291 
öfo
->
s°©e
 = 
PPTP_SESSION_ERROR
;

294 
PPTP_OUT_CALL_REPLY
:

296 i‡(
öfo
->
s°©e
 !
PPTP_SESSION_CONFIRMED
) {

297 
	`DEBUGP
("%†buànÿ£ssi⁄\n", 
°rMName
[
msg
]);

300 i‡(
öfo
->
c°©e
 !
PPTP_CALL_OUT_REQ
 &&

301 
öfo
->
c°©e
 !
PPTP_CALL_OUT_CONF
) {

302 
	`DEBUGP
("%†wôhouàOUTCALL_REQ\n", 
°rMName
[
msg
]);

305 i‡(
µçReq
.
oˇck
->
ªsu…Code
 !
PPTP_OUTCALL_CONNECT
) {

306 
öfo
->
c°©e
 = 
PPTP_CALL_NONE
;

310 
cid
 = &
µçReq
.
oˇck
->
ˇŒID
;

311 
pcid
 = &
µçReq
.
oˇck
->
≥îsCÆlID
;

313 
öfo
->
∑c_ˇŒ_id
 = 
	`¡ohs
(*
cid
);

315 i‡(
	`ht⁄s
(
öfo
->
≤s_ˇŒ_id
Ë!*
pcid
) {

316 
	`DEBUGP
("%s for unknown callid %u\n",

317 
°rMName
[
msg
], 
	`¡ohs
(*
pcid
));

321 
	`DEBUGP
("%s, CID=%X, PCID=%X\n", 
°rMName
[
msg
],

322 
	`¡ohs
(*
cid
),Çtohs(*
pcid
));

324 
öfo
->
c°©e
 = 
PPTP_CALL_OUT_CONF
;

326 
£q
 = 
	`¡ohl
(
t˝h
->£qË+ ((*)
pcid
 - (*)
µçh
);

327 i‡(
	`exp_gª
(
˘
, 
£q
, *
cid
, *
pcid
) != 0)

328 
	`¥ötk
("ip_conntrack_pptp:Érror duringÉxp_gre\n");

331 
PPTP_IN_CALL_REQUEST
:

333 i‡(
öfo
->
s°©e
 !
PPTP_SESSION_CONFIRMED
) {

334 
	`DEBUGP
("%†buànÿ£ssi⁄\n", 
°rMName
[
msg
]);

337 
pcid
 = &
µçReq
.
iˇck
->
≥îsCÆlID
;

338 
	`DEBUGP
("%s, PCID=%X\n", 
°rMName
[
msg
], 
	`¡ohs
(*
pcid
));

339 
öfo
->
c°©e
 = 
PPTP_CALL_IN_REQ
;

340 
öfo
->
∑c_ˇŒ_id

	`¡ohs
(*
pcid
);

343 
PPTP_IN_CALL_CONNECT
:

345 i‡(
öfo
->
s°©e
 !
PPTP_SESSION_CONFIRMED
) {

346 
	`DEBUGP
("%†buànÿ£ssi⁄\n", 
°rMName
[
msg
]);

349 i‡(
öfo
->
s°©e
 !
PPTP_CALL_IN_REP


350 && 
öfo
->
s°©e
 !
PPTP_CALL_IN_CONF
) {

351 
	`DEBUGP
("%s butÇever sent IN_CALL_REPLY\n",

352 
°rMName
[
msg
]);

356 
pcid
 = &
µçReq
.
icc⁄
->
≥îsCÆlID
;

357 
cid
 = &
öfo
->
∑c_ˇŒ_id
;

359 i‡(
öfo
->
≤s_ˇŒ_id
 !
	`¡ohs
(*
pcid
)) {

360 
	`DEBUGP
("%s for unknown CallID %u\n",

361 
°rMName
[
msg
], 
	`¡ohs
(*
cid
));

365 
	`DEBUGP
("%s, PCID=%X\n", 
°rMName
[
msg
], 
	`¡ohs
(*
pcid
));

366 
öfo
->
c°©e
 = 
PPTP_CALL_IN_CONF
;

369 
£q
 = 
	`¡ohl
(
t˝h
->£qË+ ((*)
pcid
 - (*)
µçh
);

370 i‡(
	`exp_gª
(
˘
, 
£q
, *
cid
, *
pcid
) != 0)

371 
	`¥ötk
("ip_conntrack_pptp:Érror duringÉxp_gre\n");

375 
PPTP_CALL_DISCONNECT_NOTIFY
:

377 
cid
 = &
µçReq
.
disc
->
ˇŒID
;

378 
	`DEBUGP
("%s, CID=%X\n", 
°rMName
[
msg
], 
	`¡ohs
(*
cid
));

379 
öfo
->
c°©e
 = 
PPTP_CALL_NONE
;

382 
	`µç_timeout_ªœãd
(
˘
);

385 
PPTP_WAN_ERROR_NOTIFY
:

388 
PPTP_ECHO_REQUEST
:

389 
PPTP_ECHO_REPLY
:

393 
	`DEBUGP
("övÆid %†(TY=%d)\n", (
msg
 <
PPTP_MSG_MAX
)

394 ? 
°rMName
[
msg
]:strMName[0], msg);

398  
NF_ACCEPT
;

400 
	}
}

402 
ölöe
 

403 
	$µç_outbound_pkt
(
t˝hdr
 *
t˝h
,

404 
µç_pkt_hdr
 *
µçh
,

405 
size_t
 
d©Æí
,

406 
ù_c⁄¡øck
 *
˘
,

407 
ù_c⁄¡øck_öfo
 
˘öfo
)

409 
P±pC⁄åﬁHódî
 *
˘lh
;

410 
µç_˘æ_uni⁄
 
µçReq
;

411 
ù_˘_µç_ma°î
 *
öfo
 = &
˘
->
hñp
.
˘_µç_öfo
;

412 
u_öt16_t
 
msg
, *
cid
, *
pcid
;

414 
˘lh
 = (
P±pC⁄åﬁHódî
 *Ë((*Ë
µçh
 + (*pptph));

415 
µçReq
.
øwªq
 = (*Ë((*Ë
˘lh
 + (*ctlh));

417 
msg
 = 
	`¡ohs
(
˘lh
->
mesßgeTy≥
);

418 
	`DEBUGP
("outbound c⁄åﬁ mesßgê%s\n", 
°rMName
[
msg
]);

420 
msg
) {

421 
PPTP_START_SESSION_REQUEST
:

423 i‡(
öfo
->
s°©e
 !
PPTP_SESSION_NONE
) {

424 
	`DEBUGP
("%s but weálready have one",

425 
°rMName
[
msg
]);

427 
öfo
->
s°©e
 = 
PPTP_SESSION_REQUESTED
;

429 
PPTP_STOP_SESSION_REQUEST
:

431 
öfo
->
s°©e
 = 
PPTP_SESSION_STOPREQ
;

434 
PPTP_OUT_CALL_REQUEST
:

436 i‡(
öfo
->
s°©e
 !
PPTP_SESSION_CONFIRMED
) {

437 
	`DEBUGP
("%s butÇo session\n",

438 
°rMName
[
msg
]);

441 
öfo
->
c°©e
 = 
PPTP_CALL_OUT_REQ
;

443 
cid
 = &
µçReq
.
o¸eq
->
ˇŒID
;

444 
	`DEBUGP
("%s, CID=%X\n", 
°rMName
[
msg
], 
	`¡ohs
(*
cid
));

445 
öfo
->
≤s_ˇŒ_id
 = 
	`¡ohs
(*
cid
);

447 
PPTP_IN_CALL_REPLY
:

449 i‡(
öfo
->
c°©e
 !
PPTP_CALL_IN_REQ


450 && 
öfo
->
c°©e
 !
PPTP_CALL_IN_REP
) {

451 
	`DEBUGP
("%s without incall_req\n",

452 
°rMName
[
msg
]);

455 i‡(
µçReq
.
iˇck
->
ªsu…Code
 !
PPTP_INCALL_ACCEPT
) {

456 
öfo
->
c°©e
 = 
PPTP_CALL_NONE
;

459 
pcid
 = &
µçReq
.
iˇck
->
≥îsCÆlID
;

460 i‡(
öfo
->
∑c_ˇŒ_id
 !
	`¡ohs
(*
pcid
)) {

461 
	`DEBUGP
("%s for unknown call %u\n",

462 
°rMName
[
msg
], 
	`¡ohs
(*
pcid
));

465 
	`DEBUGP
("%s, CID=%X\n", 
°rMName
[
msg
], 
	`¡ohs
(*
pcid
));

467 
öfo
->
c°©e
 = 
PPTP_CALL_IN_REP
;

468 
öfo
->
≤s_ˇŒ_id
 = 
	`¡ohs
(
µçReq
.
iˇck
->
ˇŒID
);

471 
PPTP_CALL_CLEAR_REQUEST
:

473 i‡(
öfo
->
s°©e
 !
PPTP_SESSION_CONFIRMED
) {

474 
	`DEBUGP
("CLEAR_CALL butÇo session\n");

480 
öfo
->
c°©e
 = 
PPTP_CALL_CLEAR_REQ
;

482 
PPTP_SET_LINK_INFO
:

484 
PPTP_ECHO_REQUEST
:

485 
PPTP_ECHO_REPLY
:

489 
	`DEBUGP
("övÆid %†(TY=%d)\n", (
msg
 <
PPTP_MSG_MAX
)?

490 
°rMName
[
msg
]:strMName[0], msg);

495  
NF_ACCEPT
;

496 
	}
}

501 
	$c⁄¡øck_µç_hñp
(
sk_buff
 *
skb
,

502 
ù_c⁄¡øck
 *
˘
, 
ù_c⁄¡øck_öfo
 
˘öfo
)

505 
µç_pkt_hdr
 *
µçh
;

507 
t˝hdr
 *
t˝h
 = (*Ë
skb
->
nh
.
ùh
 + skb->nh.ùh->
ihl
 * 4;

508 
u_öt32_t
 
t˝Àn
 = 
skb
->
Àn
 - skb->
nh
.
ùh
->
ihl
 * 4;

509 
u_öt32_t
 
d©Æí
 = 
t˝Àn
 - 
t˝h
->
doff
 * 4;

510 *
d©Æimô
;

511 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

512 
ù_˘_µç_ma°î
 *
öfo
 = &
˘
->
hñp
.
˘_µç_öfo
;

514 
ﬁds°©e
, 
ﬁdc°©e
;

515 
ªt
;

518 i‡(
˘öfo
 !
IP_CT_ESTABLISHED


519 && 
˘öfo
 !
IP_CT_ESTABLISHED
+
IP_CT_IS_REPLY
) {

520 
	`DEBUGP
("˘öfÿ%u, skùpög\n", 
˘öfo
);

521  
NF_ACCEPT
;

525 i‡(
t˝Àn
 < (
t˝hdr
Ë||Å˝À¿< 
t˝h
->
doff
 * 4) {

526 
	`DEBUGP
("t˝À¿%u\n", 
t˝Àn
);

527  
NF_ACCEPT
;

531 i‡(
	`t˝_v4_check
(
t˝h
, 
t˝Àn
, 
skb
->
nh
.
ùh
->
ßddr
, skb->nh.ùh->
daddr
,

532 
	`csum_∑πül
((*Ë
t˝h
, 
t˝Àn
, 0))) {

533 
	`¥ötk
(
KERN_NOTICE
 
__FILE__
 ": bad csum\n");

538 i‡(
t˝h
->
fö
 ||Å˝h->
r°
) {

539 
	`DEBUGP
("RST/FINÑeceived,Åimeouting GRE\n");

541 
öfo
->
c°©e
 = 
PPTP_CALL_NONE
;

544 
	`µç_timeout_ªœãd
(
˘
);

548 
µçh
 = (
µç_pkt_hdr
 *Ë((*Ë
t˝h
 +Å˝h->
doff
 * 4);

549 
d©Æimô
 = (*Ë
µçh
 + 
d©Æí
;

552 i‡((*Ë
µçh
+(*µçhË>
d©Æimô
) {

553 
	`DEBUGP
("no full PPTP header, can'tÅrack\n");

554  
NF_ACCEPT
;

558 i‡(
	`¡ohs
(
µçh
->
∑ckëTy≥
Ë!
PPTP_PACKET_CONTROL
 ||

559 
	`¡ohl
(
µçh
->
magicCookõ
Ë!
PPTP_MAGIC_COOKIE
) {

560 
	`DEBUGP
("notá controlÖacket\n");

561  
NF_ACCEPT
;

564 
ﬁds°©e
 = 
öfo
->
s°©e
;

565 
ﬁdc°©e
 = 
öfo
->
c°©e
;

567 
	`LOCK_BH
(&
ù_µç_lock
);

571 i‡(
dú
 =
IP_CT_DIR_ORIGINAL
)

573 
ªt
 = 
	`µç_outbound_pkt
(
t˝h
, 
µçh
, 
d©Æí
, 
˘
, 
˘öfo
);

576 
ªt
 = 
	`µç_öbound_pkt
(
t˝h
, 
µçh
, 
d©Æí
, 
˘
, 
˘öfo
);

577 
	`DEBUGP
("sstate: %d->%d, cstate: %d->%d\n",

578 
ﬁds°©e
, 
öfo
->
s°©e
, 
ﬁdc°©e
, info->
c°©e
);

579 
	`UNLOCK_BH
(&
ù_µç_lock
);

581  
ªt
;

582 
	}
}

585 
ù_c⁄¡øck_hñ≥r
 
	gµç
 = {

586 .
li°
 = { 
NULL
, NULL },

587 .
	g«me
 = "pptp",

588 .
	gÊags
 = 
IP_CT_HELPER_F_REUSE_EXPECT
,

589 .
	gme
 = 
THIS_MODULE
,

590 .
	gmax_ex≥˘ed
 = 2,

591 .
	gtimeout
 = 0,

592 .
	gtu∂e
 = { .
§c
 = { .
ù
 = 0,

593 .
	gu
 = { .
t˝
 = { .
p‹t
 =

594 
__c⁄°™t_ht⁄s
(
PPTP_CONTROL_PORT
) } }

596 .
	gd°
 = { .
ù
 = 0,

597 .
	gu
 = { .
Æl
 = 0 },

598 .
	g¥Ÿ⁄um
 = 
IPPROTO_TCP


601 .
	gmask
 = { .
§c
 = { .
ù
 = 0,

602 .
	gu
 = { .
t˝
 = { .
p‹t
 = 0xffff } }

604 .
	gd°
 = { .
ù
 = 0,

605 .
	gu
 = { .
Æl
 = 0 },

606 .
	g¥Ÿ⁄um
 = 0xffff

609 .
	ghñp
 = 
c⁄¡øck_µç_hñp


613 
__öô
 
	$öô
()

615 
ªtcode
;

617 
	`DEBUGP
(
__FILE__
 ":Ñegistering helper\n");

619 i‡((
ªtcode
 = 
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(&
µç
))) {

620 
	`¥ötk
(
KERN_ERR
 "UnableÅoÑegister conntrackápplication "

621 "hñ≥∏f‹Ö±p: %d\n", 
ªtcode
);

622  -
EIO
;

625 
	`¥ötk
("ù_c⁄¡øck_µç vîsi⁄ %†lﬂded\n", 
IP_CT_PPTP_VERSION
);

627 
	}
}

629 
__exô
 
	$föi
()

632 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
µç
);

633 
	`¥ötk
("ù_c⁄¡øck_µç vîsi⁄ %†u∆ﬂded\n", 
IP_CT_PPTP_VERSION
);

634 
	}
}

636 
moduÀ_öô
(
öô
);

637 
moduÀ_exô
(
föi
);

639 
EXPORT_SYMBOL
(
ù_µç_lock
);

	@ip_conntrack_pptp.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_conntrack_proto_esp.c

29 
	~<löux/ty≥s.h
>

30 
	~<löux/sched.h
>

31 
	~<löux/timî.h
>

32 
	~<löux/√tfûãr.h
>

33 
	~<löux/ö.h
>

34 #ifde‡
CONFIG_MIPS_BRCM


35 
	~<löux/ù.h
>

37 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿocﬁ.h
>

38 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_e•.h
>

40 
	#ESP_TIMEOUT
 (30*
HZ
)

	)

41 
	#ESP_STREAM_TIMEOUT
 (180*
HZ
)

	)

43 #ifde‡
CONFIG_MIPS_BRCM


44 
	#ESP_UNREPLIEDDNS_TIMEOUT
 (1*
HZ
)

	)

47 
	#IPSEC_FREE
 0

	)

48 
	#IPSEC_INUSE
 1

	)

49 
	#MAX_PORTS
 64

	)

50 
	#TEMP_SPI_START
 1500

	)

52 
	s_e•_èbÀ
 {

53 
u_öt32_t
 
	ml_•i
;

54 
u_öt32_t
 
	mr_•i
;

55 
u_öt32_t
 
	ml_ù
;

56 
u_öt32_t
 
	mr_ù
;

57 
u_öt32_t
 
	mtimeout
;

58 
u_öt16_t
 
	mt•i
;

59 
	möu£
;

62 
_e•_èbÀ
 
	ge•_èbÀ
[
MAX_PORTS
];

65 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(
__FILE__
 ":" 
__FUNCTION__
 ": " \

66 
f‹m©
, ## 
¨gs
)

	)

68 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

71 
u_öt16_t
 
	gcur_•i
 = 0;

76 
_e•_èbÀ
 *
	$Æloc_e•_íåy
 ( )

78 
idx
 = 0;

79 
_e•_èbÀ
 *
e•_íåy
 = 
e•_èbÀ
;

81  ; 
idx
 < 
MAX_PORTS
; idx++ ) {

82 i‡–
e•_íåy
->
öu£
 =
IPSEC_FREE
 ) {

83 
e•_íåy
->
t•i
 = 
cur_•i
 = 
TEMP_SPI_START
 + 
idx
;

84 
e•_íåy
->
öu£
 = 
IPSEC_INUSE
;

88  
e•_íåy
;

90 
e•_íåy
++;

92  
NULL
;

93 
	}
}

98 
_e•_èbÀ
 *
	$£¨ch_e•_íåy_by_•i
 ( c⁄° 
e•hdr
 *
e•h
,

99 
u_öt32_t
 
daddr
 )

101 
idx
 = 0;

102 
_e•_èbÀ
 *
e•_íåy
 = 
e•_èbÀ
;

104  ; 
idx
 < 
MAX_PORTS
; idx++, 
e•_íåy
++ ) {

105 i‡–
e•_íåy
->
öu£
 =
IPSEC_FREE
 ) {

109 i‡–
e•_íåy
->
l_•i
 !0 &&É•_íåy->
r_•i
 != 0 ) {

110 i‡–
e•_íåy
->
l_•i
 =
	`¡ohl
(
e•h
->
•i
) ||

111 
e•_íåy
->
r_•i
 =
	`¡ohl
(
e•h
->
•i
) ) {

112  
e•_íåy
;

117 i‡–
e•_íåy
->
l_•i
 =0 ||É•_íåy->
r_•i
 == 0 ) {

119 i‡–
e•_íåy
->
l_•i
 ) {

120 i‡–
	`¡ohl
(
e•h
->
•i
Ë=
e•_íåy
->
l_•i
 ) {

121  
e•_íåy
;

124 
e•_íåy
->
r_•i
 = 
	`¡ohl
(
e•h
->
•i
);

125 
e•_íåy
->
r_ù
 = 
	`¡ohl
(
daddr
);

126  
e•_íåy
;

128 } i‡–
e•_íåy
->
r_•i
 ) {

129 i‡–
	`¡ohl
(
e•h
->
•i
Ë=
e•_íåy
->
r_•i
 ) {

130  
e•_íåy
;

133 
e•_íåy
->
l_•i
 = 
	`¡ohl
(
e•h
->
•i
);

134  
e•_íåy
;

138  
NULL
;

139 
	}
}

141 
	$e•_pkt_to_tu∂e
(c⁄° 
sk_buff
 *
skb
, 
d©aoff
,

142 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

144 
e•hdr
 
e•h
;

145 
_e•_èbÀ
 *
e•_íåy
;

147 i‡(
	`skb_c›y_bôs
(
skb
, 
d©aoff
, &
e•h
, (esph)) != 0)

150 i‡–(
e•_íåy
 = 
	`£¨ch_e•_íåy_by_•i
 ( &
e•h
, 
tu∂e
->
d°
.
ù
 ) ) =
NULL
 ) {

151 
e•_íåy
 = 
	`Æloc_e•_íåy
();

152 i‡–
e•_íåy
 =
NULL
 ) {

155 
e•_íåy
->
l_•i
 = 
	`¡ohl
(
e•h
.
•i
);

156 
e•_íåy
->
l_ù
 = 
	`¡ohl
(
tu∂e
->
§c
.
ù
);

163 
tu∂e
->
d°
.
u
.
e•
.
•i
 = 
e•_íåy
->
t•i
;

164 
tu∂e
->
§c
.
u
.
e•
.
•i
 = 
e•_íåy
->
t•i
;

166 
	}
}

168 
	$e•_övît_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

169 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
)

176 
tu∂e
->
§c
.
u
.
e•
.
•i
 = 
‹ig
->
d°
.u.esp.spi;

177 
tu∂e
->
d°
.
u
.
e•
.
•i
 = 
‹ig
->
§c
.u.esp.spi;

179 
	}
}

182 
	$e•_¥öt_tu∂e
(*
buf„r
,

183 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

185  
	`•rötf
(
buf„r
, "sport=%u dport=%u ",

186 
	`¡ohs
(
tu∂e
->
§c
.
u
.
e•
.
•i
),Çtohs—u∂e->
d°
.u.esp.spi));

187 
	}
}

190 
	$e•_¥öt_c⁄¡øck
(*
buf„r
,

191 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

194 
	}
}

197 
	$e•_∑ckë
(
ù_c⁄¡øck
 *
c⁄¡øck
,

198 c⁄° 
sk_buff
 *
skb
,

199 
ù_c⁄¡øck_öfo
 
c⁄¡øcköfo
)

201 c⁄° 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

202 c⁄° 
e•hdr
 *
e•h
 = (*)
ùh
 + iph->
ihl
*4;

203 
_e•_èbÀ
 *
e•_íåy
;

212 i‡(
c⁄¡øcköfo
 =
IP_CT_NEW
 ) {

213 i‡–(
e•_íåy
 = 
	`£¨ch_e•_íåy_by_•i
 ( 
e•h
,

214 
ùh
->
daddr
 ) ) =
NULL
 ) {

215 
e•_íåy
 = 
	`Æloc_e•_íåy
 ();

216 i‡–
e•_íåy
 =
NULL
 ) {

218  
NF_DROP
;

220 
e•_íåy
->
l_•i
 = 
	`¡ohl
(
e•h
->
•i
);

221 
e•_íåy
->
l_ù
 = 
	`¡ohl
(
ùh
->
ßddr
);

222 
e•_íåy
->
r_•i
 = 0;

227 i‡(
c⁄¡øck
->
°©us
 & 
IPS_SEEN_REPLY
) {

228 
	`ù_˘_ª‰esh
(
c⁄¡øck
, 
ESP_STREAM_TIMEOUT
);

230 
	`£t_bô
(
IPS_ASSURED_BIT
, &
c⁄¡øck
->
°©us
);

232 
	`ù_˘_ª‰esh
(
c⁄¡øck
, 
ESP_TIMEOUT
);

234 
e•_íåy
 = 
	`£¨ch_e•_íåy_by_•i
 ( 
e•h
, 
ùh
->
daddr
 );

235 i‡–
e•_íåy
 !
NULL
 ) {

243  
NF_ACCEPT
;

244 
	}
}

247 
	$e•_√w
(
ù_c⁄¡øck
 *
c⁄¡øck
, c⁄° 
sk_buff
 *
skb
)

249 c⁄° 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

250 c⁄° 
e•hdr
 *
e•h
 = (*)
ùh
 + iph->
ihl
*4;

251 
_e•_èbÀ
 *
e•_íåy
;

256 i‡–(
e•_íåy
 = 
	`£¨ch_e•_íåy_by_•i
 ( 
e•h
, 
ùh
->
daddr
 ) ) =
NULL
 ) {

263 
e•_íåy
 = 
	`Æloc_e•_íåy
 ();

264 i‡–
e•_íåy
 =
NULL
 ) {

266  
NF_DROP
;

268 
e•_íåy
->
l_•i
 = 
	`¡ohl
(
e•h
->
•i
);

269 
e•_íåy
->
l_ù
 = 
	`¡ohl
(
ùh
->
ßddr
);

270 
e•_íåy
->
r_•i
 = 0;

273 
	}
}

275 
ù_c⁄¡øck_¥Ÿocﬁ
 
	gù_c⁄¡øck_¥Ÿocﬁ_e•


276 { { 
NULL
, NULL }, 
IPPROTO_ESP
, "esp",

277 
e•_pkt_to_tu∂e
, 
e•_övît_tu∂e
, 
e•_¥öt_tu∂e
, 
e•_¥öt_c⁄¡øck
,

278 
e•_∑ckë
, 
e•_√w
, 
NULL
 };

	@ip_conntrack_proto_generic.c

9 
	~<löux/ty≥s.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/timî.h
>

12 
	~<löux/√tfûãr.h
>

13 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿocﬁ.h
>

15 
	gù_˘_gíîic_timeout
 = 600*
HZ
;

17 
	$gíîic_pkt_to_tu∂e
(c⁄° 
sk_buff
 *
skb
,

18 
d©aoff
,

19 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

21 
tu∂e
->
§c
.
u
.
Æl
 = 0;

22 
tu∂e
->
d°
.
u
.
Æl
 = 0;

25 
	}
}

27 
	$gíîic_övît_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

28 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
)

30 
tu∂e
->
§c
.
u
.
Æl
 = 0;

31 
tu∂e
->
d°
.
u
.
Æl
 = 0;

34 
	}
}

37 
	$gíîic_¥öt_tu∂e
(*
buf„r
,

38 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

41 
	}
}

44 
	$gíîic_¥öt_c⁄¡øck
(*
buf„r
,

45 c⁄° 
ù_c⁄¡øck
 *
°©e
)

48 
	}
}

51 
	$∑ckë
(
ù_c⁄¡øck
 *
c⁄¡øck
,

52 c⁄° 
sk_buff
 *
skb
,

53 
ù_c⁄¡øck_öfo
 
c⁄¡øcköfo
)

55 
	`ù_˘_ª‰esh
(
c⁄¡øck
, 
ù_˘_gíîic_timeout
);

56  
NF_ACCEPT
;

57 
	}
}

60 
	$√w
(
ù_c⁄¡øck
 *
c⁄¡øck
, c⁄° 
sk_buff
 *
skb
)

63 
	}
}

65 
ù_c⁄¡øck_¥Ÿocﬁ
 
	gù_c⁄¡øck_gíîic_¥Ÿocﬁ


66 { { 
NULL
, NULL }, 0, "unknown",

67 
gíîic_pkt_to_tu∂e
, 
gíîic_övît_tu∂e
, 
gíîic_¥öt_tu∂e
,

68 
gíîic_¥öt_c⁄¡øck
, 
∑ckë
, 
√w
, 
NULL
, NULL, NULL };

	@ip_conntrack_proto_icmp.c

9 
	~<löux/ty≥s.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/timî.h
>

12 
	~<löux/√tfûãr.h
>

13 
	~<löux/ö.h
>

14 
	~<löux/icmp.h
>

15 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿocﬁ.h
>

17 #ifde‡
CONFIG_MIPS_BRCM


18 
	gù_˘_icmp_timeout
 = 4*
HZ
;

20 
	gù_˘_icmp_timeout
 = 30*
HZ
;

24 
	#DEBUGP
 
¥ötk


	)

26 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

29 
	$icmp_pkt_to_tu∂e
(c⁄° 
sk_buff
 *
skb
,

30 
d©aoff
,

31 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

33 
icmphdr
 
hdr
;

35 i‡(
	`skb_c›y_bôs
(
skb
, 
d©aoff
, &
hdr
, (hdr)) != 0)

38 
tu∂e
->
d°
.
u
.
icmp
.
ty≥
 = 
hdr
.type;

39 
tu∂e
->
§c
.
u
.
icmp
.
id
 = 
hdr
.
un
.
echo
.id;

40 
tu∂e
->
d°
.
u
.
icmp
.
code
 = 
hdr
.code;

43 
	}
}

45 
	$icmp_övît_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

46 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
)

49 
u_öt8_t
 
övm≠
[]

50 { [
ICMP_ECHO
] = 
ICMP_ECHOREPLY
 + 1,

51 [
ICMP_ECHOREPLY
] = 
ICMP_ECHO
 + 1,

52 [
ICMP_TIMESTAMP
] = 
ICMP_TIMESTAMPREPLY
 + 1,

53 [
ICMP_TIMESTAMPREPLY
] = 
ICMP_TIMESTAMP
 + 1,

54 [
ICMP_INFO_REQUEST
] = 
ICMP_INFO_REPLY
 + 1,

55 [
ICMP_INFO_REPLY
] = 
ICMP_INFO_REQUEST
 + 1,

56 [
ICMP_ADDRESS
] = 
ICMP_ADDRESSREPLY
 + 1,

57 [
ICMP_ADDRESSREPLY
] = 
ICMP_ADDRESS
 + 1};

59 i‡(
‹ig
->
d°
.
u
.
icmp
.
ty≥
 >(
övm≠
)

60 || !
övm≠
[
‹ig
->
d°
.
u
.
icmp
.
ty≥
])

63 
tu∂e
->
§c
.
u
.
icmp
.
id
 = 
‹ig
->src.u.icmp.id;

64 
tu∂e
->
d°
.
u
.
icmp
.
ty≥
 = 
övm≠
[
‹ig
->dst.u.icmp.type] - 1;

65 
tu∂e
->
d°
.
u
.
icmp
.
code
 = 
‹ig
->dst.u.icmp.code;

67 
	}
}

70 
	$icmp_¥öt_tu∂e
(*
buf„r
,

71 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

73  
	`•rötf
(
buf„r
, "type=%u code=%u id=%u ",

74 
tu∂e
->
d°
.
u
.
icmp
.
ty≥
,

75 
tu∂e
->
d°
.
u
.
icmp
.
code
,

76 
	`¡ohs
(
tu∂e
->
§c
.
u
.
icmp
.
id
));

77 
	}
}

80 
	$icmp_¥öt_c⁄¡øck
(*
buf„r
,

81 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

84 
	}
}

87 
	$icmp_∑ckë
(
ù_c⁄¡øck
 *
˘
,

88 c⁄° 
sk_buff
 *
skb
,

89 
ù_c⁄¡øck_öfo
 
˘öfo
)

95 i‡(
	`CTINFO2DIR
(
˘öfo
Ë=
IP_CT_DIR_REPLY
) {

96 i‡(
	`©omic_dec_™d_ã°
(&
˘
->
¥Ÿo
.
icmp
.
cou¡
)

97 && 
	`dñ_timî
(&
˘
->
timeout
))

98 
˘
->
timeout
.
	`fun˘i⁄
(()ct);

100 
	`©omic_öc
(&
˘
->
¥Ÿo
.
icmp
.
cou¡
);

101 
	`ù_˘_ª‰esh
(
˘
, 
ù_˘_icmp_timeout
);

104  
NF_ACCEPT
;

105 
	}
}

107 #ifde‡
CONFIG_MIPS_BRCM


108 
ù_c⁄¡øck_max
;

111 
	$icmp_√w
(
ù_c⁄¡øck
 *
c⁄¡øck
,

112 c⁄° 
sk_buff
 *
skb
)

114 
u_öt8_t
 
vÆid_√w
[]

115 { [
ICMP_ECHO
] = 1,

116 [
ICMP_TIMESTAMP
] = 1,

117 [
ICMP_INFO_REQUEST
] = 1,

118 [
ICMP_ADDRESS
] = 1 };

119 #ifde‡
CONFIG_MIPS_BRCM


120 i‡–
ù_c⁄¡øck_max
 == 0)

121  
NF_DROP
;

125 i‡(
c⁄¡øck
->
tu∂ehash
[0].
tu∂e
.
d°
.
u
.
icmp
.
ty≥
 >(
vÆid_√w
)

126 || !
vÆid_√w
[
c⁄¡øck
->
tu∂ehash
[0].
tu∂e
.
d°
.
u
.
icmp
.
ty≥
]) {

128 
	`DEBUGP
("icmp: can't createÇew conn withÅype %u\n",

129 
c⁄¡øck
->
tu∂ehash
[0].
tu∂e
.
d°
.
u
.
icmp
.
ty≥
);

130 
	`DUMP_TUPLE
(&
c⁄¡øck
->
tu∂ehash
[0].
tu∂e
);

133 
	`©omic_£t
(&
c⁄¡øck
->
¥Ÿo
.
icmp
.
cou¡
, 0);

135 
	}
}

137 
ù_c⁄¡øck_¥Ÿocﬁ
 
	gù_c⁄¡øck_¥Ÿocﬁ_icmp


138 { { 
NULL
, NULL }, 
IPPROTO_ICMP
, "icmp",

139 
icmp_pkt_to_tu∂e
, 
icmp_övît_tu∂e
, 
icmp_¥öt_tu∂e
,

140 
icmp_¥öt_c⁄¡øck
, 
icmp_∑ckë
, 
icmp_√w
, 
NULL
, NULL, NULL };

	@ip_conntrack_proto_tcp.c

9 
	~<löux/ty≥s.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/timî.h
>

12 
	~<löux/√tfûãr.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/ö.h
>

15 
	~<löux/ù.h
>

16 
	~<löux/t˝.h
>

17 
	~<löux/°rög.h
>

19 
	~<√t/t˝.h
>

21 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

22 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿocﬁ.h
>

23 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

26 
	#DEBUGP
 
¥ötk


	)

28 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

32 
DECLARE_RWLOCK
(
t˝_lock
);

42 c⁄° *
	gt˝_c⁄¡øck_«mes
[] = {

55 
	#SECS
 *
HZ


	)

56 
	#MINS
 * 60 
SECS


	)

57 
	#HOURS
 * 60 
MINS


	)

58 
	#DAYS
 * 24 
HOURS


	)

60 
	gù_˘_t˝_timeout_syn_£¡
 = 2 
MINS
;

61 
	gù_˘_t˝_timeout_syn_ªcv
 = 60 
SECS
;

62 
	gù_˘_t˝_timeout_e°ablished
 = 5 
DAYS
;

63 
	gù_˘_t˝_timeout_fö_waô
 = 2 
MINS
;

64 
	gù_˘_t˝_timeout_˛o£_waô
 = 60 
SECS
;

65 
	gù_˘_t˝_timeout_œ°_ack
 = 30 
SECS
;

66 
	gù_˘_t˝_timeout_time_waô
 = 2 
MINS
;

67 
	gù_˘_t˝_timeout_˛o£
 = 10 
SECS
;

69 * 
	gt˝_timeouts
[]

70 { 
NULL
,

71 &
ù_˘_t˝_timeout_e°ablished
,

72 &
ù_˘_t˝_timeout_syn_£¡
,

73 &
ù_˘_t˝_timeout_syn_ªcv
,

74 &
ù_˘_t˝_timeout_fö_waô
,

75 &
ù_˘_t˝_timeout_time_waô
,

76 &
ù_˘_t˝_timeout_˛o£
,

77 &
ù_˘_t˝_timeout_˛o£_waô
,

78 &
ù_˘_t˝_timeout_œ°_ack
,

79 
NULL
,

82 
	#sNO
 
TCP_CONNTRACK_NONE


	)

83 
	#sES
 
TCP_CONNTRACK_ESTABLISHED


	)

84 
	#sSS
 
TCP_CONNTRACK_SYN_SENT


	)

85 
	#sSR
 
TCP_CONNTRACK_SYN_RECV


	)

86 
	#sFW
 
TCP_CONNTRACK_FIN_WAIT


	)

87 
	#sTW
 
TCP_CONNTRACK_TIME_WAIT


	)

88 
	#sCL
 
TCP_CONNTRACK_CLOSE


	)

89 
	#sCW
 
TCP_CONNTRACK_CLOSE_WAIT


	)

90 
	#sLA
 
TCP_CONNTRACK_LAST_ACK


	)

91 
	#sLI
 
TCP_CONNTRACK_LISTEN


	)

92 
	#sIV
 
TCP_CONNTRACK_MAX


	)

94 
t˝_c⁄¡øck
 
	gt˝_c⁄¡øcks
[2][5][
TCP_CONNTRACK_MAX
] = {

98  {
sSS
, 
sES
, sSS, 
sSR
, sSS, sSS, sSS, sSS, sSS, 
sLI
 },

99  {
sTW
, 
sFW
, 
sSS
, sTW, sFW, sTW, 
sCL
, sTW, 
sLA
, 
sLI
 },

100  {
sES
, sES, 
sSS
, sES, 
sFW
, 
sTW
, 
sCL
, 
sCW
, 
sLA
, sES },

101  {
sCL
, sCL, 
sSS
, sCL, sCL, 
sTW
, sCL, sCL, sCL, sCL },

102  {
sIV
, sIV, sIV, sIV, sIV, sIV, sIV, sIV, sIV, sIV }

107  {
sSR
, 
sES
, sSR, sSR, sSR, sSR, sSR, sSR, sSR, sSR },

108  {
sCL
, 
sCW
, 
sSS
, 
sTW
, sTW, sTW, sCL, sCW, 
sLA
, 
sLI
 },

109  {
sCL
, 
sES
, 
sSS
, 
sSR
, 
sFW
, 
sTW
, sCL, 
sCW
, sCL, 
sLI
 },

110  {
sCL
, sCL, sCL, sCL, sCL, sCL, sCL, sCL, 
sLA
, 
sLI
 },

111  {
sIV
, sIV, sIV, sIV, sIV, sIV, sIV, sIV, sIV, sIV }

115 
	$t˝_pkt_to_tu∂e
(c⁄° 
sk_buff
 *
skb
,

116 
d©aoff
,

117 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

119 
t˝hdr
 
hdr
;

122 i‡(
	`skb_c›y_bôs
(
skb
, 
d©aoff
, &
hdr
, 8) != 0)

125 
tu∂e
->
§c
.
u
.
t˝
.
p‹t
 = 
hdr
.
sour˚
;

126 
tu∂e
->
d°
.
u
.
t˝
.
p‹t
 = 
hdr
.
de°
;

129 
	}
}

131 
	$t˝_övît_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

132 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
)

134 
tu∂e
->
§c
.
u
.
t˝
.
p‹t
 = 
‹ig
->
d°
.u.tcp.port;

135 
tu∂e
->
d°
.
u
.
t˝
.
p‹t
 = 
‹ig
->
§c
.u.tcp.port;

137 
	}
}

140 
	$t˝_¥öt_tu∂e
(*
buf„r
,

141 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

143  
	`•rötf
(
buf„r
, "sport=%hu dport=%hu ",

144 
	`¡ohs
(
tu∂e
->
§c
.
u
.
t˝
.
p‹t
),

145 
	`¡ohs
(
tu∂e
->
d°
.
u
.
t˝
.
p‹t
));

146 
	}
}

149 
	$t˝_¥öt_c⁄¡øck
(*
buf„r
,

150 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

152 
t˝_c⁄¡øck
 
°©e
;

154 
	`READ_LOCK
(&
t˝_lock
);

155 
°©e
 = 
c⁄¡øck
->
¥Ÿo
.
t˝
.state;

156 
	`READ_UNLOCK
(&
t˝_lock
);

158  
	`•rötf
(
buf„r
, "%†", 
t˝_c⁄¡øck_«mes
[
°©e
]);

159 
	}
}

161 
	$gë_c⁄¡øck_ödex
(c⁄° 
t˝hdr
 *
t˝h
)

163 i‡(
t˝h
->
r°
)  3;

164 i‡(
t˝h
->
syn
)  0;

165 i‡(
t˝h
->
fö
)  1;

166 i‡(
t˝h
->
ack
)  2;

168 
	}
}

171 
	$t˝_∑ckë
(
ù_c⁄¡øck
 *
c⁄¡øck
,

172 c⁄° 
sk_buff
 *
skb
,

173 
ù_c⁄¡øck_öfo
 
˘öfo
)

175 
t˝_c⁄¡øck
 
√wc⁄¡øck
, 
ﬁdt˝°©e
;

176 
t˝hdr
 
t˝h
;

178 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
 * 4, &
t˝h
, (tcph)) != 0)

180 i‡(
skb
->
Àn
 < skb->
nh
.
ùh
->
ihl
 * 4 + 
t˝h
.
doff
 * 4)

187 i‡(!
	`ã°_bô
(
IPS_SEEN_REPLY_BIT
, &
c⁄¡øck
->
°©us
Ë&& 
t˝h
.
r°
) {

188 i‡(
	`dñ_timî
(&
c⁄¡øck
->
timeout
))

189 
c⁄¡øck
->
timeout
.
	`fun˘i⁄
(()conntrack);

190  
NF_ACCEPT
;

193 
	`WRITE_LOCK
(&
t˝_lock
);

194 
ﬁdt˝°©e
 = 
c⁄¡øck
->
¥Ÿo
.
t˝
.
°©e
;

195 
√wc⁄¡øck


196 
t˝_c⁄¡øcks


197 [
	`CTINFO2DIR
(
˘öfo
)]

198 [
	`gë_c⁄¡øck_ödex
(&
t˝h
)][
ﬁdt˝°©e
];

201 i‡(
√wc⁄¡øck
 =
TCP_CONNTRACK_MAX
) {

202 
	`DEBUGP
("ip_conntrack_tcp: Invalid dir=%i index=%u conntrack=%u\n",

203 
	`CTINFO2DIR
(
˘öfo
), 
	`gë_c⁄¡øck_ödex
(&
t˝h
),

204 
c⁄¡øck
->
¥Ÿo
.
t˝
.
°©e
);

205 
	`WRITE_UNLOCK
(&
t˝_lock
);

209 
c⁄¡øck
->
¥Ÿo
.
t˝
.
°©e
 = 
√wc⁄¡øck
;

212 i‡(
ﬁdt˝°©e
 =
TCP_CONNTRACK_SYN_SENT


213 && 
	`CTINFO2DIR
(
˘öfo
Ë=
IP_CT_DIR_REPLY


214 && 
t˝h
.
syn
 &&Å˝h.
ack
) {

215 
c⁄¡øck
->
¥Ÿo
.
t˝
.
h™dshake_ack


216 
	`ht⁄l
(
	`¡ohl
(
t˝h
.
£q
) + 1);

217 
out
;

221 i‡(
ﬁdt˝°©e
 =
TCP_CONNTRACK_SYN_RECV


222 && 
	`CTINFO2DIR
(
˘öfo
Ë=
IP_CT_DIR_ORIGINAL


223 && 
t˝h
.
ack
 && !t˝h.
syn


224 && 
t˝h
.
ack_£q
 =
c⁄¡øck
->
¥Ÿo
.
t˝
.
h™dshake_ack
)

225 
	`£t_bô
(
IPS_ASSURED_BIT
, &
c⁄¡øck
->
°©us
);

227 
out
: 
	`WRITE_UNLOCK
(&
t˝_lock
);

228 
	`ù_˘_ª‰esh
(
c⁄¡øck
, *
t˝_timeouts
[
√wc⁄¡øck
]);

230  
NF_ACCEPT
;

231 
	}
}

234 
	$t˝_√w
(
ù_c⁄¡øck
 *
c⁄¡øck
, c⁄° 
sk_buff
 *
skb
)

236 
t˝_c⁄¡øck
 
√wc⁄¡øck
;

237 
t˝hdr
 
t˝h
;

239 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
 * 4, &
t˝h
, (tcph)) != 0)

243 
√wc⁄¡øck


244 
t˝_c⁄¡øcks
[0][
	`gë_c⁄¡øck_ödex
(&
t˝h
)]

245 [
TCP_CONNTRACK_NONE
];

248 i‡(
√wc⁄¡øck
 =
TCP_CONNTRACK_MAX
) {

249 
	`DEBUGP
("ip_conntrack_tcp: invalidÇew deleting.\n");

253 
c⁄¡øck
->
¥Ÿo
.
t˝
.
°©e
 = 
√wc⁄¡øck
;

255 
	}
}

257 
	$t˝_exp_m©ches_pkt
(
ù_c⁄¡øck_ex≥˘
 *
exp
,

258 c⁄° 
sk_buff
 *
skb
)

260 c⁄° 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

261 
t˝hdr
 
t˝h
;

262 
d©Æí
;

264 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
 * 4, &
t˝h
, (tcph)) != 0)

266 
d©Æí
 = 
skb
->
Àn
 - 
ùh
->
ihl
*4 - 
t˝h
.
doff
*4;

268  
	`bëwìn
(
exp
->
£q
, 
	`¡ohl
(
t˝h
.£q),Çtohl—˝h.£qË+ 
d©Æí
);

269 
	}
}

271 
ù_c⁄¡øck_¥Ÿocﬁ
 
	gù_c⁄¡øck_¥Ÿocﬁ_t˝


272 { { 
NULL
, NULL }, 
IPPROTO_TCP
, "tcp",

273 
t˝_pkt_to_tu∂e
, 
t˝_övît_tu∂e
, 
t˝_¥öt_tu∂e
, 
t˝_¥öt_c⁄¡øck
,

274 
t˝_∑ckë
, 
t˝_√w
, 
NULL
, 
t˝_exp_m©ches_pkt
, NULL };

	@ip_conntrack_proto_udp.c

9 
	~<löux/ty≥s.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/timî.h
>

12 
	~<löux/√tfûãr.h
>

13 
	~<löux/ö.h
>

14 #i‡
deföed
(
CONFIG_MIPS_BRCM
)

15 
	~<löux/ù.h
>

17 
	~<löux/udp.h
>

18 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿocﬁ.h
>

20 
	gù_˘_udp_timeout
 = 30*
HZ
;

21 
	gù_˘_udp_timeout_°ªam
 = 180*
HZ
;

23 #i‡
deföed
(
CONFIG_MIPS_BRCM
)

24 
	gù_˘_udp_uƒïlõddns_timeout
 = 1*
HZ
;

27 
	$udp_pkt_to_tu∂e
(c⁄° 
sk_buff
 *
skb
,

28 
d©aoff
,

29 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

31 
udphdr
 
hdr
;

34 i‡(
	`skb_c›y_bôs
(
skb
, 
d©aoff
, &
hdr
, 8) != 0)

37 
tu∂e
->
§c
.
u
.
udp
.
p‹t
 = 
hdr
.
sour˚
;

38 
tu∂e
->
d°
.
u
.
udp
.
p‹t
 = 
hdr
.
de°
;

41 
	}
}

43 
	$udp_övît_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

44 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
)

46 
tu∂e
->
§c
.
u
.
udp
.
p‹t
 = 
‹ig
->
d°
.u.udp.port;

47 
tu∂e
->
d°
.
u
.
udp
.
p‹t
 = 
‹ig
->
§c
.u.udp.port;

49 
	}
}

52 
	$udp_¥öt_tu∂e
(*
buf„r
,

53 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

55  
	`•rötf
(
buf„r
, "sport=%hu dport=%hu ",

56 
	`¡ohs
(
tu∂e
->
§c
.
u
.
udp
.
p‹t
),

57 
	`¡ohs
(
tu∂e
->
d°
.
u
.
udp
.
p‹t
));

58 
	}
}

61 
	$udp_¥öt_c⁄¡øck
(*
buf„r
,

62 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

65 
	}
}

68 
	$udp_∑ckë
(
ù_c⁄¡øck
 *
c⁄¡øck
,

69 c⁄° 
sk_buff
 *
skb
,

70 
ù_c⁄¡øck_öfo
 
c⁄¡øcköfo
)

74 i‡(
	`ã°_bô
(
IPS_SEEN_REPLY_BIT
, &
c⁄¡øck
->
°©us
)) {

75 
	`ù_˘_ª‰esh
(
c⁄¡øck
, 
ù_˘_udp_timeout_°ªam
);

77 
	`£t_bô
(
IPS_ASSURED_BIT
, &
c⁄¡øck
->
°©us
);

79 #i‡
	`deföed
(
CONFIG_MIPS_BRCM
)

89 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

90 
udphdr
 *
udph
 = (*)
ùh
 + iph->
ihl
 * 4;

91 
__u16
 
dp‹t
 = 
	`¡ohs
(
udph
->
de°
);

93 i‡(
dp‹t
 == 53)

94 
	`ù_˘_ª‰esh
(
c⁄¡øck
, 
ù_˘_udp_uƒïlõddns_timeout
);

96 
	`ù_˘_ª‰esh
(
c⁄¡øck
, 
ù_˘_udp_timeout
);

99 
	`ù_˘_ª‰esh
(
c⁄¡øck
, 
ù_˘_udp_timeout
);

102  
NF_ACCEPT
;

103 
	}
}

106 
	$udp_√w
(
ù_c⁄¡øck
 *
c⁄¡øck
, c⁄° 
sk_buff
 *
skb
)

109 
	}
}

111 
ù_c⁄¡øck_¥Ÿocﬁ
 
	gù_c⁄¡øck_¥Ÿocﬁ_udp


112 { { 
NULL
, NULL }, 
IPPROTO_UDP
, "udp",

113 
udp_pkt_to_tu∂e
, 
udp_övît_tu∂e
, 
udp_¥öt_tu∂e
, 
udp_¥öt_c⁄¡øck
,

114 
udp_∑ckë
, 
udp_√w
, 
NULL
, NULL, NULL };

	@ip_conntrack_rtsp.c

23 
	~<löux/c⁄fig.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/√tfûãr.h
>

26 
	~<löux/ù.h
>

27 
	~<löux/udp.h
>

28 
	~<√t/checksum.h
>

29 
	~<√t/t˝.h
>

31 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

32 
	~<löux/√tfûãr_ùv4/ù_«t_π•.h
>

33 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

34 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_π•.h
>

36 
	~<löux/˘y≥.h
>

37 
	#NF_NEED_STRNCASECMP


	)

38 
	#NF_NEED_STRTOU16


	)

39 
	#NF_NEED_STRTOU32


	)

40 
	#NF_NEED_NEXTLINE


	)

41 
	~<löux/√tfûãr_hñ≥rs.h
>

42 
	#NF_NEED_MIME_NEXTLINE


	)

43 
	~<löux/√tfûãr_mime.h
>

45 
	#MAX_SIMUL_SETUP
 8

	)

50 #unde‡
IP_NF_RTSP_DEBUG


51 
	#INFOP
(
¨gs
...Ë
	`¥ötk
(
KERN_INFO
árgs)

	)

52 #ifde‡
IP_NF_RTSP_DEBUG


53 
	#DEBUGP
(
¨gs
...Ë
	`¥ötk
(
KERN_DEBUG
 "%s:%†", 
__FILE__
, 
__FUNCTION__
); \

54 
	`¥ötk
(
¨gs
)

	)

56 
	#DEBUGP
(
¨gs
...)

	)

59 
	#MAX_PORTS
 8

	)

60 
	gp‹ts
[
MAX_PORTS
];

61 
	gnum_p‹ts
 = 0;

62 
	gmax_out°™dög
 = 8;

63 
	g£tup_timeout
 = 300;

66 
	gπ•_buf„r
[65536];

68 
MODULE_AUTHOR
("Tom Marshall <tmarshall@real.com>");

69 
MODULE_DESCRIPTION
("RTSP connectionÅracking module");

70 
MODULE_LICENSE
("GPL");

71 #ifde‡
MODULE_PARM


72 
MODULE_PARM
(
p‹ts
, "1-" 
__MODULE_STRING
(
MAX_PORTS
) "i");

73 
MODULE_PARM_DESC
(
p‹ts
, "portÇumbers of RTSP servers");

74 
MODULE_PARM
(
max_out°™dög
, "i");

75 
MODULE_PARM_DESC
(
max_out°™dög
, "maxÇumber of outstanding SETUPÑequestsÖer RTSP session");

76 
MODULE_PARM
(
£tup_timeout
, "i");

77 
MODULE_PARM_DESC
(
£tup_timeout
, "timeout on for unestablished data channels");

80 
DECLARE_LOCK
(
ù_π•_lock
);

81 
moduÀ
* 
	gù_c⁄¡øck_π•
 = 
THIS_MODULE
;

89 
	#MAX_PORT_MAPS
 16

	)

90 
u_öt16_t
 
	gg_å_p‹t
 = 10000;

94 
	#SKIP_WSPACE
(
±r
,
Àn
,
off
Ëof‡<Üí && 
	`is•a˚
(*’å+off))Ë{ off++; }

	)

101 
	s_π•_d©a_p‹ts
 {

102 
u_öt32_t
 
	m˛õ¡_ù
;

103 
u_öt16_t
 
	m˛õ¡_t˝_p‹t
;

104 
u_öt16_t
 
	m˛õ¡_udp_lo
;

105 
u_öt16_t
 
	m˛õ¡_udp_hi
;

106 
p‹tblock_t
 
	mpbty≥
;

107 
u_öt16_t
 
	m«t_udp_lo
;

108 
u_öt16_t
 
	m«t_udp_hi
;

109 
	mö_u£
;

110 } 
	gπ•_d©a_p‹ts
[
MAX_PORT_MAPS
];

119 
	$π•_˛õ¡_to_«t_pm≠
(
ù_˘_π•_ex≥˘
 *
¥t•exp
, c⁄° 
ùhdr
 *
ùh
,

120 
ù_c⁄¡øck
 *
˘
)

122 
i
 = 0;

123 
rc
 = 0;

124 
t˝hdr
 *
t˝h
 = (*)
ùh
 + iph->
ihl
 * 4;

126 
	`DEBUGP
("IP %u.%u.%u.%u->%u.%u.%u.%u PORTS (%hu-%hu)\n", 
	`NIPQUAD
(
ùh
->
ßddr
),

127 
	`NIPQUAD
(
ùh
->
daddr
), 
t˝h
->
sour˚
,Å˝h->
de°
);

129 
i
 = 0; i < 
MAX_PORT_MAPS
; i++) {

130 i‡(
π•_d©a_p‹ts
[
i
].
ö_u£
) {

131 
	`DEBUGP
("Index %d in_u£ fœg %d IP %u.%u.%u.%u CLIENT %hu-%hu NAT %hu-%hu\n", 
i
,

132 
π•_d©a_p‹ts
[
i
].
ö_u£
, 
	`NIPQUAD
‘t•_d©a_p‹ts[i].
˛õ¡_ù
),

133 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_lo
,Ñt•_d©a_p‹ts[i].
˛õ¡_udp_hi
,

134 
π•_d©a_p‹ts
[
i
].
«t_udp_lo
,Ñt•_d©a_p‹ts[i].
«t_udp_hi
);

137 
π•_d©a_p‹ts
[
i
].
˛õ¡_ù
 = 
	`¡ohl
(
ùh
->
ßddr
);

138 
π•_d©a_p‹ts
[
i
].
˛õ¡_t˝_p‹t
 = 
	`¡ohs
(
t˝h
->
sour˚
);

139 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_lo
 = 
	`¡ohs
(
¥t•exp
->
l›‹t
);

140 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_hi
 = 
	`¡ohs
(
¥t•exp
->
hù‹t
);

141 
π•_d©a_p‹ts
[
i
].
pbty≥
 = 
¥t•exp
->pbtype;

142 
π•_d©a_p‹ts
[
i
].
ö_u£
 = 1;

143 
	`DEBUGP
("M≠≥dáàödex %d ORIGINAL PORTS %hu-%hu\n", 
i
,

144 
	`¡ohs
(
¥t•exp
->
l›‹t
),Çtohs’π•exp->
hù‹t
));

145 
¥t•exp
->
l›‹t
 = 
π•_d©a_p‹ts
[
i
].
«t_udp_lo
 = 
g_å_p‹t
++;

146 
¥t•exp
->
hù‹t
 = 
π•_d©a_p‹ts
[
i
].
«t_udp_hi
 = 
g_å_p‹t
++;

147 
	`DEBUGP
("NEW PORTS %hu-%hu\n", 
	`¡ohs
(
¥t•exp
->
l›‹t
),Çtohs’π•exp->
hù‹t
));

148  
rc
 = 1;

150  
rc
;

151 
	}
}

158 
u_öt16_t


159 
	$π•_«t_to_˛õ¡_pm≠
(
u_öt16_t
 
«t_p‹t
)

161 
i
 = 0;

162 
u_öt16_t
 
å_p‹t
 = 0;

164 
i
 = 0; i < 
MAX_PORT_MAPS
; i++) {

165 i‡(!
π•_d©a_p‹ts
[
i
].
ö_u£
) {

172 
	`DEBUGP
("Sórchögáàödex %d NAT_PORT %hu CLIENT PORTS (%hu-%hu)\n", 
i
,

173 
	`¡ohs
(
«t_p‹t
), 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_lo
,

174 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_hi
);

175 i‡(
	`¡ohs
(
«t_p‹t
Ë=
π•_d©a_p‹ts
[
i
].
«t_udp_lo
) {

176 
å_p‹t
 = 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_lo
;

177 
	`DEBUGP
("Foundáàödex %d NAT_PORT %hu CLIENT PORTS (%hu-%huËå_p‹à%hu\n", 
i
,

178 
«t_p‹t
, 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_lo
,

179 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_hi
, 
å_p‹t
);

180 } i‡(
	`¡ohs
(
«t_p‹t
Ë=
π•_d©a_p‹ts
[
i
].
«t_udp_hi
) {

181 
å_p‹t
 = 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_hi
;

182 
	`DEBUGP
("Foundáàödex %d NAT_PORT %hu CLIENT PORTS %hu-%huÅr_p‹à%hu\n", 
i
,

183 
«t_p‹t
, 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_lo
,

184 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_hi
, 
å_p‹t
);

185  
å_p‹t
;

188  
å_p‹t
;

189 
	}
}

192 
	$ù_c⁄¡øck_π•_¥oc_ã¨down
(
ùhdr
 *
ùh
)

194 
i
 = 0;

195 
t˝hdr
 *
t˝h
 = (*)
ùh
 + iph->
ihl
 * 4;

197 
i
 = 0; i < 
MAX_PORT_MAPS
; i++)

199 i‡(!
π•_d©a_p‹ts
[
i
].
ö_u£
)

203 
	`DEBUGP
("Searching client info IP %u.%u.%u.%u->%hu PORTS (%hu-%hu)\n",

204 
	`NIPQUAD
(
ùh
->
ßddr
), 
t˝h
->
sour˚
, 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_lo
,

205 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_hi
);

206 i‡((
π•_d©a_p‹ts
[
i
].
˛õ¡_ù
 =
ùh
->
ßddr
) &&

207 (
π•_d©a_p‹ts
[
i
].
˛õ¡_t˝_p‹t
 =
t˝h
->
sour˚
))

209 
	`DEBUGP
("Found client info SRC IP %u.%u.%u.%u TCP PORT %hu UDP PORTS (%hu-%hu)\n",

210 
	`NIPQUAD
(
ùh
->
ßddr
), 
t˝h
->
sour˚
, 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_lo
,

211 
π•_d©a_p‹ts
[
i
].
˛õ¡_udp_hi
);

212 
π•_d©a_p‹ts
[
i
].
ö_u£
 = 0;

216 
	}
}

219 
	$föd_ch¨
(*
°r
, 
ch
, 
size_t
 
Àn
)

221 *
pSå
 = 
NULL
;

222 i‡(
Àn
 != 0) {

223 
pSå
 = 
°r
;

226 i‡(*
pSå
++ =
ch
) {

227  ((*)(
pSå
 - 1));

229 } --
Àn
 != 0);

230  (
NULL
);

231 
	}
}

248 
	$π•_∑r£_mesßge
(* 
±˝
, 
uöt
 
t˝Àn
, uöt* 
±˝off
,

249 
uöt
* 
phdrsoff
, uöt* 
phdr¶í
,

250 
uöt
* 
pc£qoff
, uöt* 
pc£qÀn
)

252 
uöt
 
ítôyÀn
 = 0;

253 
uöt
 
löeoff
;

254 
uöt
 
löñí
;

256 i‡(!
	`nf_√xéöe
(
±˝
, 
t˝Àn
, 
±˝off
, &
löeoff
, &
löñí
))

261 *
phdrsoff
 = *
±˝off
;

262 
	`nf_mime_√xéöe
(
±˝
, 
t˝Àn
, 
±˝off
, &
löeoff
, &
löñí
))

264 i‡(
löñí
 == 0)

266 i‡(
ítôyÀn
 > 0)

268 *
±˝off
 +
	`mö
(
ítôyÀn
, 
t˝Àn
 - *ptcpoff);

272 i‡(
löeoff
+
löñí
 > 
t˝Àn
)

274 
	`INFOP
("!! overrun !!\n");

278 i‡(
	`nf_°∫ˇ£cmp
(
±˝
+
löeoff
, "CSeq:", 5) == 0)

280 *
pc£qoff
 = 
löeoff
;

281 *
pc£qÀn
 = 
löñí
;

283 i‡(
	`nf_°∫ˇ£cmp
(
±˝
+
löeoff
, "Content-Length:", 15) == 0)

285 
uöt
 
off
 = 
löeoff
+15;

286 
	`SKIP_WSPACE
(
±˝
+
löeoff
, 
löñí
, 
off
);

287 
	`nf_°πou32
(
±˝
+
off
, &
ítôyÀn
);

290 *
phdr¶í
 = (*
±˝off
Ë- (*
phdrsoff
);

293 
	}
}

310 
	$π•_∑r£_å™•‹t
(* 
±øn
, 
uöt
 
å™Àn
,

311 
ù_˘_π•_ex≥˘
* 
¥t•exp
)

313 
rc
 = 0;

314 
uöt
 
off
 = 0;

316 i‡(
å™Àn
 < 10 || !
	`i£ﬁ
(
±øn
[tranlen-1]) ||

317 
	`nf_°∫ˇ£cmp
(
±øn
, "Transport:", 10) != 0)

319 
	`INFOP
("sanity check failed\n");

322 
	`DEBUGP
("å™='%.*s'\n", ()
å™Àn
, 
±øn
);

323 
off
 += 10;

324 
	`SKIP_WSPACE
(
±øn
, 
å™Àn
, 
off
);

327 
off
 < 
å™Àn
)

329 c⁄° * 
µ¨amíd
;

330 
uöt
 
√xç¨amoff
;

332 
µ¨amíd
 = 
	`memchr
(
±øn
+
off
, ',', 
å™Àn
-off);

333 
µ¨amíd
 = (µ¨amíd =
NULL
Ë? 
±øn
+
å™Àn
 :Öparamend+1;

334 
√xç¨amoff
 = 
µ¨amíd
-
±øn
;

336 
off
 < 
√xç¨amoff
)

338 c⁄° * 
pfõldíd
;

339 
uöt
 
√xtfõldoff
;

341 
pfõldíd
 = 
	`föd_ch¨
(
±øn
+
off
, ';', 
√xç¨amoff
-off);

342 
√xtfõldoff
 = (
pfõldíd
 =
NULL
Ë? 
√xç¨amoff
 :Öfõldíd-
±øn
+1;

344 i‡(
	`°∫cmp
(
±øn
+
off
, "client_port=", 12) == 0)

346 
u_öt16_t
 
p‹t
;

347 
uöt
 
numÀn
;

349 
off
 += 12;

350 
numÀn
 = 
	`nf_°πou16
(
±øn
+
off
, &
p‹t
);

351 
off
 +
numÀn
;

352 i‡(
¥t•exp
->
l›‹t
 !0 &&Öπ•exp->l›‹à!
p‹t
)

354 
	`DEBUGP
("mu…ùÀÖ‹t†found,Ö‹à%hu ign‹ed\n", 
p‹t
);

358 
¥t•exp
->
l›‹t
 =Öπ•exp->
hù‹t
 = 
p‹t
;

359 i‡(
±øn
[
off
] == '-')

361 
off
++;

362 
numÀn
 = 
	`nf_°πou16
(
±øn
+
off
, &
p‹t
);

363 
off
 +
numÀn
;

364 
¥t•exp
->
pbty≥
 = 
pb_ønge
;

365 
¥t•exp
->
hù‹t
 = 
p‹t
;

369 i‡((
¥t•exp
->
l›‹t
 & 0x0001) != 0 ||

370 
¥t•exp
->
hù‹t
 !¥t•exp->
l›‹t
+1)

372 
	`DEBUGP
("incorrectÑange: %hu-%hu, correcting\n",

373 
¥t•exp
->
l›‹t
,Öπ•exp->
hù‹t
);

374 
¥t•exp
->
l›‹t
 &= 0xfffe;

375 
¥t•exp
->
hù‹t
 =Öπ•exp->
l›‹t
+1;

378 i‡(
±øn
[
off
] == '/')

380 
off
++;

381 
numÀn
 = 
	`nf_°πou16
(
±øn
+
off
, &
p‹t
);

382 
off
 +
numÀn
;

383 
¥t•exp
->
pbty≥
 = 
pb_disc⁄
;

384 
¥t•exp
->
hù‹t
 = 
p‹t
;

386 
rc
 = 1;

397 
off
 = 
√xtfõldoff
;

400 
off
 = 
√xç¨amoff
;

403  
rc
;

404 
	}
}

407 
	$πp_ex≥˘
(
ù_c⁄¡øck
 *
˘
)

409 
u_öt16_t
 
«t_p‹t
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
u
.
udp
.
p‹t
;

410 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

411 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

412 
˘
->
«t
.
π•_öfo
.
‹ig_p‹t
 = 
	`π•_«t_to_˛õ¡_pm≠
(
«t_p‹t
);

413 
	`DEBUGP
("UDP clõ¡Ö‹à%hu\n", 
˘
->
«t
.
π•_öfo
.
‹ig_p‹t
);

415  
NF_ACCEPT
;

416 
	}
}

422 
	$hñp_out
(
ùhdr
* 
ùh
, * 
pd©a
, 
size_t
 
d©Æí
,

423 
ù_c⁄¡øck
* 
˘
, 
ù_c⁄¡øck_öfo
 
˘öfo
)

425 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

426 
uöt
 
d©aoff
 = 0;

427 
t˝hdr
 *
t˝h
 = (*)
ùh
 + iph->
ihl
 * 4;

429 
ù_c⁄¡øck_ex≥˘
 
exp
;

431 
d©aoff
 < 
d©Æí
)

433 
uöt
 
cmdoff
 = 
d©aoff
;

434 
uöt
 
hdrsoff
 = 0;

435 
uöt
 
hdr¶í
 = 0;

436 
uöt
 
c£qoff
 = 0;

437 
uöt
 
c£qÀn
 = 0;

438 
uöt
 
löeoff
 = 0;

439 
uöt
 
löñí
 = 0;

440 
uöt
 
off
;

441 
rc
;

442 
uöt
 
p‹t
 = 0;

443 
i
 = 0;

444 
ù_c⁄¡øck_ex≥˘
 *
√w_exp
 = 
NULL
;

446 i‡(!
	`π•_∑r£_mesßge
(
pd©a
, 
d©Æí
, &
d©aoff
,

447 &
hdrsoff
, &
hdr¶í
,

448 &
c£qoff
, &
c£qÀn
))

453 i‡(
	`°∫cmp
(
pd©a
+
cmdoff
, "TEARDOWN ", 6) == 0)

455 
	`ù_c⁄¡øck_π•_¥oc_ã¨down
(
ùh
);

459 i‡(
	`°∫cmp
(
pd©a
+
cmdoff
, "SETUP ", 6) != 0)

463 
	`DEBUGP
("foundá setup message\n");

465 
	`mem£t
(&
exp
, 0, (exp));

467 
off
 = 0;

469 
	`nf_mime_√xéöe
(
pd©a
+
hdrsoff
, 
hdr¶í
, &
off
,

470 &
löeoff
, &
löñí
))

472 i‡(
löñí
 == 0)

476 i‡(
off
 > 
hdrsoff
+
hdr¶í
)

478 
	`INFOP
("!! overrun !!");

482 i‡(
	`nf_°∫ˇ£cmp
(
pd©a
+
hdrsoff
+
löeoff
, "Transport:", 10) == 0)

484 
	`π•_∑r£_å™•‹t
(
pd©a
+
hdrsoff
+
löeoff
, 
löñí
,

485 &
exp
.
hñp
.
exp_π•_öfo
);

489 i‡(
exp
.
hñp
.
exp_π•_öfo
.
l›‹t
 == 0)

491 
	`DEBUGP
("no udpÅransports found\n");

495 
	`DEBUGP
("udpÅransport found,Öorts=(%d,%hu,%hu)\n",

496 ()
exp
.
hñp
.
exp_π•_öfo
.
pbty≥
,

497 
exp
.
hñp
.
exp_π•_öfo
.
l›‹t
,

498 
exp
.
hñp
.
exp_π•_öfo
.
hù‹t
);

500 
	`LOCK_BH
(&
ù_π•_lock
);

505 i‡(!
	`π•_˛õ¡_to_«t_pm≠
(&
exp
.
hñp
.
exp_π•_öfo
, 
ùh
, 
˘
))

507 
	`DEBUGP
("DroppingÅheÖacket. No more space inÅhe mappingÅable\n");

508 
	`UNLOCK_BH
(&
ù_π•_lock
);

509  
NF_DROP
;

511 
i
 = 0;

512 
p‹t
 = 
exp
.
hñp
.
exp_π•_öfo
.
l›‹t
;

513 
i
 < 2) {

517 
√w_exp
 = 
	`ù_c⁄¡øck_ex≥˘_Æloc
();

518 i‡(!
√w_exp
) {

519 
	`INFOP
("FailedÅo getáÇewÉxpectationÉntry\n");

520 
	`UNLOCK_BH
(&
ù_π•_lock
);

521  
NF_DROP
;

523 
	`mem˝y
(
√w_exp
, &
exp
, (
ù_c⁄¡øck_ex≥˘
));

524 
√w_exp
->
£q
 = 
	`¡ohl
(
t˝h
->£qË+ 
hdrsoff
;

525 
√w_exp
->
hñp
.
exp_π•_öfo
.
Àn
 = 
hdr¶í
;

527 
	`DEBUGP
("Addög UDPÖ‹à%hu,%hu\n", 
	`ht⁄s
(
p‹t
), 
	`¡ohs
(port));

529 
√w_exp
->
tu∂e
 = 
˘
->
tu∂ehash
[!
dú
].tuple;

530 
√w_exp
->
tu∂e
.
d°
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(port);

531 
√w_exp
->
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

532 
√w_exp
->
mask
.
§c
.
ù
 = 0xffffffff;

533 
√w_exp
->
mask
.
d°
.
ù
 = 0xffffffff;

535 
√w_exp
->
mask
.
d°
.
u
.
udp
.
p‹t
 = 0xffff;

536 
√w_exp
->
ex≥˘‚
 = 
πp_ex≥˘
;

537 
√w_exp
->
mask
.
d°
.
¥Ÿ⁄um
 = 0xffff;

539 
	`DEBUGP
("expect_related %u.%u.%u.%u:%u-%u.%u.%u.%u:%u\n",

540 
	`NIPQUAD
(
√w_exp
->
tu∂e
.
§c
.
ù
),

541 
	`¡ohs
(
√w_exp
->
tu∂e
.
§c
.
u
.
t˝
.
p‹t
),

542 
	`NIPQUAD
(
√w_exp
->
tu∂e
.
d°
.
ù
),

543 
	`¡ohs
(
√w_exp
->
tu∂e
.
d°
.
u
.
t˝
.
p‹t
));

546 
rc
 = 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(
√w_exp
, 
˘
);

547 i‡(
rc
 == 0)

549 
	`DEBUGP
("ip_conntrack_expect_related succeeded\n");

553 
	`INFOP
("ip_conntrack_expect_related failed\n");

555 
p‹t
++;

556 
i
++;

558 
	`UNLOCK_BH
(&
ù_π•_lock
);

561  
NF_ACCEPT
;

562 
	}
}

566 
	$hñp_ö
(
t˝hdr
* 
t˝h
, * 
pd©a
, 
size_t
 
d©Æí
,

567 
ù_c⁄¡øck
* 
˘
, 
ù_c⁄¡øck_öfo
 
˘öfo
)

569  
NF_ACCEPT
;

570 
	}
}

573 
	$hñp
(
sk_buff
* 
skb
,

574 
ù_c⁄¡øck
* 
˘
, 
ù_c⁄¡øck_öfo
 
˘öfo
)

576 
uöt
 
d©aoff
;

577 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

578 
t˝hdr
 
t˝h
;

579 * 
d©a
;

580 
uöt
 
d©Æí
;

583 i‡(
˘öfo
 !
IP_CT_ESTABLISHED
 && ctöfÿ!IP_CT_ESTABLISHED + 
IP_CT_IS_REPLY
)

585 
	`DEBUGP
("c⁄¡øcköfÿ%u\n", 
˘öfo
);

586  
NF_ACCEPT
;

590 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
t˝h
, (tcph)) != 0)

592  
NF_ACCEPT
;

596 
d©aoff
 = 
skb
->
nh
.
ùh
->
ihl
*4 + 
t˝h
.
doff
*4;

597 i‡–
skb
->
nh
.
ùh
->
ihl
*4 + 
t˝h
.
doff
*4 >skb->
Àn
)

599  
NF_ACCEPT
;

602 
	`LOCK_BH
(&
ù_π•_lock
);

603 
	`skb_c›y_bôs
(
skb
, 
d©aoff
, 
π•_buf„r
, skb->
Àn
 - dataoff);

604 
d©a
 = 
π•_buf„r
;

605 
d©Æí
 = 
skb
->
Àn
 - 
d©aoff
;

606 
	`CTINFO2DIR
(
˘öfo
))

608 
IP_CT_DIR_ORIGINAL
:

609 
	`hñp_out
(
ùh
, 
d©a
, 
d©Æí
, 
˘
, 
˘öfo
);

611 
IP_CT_DIR_REPLY
:

612 
	`hñp_ö
(&
t˝h
, 
d©a
, 
d©Æí
, 
˘
, 
˘öfo
);

618 
	`UNLOCK_BH
(&
ù_π•_lock
);

620  
NF_ACCEPT
;

621 
	}
}

623 
ù_c⁄¡øck_hñ≥r
 
	gπ•_hñ≥rs
[
MAX_PORTS
];

624 
	gπ•_«mes
[
MAX_PORTS
][10];

627 
	$föi
()

629 
i
;

630 
i
 = 0; i < 
num_p‹ts
; i++)

632 
	`DEBUGP
("uƒegi°îögÖ‹à%d\n", 
p‹ts
[
i
]);

633 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
π•_hñ≥rs
[
i
]);

635 
	}
}

637 
__öô


638 
	$öô
()

640 
i
, 
ªt
;

641 
ù_c⁄¡øck_hñ≥r
 *
hÕr
;

642 *
tm≤ame
;

644 
	`¥ötk
("ù_c⁄¡øck_π• v" 
IP_NF_RTSP_VERSION
 "Üoading\n");

646 i‡(
max_out°™dög
 < 1)

648 
	`¥ötk
("ip_conntrack_rtsp: max_outstanding must beáÖositive integer\n");

649  -
EBUSY
;

651 i‡(
£tup_timeout
 < 0)

653 
	`¥ötk
("ip_conntrack_rtsp: setup_timeout must beáÖositive integer\n");

654  -
EBUSY
;

658 i‡(
p‹ts
[0] == 0)

660 
p‹ts
[0] = 
RTSP_PORT
;

663 
i
 = 0; i < 
MAX_PORT_MAPS
; i++)

665 
	`mem£t
(&
π•_d©a_p‹ts
[
i
], 0, (
_π•_d©a_p‹ts
));

666 
π•_d©a_p‹ts
[
i
].
ö_u£
 = 0;

669 
i
 = 0; (ò< 
MAX_PORTS
Ë&& 
p‹ts
[i]; i++)

671 
hÕr
 = &
π•_hñ≥rs
[
i
];

672 
	`mem£t
(
hÕr
, 0, (
ù_c⁄¡øck_hñ≥r
));

673 
hÕr
->
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[
i
]);

674 
hÕr
->
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

675 
hÕr
->
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

676 
hÕr
->
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

677 
hÕr
->
max_ex≥˘ed
 = 
max_out°™dög
;

678 
hÕr
->
timeout
 = 0;

679 
hÕr
->
Êags
 = 
IP_CT_HELPER_F_REUSE_EXPECT
;

680 
hÕr
->
me
 = 
ù_c⁄¡øck_π•
;

681 
hÕr
->
hñp
 = help;

683 
tm≤ame
 = &
π•_«mes
[
i
][0];

684 i‡(
p‹ts
[
i
] =
RTSP_PORT
)

686 
	`•rötf
(
tm≤ame
, "rtsp");

690 
	`•rötf
(
tm≤ame
, "π•-%d", 
i
);

692 
hÕr
->
«me
 = 
tm≤ame
;

694 
	`DEBUGP
("p‹à#%d: %d\n", 
i
, 
p‹ts
[i]);

696 
ªt
 = 
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(
hÕr
);

698 i‡(
ªt
)

700 
	`¥ötk
("ù_c⁄¡øck_π•: ERRORÑegi°îögÖ‹à%d\n", 
p‹ts
[
i
]);

701 
	`föi
();

702  -
EBUSY
;

704 
num_p‹ts
++;

707 
	}
}

709 
PROVIDES_CONNTRACK
(
π•
);

710 
EXPORT_SYMBOL
(
ù_π•_lock
);

712 
moduÀ_öô
(
öô
);

713 
moduÀ_exô
(
föi
);

	@ip_conntrack_standalone.c

15 
	~<löux/c⁄fig.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<löux/ù.h
>

18 
	~<löux/√tfûãr.h
>

19 
	~<löux/√tfûãr_ùv4.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/skbuff.h
>

22 
	~<löux/¥oc_fs.h
>

23 #ifde‡
CONFIG_SYSCTL


24 
	~<löux/sys˘l.h
>

26 
	~<√t/checksum.h
>

27 
	~<√t/ù.h
>

29 
	#ASSERT_READ_LOCK
(
x
Ë
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_lock
)

	)

30 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`MUST_BE_WRITE_LOCKED
(&
ù_c⁄¡øck_lock
)

	)

32 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

33 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿocﬁ.h
>

34 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_c‹e.h
>

35 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

36 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

39 
	#DEBUGP
 
¥ötk


	)

41 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

44 
MODULE_LICENSE
("GPL");

46 
	$kûl_¥Ÿo
(c⁄° 
ù_c⁄¡øck
 *
i
, *
d©a
)

48  (
i
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
¥Ÿ⁄um
 ==

49 *((
u_öt8_t
 *Ë
d©a
));

50 
	}
}

53 
	$¥öt_tu∂e
(*
buf„r
, c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

54 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿo
)

56 
Àn
;

58 
Àn
 = 
	`•rötf
(
buf„r
, "src=%u.%u.%u.%u dst=%u.%u.%u.%u ",

59 
	`NIPQUAD
(
tu∂e
->
§c
.
ù
), NIPQUAD—u∂e->
d°
.ip));

61 
Àn
 +
¥Ÿo
->
	`¥öt_tu∂e
(
buf„r
 +Üí, 
tu∂e
);

63  
Àn
;

64 
	}
}

68 
	$¥öt_ex≥˘
(*
buf„r
, c⁄° 
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
)

70 
Àn
;

72 i‡(
ex≥˘
->
ex≥˘™t
->
hñ≥r
->
timeout
)

73 
Àn
 = 
	`•rötf
(
buf„r
, "EXPECTING: %lu ",

74 
	`timî_≥ndög
(&
ex≥˘
->
timeout
)

75 ? (
ex≥˘
->
timeout
.
expúes
 - 
jiffõs
)/
HZ
 : 0);

77 
Àn
 = 
	`•rötf
(
buf„r
, "EXPECTING: - ");

78 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "use=%uÖroto=%u ",

79 
	`©omic_ªad
(&
ex≥˘
->
u£
),Éx≥˘->
tu∂e
.
d°
.
¥Ÿ⁄um
);

80 
Àn
 +
	`¥öt_tu∂e
(
buf„r
 +Üí, &
ex≥˘
->
tu∂e
,

81 
	`__ù_˘_föd_¥Ÿo
(
ex≥˘
->
tu∂e
.
d°
.
¥Ÿ⁄um
));

82 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "\n");

83  
Àn
;

84 
	}
}

87 
	$¥öt_c⁄¡øck
(*
buf„r
, 
ù_c⁄¡øck
 *
c⁄¡øck
)

89 
Àn
;

90 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿo


91 
	`__ù_˘_föd_¥Ÿo
(
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]

92 .
tu∂e
.
d°
.
¥Ÿ⁄um
);

94 
Àn
 = 
	`•rötf
(
buf„r
, "%-8s %u %lu ",

95 
¥Ÿo
->
«me
,

96 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]

97 .
tu∂e
.
d°
.
¥Ÿ⁄um
,

98 
	`timî_≥ndög
(&
c⁄¡øck
->
timeout
)

99 ? (
c⁄¡øck
->
timeout
.
expúes
 - 
jiffõs
)/
HZ
 : 0);

101 
Àn
 +
¥Ÿo
->
	`¥öt_c⁄¡øck
(
buf„r
 +Üí, 
c⁄¡øck
);

102 
Àn
 +
	`¥öt_tu∂e
(
buf„r
 +Üen,

103 &
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
,

104 
¥Ÿo
);

105 i‡(!(
	`ã°_bô
(
IPS_SEEN_REPLY_BIT
, &
c⁄¡øck
->
°©us
)))

106 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "[UNREPLIED] ");

107 
Àn
 +
	`¥öt_tu∂e
(
buf„r
 +Üen,

108 &
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
,

109 
¥Ÿo
);

110 i‡(
	`ã°_bô
(
IPS_ASSURED_BIT
, &
c⁄¡øck
->
°©us
))

111 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "[ASSURED] ");

112 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "use=%u ",

113 
	`©omic_ªad
(&
c⁄¡øck
->
˘_gíîÆ
.
u£
));

114 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "\n");

116  
Àn
;

117 
	}
}

120 
ölöe
 

121 
	$c⁄¡øck_ôî©e
(c⁄° 
ù_c⁄¡øck_tu∂e_hash
 *
hash
,

122 *
buf„r
, 
off_t
 
off£t
, off_à*
u±o
,

123 *
Àn
, 
maxÀn
)

125 
√wÀn
;

126 
	`IP_NF_ASSERT
(
hash
->
˘øck
);

128 
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_lock
);

131 i‡(
	`DIRECTION
(
hash
))

134 i‡((*
u±o
)++ < 
off£t
)

137 
√wÀn
 = 
	`¥öt_c⁄¡øck
(
buf„r
 + *
Àn
, 
hash
->
˘øck
);

138 i‡(*
Àn
 + 
√wÀn
 > 
maxÀn
)

140 *
Àn
 +
√wÀn
;

143 
	}
}

146 
	$li°_c⁄¡øcks
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

148 
i
;

149 
Àn
 = 0;

150 
off_t
 
u±o
 = 0;

151 
li°_hód
 *
e
;

153 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

155 
i
 = 0; i < 
ù_c⁄¡øck_hèbÀ_size
; i++) {

156 i‡(
	`LIST_FIND
(&
ù_c⁄¡øck_hash
[
i
], 
c⁄¡øck_ôî©e
,

157 
ù_c⁄¡øck_tu∂e_hash
 *,

158 
buf„r
, 
off£t
, &
u±o
, &
Àn
, 
Àngth
))

159 
föished
;

163 
	`READ_LOCK
(&
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

164 
	`li°_f‹_óch
(
e
, &
ù_c⁄¡øck_ex≥˘_li°
) {

165 
œ°_Àn
;

166 
ù_c⁄¡øck_ex≥˘
 *
ex≥˘


167 (
ù_c⁄¡øck_ex≥˘
 *)
e
;

168 i‡(
u±o
++ < 
off£t
) ;

170 
œ°_Àn
 = 
Àn
;

171 
Àn
 +
	`¥öt_ex≥˘
(
buf„r
 +Üí, 
ex≥˘
);

172 i‡(
Àn
 > 
Àngth
) {

173 
Àn
 = 
œ°_Àn
;

174 
föished_ex≥˘s
;

178 
föished_ex≥˘s
:

179 
	`READ_UNLOCK
(&
ù_c⁄¡øck_ex≥˘_tu∂e_lock
);

180 
föished
:

181 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

184 *
°¨t
 = (*)(()
u±o
 - 
off£t
);

185  
Àn
;

186 
	}
}

188 
ù_c⁄fúm
(
hooknum
,

189 
sk_buff
 **
pskb
,

190 c⁄° 
√t_devi˚
 *
ö
,

191 c⁄° 
√t_devi˚
 *
out
,

192 (*
ok‚
)(
sk_buff
 *))

195  
	`ù_c⁄¡øck_c⁄fúm
(*
pskb
);

196 
	}
}

198 
ù_c⁄¡øck_de‰ag
(
hooknum
,

199 
sk_buff
 **
pskb
,

200 c⁄° 
√t_devi˚
 *
ö
,

201 c⁄° 
√t_devi˚
 *
out
,

202 (*
ok‚
)(
sk_buff
 *))

206 i‡((*
pskb
)->
nf˘
)

207  
NF_ACCEPT
;

210 i‡((*
pskb
)->
nh
.
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_MF
|
IP_OFFSET
)) {

211 *
pskb
 = 
	`ù_˘_g©hî_‰ags
(*pskb);

212 i‡(!*
pskb
)

213  
NF_STOLEN
;

215  
NF_ACCEPT
;

216 
	}
}

218 
ù_ª‰ag
(
hooknum
,

219 
sk_buff
 **
pskb
,

220 c⁄° 
√t_devi˚
 *
ö
,

221 c⁄° 
√t_devi˚
 *
out
,

222 (*
ok‚
)(
sk_buff
 *))

224 
πabÀ
 *
π
 = (πabÀ *)(*
pskb
)->
d°
;

227 i‡(
	`ù_c⁄fúm
(
hooknum
, 
pskb
, 
ö
, 
out
, 
ok‚
Ë!
NF_ACCEPT
)

228  
NF_DROP
;

233 i‡((*
pskb
)->
Àn
 > 
	`d°_pmtu
(&
π
->
u
.
d°
) &&

234 !
	`skb_shöfo
(*
pskb
)->
tso_size
) {

236 
	`ù_‰agmít
(*
pskb
, 
ok‚
);

237  
NF_STOLEN
;

239  
NF_ACCEPT
;

240 
	}
}

242 
ù_c⁄¡øck_loˇl
(
hooknum
,

243 
sk_buff
 **
pskb
,

244 c⁄° 
√t_devi˚
 *
ö
,

245 c⁄° 
√t_devi˚
 *
out
,

246 (*
ok‚
)(
sk_buff
 *))

249 i‡((*
pskb
)->
Àn
 < (
ùhdr
)

250 || (*
pskb
)->
nh
.
ùh
->
ihl
 * 4 < (
ùhdr
)) {

251 i‡(
	`√t_øãlimô
())

252 
	`¥ötk
("ipt_hook: happy cracking.\n");

253  
NF_ACCEPT
;

255  
	`ù_c⁄¡øck_ö
(
hooknum
, 
pskb
, 
ö
, 
out
, 
ok‚
);

256 
	}
}

260 
nf_hook_›s
 
	gù_c⁄¡øck_de‰ag_›s
 = {

261 .
hook
 = 
ù_c⁄¡øck_de‰ag
,

262 .
	gow√r
 = 
THIS_MODULE
,

263 .
	gpf
 = 
PF_INET
,

264 .
	ghooknum
 = 
NF_IP_PRE_ROUTING
,

265 .
	g¥i‹ôy
 = 
NF_IP_PRI_CONNTRACK_DEFRAG
,

268 
nf_hook_›s
 
	gù_c⁄¡øck_ö_›s
 = {

269 .
hook
 = 
ù_c⁄¡øck_ö
,

270 .
	gow√r
 = 
THIS_MODULE
,

271 .
	gpf
 = 
PF_INET
,

272 .
	ghooknum
 = 
NF_IP_PRE_ROUTING
,

273 .
	g¥i‹ôy
 = 
NF_IP_PRI_CONNTRACK
,

276 
nf_hook_›s
 
	gù_c⁄¡øck_de‰ag_loˇl_out_›s
 = {

277 .
hook
 = 
ù_c⁄¡øck_de‰ag
,

278 .
	gow√r
 = 
THIS_MODULE
,

279 .
	gpf
 = 
PF_INET
,

280 .
	ghooknum
 = 
NF_IP_LOCAL_OUT
,

281 .
	g¥i‹ôy
 = 
NF_IP_PRI_CONNTRACK_DEFRAG
,

284 
nf_hook_›s
 
	gù_c⁄¡øck_loˇl_out_›s
 = {

285 .
hook
 = 
ù_c⁄¡øck_loˇl
,

286 .
	gow√r
 = 
THIS_MODULE
,

287 .
	gpf
 = 
PF_INET
,

288 .
	ghooknum
 = 
NF_IP_LOCAL_OUT
,

289 .
	g¥i‹ôy
 = 
NF_IP_PRI_CONNTRACK
,

293 
nf_hook_›s
 
	gù_c⁄¡øck_out_›s
 = {

294 .
hook
 = 
ù_ª‰ag
,

295 .
	gow√r
 = 
THIS_MODULE
,

296 .
	gpf
 = 
PF_INET
,

297 .
	ghooknum
 = 
NF_IP_POST_ROUTING
,

298 .
	g¥i‹ôy
 = 
NF_IP_PRI_LAST
,

301 
nf_hook_›s
 
	gù_c⁄¡øck_loˇl_ö_›s
 = {

302 .
hook
 = 
ù_c⁄fúm
,

303 .
	gow√r
 = 
THIS_MODULE
,

304 .
	gpf
 = 
PF_INET
,

305 .
	ghooknum
 = 
NF_IP_LOCAL_IN
,

306 .
	g¥i‹ôy
 = 
NF_IP_PRI_LAST
-1,

311 #ifde‡
CONFIG_SYSCTL


314 
ù_c⁄¡øck_max
;

315 
ù_c⁄¡øck_hèbÀ_size
;

318 
ù_˘_t˝_timeout_syn_£¡
;

319 
ù_˘_t˝_timeout_syn_ªcv
;

320 
ù_˘_t˝_timeout_e°ablished
;

321 
ù_˘_t˝_timeout_fö_waô
;

322 
ù_˘_t˝_timeout_˛o£_waô
;

323 
ù_˘_t˝_timeout_œ°_ack
;

324 
ù_˘_t˝_timeout_time_waô
;

325 
ù_˘_t˝_timeout_˛o£
;

328 
ù_˘_udp_timeout
;

329 
ù_˘_udp_timeout_°ªam
;

332 
ù_˘_icmp_timeout
;

335 
ù_˘_gíîic_timeout
;

337 
˘l_èbÀ_hódî
 *
	gù_˘_sys˘l_hódî
;

339 
˘l_èbÀ
 
	gù_˘_sys˘l_èbÀ
[] = {

341 .
˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_MAX
,

342 .
	g¥o˙ame
 = "ip_conntrack_max",

343 .
	gd©a
 = &
ù_c⁄¡øck_max
,

344 .
	gmaxÀn
 = (),

345 .
	gmode
 = 0644,

346 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec
,

349 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_BUCKETS
,

350 .
	g¥o˙ame
 = "ip_conntrack_buckets",

351 .
	gd©a
 = &
ù_c⁄¡øck_hèbÀ_size
,

352 .
	gmaxÀn
 = (),

353 .
	gmode
 = 0444,

354 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec
,

357 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
,

358 .
	g¥o˙ame
 = "ip_conntrack_tcp_timeout_syn_sent",

359 .
	gd©a
 = &
ù_˘_t˝_timeout_syn_£¡
,

360 .
	gmaxÀn
 = (),

361 .
	gmode
 = 0644,

362 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

365 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
,

366 .
	g¥o˙ame
 = "ip_conntrack_tcp_timeout_syn_recv",

367 .
	gd©a
 = &
ù_˘_t˝_timeout_syn_ªcv
,

368 .
	gmaxÀn
 = (),

369 .
	gmode
 = 0644,

370 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

373 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
,

374 .
	g¥o˙ame
 = "ip_conntrack_tcp_timeout_established",

375 .
	gd©a
 = &
ù_˘_t˝_timeout_e°ablished
,

376 .
	gmaxÀn
 = (),

377 .
	gmode
 = 0644,

378 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

381 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
,

382 .
	g¥o˙ame
 = "ip_conntrack_tcp_timeout_fin_wait",

383 .
	gd©a
 = &
ù_˘_t˝_timeout_fö_waô
,

384 .
	gmaxÀn
 = (),

385 .
	gmode
 = 0644,

386 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

389 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
,

390 .
	g¥o˙ame
 = "ip_conntrack_tcp_timeout_close_wait",

391 .
	gd©a
 = &
ù_˘_t˝_timeout_˛o£_waô
,

392 .
	gmaxÀn
 = (),

393 .
	gmode
 = 0644,

394 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

397 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
,

398 .
	g¥o˙ame
 = "ip_conntrack_tcp_timeout_last_ack",

399 .
	gd©a
 = &
ù_˘_t˝_timeout_œ°_ack
,

400 .
	gmaxÀn
 = (),

401 .
	gmode
 = 0644,

402 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

405 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
,

406 .
	g¥o˙ame
 = "ip_conntrack_tcp_timeout_time_wait",

407 .
	gd©a
 = &
ù_˘_t˝_timeout_time_waô
,

408 .
	gmaxÀn
 = (),

409 .
	gmode
 = 0644,

410 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

413 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
,

414 .
	g¥o˙ame
 = "ip_conntrack_tcp_timeout_close",

415 .
	gd©a
 = &
ù_˘_t˝_timeout_˛o£
,

416 .
	gmaxÀn
 = (),

417 .
	gmode
 = 0644,

418 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

421 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
,

422 .
	g¥o˙ame
 = "ip_conntrack_udp_timeout",

423 .
	gd©a
 = &
ù_˘_udp_timeout
,

424 .
	gmaxÀn
 = (),

425 .
	gmode
 = 0644,

426 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

429 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
,

430 .
	g¥o˙ame
 = "ip_conntrack_udp_timeout_stream",

431 .
	gd©a
 = &
ù_˘_udp_timeout_°ªam
,

432 .
	gmaxÀn
 = (),

433 .
	gmode
 = 0644,

434 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

437 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
,

438 .
	g¥o˙ame
 = "ip_conntrack_icmp_timeout",

439 .
	gd©a
 = &
ù_˘_icmp_timeout
,

440 .
	gmaxÀn
 = (),

441 .
	gmode
 = 0644,

442 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

445 .
	g˘l_«me
 = 
NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
,

446 .
	g¥o˙ame
 = "ip_conntrack_generic_timeout",

447 .
	gd©a
 = &
ù_˘_gíîic_timeout
,

448 .
	gmaxÀn
 = (),

449 .
	gmode
 = 0644,

450 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec_jiffõs
,

452 { .
	g˘l_«me
 = 0 }

455 
	#NET_IP_CONNTRACK_MAX
 2089

	)

457 
˘l_èbÀ
 
	gù_˘_√tfûãr_èbÀ
[] = {

459 .
˘l_«me
 = 
NET_IPV4_NETFILTER
,

460 .
	g¥o˙ame
 = "netfilter",

461 .
	gmode
 = 0555,

462 .
	gchûd
 = 
ù_˘_sys˘l_èbÀ
,

465 .
	g˘l_«me
 = 
NET_IP_CONNTRACK_MAX
,

466 .
	g¥o˙ame
 = "ip_conntrack_max",

467 .
	gd©a
 = &
ù_c⁄¡øck_max
,

468 .
	gmaxÀn
 = (),

469 .
	gmode
 = 0644,

470 .
	g¥oc_h™dÀr
 = &
¥oc_doötvec


472 { .
	g˘l_«me
 = 0 }

475 
˘l_èbÀ
 
	gù_˘_ùv4_èbÀ
[] = {

477 .
˘l_«me
 = 
NET_IPV4
,

478 .
	g¥o˙ame
 = "ipv4",

479 .
	gmode
 = 0555,

480 .
	gchûd
 = 
ù_˘_√tfûãr_èbÀ
,

482 { .
	g˘l_«me
 = 0 }

485 
˘l_èbÀ
 
	gù_˘_√t_èbÀ
[] = {

487 .
˘l_«me
 = 
CTL_NET
,

488 .
	g¥o˙ame
 = "net",

489 .
	gmode
 = 0555,

490 .
	gchûd
 = 
ù_˘_ùv4_èbÀ
,

492 { .
	g˘l_«me
 = 0 }

495 
	$öô_‹_˛ónup
(
öô
)

497 
¥oc_dú_íåy
 *
¥oc
;

498 
ªt
 = 0;

500 i‡(!
öô
Ë
˛ónup
;

502 
ªt
 = 
	`ù_c⁄¡øck_öô
();

503 i‡(
ªt
 < 0)

504 
˛ónup_nŸhög
;

506 
¥oc
 = 
	`¥oc_√t_¸óã
("ù_c⁄¡øck", 0440, 
li°_c⁄¡øcks
);

507 i‡(!
¥oc
Ë
˛ónup_öô
;

508 
¥oc
->
ow√r
 = 
THIS_MODULE
;

510 
ªt
 = 
	`nf_ªgi°î_hook
(&
ù_c⁄¡øck_de‰ag_›s
);

511 i‡(
ªt
 < 0) {

512 
	`¥ötk
("ip_conntrack: can'tÑegisterÖre-routing defrag hook.\n");

513 
˛ónup_¥oc
;

515 
ªt
 = 
	`nf_ªgi°î_hook
(&
ù_c⁄¡øck_de‰ag_loˇl_out_›s
);

516 i‡(
ªt
 < 0) {

517 
	`¥ötk
("ip_conntrack: can'tÑegisterÜocal_out defrag hook.\n");

518 
˛ónup_de‰ag›s
;

520 
ªt
 = 
	`nf_ªgi°î_hook
(&
ù_c⁄¡øck_ö_›s
);

521 i‡(
ªt
 < 0) {

522 
	`¥ötk
("ip_conntrack: can'tÑegisterÖre-routing hook.\n");

523 
˛ónup_de‰agloˇl›s
;

525 
ªt
 = 
	`nf_ªgi°î_hook
(&
ù_c⁄¡øck_loˇl_out_›s
);

526 i‡(
ªt
 < 0) {

527 
	`¥ötk
("ip_conntrack: can'tÑegisterÜocal out hook.\n");

528 
˛ónup_ö›s
;

530 
ªt
 = 
	`nf_ªgi°î_hook
(&
ù_c⁄¡øck_out_›s
);

531 i‡(
ªt
 < 0) {

532 
	`¥ötk
("ip_conntrack: can'tÑegisterÖost-routing hook.\n");

533 
˛ónup_ö™dloˇl›s
;

535 
ªt
 = 
	`nf_ªgi°î_hook
(&
ù_c⁄¡øck_loˇl_ö_›s
);

536 i‡(
ªt
 < 0) {

537 
	`¥ötk
("ip_conntrack: can'tÑegisterÜocal in hook.\n");

538 
˛ónup_öouèndloˇl›s
;

540 #ifde‡
CONFIG_SYSCTL


541 
ù_˘_sys˘l_hódî
 = 
	`ªgi°î_sys˘l_èbÀ
(
ù_˘_√t_èbÀ
, 0);

542 i‡(
ù_˘_sys˘l_hódî
 =
NULL
) {

543 
	`¥ötk
("ip_conntrack: can'tÑegisterÅo sysctl.\n");

544 
˛ónup
;

548  
ªt
;

550 
˛ónup
:

551 #ifde‡
CONFIG_SYSCTL


552 
	`uƒegi°î_sys˘l_èbÀ
(
ù_˘_sys˘l_hódî
);

554 
	`nf_uƒegi°î_hook
(&
ù_c⁄¡øck_loˇl_ö_›s
);

555 
˛ónup_öouèndloˇl›s
:

556 
	`nf_uƒegi°î_hook
(&
ù_c⁄¡øck_out_›s
);

557 
˛ónup_ö™dloˇl›s
:

558 
	`nf_uƒegi°î_hook
(&
ù_c⁄¡øck_loˇl_out_›s
);

559 
˛ónup_ö›s
:

560 
	`nf_uƒegi°î_hook
(&
ù_c⁄¡øck_ö_›s
);

561 
˛ónup_de‰agloˇl›s
:

562 
	`nf_uƒegi°î_hook
(&
ù_c⁄¡øck_de‰ag_loˇl_out_›s
);

563 
˛ónup_de‰ag›s
:

564 
	`nf_uƒegi°î_hook
(&
ù_c⁄¡øck_de‰ag_›s
);

565 
˛ónup_¥oc
:

566 
	`¥oc_√t_ªmove
("ip_conntrack");

567 
˛ónup_öô
:

568 
	`ù_c⁄¡øck_˛ónup
();

569 
˛ónup_nŸhög
:

570  
ªt
;

571 
	}
}

575 
	$ù_c⁄¡øck_¥Ÿocﬁ_ªgi°î
(
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿo
)

577 
ªt
 = 0;

578 
li°_hód
 *
i
;

580 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

581 
	`li°_f‹_óch
(
i
, &
¥Ÿocﬁ_li°
) {

582 i‡(((
ù_c⁄¡øck_¥Ÿocﬁ
 *)
i
)->
¥Ÿo


583 =
¥Ÿo
->proto) {

584 
ªt
 = -
EBUSY
;

585 
out
;

589 
	`li°_¥ïíd
(&
¥Ÿocﬁ_li°
, 
¥Ÿo
);

591 
out
:

592 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

593  
ªt
;

594 
	}
}

596 
	$ù_c⁄¡øck_¥Ÿocﬁ_uƒegi°î
(
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿo
)

598 
	`WRITE_LOCK
(&
ù_c⁄¡øck_lock
);

602 
	`LIST_DELETE
(&
¥Ÿocﬁ_li°
, 
¥Ÿo
);

603 
	`WRITE_UNLOCK
(&
ù_c⁄¡øck_lock
);

606 
	`synchr⁄ize_√t
();

609 
	`ù_˘_£À˘ive_˛ónup
(
kûl_¥Ÿo
, &
¥Ÿo
->proto);

610 
	}
}

612 
__öô
 
	$öô
()

614  
	`öô_‹_˛ónup
(1);

615 
	}
}

617 
__exô
 
	$föi
()

619 
	`öô_‹_˛ónup
(0);

620 
	}
}

622 
moduÀ_öô
(
öô
);

623 
moduÀ_exô
(
föi
);

627 
	$√ed_ù_c⁄¡øck
()

629 
	}
}

631 
EXPORT_SYMBOL
(
ù_c⁄¡øck_¥Ÿocﬁ_ªgi°î
);

632 
EXPORT_SYMBOL
(
ù_c⁄¡øck_¥Ÿocﬁ_uƒegi°î
);

633 
EXPORT_SYMBOL
(
övît_tu∂ïr
);

634 
EXPORT_SYMBOL
(
ù_c⁄¡øck_Æãr_ª∂y
);

635 
EXPORT_SYMBOL
(
ù_c⁄¡øck_de°royed
);

636 
EXPORT_SYMBOL
(
ù_c⁄¡øck_gë
);

637 
EXPORT_SYMBOL
(
√ed_ù_c⁄¡øck
);

638 
EXPORT_SYMBOL
(
ù_c⁄¡øck_hñ≥r_ªgi°î
);

639 
EXPORT_SYMBOL
(
ù_c⁄¡øck_hñ≥r_uƒegi°î
);

640 
EXPORT_SYMBOL
(
ù_˘_£À˘ive_˛ónup
);

641 
EXPORT_SYMBOL
(
ù_˘_ª‰esh
);

642 
EXPORT_SYMBOL
(
ù_˘_föd_¥Ÿo
);

643 
EXPORT_SYMBOL
(
__ù_˘_föd_¥Ÿo
);

644 
EXPORT_SYMBOL
(
ù_˘_föd_hñ≥r
);

645 
EXPORT_SYMBOL
(
ù_c⁄¡øck_ex≥˘_Æloc
);

646 
EXPORT_SYMBOL
(
ù_c⁄¡øck_ex≥˘_ªœãd
);

647 
EXPORT_SYMBOL
(
ù_c⁄¡øck_ch™ge_ex≥˘
);

648 
EXPORT_SYMBOL
(
ù_c⁄¡øck_u√x≥˘_ªœãd
);

649 
EXPORT_SYMBOL_GPL
(
ù_c⁄¡øck_ex≥˘_föd_gë
);

650 
EXPORT_SYMBOL_GPL
(
ù_c⁄¡øck_ex≥˘_put
);

651 
EXPORT_SYMBOL
(
ù_c⁄¡øck_tu∂e_èkí
);

652 
EXPORT_SYMBOL
(
ù_˘_g©hî_‰ags
);

653 
EXPORT_SYMBOL
(
ù_c⁄¡øck_hèbÀ_size
);

654 
EXPORT_SYMBOL
(
ù_c⁄¡øck_ex≥˘_li°
);

655 
EXPORT_SYMBOL
(
ù_c⁄¡øck_lock
);

656 
EXPORT_SYMBOL
(
ù_c⁄¡øck_hash
);

657 
EXPORT_SYMBOL
(
ù_c⁄¡øck_u¡øcked
);

658 
EXPORT_SYMBOL_GPL
(
ù_c⁄¡øck_föd_gë
);

659 
EXPORT_SYMBOL_GPL
(
ù_c⁄¡øck_put
);

	@ip_conntrack_tftp.c

14 
	~<löux/moduÀ.h
>

15 
	~<löux/ù.h
>

16 
	~<löux/udp.h
>

18 
	~<löux/√tfûãr.h
>

19 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

20 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

21 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_t·p.h
>

23 
MODULE_AUTHOR
("Magnus Boden <mb@ozaba.mine.nu>");

24 
MODULE_DESCRIPTION
("tftp connectionÅracking helper");

25 
MODULE_LICENSE
("GPL");

27 
	#MAX_PORTS
 8

	)

28 
	gp‹ts
[
MAX_PORTS
];

29 
	gp‹ts_c
;

30 
MODULE_PARM
(
p‹ts
, "1-" 
__MODULE_STRING
(
MAX_PORTS
) "i");

31 
MODULE_PARM_DESC
(
p‹ts
, "portÇumbers ofÅftp servers");

34 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
("%s:%s:" format, \

35 
__FILE__
, 
__FUNCTION__
 , ## 
¨gs
)

	)

37 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

40 
	$t·p_hñp
(
sk_buff
 *
skb
,

41 
ù_c⁄¡øck
 *
˘
,

42 
ù_c⁄¡øck_öfo
 
˘öfo
)

44 
t·phdr
 
t·ph
;

45 
ù_c⁄¡øck_ex≥˘
 *
exp
;

47 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
 * 4 + (
udphdr
),

48 &
t·ph
, (tftph)) != 0)

49  
NF_ACCEPT
;

51 
	`¡ohs
(
t·ph
.
›code
)) {

53 
TFTP_OPCODE_READ
:

54 
TFTP_OPCODE_WRITE
:

55 
	`DEBUGP
("");

56 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

57 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

59 
exp
 = 
	`ù_c⁄¡øck_ex≥˘_Æloc
();

60 i‡(
exp
 =
NULL
)

61  
NF_ACCEPT
;

63 
exp
->
tu∂e
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].tuple;

64 
exp
->
mask
.
§c
.
ù
 = 0xffffffff;

65 
exp
->
mask
.
d°
.
ù
 = 0xffffffff;

66 
exp
->
mask
.
d°
.
u
.
udp
.
p‹t
 = 0xffff;

67 
exp
->
mask
.
d°
.
¥Ÿ⁄um
 = 0xffff;

68 
exp
->
ex≥˘‚
 = 
NULL
;

70 
	`DEBUGP
("expect: ");

71 
	`DUMP_TUPLE
(&
exp
->
tu∂e
);

72 
	`DUMP_TUPLE
(&
exp
->
mask
);

73 
	`ù_c⁄¡øck_ex≥˘_ªœãd
(
exp
, 
˘
);

75 
TFTP_OPCODE_DATA
:

76 
TFTP_OPCODE_ACK
:

77 
	`DEBUGP
("Data/ACK opcode\n");

79 
TFTP_OPCODE_ERROR
:

80 
	`DEBUGP
("Error opcode\n");

83 
	`DEBUGP
("Unknown opcode\n");

85  
NF_ACCEPT
;

86 
	}
}

88 
ù_c⁄¡øck_hñ≥r
 
	gt·p
[
MAX_PORTS
];

89 
	gt·p_«mes
[
MAX_PORTS
][10];

91 
	$föi
()

93 
i
;

95 
i
 = 0 ; i < 
p‹ts_c
; i++) {

96 
	`DEBUGP
("unregistering helper forÖort %d\n",

97 
p‹ts
[
i
]);

98 
	`ù_c⁄¡øck_hñ≥r_uƒegi°î
(&
t·p
[
i
]);

100 
	}
}

102 
__öô
 
	$öô
()

104 
i
, 
ªt
;

105 *
tm≤ame
;

107 i‡(!
p‹ts
[0])

108 
p‹ts
[0]=
TFTP_PORT
;

110 
i
 = 0 ; (ò< 
MAX_PORTS
Ë&& 
p‹ts
[i] ; i++) {

112 
	`mem£t
(&
t·p
[
i
], 0, (
ù_c⁄¡øck_hñ≥r
));

114 
t·p
[
i
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

115 
t·p
[
i
].
tu∂e
.
§c
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[i]);

116 
t·p
[
i
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

117 
t·p
[
i
].
mask
.
§c
.
u
.
udp
.
p‹t
 = 0xFFFF;

118 
t·p
[
i
].
max_ex≥˘ed
 = 1;

119 
t·p
[
i
].
timeout
 = 0;

120 
t·p
[
i
].
Êags
 = 
IP_CT_HELPER_F_REUSE_EXPECT
;

121 
t·p
[
i
].
me
 = 
THIS_MODULE
;

122 
t·p
[
i
].
hñp
 = 
t·p_hñp
;

124 
tm≤ame
 = &
t·p_«mes
[
i
][0];

125 i‡(
p‹ts
[
i
] =
TFTP_PORT
)

126 
	`•rötf
(
tm≤ame
, "tftp");

128 
	`•rötf
(
tm≤ame
, "t·p-%d", 
i
);

129 
t·p
[
i
].
«me
 = 
tm≤ame
;

131 
	`DEBUGP
("p‹à#%d: %d\n", 
i
, 
p‹ts
[i]);

133 
ªt
=
	`ù_c⁄¡øck_hñ≥r_ªgi°î
(&
t·p
[
i
]);

134 i‡(
ªt
) {

135 
	`¥ötk
("ERRORÑegistering helper forÖort %d\n",

136 
p‹ts
[
i
]);

137 
	`föi
();

138 (
ªt
);

140 
p‹ts_c
++;

143 
	}
}

145 
PROVIDES_CONNTRACK
(
t·p
);

147 
moduÀ_öô
(
öô
);

148 
moduÀ_exô
(
föi
);

	@ip_conntrack_tftp.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_fw_compat.c

12 
	gnŸifõr_block
;

14 
	~<löux/√tfûãr_ùv4.h
>

15 
	~<löux/ù.h
>

16 
	~<√t/icmp.h
>

17 
	~<löux/if.h
>

18 
	~<löux/öëdevi˚.h
>

19 
	~<löux/√tdevi˚.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<asm/uac˚ss.h
>

22 
	~<√t/ù.h
>

23 
	~<√t/rouã.h
>

24 
	~<löux/√tfûãr_ùv4/com∑t_fúewÆl.h
>

25 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

26 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_c‹e.h
>

27 
	~"ù_fw_com∑t.h
"

29 
fúewÆl_›s
 *
	gfw›s
;

31 #ifde‡
CONFIG_IP_VS


34 
check_f‹_ù_vs_out
(
sk_buff
 **
skb_p
, (*
ok‚
)(sk_buff *));

38 
	$ªgi°î_fúewÆl
(
pf
, 
fúewÆl_›s
 *
fw
)

40 i‡(
pf
 !
PF_INET
) {

41 
	`¥ötk
("AttemptÅoÑegisterÇon-IP firewall module.\n");

42  -
EINVAL
;

44 i‡(
fw›s
) {

45 
	`¥ötk
("AttemptÅoÑegister multiple firewall modules.\n");

46  -
EBUSY
;

49 
fw›s
 = 
fw
;

51 
	}
}

53 
	$uƒegi°î_fúewÆl
(
pf
, 
fúewÆl_›s
 *
fw
)

55 
fw›s
 = 
NULL
;

57 
	}
}

60 
fw_ö
(
hooknum
,

61 
sk_buff
 **
pskb
,

62 c⁄° 
√t_devi˚
 *
ö
,

63 c⁄° 
√t_devi˚
 *
out
,

64 (*
ok‚
)(
sk_buff
 *))

66 
ªt
 = 
FW_BLOCK
;

67 
u_öt16_t
 
ªdú±
;

70 (*
pskb
)->
nfˇche
 |
NFC_UNKNOWN
 | 
NFC_ALTERED
;

71 i‡((*
pskb
)->
ù_summed
 =
CHECKSUM_HW
)

72 i‡(
	`skb_checksum_hñp
(
pskb
, (
out
 =
NULL
)))

73  
NF_DROP
;

75 
hooknum
) {

76 
NF_IP_PRE_ROUTING
:

77 i‡(
fw›s
->
fw_ac˘_ö
)

78 
fw›s
->
	`fw_ac˘_ö
(fw›s, 
PF_INET
,

79 (
√t_devi˚
 *)
ö
,

80 &
ªdú±
, 
pskb
);

82 i‡((*
pskb
)->
nh
.
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_MF
|
IP_OFFSET
)) {

83 *
pskb
 = 
	`ù_˘_g©hî_‰ags
(*pskb);

85 i‡(!*
pskb
)

86  
NF_STOLEN
;

89 
ªt
 = 
fw›s
->
	`fw_öput
(fw›s, 
PF_INET
, (
√t_devi˚
 *)
ö
,

90 &
ªdú±
, 
pskb
);

93 
NF_IP_FORWARD
:

96 i‡((*
pskb
)->
nf˘
)

97 
ªt
 = 
FW_ACCEPT
;

98 
ªt
 = 
fw›s
->
	`fw_f‹w¨d
(fw›s, 
PF_INET
,

99 (
√t_devi˚
 *)
out
,

100 &
ªdú±
, 
pskb
);

103 
NF_IP_POST_ROUTING
:

104 
ªt
 = 
fw›s
->
	`fw_ouçut
(fw›s, 
PF_INET
,

105 (
√t_devi˚
 *)
out
,

106 &
ªdú±
, 
pskb
);

107 i‡(
ªt
 =
FW_ACCEPT
 ||Ñë =
FW_SKIP
) {

108 i‡(
fw›s
->
fw_ac˘_out
)

109 
fw›s
->
	`fw_ac˘_out
(fw›s, 
PF_INET
,

110 (
√t_devi˚
 *)
out
,

111 &
ªdú±
,

112 
pskb
);

115 i‡(
	`ù_c⁄¡øck_c⁄fúm
(*
pskb
Ë=
NF_DROP
)

116 
ªt
 = 
FW_BLOCK
;

121 
ªt
) {

122 
FW_REJECT
: {

128 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

130 i‡((*
pskb
)->
d°
 !
NULL


131 || 
	`ù_rouã_öput
(*
pskb
, 
ùh
->
daddr
, iph->
ßddr
, iph->
tos
,

132 (
√t_devi˚
 *)
ö
) == 0)

133 
	`icmp_£nd
(*
pskb
, 
ICMP_DEST_UNREACH
, 
ICMP_PORT_UNREACH
,

135  
NF_DROP
;

138 
FW_ACCEPT
:

139 
FW_SKIP
:

140 i‡(
hooknum
 =
NF_IP_PRE_ROUTING
) {

141 
	`check_f‹_demasq
(
pskb
);

142 
	`check_f‹_ªdúe˘
(*
pskb
);

143 } i‡(
hooknum
 =
NF_IP_POST_ROUTING
) {

144 
	`check_f‹_uƒedúe˘
(*
pskb
);

146 i‡((*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 =
IPPROTO_ICMP


147 && (*
pskb
)->
nf˘
)

148 
	`check_f‹_masq_îr‹
(
pskb
);

150  
NF_ACCEPT
;

152 
FW_MASQUERADE
:

153 i‡(
hooknum
 =
NF_IP_FORWARD
) {

154 #ifde‡
CONFIG_IP_VS


156 i‡(
	`check_f‹_ù_vs_out
(
pskb
, 
ok‚
Ë=
NF_STOLEN
)

157  
NF_STOLEN
;

159  
	`do_masquîade
(
pskb
, 
out
);

161  
NF_ACCEPT
;

163 
FW_REDIRECT
:

164 i‡(
hooknum
 =
NF_IP_PRE_ROUTING
)

165  
	`do_ªdúe˘
(*
pskb
, 
ö
, 
ªdú±
);

166  
NF_ACCEPT
;

170  
NF_DROP
;

172 
	}
}

174 
fw_c⁄fúm
(
hooknum
,

175 
sk_buff
 **
pskb
,

176 c⁄° 
√t_devi˚
 *
ö
,

177 c⁄° 
√t_devi˚
 *
out
,

178 (*
ok‚
)(
sk_buff
 *))

180  
	`ù_c⁄¡øck_c⁄fúm
(*
pskb
);

181 
	}
}

183 
ù_fw_˘l
(
›tvÆ
, *
m
, 
Àn
);

185 
	$sock_‚
(
sock
 *
sk
, 
›tvÆ
, 
__u£r
 *
u£r
, 
Àn
)

194 
tmp_fw
[200];

195 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

196  -
EPERM
;

198 i‡(
Àn
 > (
tmp_fw
) ||Üen < 1)

199  -
EINVAL
;

201 i‡(
	`c›y_‰om_u£r
(&
tmp_fw
, 
u£r
, 
Àn
))

202  -
EFAULT
;

204  -
	`ù_fw_˘l
(
›tvÆ
, &
tmp_fw
, 
Àn
);

205 
	}
}

207 
nf_hook_›s
 
	g¥îouã_›s
 = {

208 .
hook
 = 
fw_ö
,

209 .
	gow√r
 = 
THIS_MODULE
,

210 .
	gpf
 = 
PF_INET
,

211 .
	ghooknum
 = 
NF_IP_PRE_ROUTING
,

212 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

215 
nf_hook_›s
 
	gpo°rouã_›s
 = {

216 .
hook
 = 
fw_ö
,

217 .
	gow√r
 = 
THIS_MODULE
,

218 .
	gpf
 = 
PF_INET
,

219 .
	ghooknum
 = 
NF_IP_POST_ROUTING
,

220 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

223 
nf_hook_›s
 
	gf‹w¨d_›s
 = {

224 .
hook
 = 
fw_ö
,

225 .
	gow√r
 = 
THIS_MODULE
,

226 .
	gpf
 = 
PF_INET
,

227 .
	ghooknum
 = 
NF_IP_FORWARD
,

228 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

231 
nf_hook_›s
 
	gloˇl_ö_›s
 = {

232 .
hook
 = 
fw_c⁄fúm
,

233 .
	gow√r
 = 
THIS_MODULE
,

234 .
	gpf
 = 
PF_INET
,

235 .
	ghooknum
 = 
NF_IP_LOCAL_IN
,

236 .
	g¥i‹ôy
 = 
NF_IP_PRI_LAST
 - 1,

239 
nf_sock›t_›s
 
	gsock_›s
 = {

240 .
pf
 = 
PF_INET
,

241 .
	g£t_›tmö
 = 64,

242 .
	g£t_›tmax
 = 64 + 1024 + 1,

243 .
	g£t
 = &
sock_‚
,

246 
ùfw_öô_‹_˛ónup
(
öô
);

248 
	$öô_‹_˛ónup
(
öô
)

250 
ªt
 = 0;

252 i‡(!
öô
Ë
˛ónup
;

254 
ªt
 = 
	`nf_ªgi°î_sock›t
(&
sock_›s
);

256 i‡(
ªt
 < 0)

257 
˛ónup_nŸhög
;

259 
ªt
 = 
	`ùfw_öô_‹_˛ónup
(1);

260 i‡(
ªt
 < 0)

261 
˛ónup_sock›t
;

263 
ªt
 = 
	`masq_öô
();

264 i‡(
ªt
 < 0)

265 
˛ónup_ùfw
;

267 
	`nf_ªgi°î_hook
(&
¥îouã_›s
);

268 
	`nf_ªgi°î_hook
(&
po°rouã_›s
);

269 
	`nf_ªgi°î_hook
(&
f‹w¨d_›s
);

270 
	`nf_ªgi°î_hook
(&
loˇl_ö_›s
);

272  
ªt
;

274 
˛ónup
:

275 
	`nf_uƒegi°î_hook
(&
¥îouã_›s
);

276 
	`nf_uƒegi°î_hook
(&
po°rouã_›s
);

277 
	`nf_uƒegi°î_hook
(&
f‹w¨d_›s
);

278 
	`nf_uƒegi°î_hook
(&
loˇl_ö_›s
);

280 
	`masq_˛ónup
();

282 
˛ónup_ùfw
:

283 
	`ùfw_öô_‹_˛ónup
(0);

285 
˛ónup_sock›t
:

286 
	`nf_uƒegi°î_sock›t
(&
sock_›s
);

288 
˛ónup_nŸhög
:

289  
ªt
;

290 
	}
}

292 
__öô
 
	$öô
()

294  
	`öô_‹_˛ónup
(1);

295 
	}
}

297 
__exô
 
	$föi
()

299 
	`öô_‹_˛ónup
(0);

300 
	}
}

302 
moduÀ_öô
(
öô
);

303 
moduÀ_exô
(
föi
);

	@ip_fw_compat.h

1 #i‚de‡
_LINUX_IP_FW_COMPAT_H


2 
	#_LINUX_IP_FW_COMPAT_H


	)

6 
do_ªdúe˘
(
sk_buff
 *
skb
,

7 c⁄° 
√t_devi˚
 *
dev
,

8 
u_öt16_t
 
ªdú±
);

11 
check_f‹_ªdúe˘
(
sk_buff
 *
skb
);

14 
check_f‹_uƒedúe˘
(
sk_buff
 *
skb
);

18 
do_masquîade
(
sk_buff
 **
pskb
, c⁄° 
√t_devi˚
 *
dev
);

20 
check_f‹_masq_îr‹
(
sk_buff
 **
pskb
);

23 
check_f‹_demasq
(
sk_buff
 **
pskb
);

25 
__öô
 
masq_öô
();

26 
masq_˛ónup
();

	@ip_fw_compat_masq.c

16 
	~<löux/skbuff.h
>

17 
	~<löux/ö.h
>

18 
	~<löux/ù.h
>

19 
	~<löux/icmp.h
>

20 
	~<löux/udp.h
>

21 
	~<löux/√tfûãr_ùv4.h
>

22 
	~<löux/√tdevi˚.h
>

23 
	~<löux/öëdevi˚.h
>

24 
	~<löux/¥oc_fs.h
>

25 
	~<löux/moduÀ.h
>

26 
	~<√t/rouã.h
>

27 
	~<√t/ù.h
>

29 
	#ASSERT_READ_LOCK
(
x
Ë
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_lock
)

	)

30 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`MUST_BE_WRITE_LOCKED
(&
ù_c⁄¡øck_lock
)

	)

32 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

33 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_c‹e.h
>

34 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

35 
	~<löux/√tfûãr_ùv4/ù_«t_c‹e.h
>

36 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

37 
	~"ù_fw_com∑t.h
"

40 
	#DEBUGP
 
¥ötk


	)

42 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

46 
	$do_masquîade
(
sk_buff
 **
pskb
, c⁄° 
√t_devi˚
 *
dev
)

48 
ù_«t_öfo
 *
öfo
;

49 
ù_c⁄¡øck_öfo
 
˘öfo
;

50 
ù_c⁄¡øck
 *
˘
;

51 
ªt
;

54 i‡((*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 !
IPPROTO_ICMP


55 && (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 !
IPPROTO_TCP


56 && (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 !
IPPROTO_UDP
)

57  
NF_DROP
;

61 
ªt
 = 
	`ù_c⁄¡øck_ö
(
NF_IP_POST_ROUTING
, 
pskb
, 
dev
, 
NULL
, NULL);

62 i‡(
ªt
 !
NF_ACCEPT
) {

63 
	`DEBUGP
("ù_c⁄¡øck_öÑëu∫ed %u.\n", 
ªt
);

64  
ªt
;

67 
˘
 = 
	`ù_c⁄¡øck_gë
(*
pskb
, &
˘öfo
);

69 i‡(!
˘
) {

70 
	`DEBUGP
("ip_conntrack_in setÅo invalid conntrack.\n");

71  
NF_DROP
;

74 
öfo
 = &
˘
->
«t
.info;

76 
	`WRITE_LOCK
(&
ù_«t_lock
);

78 i‡(!
öfo
->
öôülized
) {

79 
u_öt32_t
 
√w§c
;

80 
Êowi
 
Ê
 = { .
∆_u
 = { .
ù4_u
 = { .
daddr
 = (*
pskb
)->
nh
.
ùh
->daddr } } };

81 
πabÀ
 *
π
;

82 
ù_«t_mu…i_ønge
 
ønge
;

86 i‡(
	`ù_rouã_ouçut_key
(&
π
, &
Ê
) != 0) {

87 
	`DEBUGP
("ipnat_rule_masquerade: Can'tÑeroute.\n");

88  
NF_DROP
;

90 
√w§c
 = 
	`öë_£À˘_addr
(
π
->
u
.
d°
.
dev
,Ñt->
π_g©eway
,

91 
RT_SCOPE_UNIVERSE
);

92 
	`ù_π_put
(
π
);

93 
ønge
 = ((
ù_«t_mu…i_ønge
)

95 {{
IP_NAT_RANGE_MAP_IPS
|
IP_NAT_RANGE_PROTO_SPECIFIED
,

96 
√w§c
,Çewsrc,

97 { 
	`ht⁄s
(61000) }, { htons(65095) } } } });

99 
ªt
 = 
	`ù_«t_£tup_öfo
(
˘
, &
ønge
, 
NF_IP_POST_ROUTING
);

100 i‡(
ªt
 !
NF_ACCEPT
) {

101 
	`WRITE_UNLOCK
(&
ù_«t_lock
);

102  
ªt
;

105 
	`DEBUGP
("Masqueradingálready done onÅhis conn.\n");

106 
	`WRITE_UNLOCK
(&
ù_«t_lock
);

108  
	`do_bödögs
(
˘
, 
˘öfo
, 
öfo
, 
NF_IP_POST_ROUTING
, 
pskb
);

109 
	}
}

112 
	$check_f‹_masq_îr‹
(
sk_buff
 **
pskb
)

114 
ù_c⁄¡øck_öfo
 
˘öfo
;

115 
ù_c⁄¡øck
 *
˘
;

117 
˘
 = 
	`ù_c⁄¡øck_gë
(*
pskb
, &
˘öfo
);

120 
	`IP_NF_ASSERT
(
˘
);

121 i‡(
˘öfo
 =
IP_CT_RELATED
) {

122 
	`icmp_ª∂y_å™¶©i⁄
(
pskb
, 
˘
, 
NF_IP_PRE_ROUTING
,

123 
	`CTINFO2DIR
(
˘öfo
));

124 
	`icmp_ª∂y_å™¶©i⁄
(
pskb
, 
˘
, 
NF_IP_POST_ROUTING
,

125 
	`CTINFO2DIR
(
˘öfo
));

127 
	}
}

130 
	$check_f‹_demasq
(
sk_buff
 **
pskb
)

132 
ù_c⁄¡øck_tu∂e
 
tu∂e
;

133 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿocﬁ
;

134 
ù_c⁄¡øck_tu∂e_hash
 *
h
;

135 
ù_c⁄¡øck_öfo
 
˘öfo
;

136 
ù_c⁄¡øck
 *
˘
;

137 
ªt
;

139 
¥Ÿocﬁ
 = 
	`ù_˘_föd_¥Ÿo
((*
pskb
)->
nh
.
ùh
->protocol);

144 (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
) {

145 
IPPROTO_ICMP
:

147 
˘
 = 
	`icmp_îr‹_åack
(*
pskb
, &
˘öfo
, 
NF_IP_PRE_ROUTING
);

148 i‡(
˘
) {

153 i‡(
	`CTINFO2DIR
(
˘öfo
Ë=
IP_CT_DIR_REPLY
) {

154 
	`icmp_ª∂y_å™¶©i⁄
(
pskb
, 
˘
,

155 
NF_IP_PRE_ROUTING
,

156 
	`CTINFO2DIR
(
˘öfo
));

157 
	`icmp_ª∂y_å™¶©i⁄
(
pskb
, 
˘
,

158 
NF_IP_POST_ROUTING
,

159 
	`CTINFO2DIR
(
˘öfo
));

161  
NF_ACCEPT
;

164 
IPPROTO_TCP
:

165 
IPPROTO_UDP
:

166 
	`IP_NF_ASSERT
(((*
pskb
)->
nh
.
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_OFFSET
)) == 0);

168 i‡(!
	`gë_tu∂e
((*
pskb
)->
nh
.
ùh
, *pskb, (*pskb)->nh.ùh->
ihl
*4, &
tu∂e
, 
¥Ÿocﬁ
)) {

169 i‡(
	`√t_øãlimô
())

170 
	`¥ötk
("ip_fw_compat_masq: Can't getÅuple\n");

171  
NF_ACCEPT
;

177  
NF_ACCEPT
;

179 
h
 = 
	`ù_c⁄¡øck_föd_gë
(&
tu∂e
, 
NULL
);

182 i‡(
h
 && 
	`DIRECTION
(h) == 1) {

183 
ªt
 = 
	`ù_c⁄¡øck_ö
(
NF_IP_PRE_ROUTING
, 
pskb
,

184 
NULL
, NULL, NULL);

187 
	`nf_c⁄¡øck_put
(&
h
->
˘øck
->
öfos
[0]);

188 i‡(
ªt
 =
NF_ACCEPT
) {

189 
ù_c⁄¡øck
 *
˘
;

190 
˘
 = 
	`ù_c⁄¡øck_gë
(*
pskb
, &
˘öfo
);

192 i‡(
˘
) {

193 
ù_«t_öfo
 *
öfo
 = &
˘
->
«t
.info;

195 
	`do_bödögs
(
˘
, 
˘öfo
, 
öfo
,

196 
NF_IP_PRE_ROUTING
,

197 
pskb
);

199 i‡(
	`√t_øãlimô
())

200 
	`¥ötk
("ip_fw_compat_masq: conntrack"

204 i‡(
h
)

206 
	`nf_c⁄¡øck_put
(&
h
->
˘øck
->
öfos
[0]);

207 
ªt
 = 
NF_ACCEPT
;

210  
ªt
;

211 
	}
}

213 
	$ù_fw_masq_timeouts
(*
u£r
, 
Àn
)

215 
	`¥ötk
("Sorry: masqueradingÅimeouts set 5DAYS/2MINS/60SECS\n");

217 
	}
}

219 c⁄° *
	$masq_¥Ÿo_«me
(
u_öt16_t
 
¥Ÿ⁄um
)

221 
¥Ÿ⁄um
) {

222 
IPPROTO_TCP
:  "TCP";

223 
IPPROTO_UDP
:  "UDP";

224 
IPPROTO_ICMP
:  "ICMP";

227 
	}
}

230 
	$¥öt_masq
(*
buf„r
, c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

232 
ãmp
[129];

237 
	`•rötf
(
ãmp
,"%s %08X:%04X %08X:%04X %04X %08X %6d %6d %7lu",

238 
	`masq_¥Ÿo_«me
(
c⁄¡øck
->
tu∂ehash
[0].
tu∂e
.
d°
.
¥Ÿ⁄um
),

239 
	`¡ohl
(
c⁄¡øck
->
tu∂ehash
[0].
tu∂e
.
§c
.
ù
),

240 
	`¡ohs
(
c⁄¡øck
->
tu∂ehash
[0].
tu∂e
.
§c
.
u
.
Æl
),

241 
	`¡ohl
(
c⁄¡øck
->
tu∂ehash
[0].
tu∂e
.
d°
.
ù
),

242 
	`¡ohs
(
c⁄¡øck
->
tu∂ehash
[0].
tu∂e
.
d°
.
u
.
Æl
),

243 
	`¡ohs
(
c⁄¡øck
->
tu∂ehash
[1].
tu∂e
.
d°
.
u
.
Æl
),

246 
c⁄¡øck
->
timeout
.
expúes
 - 
jiffõs
);

248  
	`•rötf
(
buf„r
, "%-127s\n", 
ãmp
);

249 
	}
}

253 
	$masq_ôî©e
(c⁄° 
ù_c⁄¡øck_tu∂e_hash
 *
hash
,

254 *
buf„r
, 
off_t
 
off£t
, off_à*
u±o
,

255 *
Àn
, 
maxÀn
)

257 
√wÀn
;

259 
	`IP_NF_ASSERT
(
hash
->
˘øck
);

262 i‡(
	`DIRECTION
(
hash
))

265 i‡((*
u±o
)++ < 
off£t
)

268 
√wÀn
 = 
	`¥öt_masq
(
buf„r
 + *
Àn
, 
hash
->
˘øck
);

269 i‡(*
Àn
 + 
√wÀn
 > 
maxÀn
)

271 *
Àn
 +
√wÀn
;

274 
	}
}

278 
	$masq_¥ocöfo
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

280 
i
;

281 
Àn
 = 0;

282 
off_t
 
u±o
 = 1;

285 i‡(
off£t
 == 0) {

286 
ãmp
[128];

288 
	`•rötf
(
ãmp
,

290 
Àn
 = 
	`•rötf
(
buf„r
, "%-127s\n", 
ãmp
);

291 
off£t
 = 1;

294 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

296 
i
 = 0; i < 
ù_c⁄¡øck_hèbÀ_size
; i++) {

297 i‡(
	`LIST_FIND
(&
ù_c⁄¡øck_hash
[
i
], 
masq_ôî©e
,

298 
ù_c⁄¡øck_tu∂e_hash
 *,

299 
buf„r
, 
off£t
, &
u±o
, &
Àn
, 
Àngth
))

302 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

305 *
°¨t
 = (*)(()
u±o
 - 
off£t
);

306  
Àn
;

307 
	}
}

309 
__öô
 
	$masq_öô
()

311 
ªt
;

312 
¥oc_dú_íåy
 *
¥oc
;

314 
ªt
 = 
	`ù_c⁄¡øck_öô
();

315 i‡(
ªt
 == 0) {

316 
ªt
 = 
	`ù_«t_öô
();

317 i‡(
ªt
 == 0) {

318 
¥oc
 = 
	`¥oc_√t_¸óã
("ip_masquerade",

319 0, 
masq_¥ocöfo
);

320 i‡(
¥oc
)

321 
¥oc
->
ow√r
 = 
THIS_MODULE
;

323 
	`ù_«t_˛ónup
();

324 
	`ù_c⁄¡øck_˛ónup
();

325 
ªt
 = -
ENOMEM
;

328 
	`ù_c⁄¡øck_˛ónup
();

331  
ªt
;

332 
	}
}

334 
	$masq_˛ónup
()

336 
	`ù_«t_˛ónup
();

337 
	`ù_c⁄¡øck_˛ónup
();

338 
	`¥oc_√t_ªmove
("ip_masquerade");

339 
	}
}

	@ip_fw_compat_redir.c

19 
	~<löux/c⁄fig.h
>

20 
	~<löux/√tfûãr.h
>

21 
	~<löux/ù.h
>

22 
	~<löux/udp.h
>

23 
	~<löux/t˝.h
>

24 
	~<√t/checksum.h
>

25 
	~<√t/ù.h
>

26 
	~<löux/timî.h
>

27 
	~<löux/√tdevi˚.h
>

28 
	~<löux/if.h
>

29 
	~<löux/ö.h
>

31 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

34 
	#REDIR_TIMEOUT
 (240*
HZ
)

	)

36 
DECLARE_LOCK
(
ªdú_lock
);

37 
	#ASSERT_READ_LOCK
(
x
Ë
	`MUST_BE_LOCKED
(&
ªdú_lock
)

	)

38 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`MUST_BE_LOCKED
(&
ªdú_lock
)

	)

40 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

41 
	~"ù_fw_com∑t.h
"

44 
	#DEBUGP
 
¥ötk


	)

46 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

49 #ifde‡
CONFIG_NETFILTER_DEBUG


50 
	#IP_NF_ASSERT
(
x
) \

52 i‡(!(
x
)) \

55 
	`¥ötk
("ASSERT: %s:%i(%s)\n", \

56 
__FILE__
, 
__LINE__
, 
__FUNCTION__
); \

57 } 0)

	)

59 
	#IP_NF_ASSERT
(
x
)

	)

62 
u_öt16_t


63 
	$chót_check
(
u_öt32_t
 
ﬁdvÆöv
, u_öt32_à
√wvÆ
, 
u_öt16_t
 
ﬁdcheck
)

65 
u_öt32_t
 
diffs
[] = { 
ﬁdvÆöv
, 
√wvÆ
 };

66  
	`csum_fﬁd
(
	`csum_∑πül
((*)
diffs
, (diffs),

67 
ﬁdcheck
^0xFFFF));

68 
	}
}

70 
	sªdú_c‹e
 {

71 
u_öt32_t
 
	m‹ig_§cù
, 
	m‹ig_d°ù
;

72 
u_öt16_t
 
	m‹ig_•‹t
, 
	m‹ig_dp‹t
;

74 
u_öt32_t
 
	m√w_d°ù
;

75 
u_öt16_t
 
	m√w_dp‹t
;

78 
	sªdú


80 
li°_hód
 
	mli°
;

81 
ªdú_c‹e
 
	mc‹e
;

82 
timî_li°
 
	mde°royme
;

85 
LIST_HEAD
(
ªdús
);

88 
	$ªdú_cmp
(c⁄° 
ªdú
 *
i
,

89 
u_öt32_t
 
‹ig_§cù
, u_öt32_à
‹ig_d°ù
,

90 
u_öt16_t
 
‹ig_•‹t
, u_öt16_à
‹ig_dp‹t
)

92  (
i
->
c‹e
.
‹ig_§cù
 == orig_srcip

93 && 
i
->
c‹e
.
‹ig_d°ù
 == orig_dstip

94 && 
i
->
c‹e
.
‹ig_•‹t
 == orig_sport

95 && 
i
->
c‹e
.
‹ig_dp‹t
 == orig_dport);

96 
	}
}

99 
ªdú
 *

100 
	$föd_ªdú
(
u_öt32_t
 
‹ig_§cù
, u_öt32_à
‹ig_d°ù
,

101 
u_öt16_t
 
‹ig_•‹t
, u_öt16_à
‹ig_dp‹t
)

103  
	`LIST_FIND
(&
ªdús
, 
ªdú_cmp
, 
ªdú
 *,

104 
‹ig_§cù
, 
‹ig_d°ù
, 
‹ig_•‹t
, 
‹ig_dp‹t
);

105 
	}
}

107 
	$do_t˝_ªdú
(
sk_buff
 *
skb
, 
ªdú
 *redir)

109 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

110 
t˝hdr
 *
t˝h
 = (t˝hd∏*)((
u_öt32_t
 *)
ùh


111 + 
ùh
->
ihl
);

113 
t˝h
->
check
 = 
	`chót_check
(~
ªdú
->
c‹e
.
‹ig_d°ù
,

114 
ªdú
->
c‹e
.
√w_d°ù
,

115 
	`chót_check
(
ªdú
->
c‹e
.
‹ig_dp‹t
 ^ 0xFFFF,

116 
ªdú
->
c‹e
.
√w_dp‹t
,

117 
t˝h
->
check
));

118 
ùh
->
check
 = 
	`chót_check
(~
ªdú
->
c‹e
.
‹ig_d°ù
,

119 
ªdú
->
c‹e
.
√w_d°ù
, 
ùh
->
check
);

120 
t˝h
->
de°
 = 
ªdú
->
c‹e
.
√w_dp‹t
;

121 
ùh
->
daddr
 = 
ªdú
->
c‹e
.
√w_d°ù
;

123 
skb
->
nfˇche
 |
NFC_ALTERED
;

124 
	}
}

127 
	$uƒedú_cmp
(c⁄° 
ªdú
 *
i
,

128 
u_öt32_t
 
√w_d°ù
, u_öt32_à
‹ig_§cù
,

129 
u_öt16_t
 
√w_dp‹t
, u_öt16_à
‹ig_•‹t
)

131  (
i
->
c‹e
.
‹ig_§cù
 == orig_srcip

132 && 
i
->
c‹e
.
√w_d°ù
 ==Çew_dstip

133 && 
i
->
c‹e
.
‹ig_•‹t
 == orig_sport

134 && 
i
->
c‹e
.
√w_dp‹t
 ==Çew_dport);

135 
	}
}

138 
ªdú
 *

139 
	$föd_uƒedú
(
u_öt32_t
 
√w_d°ù
, u_öt32_à
‹ig_§cù
,

140 
u_öt16_t
 
√w_dp‹t
, u_öt16_à
‹ig_•‹t
)

142  
	`LIST_FIND
(&
ªdús
, 
uƒedú_cmp
, 
ªdú
 *,

143 
√w_d°ù
, 
‹ig_§cù
, 
√w_dp‹t
, 
‹ig_•‹t
);

144 
	}
}

147 
	$do_t˝_uƒedú
(
sk_buff
 *
skb
, 
ªdú
 *redir)

149 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

150 
t˝hdr
 *
t˝h
 = (t˝hd∏*)((
u_öt32_t
 *)
ùh


151 + 
ùh
->
ihl
);

153 
t˝h
->
check
 = 
	`chót_check
(~
ªdú
->
c‹e
.
√w_d°ù
,

154 
ªdú
->
c‹e
.
‹ig_d°ù
,

155 
	`chót_check
(
ªdú
->
c‹e
.
√w_dp‹t
 ^ 0xFFFF,

156 
ªdú
->
c‹e
.
‹ig_dp‹t
,

157 
t˝h
->
check
));

158 
ùh
->
check
 = 
	`chót_check
(~
ªdú
->
c‹e
.
√w_d°ù
,

159 
ªdú
->
c‹e
.
‹ig_d°ù
,

160 
ùh
->
check
);

161 
t˝h
->
sour˚
 = 
ªdú
->
c‹e
.
‹ig_dp‹t
;

162 
ùh
->
ßddr
 = 
ªdú
->
c‹e
.
‹ig_d°ù
;

164 
skb
->
nfˇche
 |
NFC_ALTERED
;

165 
	}
}

167 
	$de°royme
(
me
)

169 
	`LOCK_BH
(&
ªdú_lock
);

170 
	`LIST_DELETE
(&
ªdús
, (
ªdú
 *)
me
);

171 
	`UNLOCK_BH
(&
ªdú_lock
);

172 
	`k‰ì
((
ªdú
 *)
me
);

173 
	}
}

177 
	$do_ªdúe˘
(
sk_buff
 *
skb
,

178 c⁄° 
√t_devi˚
 *
dev
,

179 
u_öt16_t
 
ªdú±
)

181 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

182 
u_öt32_t
 
√wd°
;

185 i‡(!
dev
)

186  
NF_DROP
;

189 
√wd°
 = ((
ö_devi˚
 *)
dev
->
ù_±r
)->
iÁ_li°
->
iÁ_loˇl
;

191 
ùh
->
¥Ÿocﬁ
) {

192 
IPPROTO_UDP
: {

194 
udphdr
 *
udph
 = (udphd∏*)((
u_öt32_t
 *)
ùh


195 + 
ùh
->
ihl
);

198 i‡(
skb
->
Àn
 < 
ùh
->
ihl
*4 + (*
udph
))

199  
NF_DROP
;

201 i‡(
udph
->
check
)

202 
udph
->
check
 = 
	`chót_check
(~
ùh
->
daddr
, 
√wd°
,

203 
	`chót_check
(
udph
->
de°
 ^ 0xFFFF,

204 
ªdú±
,

205 
udph
->
check
));

206 
ùh
->
check
 = 
	`chót_check
(~ùh->
daddr
, 
√wd°
, iph->check);

207 
udph
->
de°
 = 
ªdú±
;

208 
ùh
->
daddr
 = 
√wd°
;

210 
skb
->
nfˇche
 |
NFC_ALTERED
;

211  
NF_ACCEPT
;

213 
IPPROTO_TCP
: {

215 
t˝hdr
 *
t˝h
 = (t˝hd∏*)((
u_öt32_t
 *)
ùh


216 + 
ùh
->
ihl
);

217 
ªdú
 *redir;

218 
ªt
;

221 i‡(
skb
->
Àn
 < 
ùh
->
ihl
*4 + (*
t˝h
))

222  
NF_DROP
;

224 
	`DEBUGP
("DoingÅcpÑedirect. %08X:%u %08X:%u -> %08X:%u\n",

225 
ùh
->
ßddr
, 
t˝h
->
sour˚
, iph->
daddr
,Å˝h->
de°
,

226 
√wd°
, 
ªdú±
);

227 
	`LOCK_BH
(&
ªdú_lock
);

228 
ªdú
 = 
	`föd_ªdú
(
ùh
->
ßddr
, iph->
daddr
,

229 
t˝h
->
sour˚
,Å˝h->
de°
);

231 i‡(!
ªdú
) {

232 
ªdú
 = 
	`kmÆloc
((ªdú), 
GFP_ATOMIC
);

233 i‡(!
ªdú
) {

234 
ªt
 = 
NF_DROP
;

235 
out
;

237 
	`li°_¥ïíd
(&
ªdús
, 
ªdú
);

238 
	`öô_timî
(&
ªdú
->
de°royme
);

239 
ªdú
->
de°royme
.
fun˘i⁄
 = destroyme;

240 
ªdú
->
de°royme
.
d©a
 = ()redir;

241 
ªdú
->
de°royme
.
expúes
 = 
jiffõs
 + 
REDIR_TIMEOUT
;

242 
	`add_timî
(&
ªdú
->
de°royme
);

245 
ªdú
->
c‹e
 = ((
ªdú_c‹e
)

246 { 
ùh
->
ßddr
, iph->
daddr
,

247 
t˝h
->
sour˚
,Å˝h->
de°
,

248 
√wd°
, 
ªdú±
 });

249 
	`do_t˝_ªdú
(
skb
, 
ªdú
);

250 
ªt
 = 
NF_ACCEPT
;

252 
out
:

253 
	`UNLOCK_BH
(&
ªdú_lock
);

254  
ªt
;

258  
NF_DROP
;

260 
	}
}

265 
	$check_f‹_ªdúe˘
(
sk_buff
 *
skb
)

267 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

268 
t˝hdr
 *
t˝h
 = (t˝hd∏*)((
u_öt32_t
 *)
ùh


269 + 
ùh
->
ihl
);

270 
ªdú
 *redir;

272 i‡(
ùh
->
¥Ÿocﬁ
 !
IPPROTO_TCP
)

276 i‡(
skb
->
Àn
 < 
ùh
->
ihl
*4 + (*
t˝h
))

279 
	`LOCK_BH
(&
ªdú_lock
);

280 
ªdú
 = 
	`föd_ªdú
(
ùh
->
ßddr
, iph->
daddr
, 
t˝h
->
sour˚
,Å˝h->
de°
);

281 i‡(
ªdú
) {

282 
	`DEBUGP
("DoingÅcpÑedirectágain.\n");

283 
	`do_t˝_ªdú
(
skb
, 
ªdú
);

284 i‡(
	`dñ_timî
(&
ªdú
->
de°royme
)) {

285 
ªdú
->
de°royme
.
expúes
 = 
jiffõs
 + 
REDIR_TIMEOUT
;

286 
	`add_timî
(&
ªdú
->
de°royme
);

289 
	`UNLOCK_BH
(&
ªdú_lock
);

290 
	}
}

293 
	$check_f‹_uƒedúe˘
(
sk_buff
 *
skb
)

295 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

296 
t˝hdr
 *
t˝h
 = (t˝hd∏*)((
u_öt32_t
 *)
ùh


297 + 
ùh
->
ihl
);

298 
ªdú
 *redir;

300 i‡(
ùh
->
¥Ÿocﬁ
 !
IPPROTO_TCP
)

304 i‡(
skb
->
Àn
 < 
ùh
->
ihl
*4 + (*
t˝h
))

307 
	`LOCK_BH
(&
ªdú_lock
);

308 
ªdú
 = 
	`föd_uƒedú
(
ùh
->
ßddr
, iph->
daddr
, 
t˝h
->
sour˚
,Å˝h->
de°
);

309 i‡(
ªdú
) {

310 
	`DEBUGP
("DoingÅcp unredirect.\n");

311 
	`do_t˝_uƒedú
(
skb
, 
ªdú
);

312 i‡(
	`dñ_timî
(&
ªdú
->
de°royme
)) {

313 
ªdú
->
de°royme
.
expúes
 = 
jiffõs
 + 
REDIR_TIMEOUT
;

314 
	`add_timî
(&
ªdú
->
de°royme
);

317 
	`UNLOCK_BH
(&
ªdú_lock
);

318 
	}
}

	@ip_nat_amanda.c

14 
	~<löux/kî√l.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/√tfûãr.h
>

17 
	~<löux/skbuff.h
>

18 
	~<löux/ù.h
>

19 
	~<löux/udp.h
>

20 
	~<√t/t˝.h
>

21 
	~<√t/udp.h
>

23 
	~<löux/√tfûãr_ùv4.h
>

24 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

25 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

26 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

27 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_am™da.h
>

30 
MODULE_AUTHOR
("Brian J. Murrell <netfilter@interlinx.bc.ca>");

31 
MODULE_DESCRIPTION
("Amanda NAT helper");

32 
MODULE_LICENSE
("GPL");

35 
	$am™da_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

36 
hooknum
,

37 
ù_c⁄¡øck
 *
˘
,

38 
ù_«t_öfo
 *
öfo
)

40 
ù_c⁄¡øck
 *
ma°î
 = 
	`ma°î_˘
(
˘
);

41 
ù_˘_am™da_ex≥˘
 *
exp_am™da_öfo
;

42 
ù_«t_mu…i_ønge
 
mr
;

43 
u_öt32_t
 
√wù
;

45 
	`IP_NF_ASSERT
(
öfo
);

46 
	`IP_NF_ASSERT
(
ma°î
);

47 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))));

49 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
)

50 
√wù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
;

52 
√wù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
;

54 
mr
.
øngesize
 = 1;

56 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
;

57 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
√wù
;

59 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_DST
) {

60 
exp_am™da_öfo
 = &
˘
->
ma°î
->
hñp
.exp_amanda_info;

61 
mr
.
ønge
[0].
Êags
 |
IP_NAT_RANGE_PROTO_SPECIFIED
;

62 
mr
.
ønge
[0].
mö
 = mr.ønge[0].
max


63 ((
ù_c⁄¡øck_m™ù_¥Ÿo
)

64 { .
udp
 = { 
	`ht⁄s
(
exp_am™da_öfo
->
p‹t
) } });

67  
	`ù_«t_£tup_öfo
(
˘
, &
mr
, 
hooknum
);

68 
	}
}

70 
	$am™da_d©a_fixup
(
ù_c⁄¡øck
 *
˘
,

71 
sk_buff
 **
pskb
,

72 
ù_c⁄¡øck_öfo
 
˘öfo
,

73 
ù_c⁄¡øck_ex≥˘
 *
exp
)

75 
ù_˘_am™da_ex≥˘
 *
exp_am™da_öfo
;

76 
ù_c⁄¡øck_tu∂e
 
t
 = 
exp
->
tu∂e
;

77 
buf„r
[("65535")];

78 
u_öt16_t
 
p‹t
;

81 
exp_am™da_öfo
 = &
exp
->
hñp
.exp_amanda_info;

82 
t
.
d°
.
ù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.dst.ip;

83 
p‹t
 = 
exp_am™da_öfo
->port;Öort != 0;Öort++) {

84 
t
.
d°
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(port);

85 i‡(
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
exp
, &
t
) == 0)

88 i‡(
p‹t
 == 0)

91 
	`•rötf
(
buf„r
, "%u", 
p‹t
);

92  
	`ù_«t_m™gÀ_udp_∑ckë
(
pskb
, 
˘
, 
˘öfo
,

93 
exp_am™da_öfo
->
off£t
,

94 
exp_am™da_öfo
->
Àn
,

95 
buf„r
, 
	`°æí
(buffer));

96 
	}
}

98 
	$hñp
(
ù_c⁄¡øck
 *
˘
,

99 
ù_c⁄¡øck_ex≥˘
 *
exp
,

100 
ù_«t_öfo
 *
öfo
,

101 
ù_c⁄¡øck_öfo
 
˘öfo
,

102 
hooknum
,

103 
sk_buff
 **
pskb
)

105 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

106 
ªt
 = 
NF_ACCEPT
;

110 i‡(!((
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

111 || (
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
)))

112  
NF_ACCEPT
;

115 i‡(
exp
->
hñp
.
exp_am™da_öfo
.
off£t
 != 0)

116 i‡(!
	`am™da_d©a_fixup
(
˘
, 
pskb
, 
˘öfo
, 
exp
))

117 
ªt
 = 
NF_DROP
;

118 
exp
->
hñp
.
exp_am™da_öfo
.
off£t
 = 0;

120  
ªt
;

121 
	}
}

123 
ù_«t_hñ≥r
 
	gù_«t_am™da_hñ≥r
;

125 
__exô
 
	$föi
()

127 
	`ù_«t_hñ≥r_uƒegi°î
(&
ù_«t_am™da_hñ≥r
);

128 
	}
}

130 
__öô
 
	$öô
()

132 
ù_«t_hñ≥r
 *
hÕr
 = &
ù_«t_am™da_hñ≥r
;

134 
hÕr
->
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

135 
hÕr
->
tu∂e
.
§c
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(10080);

136 
hÕr
->
mask
.
§c
.
u
.
udp
.
p‹t
 = 0xFFFF;

137 
hÕr
->
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

138 
hÕr
->
hñp
 = help;

139 
hÕr
->
Êags
 = 0;

140 
hÕr
->
me
 = 
THIS_MODULE
;

141 
hÕr
->
ex≥˘
 = 
am™da_«t_ex≥˘ed
;

142 
hÕr
->
«me
 = "amanda";

144  
	`ù_«t_hñ≥r_ªgi°î
(
hÕr
);

145 
	}
}

147 
NEEDS_CONNTRACK
(
am™da
);

148 
moduÀ_öô
(
öô
);

149 
moduÀ_exô
(
föi
);

	@ip_nat_core.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/ty≥s.h
>

13 
	~<löux/timî.h
>

14 
	~<löux/skbuff.h
>

15 
	~<löux/√tfûãr_ùv4.h
>

16 
	~<löux/vmÆloc.h
>

17 
	~<√t/checksum.h
>

18 
	~<√t/icmp.h
>

19 
	~<√t/ù.h
>

20 
	~<√t/t˝.h
>

21 
	~<löux/icmp.h
>

22 
	~<löux/udp.h
>

24 
	#ASSERT_READ_LOCK
(
x
Ë
	`MUST_BE_READ_LOCKED
(&
ù_«t_lock
)

	)

25 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`MUST_BE_WRITE_LOCKED
(&
ù_«t_lock
)

	)

27 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

28 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_c‹e.h
>

29 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿocﬁ.h
>

30 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

31 
	~<löux/√tfûãr_ùv4/ù_«t_¥Ÿocﬁ.h
>

32 
	~<löux/√tfûãr_ùv4/ù_«t_c‹e.h
>

33 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

34 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

35 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

38 
	#DEBUGP
 
¥ötk


	)

40 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

43 
DECLARE_RWLOCK
(
ù_«t_lock
);

44 
DECLARE_RWLOCK_EXTERN
(
ù_c⁄¡øck_lock
);

47 
	gù_«t_hèbÀ_size
;

49 
li°_hód
 *
	gbysour˚
;

50 
li°_hód
 *
	gbyù•rŸo
;

51 
LIST_HEAD
(
¥Ÿos
);

52 
LIST_HEAD
(
hñ≥rs
);

54 
ù_«t_¥Ÿocﬁ
 
unknown_«t_¥Ÿocﬁ
;

57 
ölöe
 
size_t


58 
	$hash_by_ù•rŸo
(
u_öt32_t
 
§c
, u_öt32_à
d°
, 
u_öt16_t
 
¥Ÿo
)

62  (
§c
 + 
d°
 + 
¥Ÿo
Ë% 
ù_«t_hèbÀ_size
;

63 
	}
}

65 
ölöe
 
size_t


66 
	$hash_by_§c
(c⁄° 
ù_c⁄¡øck_m™ù
 *
m™ù
, 
u_öt16_t
 
¥Ÿo
)

69  (
m™ù
->
ù
 + m™ù->
u
.
Æl
 + 
¥Ÿo
Ë% 
ù_«t_hèbÀ_size
;

70 
	}
}

73 
	$ù_«t_˛ónup_c⁄¡øck
(
ù_c⁄¡øck
 *
c⁄n
)

75 
ù_«t_öfo
 *
öfo
 = &
c⁄n
->
«t
.info;

76 
hs
, 
hp
;

78 i‡(!
öfo
->
öôülized
)

81 
	`IP_NF_ASSERT
(
öfo
->
bysour˚
.
c⁄¡øck
);

82 
	`IP_NF_ASSERT
(
öfo
->
byù•rŸo
.
c⁄¡øck
);

84 
hs
 = 
	`hash_by_§c
(&
c⁄n
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
,

85 
c⁄n
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]

86 .
tu∂e
.
d°
.
¥Ÿ⁄um
);

88 
hp
 = 
	`hash_by_ù•rŸo
(
c⁄n
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
,

89 
c⁄n
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
,

90 
c⁄n
->
tu∂ehash
[
IP_CT_DIR_REPLY
]

91 .
tu∂e
.
d°
.
¥Ÿ⁄um
);

93 
	`WRITE_LOCK
(&
ù_«t_lock
);

94 
	`LIST_DELETE
(&
bysour˚
[
hs
], &
öfo
->bysource);

95 
	`LIST_DELETE
(&
byù•rŸo
[
hp
], &
öfo
->byipsproto);

96 
	`WRITE_UNLOCK
(&
ù_«t_lock
);

97 
	}
}

102 
u_öt16_t


103 
	$ù_«t_chót_check
(
u_öt32_t
 
ﬁdvÆöv
, u_öt32_à
√wvÆ
, 
u_öt16_t
 
ﬁdcheck
)

105 
u_öt32_t
 
diffs
[] = { 
ﬁdvÆöv
, 
√wvÆ
 };

106  
	`csum_fﬁd
(
	`csum_∑πül
((*)
diffs
, (diffs),

107 
ﬁdcheck
^0xFFFF));

108 
	}
}

110 
ölöe
 
	$cmp_¥Ÿo
(c⁄° 
ù_«t_¥Ÿocﬁ
 *
i
, 
¥Ÿo
)

112  
i
->
¥Ÿ⁄um
 =
¥Ÿo
;

113 
	}
}

115 
ù_«t_¥Ÿocﬁ
 *

116 
	$föd_«t_¥Ÿo
(
u_öt16_t
 
¥Ÿ⁄um
)

118 
ù_«t_¥Ÿocﬁ
 *
i
;

120 
	`MUST_BE_READ_LOCKED
(&
ù_«t_lock
);

121 
i
 = 
	`LIST_FIND
(&
¥Ÿos
, 
cmp_¥Ÿo
, 
ù_«t_¥Ÿocﬁ
 *, 
¥Ÿ⁄um
);

122 i‡(!
i
)

123 
i
 = &
unknown_«t_¥Ÿocﬁ
;

124  
i
;

125 
	}
}

129 
	$ù_«t_u£d_tu∂e
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

130 c⁄° 
ù_c⁄¡øck
 *
ign‹ed_c⁄¡øck
)

137 
ù_c⁄¡øck_tu∂e
 
ª∂y
;

139 
	`övît_tu∂ïr
(&
ª∂y
, 
tu∂e
);

140  
	`ù_c⁄¡øck_tu∂e_èkí
(&
ª∂y
, 
ign‹ed_c⁄¡øck
);

141 
	}
}

145 
	$ö_ønge
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

146 c⁄° 
ù_c⁄¡øck_m™ù
 *
m™ù
,

147 c⁄° 
ù_«t_mu…i_ønge
 *
mr
)

149 
ù_«t_¥Ÿocﬁ
 *
¥Ÿo
 = 
	`föd_«t_¥Ÿo
(
tu∂e
->
d°
.
¥Ÿ⁄um
);

150 
i
;

151 
ù_c⁄¡øck_tu∂e
 
√wtu∂e
 = { *
m™ù
, 
tu∂e
->
d°
 };

153 
i
 = 0; i < 
mr
->
øngesize
; i++) {

156 i‡(
mr
->
ønge
[
i
].
Êags
 & 
IP_NAT_RANGE_MAP_IPS
) {

157 i‡(
	`¡ohl
(
√wtu∂e
.
§c
.
ù
Ë<Çtohl(
mr
->
ønge
[
i
].
mö_ù
)

158 || (
	`¡ohl
(
√wtu∂e
.
§c
.
ù
)

159 > 
	`¡ohl
(
mr
->
ønge
[
i
].
max_ù
)))

162 i‡(
√wtu∂e
.
§c
.
ù
 !
tu∂e
->src.ip)

166 i‡(!(
mr
->
ønge
[
i
].
Êags
 & 
IP_NAT_RANGE_PROTO_SPECIFIED
)

167 || 
¥Ÿo
->
	`ö_ønge
(&
√wtu∂e
, 
IP_NAT_MANIP_SRC
,

168 &
mr
->
ønge
[
i
].
mö
, &mr->ønge[i].
max
))

172 
	}
}

174 
ölöe
 

175 
	$§c_cmp
(c⁄° 
ù_«t_hash
 *
i
,

176 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

177 c⁄° 
ù_«t_mu…i_ønge
 *
mr
)

179  (
i
->
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
¥Ÿ⁄um


180 =
tu∂e
->
d°
.
¥Ÿ⁄um


181 && 
i
->
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù


182 =
tu∂e
->
§c
.
ù


183 && 
i
->
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
u
.
Æl


184 =
tu∂e
->
§c
.
u
.
Æl


185 && 
	`ö_ønge
(
tu∂e
,

186 &
i
->
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]

187 .
tu∂e
.
§c
,

188 
mr
));

189 
	}
}

192 
ù_c⁄¡øck_m™ù
 *

193 
	$föd_≠¥›rüã_§c
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

194 c⁄° 
ù_«t_mu…i_ønge
 *
mr
)

196 
h
 = 
	`hash_by_§c
(&
tu∂e
->
§c
,Åu∂e->
d°
.
¥Ÿ⁄um
);

197 
ù_«t_hash
 *
i
;

199 
	`MUST_BE_READ_LOCKED
(&
ù_«t_lock
);

200 
i
 = 
	`LIST_FIND
(&
bysour˚
[
h
], 
§c_cmp
, 
ù_«t_hash
 *, 
tu∂e
, 
mr
);

201 i‡(
i
)

202  &
i
->
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
;

204  
NULL
;

205 
	}
}

207 #ifde‡
CONFIG_IP_NF_NAT_LOCAL


211 
	$do_exåa_m™gÀ
(
u_öt32_t
 
v¨_ù
, u_öt32_à*
Ÿhî_ùp
)

213 
Êowi
 
Ê
 = { .
∆_u
 = { .
ù4_u
 = { .
daddr
 = 
v¨_ù
 } } };

214 
πabÀ
 *
π
;

217 i‡(
	`ù_rouã_ouçut_key
(&
π
, &
Ê
) != 0) {

218 
	`DEBUGP
("do_extra_mangle: Can't getÑouteÅo %u.%u.%u.%u\n",

219 
	`NIPQUAD
(
v¨_ù
));

223 *
Ÿhî_ùp
 = 
π
->
π_§c
;

224 
	`ù_π_put
(
π
);

226 
	}
}

230 
ölöe
 
	$Áke_cmp
(c⁄° 
ù_«t_hash
 *
i
,

231 
u_öt32_t
 
§c
, u_öt32_à
d°
, 
u_öt16_t
 
¥Ÿ⁄um
,

232 *
sc‹e
,

233 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

238 i‡(
i
->
c⁄¡øck
 != conntrack

239 && 
i
->
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
 =
d°


240 && 
i
->
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
 =
§c


241 && (
i
->
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
¥Ÿ⁄um


242 =
¥Ÿ⁄um
))

243 (*
sc‹e
)++;

245 
	}
}

247 
ölöe
 

248 
	$cou¡_m≠s
(
u_öt32_t
 
§c
, u_öt32_à
d°
, 
u_öt16_t
 
¥Ÿ⁄um
,

249 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

251 
sc‹e
 = 0;

252 
h
;

254 
	`MUST_BE_READ_LOCKED
(&
ù_«t_lock
);

255 
h
 = 
	`hash_by_ù•rŸo
(
§c
, 
d°
, 
¥Ÿ⁄um
);

256 
	`LIST_FIND
(&
byù•rŸo
[
h
], 
Áke_cmp
, 
ù_«t_hash
 *,

257 
§c
, 
d°
, 
¥Ÿ⁄um
, &
sc‹e
, 
c⁄¡øck
);

259  
sc‹e
;

260 
	}
}

272 
ù_«t_ønge
 *

273 
	$föd_be°_ùs_¥Ÿo
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

274 c⁄° 
ù_«t_mu…i_ønge
 *
mr
,

275 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
,

276 
hooknum
)

278 
i
;

280 c⁄° 
ù_«t_ønge
 *
ønge
;

281 
sc‹e
;

282 
ù_c⁄¡øck_tu∂e
 
tu∂e
;

283 } 
be°
 = { 
NULL
, 0xFFFFFFFF };

284 
u_öt32_t
 *
v¨_ùp
, *
Ÿhî_ùp
, 
ßved_ù
, 
‹ig_d°ù
;

285 
øndom√ss
;

287 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
) {

288 
v¨_ùp
 = &
tu∂e
->
§c
.
ù
;

289 
ßved_ù
 = 
tu∂e
->
d°
.
ù
;

290 
Ÿhî_ùp
 = &
tu∂e
->
d°
.
ù
;

292 
v¨_ùp
 = &
tu∂e
->
d°
.
ù
;

293 
ßved_ù
 = 
tu∂e
->
§c
.
ù
;

294 
Ÿhî_ùp
 = &
tu∂e
->
§c
.
ù
;

298 
‹ig_d°ù
 = 
tu∂e
->
d°
.
ù
;

300 
	`IP_NF_ASSERT
(
mr
->
øngesize
 >= 1);

301 
i
 = 0; i < 
mr
->
øngesize
; i++) {

303 
u_öt32_t
 
möù
, 
maxù
, 
j
;

306 i‡(
mr
->
ønge
[
i
].
Êags
 & 
IP_NAT_RANGE_FULL
) {

310 i‡(
mr
->
ønge
[
i
].
Êags
 & 
IP_NAT_RANGE_MAP_IPS
) {

311 
möù
 = 
	`¡ohl
(
mr
->
ønge
[
i
].
mö_ù
);

312 
maxù
 = 
	`¡ohl
(
mr
->
ønge
[
i
].
max_ù
);

314 
möù
 = 
maxù
 = 
	`¡ohl
(*
v¨_ùp
);

316 
øndom√ss
++;

317 
j
 = 0; j < 
maxù
 - 
möù
 + 1; j++) {

318 
sc‹e
;

320 *
v¨_ùp
 = 
	`ht⁄l
(
möù
 + (
øndom√ss
 + 
j
)

321 % (
maxù
 - 
möù
 + 1));

325 *
Ÿhî_ùp
 = 
ßved_ù
;

327 #ifde‡
CONFIG_IP_NF_NAT_LOCAL


328 i‡(
hooknum
 =
NF_IP_LOCAL_OUT


329 && *
v¨_ùp
 !
‹ig_d°ù


330 && !
	`do_exåa_m™gÀ
(*
v¨_ùp
, 
Ÿhî_ùp
)) {

331 
	`DEBUGP
("Range %u %u.%u.%u.%uÑt failed!\n",

332 
i
, 
	`NIPQUAD
(*
v¨_ùp
));

341 
sc‹e
 = 
	`cou¡_m≠s
(
tu∂e
->
§c
.
ù
,Åu∂e->
d°
.ip,

342 
tu∂e
->
d°
.
¥Ÿ⁄um
, 
c⁄¡øck
);

343 i‡(
sc‹e
 < 
be°
.score) {

346 i‡(
sc‹e
 == 0)

347  (
ù_«t_ønge
 *)

348 &
mr
->
ønge
[
i
];

350 
be°
.
sc‹e
 = score;

351 
be°
.
tu∂e
 = *tuple;

352 
be°
.
ønge
 = &
mr
->ønge[
i
];

356 *
tu∂e
 = 
be°
.tuple;

359  (
ù_«t_ønge
 *)
be°
.
ønge
;

360 
	}
}

364 
ù_«t_ønge
 *

365 
	$föd_be°_ùs_¥Ÿo_Á°
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

366 c⁄° 
ù_«t_mu…i_ønge
 *
mr
,

367 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
,

368 
hooknum
)

370 i‡(
mr
->
øngesize
 != 1

371 || (
mr
->
ønge
[0].
Êags
 & 
IP_NAT_RANGE_FULL
)

372 || ((
mr
->
ønge
[0].
Êags
 & 
IP_NAT_RANGE_MAP_IPS
)

373 && 
mr
->
ønge
[0].
mö_ù
 !mr->ønge[0].
max_ù
))

374  
	`föd_be°_ùs_¥Ÿo
(
tu∂e
, 
mr
, 
c⁄¡øck
, 
hooknum
);

376 i‡(
mr
->
ønge
[0].
Êags
 & 
IP_NAT_RANGE_MAP_IPS
) {

377 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
)

378 
tu∂e
->
§c
.
ù
 = 
mr
->
ønge
[0].
mö_ù
;

382 #ifde‡
CONFIG_IP_NF_NAT_LOCAL


383 i‡(
tu∂e
->
d°
.
ù
 !
mr
->
ønge
[0].
mö_ù


384 && 
hooknum
 =
NF_IP_LOCAL_OUT


385 && !
	`do_exåa_m™gÀ
(
mr
->
ønge
[0].
mö_ù
,

386 &
tu∂e
->
§c
.
ù
))

387  
NULL
;

389 
tu∂e
->
d°
.
ù
 = 
mr
->
ønge
[0].
mö_ù
;

394  (
ù_«t_ønge
 *)&
mr
->
ønge
[0];

395 
	}
}

398 
	$gë_unique_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

399 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig_tu∂e
,

400 c⁄° 
ù_«t_mu…i_ønge
 *
mº
,

401 
ù_c⁄¡øck
 *
c⁄¡øck
,

402 
hooknum
)

404 
ù_«t_¥Ÿocﬁ
 *
¥Ÿo


405 
	`föd_«t_¥Ÿo
(
‹ig_tu∂e
->
d°
.
¥Ÿ⁄um
);

406 
ù_«t_ønge
 *
Ωå
;

407 
i
;

408 
ªt
;

412 
ù_«t_mu…i_ønge
 *
mr
 = (*)
mº
;

421 i‡(
hooknum
 =
NF_IP_POST_ROUTING
) {

422 
ù_c⁄¡øck_m™ù
 *
m™ù
;

424 
m™ù
 = 
	`föd_≠¥›rüã_§c
(
‹ig_tu∂e
, 
mr
);

425 i‡(
m™ù
) {

427 *
tu∂e
 = ((
ù_c⁄¡øck_tu∂e
)

428 { *
m™ù
, 
‹ig_tu∂e
->
d°
 });

429 
	`DEBUGP
("get_unique_tuple: Found current src map\n");

430 i‡(!
	`ù_«t_u£d_tu∂e
(
tu∂e
, 
c⁄¡øck
))

438 *
tu∂e
 = *
‹ig_tu∂e
;

439 (
Ωå
 = 
	`föd_be°_ùs_¥Ÿo_Á°
(
tu∂e
, 
mr
, 
c⁄¡øck
, 
hooknum
))

440 !
NULL
) {

441 
	`DEBUGP
("Found be° f‹ "); 
	`DUMP_TUPLE
(
tu∂e
);

447 i‡((!(
Ωå
->
Êags
 & 
IP_NAT_RANGE_PROTO_SPECIFIED
)

448 || 
¥Ÿo
->
	`ö_ønge
(
tu∂e
, 
	`HOOK2MANIP
(
hooknum
),

449 &
Ωå
->
mö
, &Ωå->
max
))

450 && !
	`ù_«t_u£d_tu∂e
(
tu∂e
, 
c⁄¡øck
)) {

451 
ªt
 = 1;

452 
˛ór_fuŒs
;

454 i‡(
¥Ÿo
->
	`unique_tu∂e
(
tu∂e
, 
Ωå
,

455 
	`HOOK2MANIP
(
hooknum
),

456 
c⁄¡øck
)) {

458 
	`IP_NF_ASSERT
(!
	`ù_«t_u£d_tu∂e
(
tu∂e
,

459 
c⁄¡øck
));

460 
ªt
 = 1;

461 
˛ór_fuŒs
;

462 } i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_DST
) {

466 
ù_«t_ønge
 
r


467 { 
IP_NAT_RANGE_MAP_IPS
,

468 
tu∂e
->
§c
.
ù
,Åuple->src.ip,

470 
	`DEBUGP
("Trying implicit mapping\n");

471 i‡(
¥Ÿo
->
	`unique_tu∂e
(
tu∂e
, &
r
,

472 
IP_NAT_MANIP_SRC
,

473 
c⁄¡øck
)) {

475 
	`IP_NF_ASSERT
(!
ù_«t_u£d_tu∂e


476 (
tu∂e
, 
c⁄¡øck
));

477 
ªt
 = 1;

478 
˛ór_fuŒs
;

481 
	`DEBUGP
("Protocol can't get uniqueÅuple %u.\n",

482 
hooknum
);

486 
Ωå
->
Êags
 |
IP_NAT_RANGE_FULL
;

487 *
tu∂e
 = *
‹ig_tu∂e
;

490 
ªt
 = 0;

492 
˛ór_fuŒs
:

494 
	`IP_NF_ASSERT
(
mr
->
øngesize
 >= 1);

495 
i
 = 0; i < 
mr
->
øngesize
; i++)

496 
mr
->
ønge
[
i
].
Êags
 &~
IP_NAT_RANGE_FULL
;

498  
ªt
;

499 
	}
}

501 
ölöe
 

502 
	$hñ≥r_cmp
(c⁄° 
ù_«t_hñ≥r
 *
hñ≥r
,

503 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

505  
	`ù_˘_tu∂e_mask_cmp
(
tu∂e
, &
hñ≥r
->tu∂e, &hñ≥r->
mask
);

506 
	}
}

509 
	g›posôe_hook
[
NF_IP_NUMHOOKS
]

510 { [
NF_IP_PRE_ROUTING
] = 
NF_IP_POST_ROUTING
,

511 [
NF_IP_POST_ROUTING
] = 
NF_IP_PRE_ROUTING
,

512 #ifde‡
CONFIG_IP_NF_NAT_LOCAL


513 [
NF_IP_LOCAL_OUT
] = 
NF_IP_LOCAL_IN
,

514 [
NF_IP_LOCAL_IN
] = 
NF_IP_LOCAL_OUT
,

519 
	$ù_«t_£tup_öfo
(
ù_c⁄¡øck
 *
c⁄¡øck
,

520 c⁄° 
ù_«t_mu…i_ønge
 *
mr
,

521 
hooknum
)

523 
ù_c⁄¡øck_tu∂e
 
√w_tu∂e
, 
öv_tu∂e
, 
ª∂y
;

524 
ù_c⁄¡øck_tu∂e
 
‹ig_ç
;

525 
ù_«t_öfo
 *
öfo
 = &
c⁄¡øck
->
«t
.info;

526 
ö_hashes
 = 
öfo
->
öôülized
;

528 
	`MUST_BE_WRITE_LOCKED
(&
ù_«t_lock
);

529 
	`IP_NF_ASSERT
(
hooknum
 =
NF_IP_PRE_ROUTING


530 || 
hooknum
 =
NF_IP_POST_ROUTING


531 || 
hooknum
 =
NF_IP_LOCAL_IN


532 || 
hooknum
 =
NF_IP_LOCAL_OUT
);

533 
	`IP_NF_ASSERT
(
öfo
->
num_m™ùs
 < 
IP_NAT_MAX_MANIPS
);

534 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))));

541 
	`övît_tu∂ïr
(&
‹ig_ç
,

542 &
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

546 
i
;

548 
	`DEBUGP
("Hook %u (%s), ", 
hooknum
,

549 
	`HOOK2MANIP
(
hooknum
)==
IP_NAT_MANIP_SRC
 ? "SRC" : "DST");

550 
	`DUMP_TUPLE
(&
‹ig_ç
);

551 
	`DEBUGP
("R™gê%p: ", 
mr
);

552 
i
 = 0; i < 
mr
->
øngesize
; i++) {

553 
	`DEBUGP
("%u:%s%s%s %u.%u.%u.%u - %u.%u.%u.%u %u - %u\n",

554 
i
,

555 (
mr
->
ønge
[
i
].
Êags
 & 
IP_NAT_RANGE_MAP_IPS
)

557 (
mr
->
ønge
[
i
].
Êags


558 & 
IP_NAT_RANGE_PROTO_SPECIFIED
)

560 (
mr
->
ønge
[
i
].
Êags
 & 
IP_NAT_RANGE_FULL
)

562 
	`NIPQUAD
(
mr
->
ønge
[
i
].
mö_ù
),

563 
	`NIPQUAD
(
mr
->
ønge
[
i
].
max_ù
),

564 
mr
->
ønge
[
i
].
mö
.
Æl
,

565 
mr
->
ønge
[
i
].
max
.
Æl
);

571 i‡(!
	`gë_unique_tu∂e
(&
√w_tu∂e
, &
‹ig_ç
, 
mr
, 
c⁄¡øck
,

572 
hooknum
)) {

573 
	`DEBUGP
("ip_nat_setup_info: Can't get unique for %p.\n",

574 
c⁄¡øck
);

575  
NF_DROP
;

579 
	`DEBUGP
("Hook %u (%sË%p\n", 
hooknum
,

580 
	`HOOK2MANIP
(
hooknum
)==
IP_NAT_MANIP_SRC
 ? "SRC" : "DST",

581 
c⁄¡øck
);

582 
	`DEBUGP
("Original: ");

583 
	`DUMP_TUPLE
(&
‹ig_ç
);

584 
	`DEBUGP
("New: ");

585 
	`DUMP_TUPLE
(&
√w_tu∂e
);

597 
	`övît_tu∂ïr
(&
ª∂y
, &
√w_tu∂e
);

601 } !
	`ù_c⁄¡øck_Æãr_ª∂y
(
c⁄¡øck
, &
ª∂y
));

606 
	`övît_tu∂ïr
(&
öv_tu∂e
, &
‹ig_ç
);

609 i‡(!
	`ù_˘_tu∂e_§c_equÆ
(&
√w_tu∂e
, &
‹ig_ç
)) {

611 
öfo
->
m™ùs
[öfo->
num_m™ùs
++] =

612 ((
ù_«t_öfo_m™ù
)

613 { 
IP_CT_DIR_ORIGINAL
, 
hooknum
,

614 
IP_NAT_MANIP_SRC
, 
√w_tu∂e
.
§c
 });

616 
	`IP_NF_ASSERT
(
öfo
->
num_m™ùs
 < 
IP_NAT_MAX_MANIPS
);

619 
öfo
->
m™ùs
[öfo->
num_m™ùs
++] =

620 ((
ù_«t_öfo_m™ù
)

621 { 
IP_CT_DIR_REPLY
, 
›posôe_hook
[
hooknum
],

622 
IP_NAT_MANIP_DST
, 
‹ig_ç
.
§c
 });

623 
	`IP_NF_ASSERT
(
öfo
->
num_m™ùs
 <
IP_NAT_MAX_MANIPS
);

627 i‡(!
	`ù_˘_tu∂e_d°_equÆ
(&
√w_tu∂e
, &
‹ig_ç
)) {

629 
öfo
->
m™ùs
[öfo->
num_m™ùs
++] =

630 ((
ù_«t_öfo_m™ù
)

631 { 
IP_CT_DIR_ORIGINAL
, 
hooknum
,

632 
IP_NAT_MANIP_DST
, 
ª∂y
.
§c
 });

634 
	`IP_NF_ASSERT
(
öfo
->
num_m™ùs
 < 
IP_NAT_MAX_MANIPS
);

637 
öfo
->
m™ùs
[öfo->
num_m™ùs
++] =

638 ((
ù_«t_öfo_m™ù
)

639 { 
IP_CT_DIR_REPLY
, 
›posôe_hook
[
hooknum
],

640 
IP_NAT_MANIP_SRC
, 
öv_tu∂e
.
§c
 });

641 
	`IP_NF_ASSERT
(
öfo
->
num_m™ùs
 <
IP_NAT_MAX_MANIPS
);

645 i‡(!
c⁄¡øck
->
ma°î
)

646 
öfo
->
hñ≥r
 = 
	`LIST_FIND
(&
hñ≥rs
, 
hñ≥r_cmp
, 
ù_«t_hñ≥r
 *,

647 &
ª∂y
);

650 
öfo
->
öôülized
 |(1 << 
	`HOOK2MANIP
(
hooknum
));

652 i‡(
ö_hashes
) {

653 
	`IP_NF_ASSERT
(
öfo
->
bysour˚
.
c⁄¡øck
);

654 
	`ª∂a˚_ö_hashes
(
c⁄¡øck
, 
öfo
);

656 
	`∂a˚_ö_hashes
(
c⁄¡øck
, 
öfo
);

659  
NF_ACCEPT
;

660 
	}
}

662 
	$ª∂a˚_ö_hashes
(
ù_c⁄¡øck
 *
c⁄¡øck
,

663 
ù_«t_öfo
 *
öfo
)

666 
§chash


667 
	`hash_by_§c
(&
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]

668 .
tu∂e
.
§c
,

669 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]

670 .
tu∂e
.
d°
.
¥Ÿ⁄um
);

673 
ù•rŸohash


674 
	`hash_by_ù•rŸo
(
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
]

675 .
tu∂e
.
d°
.
ù
,

676 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
]

677 .
tu∂e
.
§c
.
ù
,

678 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
]

679 .
tu∂e
.
d°
.
¥Ÿ⁄um
);

681 
	`IP_NF_ASSERT
(
öfo
->
bysour˚
.
c⁄¡øck
 == conntrack);

682 
	`MUST_BE_WRITE_LOCKED
(&
ù_«t_lock
);

684 
	`li°_dñ
(&
öfo
->
bysour˚
.
li°
);

685 
	`li°_dñ
(&
öfo
->
byù•rŸo
.
li°
);

687 
	`li°_¥ïíd
(&
bysour˚
[
§chash
], &
öfo
->bysource);

688 
	`li°_¥ïíd
(&
byù•rŸo
[
ù•rŸohash
], &
öfo
->byipsproto);

689 
	}
}

691 
	$∂a˚_ö_hashes
(
ù_c⁄¡øck
 *
c⁄¡øck
,

692 
ù_«t_öfo
 *
öfo
)

694 
§chash


695 
	`hash_by_§c
(&
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]

696 .
tu∂e
.
§c
,

697 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
]

698 .
tu∂e
.
d°
.
¥Ÿ⁄um
);

701 
ù•rŸohash


702 
	`hash_by_ù•rŸo
(
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
]

703 .
tu∂e
.
d°
.
ù
,

704 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
]

705 .
tu∂e
.
§c
.
ù
,

706 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
]

707 .
tu∂e
.
d°
.
¥Ÿ⁄um
);

709 
	`IP_NF_ASSERT
(!
öfo
->
bysour˚
.
c⁄¡øck
);

711 
	`MUST_BE_WRITE_LOCKED
(&
ù_«t_lock
);

712 
öfo
->
byù•rŸo
.
c⁄¡øck
 = conntrack;

713 
öfo
->
bysour˚
.
c⁄¡øck
 = conntrack;

715 
	`li°_¥ïíd
(&
bysour˚
[
§chash
], &
öfo
->bysource);

716 
	`li°_¥ïíd
(&
byù•rŸo
[
ù•rŸohash
], &
öfo
->byipsproto);

717 
	}
}

721 
	$m™ù_pkt
(
u_öt16_t
 
¥Ÿo
,

722 
sk_buff
 **
pskb
,

723 
ùhdroff
,

724 c⁄° 
ù_c⁄¡øck_m™ù
 *
m™ù
,

725 
ù_«t_m™ù_ty≥
 
m™ùty≥
)

727 
ùhdr
 *
ùh
;

729 (*
pskb
)->
nfˇche
 |
NFC_ALTERED
;

730 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, 
ùhdroff
+(
ùh
)))

733 
ùh
 = (*)(*
pskb
)->
d©a
 + 
ùhdroff
;

736 i‡(!
	`föd_«t_¥Ÿo
(
¥Ÿo
)->
	`m™ù_pkt
(
pskb
,

737 
ùhdroff
 + 
ùh
->
ihl
*4,

738 
m™ù
, 
m™ùty≥
))

741 
ùh
 = (*)(*
pskb
)->
d©a
 + 
ùhdroff
;

743 i‡(
m™ùty≥
 =
IP_NAT_MANIP_SRC
) {

744 
ùh
->
check
 = 
	`ù_«t_chót_check
(~ùh->
ßddr
, 
m™ù
->
ù
,

745 
ùh
->
check
);

746 
ùh
->
ßddr
 = 
m™ù
->
ù
;

748 
ùh
->
check
 = 
	`ù_«t_chót_check
(~ùh->
daddr
, 
m™ù
->
ù
,

749 
ùh
->
check
);

750 
ùh
->
daddr
 = 
m™ù
->
ù
;

753 
	}
}

755 
ölöe
 
	$exp_f‹_∑ckë
(
ù_c⁄¡øck_ex≥˘
 *
exp
,

756 
sk_buff
 *
skb
)

758 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿo
;

759 
ªt
 = 1;

761 
	`MUST_BE_READ_LOCKED
(&
ù_c⁄¡øck_lock
);

762 
¥Ÿo
 = 
	`__ù_˘_föd_¥Ÿo
(
skb
->
nh
.
ùh
->
¥Ÿocﬁ
);

763 i‡(
¥Ÿo
->
exp_m©ches_pkt
)

764 
ªt
 = 
¥Ÿo
->
	`exp_m©ches_pkt
(
exp
, 
skb
);

766  
ªt
;

767 
	}
}

771 
	$do_bödögs
(
ù_c⁄¡øck
 *
˘
,

772 
ù_c⁄¡øck_öfo
 
˘öfo
,

773 
ù_«t_öfo
 *
öfo
,

774 
hooknum
,

775 
sk_buff
 **
pskb
)

777 
i
;

778 
ù_«t_hñ≥r
 *
hñ≥r
;

779 
ù_c⁄¡øck_dú
 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

780 
¥Ÿo
 = (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
;

785 
	`READ_LOCK
(&
ù_«t_lock
);

786 
i
 = 0; i < 
öfo
->
num_m™ùs
; i++) {

787 i‡(
öfo
->
m™ùs
[
i
].
dúe˘i⁄
 =
dú


788 && 
öfo
->
m™ùs
[
i
].
hooknum
 == hooknum) {

789 
	`DEBUGP
("Mangling %p: %sÅo %u.%u.%u.%u %u\n",

790 *
pskb
,

791 
öfo
->
m™ùs
[
i
].
m™ùty≥
 =
IP_NAT_MANIP_SRC


793 
	`NIPQUAD
(
öfo
->
m™ùs
[
i
].
m™ù
.
ù
),

794 
	`ht⁄s
(
öfo
->
m™ùs
[
i
].
m™ù
.
u
.
Æl
));

795 i‡(!
	`m™ù_pkt
(
¥Ÿo
, 
pskb
, 0,

796 &
öfo
->
m™ùs
[
i
].
m™ù
,

797 
öfo
->
m™ùs
[
i
].
m™ùty≥
)) {

798 
	`READ_UNLOCK
(&
ù_«t_lock
);

799  
NF_DROP
;

803 
hñ≥r
 = 
öfo
->helper;

804 
	`READ_UNLOCK
(&
ù_«t_lock
);

806 i‡(
hñ≥r
) {

807 
ù_c⁄¡øck_ex≥˘
 *
exp
 = 
NULL
;

808 
li°_hód
 *
cur_ôem
;

809 
ªt
 = 
NF_ACCEPT
;

810 
hñ≥r_ˇŒed
 = 0;

812 
	`DEBUGP
("do_bödögs: hñ≥∏exi°ög f‹ (%p)\n", 
˘
);

815 
	`IP_NF_ASSERT
(!((*
pskb
)->
nh
.
ùh
->
‰ag_off


816 & 
	`ht⁄s
(
IP_MF
|
IP_OFFSET
)));

819 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

820 
	`li°_f‹_óch_¥ev
(
cur_ôem
, &
˘
->
siblög_li°
) {

821 
exp
 = 
	`li°_íåy
(
cur_ôem
, 
ù_c⁄¡øck_ex≥˘
,

822 
ex≥˘ed_li°
);

825 i‡(
exp
->
siblög
)

828 i‡(
	`exp_f‹_∑ckë
(
exp
, *
pskb
)) {

831 
	`DEBUGP
("ˇŒögÇ© hñ≥∏”xp=%pËf‹Öackë\n", 
exp
);

832 
ªt
 = 
hñ≥r
->
	`hñp
(
˘
, 
exp
, 
öfo
, 
˘öfo
,

833 
hooknum
, 
pskb
);

834 i‡(
ªt
 !
NF_ACCEPT
) {

835 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

836  
ªt
;

838 
hñ≥r_ˇŒed
 = 1;

843 i‡(!
hñ≥r_ˇŒed
 && 
hñ≥r
->
Êags
 & 
IP_NAT_HELPER_F_ALWAYS
) {

844 
	`DEBUGP
("callingÇat helper forÖacket withoutÉxpectation\n");

845 
ªt
 = 
hñ≥r
->
	`hñp
(
˘
, 
NULL
, 
öfo
, 
˘öfo
,

846 
hooknum
, 
pskb
);

847 i‡(
ªt
 !
NF_ACCEPT
) {

848 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

849  
ªt
;

852 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

856 i‡(
¥Ÿo
 =
IPPROTO_TCP


857 && (
hooknum
 =
NF_IP_POST_ROUTING


858 || 
hooknum
 =
NF_IP_LOCAL_IN
)) {

859 
	`DEBUGP
("ip_nat_core:ádjusting sequenceÇumber\n");

862 i‡(!
	`ù_«t_£q_adju°
(
pskb
, 
˘
, 
˘öfo
))

863 
ªt
 = 
NF_DROP
;

866  
ªt
;

869  
NF_ACCEPT
;

872 
	}
}

875 
	$icmp_ª∂y_å™¶©i⁄
(
sk_buff
 **
pskb
,

876 
ù_c⁄¡øck
 *
c⁄¡øck
,

877 
hooknum
,

878 
dú
)

881 
icmphdr
 
icmp
;

882 
ùhdr
 
ù
;

883 } *
öside
;

884 
i
;

885 
ù_«t_öfo
 *
öfo
 = &
c⁄¡øck
->
«t
.info;

886 
hdæí
;

888 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
,(*pskb)->
nh
.
ùh
->
ihl
*4+(*
öside
)))

890 
öside
 = (*)(*
pskb
)->
d©a
 + (*pskb)->
nh
.
ùh
->
ihl
*4;

894 i‡((*
pskb
)->
ù_summed
 !
CHECKSUM_UNNECESSARY
) {

895 
hdæí
 = (*
pskb
)->
nh
.
ùh
->
ihl
 * 4;

896 i‡((
u16
)
	`csum_fﬁd
(
	`skb_checksum
(*
pskb
, 
hdæí
,

897 (*
pskb
)->
Àn
 - 
hdæí
, 0)))

902 
	`IP_NF_ASSERT
((*
pskb
)->
nf˘


903 - ((
ù_c⁄¡øck
 *)(*
pskb
)->
nf˘
->
ma°î
)->
öfos


904 =
IP_CT_RELATED


905 || (*
pskb
)->
nf˘


906 - ((
ù_c⁄¡øck
 *)(*
pskb
)->
nf˘
->
ma°î
)->
öfos


907 =
IP_CT_RELATED
+
IP_CT_IS_REPLY
);

912 i‡(
öside
->
icmp
.
ty≥
 =
ICMP_REDIRECT
) {

914 i‡(
öfo
->
öôülized


915 !((1 << 
IP_NAT_MANIP_SRC
Ë| (1 << 
IP_NAT_MANIP_DST
))

916 || 
öfo
->
num_m™ùs
 != 0)

920 
	`DEBUGP
("icmp_reply_translation:ÅranslatingÉrror %p hook %u dir %s\n",

921 *
pskb
, 
hooknum
, 
dú
 =
IP_CT_DIR_ORIGINAL
 ? "ORIG" : "REPLY");

933 
	`READ_LOCK
(&
ù_«t_lock
);

934 
i
 = 0; i < 
öfo
->
num_m™ùs
; i++) {

935 
	`DEBUGP
("icmp_reply: manip %u dir %s hook %u\n",

936 
i
, 
öfo
->
m™ùs
[i].
dúe˘i⁄
 =
IP_CT_DIR_ORIGINAL
 ?

937 "ORIG" : "REPLY", 
öfo
->
m™ùs
[
i
].
hooknum
);

939 i‡(
öfo
->
m™ùs
[
i
].
dúe˘i⁄
 !
dú
)

946 i‡(
öfo
->
m™ùs
[
i
].
hooknum
 == hooknum) {

947 
	`DEBUGP
("icmp_reply: inner %s -> %u.%u.%u.%u %u\n",

948 
öfo
->
m™ùs
[
i
].
m™ùty≥
 =
IP_NAT_MANIP_SRC


950 
	`NIPQUAD
(
öfo
->
m™ùs
[
i
].
m™ù
.
ù
),

951 
	`¡ohs
(
öfo
->
m™ùs
[
i
].
m™ù
.
u
.
udp
.
p‹t
));

952 i‡(!
	`m™ù_pkt
(
öside
->
ù
.
¥Ÿocﬁ
, 
pskb
,

953 (*
pskb
)->
nh
.
ùh
->
ihl
*4

954 + (
öside
->
icmp
),

955 &
öfo
->
m™ùs
[
i
].
m™ù
,

956 !
öfo
->
m™ùs
[
i
].
m™ùty≥
))

957 
u∆ock_Áû
;

964 
	`DEBUGP
("icmp_reply: outer %s -> %u.%u.%u.%u\n",

965 
öfo
->
m™ùs
[
i
].
m™ùty≥
 =
IP_NAT_MANIP_SRC


967 
	`NIPQUAD
(
öfo
->
m™ùs
[
i
].
m™ù
.
ù
));

968 i‡(!
	`m™ù_pkt
(0, 
pskb
, 0,

969 &
öfo
->
m™ùs
[
i
].
m™ù
,

970 
öfo
->
m™ùs
[
i
].
m™ùty≥
))

971 
u∆ock_Áû
;

974 
	`READ_UNLOCK
(&
ù_«t_lock
);

976 
hdæí
 = (*
pskb
)->
nh
.
ùh
->
ihl
 * 4;

978 
öside
 = (*)(*
pskb
)->
d©a
 + (*pskb)->
nh
.
ùh
->
ihl
*4;

980 
öside
->
icmp
.
checksum
 = 0;

981 
öside
->
icmp
.
checksum
 = 
	`csum_fﬁd
(
	`skb_checksum
(*
pskb
, 
hdæí
,

982 (*
pskb
)->
Àn
 - 
hdæí
,

986 
u∆ock_Áû
:

987 
	`READ_UNLOCK
(&
ù_«t_lock
);

989 
	}
}

991 
__öô
 
	$ù_«t_öô
()

993 
size_t
 
i
;

996 
ù_«t_hèbÀ_size
 = 
ù_c⁄¡øck_hèbÀ_size
;

999 
bysour˚
 = 
	`vmÆloc
((
li°_hód
Ë* 
ù_«t_hèbÀ_size
*2);

1000 i‡(!
bysour˚
) {

1001  -
ENOMEM
;

1003 
byù•rŸo
 = 
bysour˚
 + 
ù_«t_hèbÀ_size
;

1006 
	`WRITE_LOCK
(&
ù_«t_lock
);

1007 
	`li°_≠≥nd
(&
¥Ÿos
, &
ù_«t_¥Ÿocﬁ_t˝
);

1008 
	`li°_≠≥nd
(&
¥Ÿos
, &
ù_«t_¥Ÿocﬁ_udp
);

1009 
	`li°_≠≥nd
(&
¥Ÿos
, &
ù_«t_¥Ÿocﬁ_icmp
);

1010 
	`WRITE_UNLOCK
(&
ù_«t_lock
);

1012 
i
 = 0; i < 
ù_«t_hèbÀ_size
; i++) {

1013 
	`INIT_LIST_HEAD
(&
bysour˚
[
i
]);

1014 
	`INIT_LIST_HEAD
(&
byù•rŸo
[
i
]);

1018 
	`IP_NF_ASSERT
(
ù_c⁄¡øck_de°royed
 =
NULL
);

1019 
ù_c⁄¡øck_de°royed
 = &
ù_«t_˛ónup_c⁄¡øck
;

1022 
ù_c⁄¡øck_u¡øcked
.
«t
.
öfo
.
öôülized
 |=

1023 (1 << 
IP_NAT_MANIP_SRC
Ë| (1 << 
IP_NAT_MANIP_DST
);

1026 
	}
}

1029 
	$˛ón_«t
(c⁄° 
ù_c⁄¡øck
 *
i
, *
d©a
)

1031 
	`mem£t
((*)&
i
->
«t
, 0, (i->nat));

1033 
	}
}

1036 
	$ù_«t_˛ónup
()

1038 
	`ù_˘_£À˘ive_˛ónup
(&
˛ón_«t
, 
NULL
);

1039 
ù_c⁄¡øck_de°royed
 = 
NULL
;

1040 
	`v‰ì
(
bysour˚
);

1041 
	}
}

	@ip_nat_ftp.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/√tfûãr_ùv4.h
>

13 
	~<löux/ù.h
>

14 
	~<löux/t˝.h
>

15 
	~<√t/t˝.h
>

16 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

17 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

18 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

19 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_·p.h
>

20 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

22 
MODULE_LICENSE
("GPL");

23 
MODULE_AUTHOR
("Rusty Russell <rusty@rustcorp.com.au>");

24 
MODULE_DESCRIPTION
("ftp NAT helper");

27 
	#DEBUGP
 
¥ötk


	)

29 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

32 
	#MAX_PORTS
 8

	)

33 
	gp‹ts
[
MAX_PORTS
];

34 
	gp‹ts_c
;

36 
MODULE_PARM
(
p‹ts
, "1-" 
__MODULE_STRING
(
MAX_PORTS
) "i");

38 
DECLARE_LOCK_EXTERN
(
ù_·p_lock
);

43 
	$·p_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

44 
hooknum
,

45 
ù_c⁄¡øck
 *
˘
,

46 
ù_«t_öfo
 *
öfo
)

48 
ù_«t_mu…i_ønge
 
mr
;

49 
u_öt32_t
 
√wd°ù
, 
√w§cù
, 
√wù
;

50 
ù_˘_·p_ex≥˘
 *
exp_·p_öfo
;

52 
ù_c⁄¡øck
 *
ma°î
 = 
	`ma°î_˘
(
˘
);

54 
	`IP_NF_ASSERT
(
öfo
);

55 
	`IP_NF_ASSERT
(
ma°î
);

57 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1<<
	`HOOK2MANIP
(
hooknum
))));

59 
	`DEBUGP
("nat_expected: We haveá connection!\n");

60 
exp_·p_öfo
 = &
˘
->
ma°î
->
hñp
.exp_ftp_info;

62 
	`LOCK_BH
(&
ù_·p_lock
);

64 i‡(
exp_·p_öfo
->
·±y≥
 =
IP_CT_FTP_PORT


65 || 
exp_·p_öfo
->
·±y≥
 =
IP_CT_FTP_EPRT
) {

67 
√wd°ù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
;

68 
√w§cù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
;

69 
	`DEBUGP
("nat_expected: PORT cmd. %u.%u.%u.%u->%u.%u.%u.%u\n",

70 
	`NIPQUAD
(
√w§cù
), NIPQUAD(
√wd°ù
));

73 
√wd°ù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
;

74 
√w§cù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
;

75 
	`DEBUGP
("nat_expected: PASV cmd. %u.%u.%u.%u->%u.%u.%u.%u\n",

76 
	`NIPQUAD
(
√w§cù
), NIPQUAD(
√wd°ù
));

78 
	`UNLOCK_BH
(&
ù_·p_lock
);

80 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
)

81 
√wù
 = 
√w§cù
;

83 
√wù
 = 
√wd°ù
;

85 
	`DEBUGP
("«t_ex≥˘ed: IPÅÿ%u.%u.%u.%u\n", 
	`NIPQUAD
(
√wù
));

87 
mr
.
øngesize
 = 1;

89 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
;

90 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
√wù
;

94 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_DST
) {

95 
mr
.
ønge
[0].
Êags
 |
IP_NAT_RANGE_PROTO_SPECIFIED
;

96 
mr
.
ønge
[0].
mö
 = mr.ønge[0].
max


97 ((
ù_c⁄¡øck_m™ù_¥Ÿo
)

98 { .
t˝
 = { 
	`ht⁄s
(
exp_·p_öfo
->
p‹t
) } });

100  
	`ù_«t_£tup_öfo
(
˘
, &
mr
, 
hooknum
);

101 
	}
}

104 
	$m™gÀ_rfc959_∑ckë
(
sk_buff
 **
pskb
,

105 
u_öt32_t
 
√wù
,

106 
u_öt16_t
 
p‹t
,

107 
m©choff
,

108 
m©chÀn
,

109 
ù_c⁄¡øck
 *
˘
,

110 
ù_c⁄¡øck_öfo
 
˘öfo
)

112 
buf„r
[("nnn,nnn,nnn,nnn,nnn,nnn")];

114 
	`MUST_BE_LOCKED
(&
ù_·p_lock
);

116 
	`•rötf
(
buf„r
, "%u,%u,%u,%u,%u,%u",

117 
	`NIPQUAD
(
√wù
), 
p‹t
>>8,Öort&0xFF);

119 
	`DEBUGP
("calling ip_nat_mangle_tcp_packet\n");

121  
	`ù_«t_m™gÀ_t˝_∑ckë
(
pskb
, 
˘
, 
˘öfo
, 
m©choff
,

122 
m©chÀn
, 
buf„r
, 
	`°æí
(buffer));

123 
	}
}

127 
	$m™gÀ_ïπ_∑ckë
(
sk_buff
 **
pskb
,

128 
u_öt32_t
 
√wù
,

129 
u_öt16_t
 
p‹t
,

130 
m©choff
,

131 
m©chÀn
,

132 
ù_c⁄¡øck
 *
˘
,

133 
ù_c⁄¡øck_öfo
 
˘öfo
)

135 
buf„r
[("|1|255.255.255.255|65535|")];

137 
	`MUST_BE_LOCKED
(&
ù_·p_lock
);

139 
	`•rötf
(
buf„r
, "|1|%u.%u.%u.%u|%u|", 
	`NIPQUAD
(
√wù
), 
p‹t
);

141 
	`DEBUGP
("calling ip_nat_mangle_tcp_packet\n");

143  
	`ù_«t_m™gÀ_t˝_∑ckë
(
pskb
, 
˘
, 
˘öfo
, 
m©choff
,

144 
m©chÀn
, 
buf„r
, 
	`°æí
(buffer));

145 
	}
}

149 
	$m™gÀ_ïsv_∑ckë
(
sk_buff
 **
pskb
,

150 
u_öt32_t
 
√wù
,

151 
u_öt16_t
 
p‹t
,

152 
m©choff
,

153 
m©chÀn
,

154 
ù_c⁄¡øck
 *
˘
,

155 
ù_c⁄¡øck_öfo
 
˘öfo
)

157 
buf„r
[("|||65535|")];

159 
	`MUST_BE_LOCKED
(&
ù_·p_lock
);

161 
	`•rötf
(
buf„r
, "|||%u|", 
p‹t
);

163 
	`DEBUGP
("calling ip_nat_mangle_tcp_packet\n");

165  
	`ù_«t_m™gÀ_t˝_∑ckë
(
pskb
, 
˘
, 
˘öfo
, 
m©choff
,

166 
m©chÀn
, 
buf„r
, 
	`°æí
(buffer));

167 
	}
}

169 (*
m™gÀ
[])(
sk_buff
 **, 
u_öt32_t
, 
u_öt16_t
,

172 
ù_c⁄¡øck
 *,

173 
ù_c⁄¡øck_öfo
)

174 { [
IP_CT_FTP_PORT
] = 
m™gÀ_rfc959_∑ckë
,

175 [
IP_CT_FTP_PASV
] = 
m™gÀ_rfc959_∑ckë
,

176 [
IP_CT_FTP_EPRT
] = 
m™gÀ_ïπ_∑ckë
,

177 [
IP_CT_FTP_EPSV
] = 
m™gÀ_ïsv_∑ckë


178 
	}
};

180 
	$·p_d©a_fixup
(c⁄° 
ù_˘_·p_ex≥˘
 *
˘_·p_öfo
,

181 
ù_c⁄¡øck
 *
˘
,

182 
sk_buff
 **
pskb
,

183 
ù_c⁄¡øck_öfo
 
˘öfo
,

184 
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
)

186 
u_öt32_t
 
√wù
;

187 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

188 
t˝hdr
 *
t˝h
 = (*)
ùh
 + iph->
ihl
*4;

189 
u_öt16_t
 
p‹t
;

190 
ù_c⁄¡øck_tu∂e
 
√wtu∂e
;

192 
	`MUST_BE_LOCKED
(&
ù_·p_lock
);

193 
	`DEBUGP
("FTP_NAT: seq %u + %u in %u\n",

194 
ex≥˘
->
£q
, 
˘_·p_öfo
->
Àn
,

195 
	`¡ohl
(
t˝h
->
£q
));

199 i‡(
˘_·p_öfo
->
·±y≥
 =
IP_CT_FTP_PASV


200 || 
˘_·p_öfo
->
·±y≥
 =
IP_CT_FTP_EPSV
) {

203 
√wù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
;

205 
√wtu∂e
.
§c
.
ù
 =

206 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
;

207 
√wtu∂e
.
d°
.
ù
 =

208 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
;

211 
√wù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
;

213 
√wtu∂e
.
§c
.
ù
 =

214 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
;

215 
√wtu∂e
.
d°
.
ù
 =

216 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
;

218 
√wtu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

219 
√wtu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
ex≥˘
->
tu∂e
.src.u.tcp.port;

222 
p‹t
 = 
˘_·p_öfo
->port;Öort != 0;Öort++) {

223 
√wtu∂e
.
d°
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(port);

225 i‡(
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
ex≥˘
, &
√wtu∂e
) == 0)

228 i‡(
p‹t
 == 0)

231 i‡(!
m™gÀ
[
˘_·p_öfo
->
·±y≥
](
pskb
, 
√wù
, 
p‹t
,

232 
ex≥˘
->
£q
 - 
	`¡ohl
(
t˝h
->seq),

233 
˘_·p_öfo
->
Àn
, 
˘
, 
˘öfo
))

237 
	}
}

239 
	$hñp
(
ù_c⁄¡øck
 *
˘
,

240 
ù_c⁄¡øck_ex≥˘
 *
exp
,

241 
ù_«t_öfo
 *
öfo
,

242 
ù_c⁄¡øck_öfo
 
˘öfo
,

243 
hooknum
,

244 
sk_buff
 **
pskb
)

246 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

247 
t˝hdr
 *
t˝h
 = (*)
ùh
 + iph->
ihl
*4;

248 
d©Æí
;

249 
dú
;

250 
ù_˘_·p_ex≥˘
 *
˘_·p_öfo
;

252 i‡(!
exp
)

253 
	`DEBUGP
("ip_nat_ftp:ÇoÉxp!!");

255 
˘_·p_öfo
 = &
exp
->
hñp
.
exp_·p_öfo
;

259 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

260 i‡(!((
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

261 || (
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
))) {

262 
	`DEBUGP
("nat_ftp: NotÅouching dir %sát hook %s\n",

263 
dú
 =
IP_CT_DIR_ORIGINAL
 ? "ORIG" : "REPLY",

264 
hooknum
 =
NF_IP_POST_ROUTING
 ? "POSTROUTING"

265 : 
hooknum
 =
NF_IP_PRE_ROUTING
 ? "PREROUTING"

266 : 
hooknum
 =
NF_IP_LOCAL_OUT
 ? "OUTPUT" : "???");

267  
NF_ACCEPT
;

270 
d©Æí
 = (*
pskb
)->
Àn
 - 
ùh
->
ihl
 * 4 - 
t˝h
->
doff
 * 4;

271 
	`LOCK_BH
(&
ù_·p_lock
);

273 i‡(
	`bëwìn
(
exp
->
£q
 + 
˘_·p_öfo
->
Àn
,

274 
	`¡ohl
(
t˝h
->
£q
),

275 
	`¡ohl
(
t˝h
->
£q
Ë+ 
d©Æí
)) {

276 i‡(!
	`·p_d©a_fixup
(
˘_·p_öfo
, 
˘
, 
pskb
, 
˘öfo
, 
exp
)) {

277 
	`UNLOCK_BH
(&
ù_·p_lock
);

278  
NF_DROP
;

283 i‡(
	`√t_øãlimô
()) {

284 
	`¥ötk
("FTP_NAT:ÖartialÖacket %u/%u in %u/%u\n",

285 
exp
->
£q
, 
˘_·p_öfo
->
Àn
,

286 
	`¡ohl
(
t˝h
->
£q
),

287 
	`¡ohl
(
t˝h
->
£q
Ë+ 
d©Æí
);

289 
	`UNLOCK_BH
(&
ù_·p_lock
);

290  
NF_DROP
;

292 
	`UNLOCK_BH
(&
ù_·p_lock
);

294  
NF_ACCEPT
;

295 
	}
}

297 
ù_«t_hñ≥r
 
	g·p
[
MAX_PORTS
];

298 
	g·p_«mes
[
MAX_PORTS
][10];

301 
	$föi
()

303 
i
;

305 
i
 = 0; i < 
p‹ts_c
; i++) {

306 
	`DEBUGP
("ù_«t_·p: uƒegi°îögÖ‹à%d\n", 
p‹ts
[
i
]);

307 
	`ù_«t_hñ≥r_uƒegi°î
(&
·p
[
i
]);

309 
	}
}

311 
__öô
 
	$öô
()

313 
i
, 
ªt
 = 0;

314 *
tm≤ame
;

316 i‡(
p‹ts
[0] == 0)

317 
p‹ts
[0] = 
FTP_PORT
;

319 
i
 = 0; (ò< 
MAX_PORTS
Ë&& 
p‹ts
[i]; i++) {

320 
·p
[
i
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

321 
·p
[
i
].
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[i]);

322 
·p
[
i
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

323 
·p
[
i
].
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

324 
·p
[
i
].
hñp
 = help;

325 
·p
[
i
].
me
 = 
THIS_MODULE
;

326 
·p
[
i
].
Êags
 = 0;

327 
·p
[
i
].
ex≥˘
 = 
·p_«t_ex≥˘ed
;

329 
tm≤ame
 = &
·p_«mes
[
i
][0];

330 i‡(
p‹ts
[
i
] =
FTP_PORT
)

331 
	`•rötf
(
tm≤ame
, "ftp");

333 
	`•rötf
(
tm≤ame
, "·p-%d", 
i
);

334 
·p
[
i
].
«me
 = 
tm≤ame
;

336 
	`DEBUGP
("ip_nat_ftp: TryingÅoÑegister forÖort %d\n",

337 
p‹ts
[
i
]);

338 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(&
·p
[
i
]);

340 i‡(
ªt
) {

341 
	`¥ötk
("ip_nat_ftp:ÉrrorÑegistering "

342 "hñ≥∏f‹Ö‹à%d\n", 
p‹ts
[
i
]);

343 
	`föi
();

344  
ªt
;

346 
p‹ts_c
++;

349  
ªt
;

350 
	}
}

352 
NEEDS_CONNTRACK
(
·p
);

354 
moduÀ_öô
(
öô
);

355 
moduÀ_exô
(
föi
);

	@ip_nat_ftp.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_nat_gre.c

26 
	~<löux/c⁄fig.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/ù.h
>

29 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

30 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

31 
	~<löux/√tfûãr_ùv4/ù_«t_¥Ÿocﬁ.h
>

32 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿo_gª.h
>

34 
MODULE_LICENSE
("GPL");

35 
MODULE_AUTHOR
("Harald Welte <laforge@gnumonks.org>");

36 
MODULE_DESCRIPTION
("Netfilter NATÖrotocol helper module for GRE");

39 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(
KERN_DEBUG
 
__FILE__
 ":" 
__FUNCTION__
 \

40 ": " 
f‹m©
, ## 
¨gs
)

	)

42 
	#DEBUGP
(
x
, 
¨gs
...)

	)

47 
	$gª_ö_ønge
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

48 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

49 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
mö
,

50 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
max
)

52 
u_öt32_t
 
key
;

54 i‡(
m™ùty≥
 =
IP_NAT_MANIP_SRC
)

55 
key
 = 
tu∂e
->
§c
.
u
.
gª
.key;

57 
key
 = 
tu∂e
->
d°
.
u
.
gª
.key;

59  
	`¡ohl
(
key
Ë>¡ohl(
mö
->
gª
.key)

60 && 
	`¡ohl
(
key
Ë<¡ohl(
max
->
gª
.key);

61 
	}
}

65 
	$gª_unique_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

66 c⁄° 
ù_«t_ønge
 *
ønge
,

67 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

68 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

70 
u_öt32_t
 
mö
, 
i
, 
ønge_size
;

71 
u_öt32_t
 
key
 = 0, *
key±r
;

73 i‡(
m™ùty≥
 =
IP_NAT_MANIP_SRC
)

74 
key±r
 = &
tu∂e
->
§c
.
u
.
gª
.
key
;

76 
key±r
 = &
tu∂e
->
d°
.
u
.
gª
.
key
;

78 i‡(!(
ønge
->
Êags
 & 
IP_NAT_RANGE_PROTO_SPECIFIED
)) {

80 
tu∂e
->
d°
.
u
.
gª
.
vîsi⁄
) {

82 
	`DEBUGP
("NATing GRE version 0 (ct=%p)\n",

83 
c⁄¡øck
);

84 
mö
 = 1;

85 
ønge_size
 = 0xffffffff;

87 
GRE_VERSION_PPTP
:

88 
	`DEBUGP
("%p: NATing GRE PPTP\n",

89 
c⁄¡øck
);

90 
mö
 = 1;

91 
ønge_size
 = 0xffff;

94 
	`¥ötk
(
KERN_WARNING
 "nat_gre: unknown GRE version\n");

100 
mö
 = 
	`¡ohl
(
ønge
->mö.
gª
.
key
);

101 
ønge_size
 = 
	`¡ohl
(
ønge
->
max
.
gª
.
key
Ë- 
mö
 + 1;

104 
	`DEBUGP
("mö = %u,Ñ™ge_sizê%u\n", 
mö
, 
ønge_size
);

106 
i
 = 0; i < 
ønge_size
; i++, 
key
++) {

107 *
key±r
 = 
	`ht⁄l
(
mö
 + 
key
 % 
ønge_size
);

108 i‡(!
	`ù_«t_u£d_tu∂e
(
tu∂e
, 
c⁄¡øck
))

112 
	`DEBUGP
("%p:ÇÿNAT m≠pög\n", 
c⁄¡øck
);

115 
	}
}

119 
	$gª_m™ù_pkt
(
ùhdr
 *
ùh
, 
size_t
 
Àn
,

120 c⁄° 
ù_c⁄¡øck_m™ù
 *
m™ù
,

121 
ù_«t_m™ù_ty≥
 
m™ùty≥
)

123 
gª_hdr
 *
gªh
 = (gª_hd∏*)((
u_öt32_t
 *)
ùh
+ùh->
ihl
);

124 
gª_hdr_µç
 *
pgªh
 = (gª_hdr_µç *Ë
gªh
;

128 i‡(
m™ùty≥
 =
IP_NAT_MANIP_DST
) {

130 
gªh
->
vîsi⁄
) {

132 i‡(!
gªh
->
key
) {

133 
	`DEBUGP
("can'tÇat GRE w/o key\n");

136 i‡(
gªh
->
csum
) {

138 *(
	`gª_csum
(
gªh
)) =

139 
	`ù_«t_chót_check
(~*(
	`gª_key
(
gªh
)),

140 
m™ù
->
u
.
gª
.
key
,

141 *(
	`gª_csum
(
gªh
)));

143 *(
	`gª_key
(
gªh
)Ë
m™ù
->
u
.
gª
.
key
;

145 
GRE_VERSION_PPTP
:

146 
	`DEBUGP
("call_id -> 0x%04x\n",

147 
	`¡ohl
(
m™ù
->
u
.
gª
.
key
));

148 
pgªh
->
ˇŒ_id
 = 
	`ht⁄s
(
	`¡ohl
(
m™ù
->
u
.
gª
.
key
));

151 
	`DEBUGP
("can'tÇat unknown GRE version\n");

155 
	}
}

159 
	$gª_¥öt
(*
buf„r
,

160 c⁄° 
ù_c⁄¡øck_tu∂e
 *
m©ch
,

161 c⁄° 
ù_c⁄¡øck_tu∂e
 *
mask
)

163 
Àn
 = 0;

165 i‡(
mask
->
d°
.
u
.
gª
.
vîsi⁄
)

166 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "version=%d ",

167 
	`¡ohs
(
m©ch
->
d°
.
u
.
gª
.
vîsi⁄
));

169 i‡(
mask
->
d°
.
u
.
gª
.
¥Ÿocﬁ
)

170 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "protocol=0x%x ",

171 
	`¡ohs
(
m©ch
->
d°
.
u
.
gª
.
¥Ÿocﬁ
));

173 i‡(
mask
->
§c
.
u
.
gª
.
key
)

174 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "srckey=0x%x ",

175 
	`¡ohl
(
m©ch
->
§c
.
u
.
gª
.
key
));

177 i‡(
mask
->
d°
.
u
.
gª
.
key
)

178 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "dstkey=0x%x ",

179 
	`¡ohl
(
m©ch
->
§c
.
u
.
gª
.
key
));

181  
Àn
;

182 
	}
}

186 
	$gª_¥öt_ønge
(*
buf„r
, c⁄° 
ù_«t_ønge
 *
ønge
)

188 i‡(
ønge
->
mö
.
gª
.
key
 != 0

189 || 
ønge
->
max
.
gª
.
key
 != 0xFFFF) {

190 i‡(
ønge
->
mö
.
gª
.
key
 =ønge->
max
.gre.key)

191  
	`•rötf
(
buf„r
, "key 0x%x ",

192 
	`¡ohl
(
ønge
->
mö
.
gª
.
key
));

194  
	`•rötf
(
buf„r
, "keys 0x%u-0x%u ",

195 
	`¡ohl
(
ønge
->
mö
.
gª
.
key
),

196 
	`¡ohl
(
ønge
->
max
.
gª
.
key
));

199 
	}
}

202 
ù_«t_¥Ÿocﬁ
 
	ggª
 =

203 { { 
NULL
, NULL }, "GRE", 
IPPROTO_GRE
,

204 
gª_m™ù_pkt
,

205 
gª_ö_ønge
,

206 
gª_unique_tu∂e
,

207 
gª_¥öt
,

208 
gª_¥öt_ønge


211 
__öô
 
	$öô
()

214 i‡(
	`ù_«t_¥Ÿocﬁ_ªgi°î
(&
gª
))

215  -
EIO
;

218 
	}
}

220 
__exô
 
	$föi
()

223 
	`ù_«t_¥Ÿocﬁ_uƒegi°î
(&
gª
);

224 
	}
}

226 
moduÀ_öô
(
öô
);

227 
moduÀ_exô
(
föi
);

	@ip_nat_gre.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_nat_h323.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/√tfûãr.h
>

14 
	~<löux/ù.h
>

15 
	~<√t/checksum.h
>

16 
	~<√t/t˝.h
>

18 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

19 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

20 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

21 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

22 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_tu∂e.h
>

23 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

24 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_h323.h
>

26 
MODULE_AUTHOR
("Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>");

27 
MODULE_DESCRIPTION
("H.323 'brute force' connectionÅracking module");

28 
MODULE_LICENSE
("GPL");

30 
DECLARE_LOCK_EXTERN
(
ù_h323_lock
);

31 
moduÀ
 *
	gù_«t_h323
 = 
THIS_MODULE
;

34 
	#DEBUGP
 
¥ötk


	)

36 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

42 
h225_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

43 
hooknum
,

44 
ù_c⁄¡øck
 *
˘
,

45 
ù_«t_öfo
 *
öfo
);

47 
h225_«t_hñp
(
ù_c⁄¡øck
 *
˘
,

48 
ù_c⁄¡øck_ex≥˘
 *
exp
,

49 
ù_«t_öfo
 *
öfo
,

50 
ù_c⁄¡øck_öfo
 
˘öfo
,

51 
hooknum
,

52 
sk_buff
 **
pskb
);

54 
ù_«t_hñ≥r
 
	gh245
 =

55 { { 
NULL
, NULL },

58 
NULL
,

60 { 0, { 0 }, 
IPPROTO_TCP
 } },

63 
h225_«t_hñp
,

64 
h225_«t_ex≥˘ed


68 
	$h225_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

69 
hooknum
,

70 
ù_c⁄¡øck
 *
˘
,

71 
ù_«t_öfo
 *
öfo
)

73 
ù_«t_mu…i_ønge
 
mr
;

74 
u_öt32_t
 
√wd°ù
, 
√w§cù
, 
√wù
;

75 
u_öt16_t
 
p‹t
;

76 
ù_˘_h225_ex≥˘
 *
exp_öfo
;

77 
ù_˘_h225_ma°î
 *
ma°î_öfo
;

78 
ù_c⁄¡øck
 *
ma°î
 = 
	`ma°î_˘
(
˘
);

79 
is_h225
, 
ªt
;

81 
	`IP_NF_ASSERT
(
öfo
);

82 
	`IP_NF_ASSERT
(
ma°î
);

84 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1<<
	`HOOK2MANIP
(
hooknum
))));

86 
	`DEBUGP
("h225_nat_expected: We haveá connection!\n");

87 
ma°î_öfo
 = &
˘
->
ma°î
->
ex≥˘™t
->
hñp
.
˘_h225_öfo
;

88 
exp_öfo
 = &
˘
->
ma°î
->
hñp
.
exp_h225_öfo
;

90 
	`LOCK_BH
(&
ù_h323_lock
);

92 
	`DEBUGP
("master: ");

93 
	`DUMP_TUPLE
(&
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

94 
	`DUMP_TUPLE
(&
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

95 
	`DEBUGP
("conntrack: ");

96 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

97 i‡(
exp_öfo
->
dú
 =
IP_CT_DIR_ORIGINAL
) {

99 
√wd°ù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
;

100 
√w§cù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
;

101 
	`DEBUGP
("h225_nat_expected: %u.%u.%u.%u->%u.%u.%u.%u (to client)\n",

102 
	`NIPQUAD
(
√w§cù
), NIPQUAD(
√wd°ù
));

105 
√wd°ù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
;

106 
√w§cù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
;

107 
	`DEBUGP
("h225_nat_expected: %u.%u.%u.%u->%u.%u.%u.%u (to server)\n",

108 
	`NIPQUAD
(
√w§cù
), NIPQUAD(
√wd°ù
));

110 
p‹t
 = 
exp_öfo
->port;

111 
is_h225
 = 
ma°î_öfo
->is_h225 =
H225_PORT
;

112 
	`UNLOCK_BH
(&
ù_h323_lock
);

114 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
)

115 
√wù
 = 
√w§cù
;

117 
√wù
 = 
√wd°ù
;

119 
	`DEBUGP
("h225_«t_ex≥˘ed: IPÅÿ%u.%u.%u.%u\n", 
	`NIPQUAD
(
√wù
));

121 
mr
.
øngesize
 = 1;

123 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
;

124 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
√wù
;

128 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_DST
) {

129 
mr
.
ønge
[0].
Êags
 |
IP_NAT_RANGE_PROTO_SPECIFIED
;

130 
mr
.
ønge
[0].
mö
 = mr.ønge[0].
max


131 ((
ù_c⁄¡øck_m™ù_¥Ÿo
)

132 { .
t˝
 = { 
p‹t
 } });

135 
ªt
 = 
	`ù_«t_£tup_öfo
(
˘
, &
mr
, 
hooknum
);

137 i‡(
is_h225
) {

138 
	`DEBUGP
("h225_«t_ex≥˘ed: H.225, sëtög NAT hñ≥∏f‹ %p\n", 
˘
);

140 
öfo
->
hñ≥r
 = &
h245
;

142  
ªt
;

143 
	}
}

145 
	$h323_sig«l_addªss_fixup
(
ù_c⁄¡øck
 *
˘
,

146 
sk_buff
 **
pskb
,

147 
ù_c⁄¡øck_öfo
 
˘öfo
)

149 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

150 
t˝hdr
 *
t˝h
 = (*)
ùh
 + iph->
ihl
*4;

151 *
d©a
 = (*Ë
t˝h
 +Å˝h->
doff
 * 4;

152 
u_öt32_t
 
t˝Àn
 = (*
pskb
)->
Àn
 - 
ùh
->
ihl
*4;

153 
u_öt32_t
 
d©Æí
 = 
t˝Àn
 - 
t˝h
->
doff
*4;

154 
ù_˘_h225_ma°î
 *
öfo
 = &
˘
->
hñp
.
˘_h225_öfo
;

155 
u_öt32_t
 
√wù
;

156 
u_öt16_t
 
p‹t
;

157 
i
;

159 
	`MUST_BE_LOCKED
(&
ù_h323_lock
);

161 
	`DEBUGP
("h323_signal_address_fixup: %s %s\n",

162 
	`bëwìn
(
öfo
->
£q
[
IP_CT_DIR_ORIGINAL
], 
	`¡ohl
(
t˝h
->£q),Çtohl—˝h->£qË+ 
d©Æí
)

164 
	`bëwìn
(
öfo
->
£q
[
IP_CT_DIR_REPLY
], 
	`¡ohl
(
t˝h
->£q),Çtohl—˝h->£qË+ 
d©Æí
)

166 i‡(!(
	`bëwìn
(
öfo
->
£q
[
IP_CT_DIR_ORIGINAL
], 
	`¡ohl
(
t˝h
->£q),Çtohl—˝h->£qË+ 
d©Æí
)

167 || 
	`bëwìn
(
öfo
->
£q
[
IP_CT_DIR_REPLY
], 
	`¡ohl
(
t˝h
->£q),Çtohl—˝h->£qË+ 
d©Æí
)))

170 
	`DEBUGP
("h323_signal_address_fixup: offsets %u + 6ánd %u + 6 in %u\n",

171 
öfo
->
off£t
[
IP_CT_DIR_ORIGINAL
],

172 
öfo
->
off£t
[
IP_CT_DIR_REPLY
],

173 
t˝Àn
);

174 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

175 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

177 
i
 = 0; i < 
IP_CT_DIR_MAX
; i++) {

178 
	`DEBUGP
("h323_signal_address_fixup: %s %s\n",

179 
öfo
->
dú
 =
IP_CT_DIR_ORIGINAL
 ? "original" : "reply",

180 
i
 =
IP_CT_DIR_ORIGINAL
 ? "caller" : "callee");

181 i‡(!
	`bëwìn
(
öfo
->
£q
[
i
], 
	`¡ohl
(
t˝h
->seq),

182 
	`¡ohl
(
t˝h
->
£q
Ë+ 
d©Æí
))

184 i‡(!
	`bëwìn
(
öfo
->
£q
[
i
] + 6, 
	`¡ohl
(
t˝h
->seq),

185 
	`¡ohl
(
t˝h
->
£q
Ë+ 
d©Æí
)) {

187 i‡(
	`√t_øãlimô
()) {

188 
	`¥ötk
("H.323_NAT:ÖartialÖacket %u/6 in %u/%u\n",

189 
öfo
->
£q
[
i
],

190 
	`¡ohl
(
t˝h
->
£q
),

191 
	`¡ohl
(
t˝h
->
£q
Ë+ 
d©Æí
);

198 i‡(
i
 =
IP_CT_DIR_ORIGINAL
) {

199 
√wù
 = 
˘
->
tu∂ehash
[!
öfo
->
dú
].
tu∂e
.
d°
.
ù
;

200 
p‹t
 = 
˘
->
tu∂ehash
[!
öfo
->
dú
].
tu∂e
.
d°
.
u
.
t˝
.port;

202 
√wù
 = 
˘
->
tu∂ehash
[!
öfo
->
dú
].
tu∂e
.
§c
.
ù
;

203 
p‹t
 = 
˘
->
tu∂ehash
[!
öfo
->
dú
].
tu∂e
.
§c
.
u
.
t˝
.port;

206 
	`DEBUGP
("h323_signal_address_fixup: orig %s IP:port %u.%u.%u.%u:%u\n",

207 
i
 =
IP_CT_DIR_ORIGINAL
 ? "source" : "dest ",

208 
	`NIPQUAD
(*((
u_öt32_t
 *)(
d©a
 + 
öfo
->
off£t
[
i
]))),

209 
	`¡ohs
(*((
u_öt16_t
 *)(
d©a
 + 
öfo
->
off£t
[
i
] + 4))));

212 *(
u_öt32_t
 *)(
d©a
 + 
öfo
->
off£t
[
i
]Ë
√wù
;

213 *(
u_öt16_t
 *)(
d©a
 + 
öfo
->
off£t
[
i
] + 4Ë
p‹t
;

215 
	`DEBUGP
("h323_signal_address_fixup:Çew %s IP:port %u.%u.%u.%u:%u\n",

216 
i
 =
IP_CT_DIR_ORIGINAL
 ? "source" : "dest ",

217 
	`NIPQUAD
(*((
u_öt32_t
 *)(
d©a
 + 
öfo
->
off£t
[
i
]))),

218 
	`¡ohs
(*((
u_öt16_t
 *)(
d©a
 + 
öfo
->
off£t
[
i
] + 4))));

223 (*
pskb
)->
csum
 = 
	`csum_∑πül
((*)
t˝h
 +Å˝h->
doff
*4,

224 
d©Æí
, 0);

226 
t˝h
->
check
 = 0;

227 
t˝h
->
check
 = 
	`t˝_v4_check
—˝h, 
t˝Àn
, 
ùh
->
ßddr
, iph->
daddr
,

228 
	`csum_∑πül
((*)
t˝h
,Å˝h->
doff
*4,

229 (*
pskb
)->
csum
));

230 
	`ù_£nd_check
(
ùh
);

233 
	}
}

235 
	$h323_d©a_fixup
(
ù_˘_h225_ex≥˘
 *
öfo
,

236 
ù_c⁄¡øck
 *
˘
,

237 
sk_buff
 **
pskb
,

238 
ù_c⁄¡øck_öfo
 
˘öfo
,

239 
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
)

241 
u_öt32_t
 
√wù
;

242 
u_öt16_t
 
p‹t
;

243 
ù_c⁄¡øck_tu∂e
 
√wtu∂e
;

244 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

245 
t˝hdr
 *
t˝h
 = (*)
ùh
 + iph->
ihl
*4;

246 *
d©a
 = (*Ë
t˝h
 +Å˝h->
doff
 * 4;

247 
u_öt32_t
 
t˝Àn
 = (*
pskb
)->
Àn
 - 
ùh
->
ihl
*4;

248 
ù_˘_h225_ma°î
 *
ma°î_öfo
 = &
˘
->
hñp
.
˘_h225_öfo
;

249 
is_h225
;

251 
	`MUST_BE_LOCKED
(&
ù_h323_lock
);

252 
	`DEBUGP
("h323_d©a_fixup: off£à%u + 6 i¿%u\n", 
öfo
->
off£t
, 
t˝Àn
);

253 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

254 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

256 i‡(!
	`bëwìn
(
ex≥˘
->
£q
 + 6, 
	`¡ohl
(
t˝h
->seq),

257 
	`¡ohl
(
t˝h
->
£q
Ë+ 
t˝Àn
 -Å˝h->
doff
 * 4)) {

259 i‡(
	`√t_øãlimô
()) {

260 
	`¥ötk
("H.323_NAT:ÖartialÖacket %u/6 in %u/%u\n",

261 
ex≥˘
->
£q
,

262 
	`¡ohl
(
t˝h
->
£q
),

263 
	`¡ohl
(
t˝h
->
£q
Ë+ 
t˝Àn
 -Å˝h->
doff
 * 4);

270 i‡(
öfo
->
dú
 =
IP_CT_DIR_REPLY
) {

272 
√wù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
;

274 
√wtu∂e
.
§c
.
ù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.src.ip;

275 
√wtu∂e
.
d°
.
ù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.dst.ip;

278 
√wù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
;

280 
√wtu∂e
.
§c
.
ù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.src.ip;

281 
√wtu∂e
.
d°
.
ù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.dst.ip;

284 
is_h225
 = (
ma°î_öfo
->is_h225 =
H225_PORT
);

286 i‡(
is_h225
) {

287 
√wtu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

288 
√wtu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
ex≥˘
->
tu∂e
.src.u.tcp.port;

290 
√wtu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

291 
√wtu∂e
.
§c
.
u
.
udp
.
p‹t
 = 
ex≥˘
->
tu∂e
.src.u.udp.port;

295 
p‹t
 = 
	`¡ohs
(
öfo
->port);Öort != 0;Öort++) {

296 i‡(
is_h225
)

297 
√wtu∂e
.
d°
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(port);

299 
√wtu∂e
.
d°
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(port);

301 i‡(
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
ex≥˘
, &
√wtu∂e
) == 0)

304 i‡(
p‹t
 == 0) {

305 
	`DEBUGP
("h323_data_fixup:Ço freeÖort found!\n");

309 
p‹t
 = 
	`ht⁄s
(port);

311 
	`DEBUGP
("h323_data_fixup: orig IP:port %u.%u.%u.%u:%u\n",

312 
	`NIPQUAD
(*((
u_öt32_t
 *)(
d©a
 + 
öfo
->
off£t
))),

313 
	`¡ohs
(*((
u_öt16_t
 *)(
d©a
 + 
öfo
->
off£t
 + 4))));

316 *(
u_öt32_t
 *)(
d©a
 + 
öfo
->
off£t
Ë
√wù
;

317 *(
u_öt16_t
 *)(
d©a
 + 
öfo
->
off£t
 + 4Ë
p‹t
;

319 
	`DEBUGP
("h323_data_fixup:Çew IP:port %u.%u.%u.%u:%u\n",

320 
	`NIPQUAD
(*((
u_öt32_t
 *)(
d©a
 + 
öfo
->
off£t
))),

321 
	`¡ohs
(*((
u_öt16_t
 *)(
d©a
 + 
öfo
->
off£t
 + 4))));

326 (*
pskb
)->
csum
 = 
	`csum_∑πül
((*)
t˝h
 +Å˝h->
doff
*4,

327 
t˝Àn
 - 
t˝h
->
doff
*4, 0);

329 
t˝h
->
check
 = 0;

330 
t˝h
->
check
 = 
	`t˝_v4_check
—˝h, 
t˝Àn
, 
ùh
->
ßddr
, iph->
daddr
,

331 
	`csum_∑πül
((*)
t˝h
,Å˝h->
doff
*4,

332 (*
pskb
)->
csum
));

333 
	`ù_£nd_check
(
ùh
);

336 
	}
}

338 
	$h225_«t_hñp
(
ù_c⁄¡øck
 *
˘
,

339 
ù_c⁄¡øck_ex≥˘
 *
exp
,

340 
ù_«t_öfo
 *
öfo
,

341 
ù_c⁄¡øck_öfo
 
˘öfo
,

342 
hooknum
,

343 
sk_buff
 **
pskb
)

345 
dú
;

346 
ù_˘_h225_ex≥˘
 *
exp_öfo
;

350 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

351 
	`DEBUGP
("nat_h323: dir %sát hook %s\n",

352 
dú
 =
IP_CT_DIR_ORIGINAL
 ? "ORIG" : "REPLY",

353 
hooknum
 =
NF_IP_POST_ROUTING
 ? "POSTROUTING"

354 : 
hooknum
 =
NF_IP_PRE_ROUTING
 ? "PREROUTING"

355 : 
hooknum
 =
NF_IP_LOCAL_OUT
 ? "OUTPUT" : "???");

356 i‡(!((
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

357 || (
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
))) {

358 
	`DEBUGP
("nat_h323: NotÅouching dir %sát hook %s\n",

359 
dú
 =
IP_CT_DIR_ORIGINAL
 ? "ORIG" : "REPLY",

360 
hooknum
 =
NF_IP_POST_ROUTING
 ? "POSTROUTING"

361 : 
hooknum
 =
NF_IP_PRE_ROUTING
 ? "PREROUTING"

362 : 
hooknum
 =
NF_IP_LOCAL_OUT
 ? "OUTPUT" : "???");

363  
NF_ACCEPT
;

366 i‡(!
exp
) {

367 
	`LOCK_BH
(&
ù_h323_lock
);

368 i‡(!
	`h323_sig«l_addªss_fixup
(
˘
, 
pskb
, 
˘öfo
)) {

369 
	`UNLOCK_BH
(&
ù_h323_lock
);

370  
NF_DROP
;

372 
	`UNLOCK_BH
(&
ù_h323_lock
);

373  
NF_ACCEPT
;

376 
exp_öfo
 = &
exp
->
hñp
.
exp_h225_öfo
;

378 
	`LOCK_BH
(&
ù_h323_lock
);

379 i‡(!
	`h323_d©a_fixup
(
exp_öfo
, 
˘
, 
pskb
, 
˘öfo
, 
exp
)) {

380 
	`UNLOCK_BH
(&
ù_h323_lock
);

381  
NF_DROP
;

383 
	`UNLOCK_BH
(&
ù_h323_lock
);

385  
NF_ACCEPT
;

386 
	}
}

388 
ù_«t_hñ≥r
 
	gh225
 =

389 { { 
NULL
, NULL },

391 
IP_NAT_HELPER_F_ALWAYS
,

392 
THIS_MODULE
,

393 { { 0, { .
t˝
 = { 
__c⁄°™t_ht⁄s
(
H225_PORT
) } } },

394 { 0, { 0 }, 
	gIPPROTO_TCP
 } },

395 { { 0, { .
	gt˝
 = { 0xFFFF } } },

397 
	gh225_«t_hñp
,

398 
	gh225_«t_ex≥˘ed


401 
__öô
 
	$öô
()

403 
ªt
;

405 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(&
h225
);

407 i‡(
ªt
 != 0)

408 
	`¥ötk
("ip_nat_h323: cannot initializeÅhe module!\n");

410  
ªt
;

411 
	}
}

413 
__exô
 
	$föi
()

415 
	`ù_«t_hñ≥r_uƒegi°î
(&
h225
);

416 
	}
}

418 
moduÀ_öô
(
öô
);

419 
moduÀ_exô
(
föi
);

	@ip_nat_h323.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_nat_helper.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/kmod.h
>

21 
	~<löux/ty≥s.h
>

22 
	~<löux/timî.h
>

23 
	~<löux/skbuff.h
>

24 
	~<löux/√tfûãr_ùv4.h
>

25 
	~<√t/checksum.h
>

26 
	~<√t/icmp.h
>

27 
	~<√t/ù.h
>

28 
	~<√t/t˝.h
>

29 
	~<√t/udp.h
>

31 
	#ASSERT_READ_LOCK
(
x
Ë
	`MUST_BE_READ_LOCKED
(&
ù_«t_lock
)

	)

32 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`MUST_BE_WRITE_LOCKED
(&
ù_«t_lock
)

	)

34 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

35 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

36 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

37 
	~<löux/√tfûãr_ùv4/ù_«t_¥Ÿocﬁ.h
>

38 
	~<löux/√tfûãr_ùv4/ù_«t_c‹e.h
>

39 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

40 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

43 
	#DEBUGP
 
¥ötk


	)

44 
	#DUMP_OFFSET
(
x
Ë
	`¥ötk
("off£t_bef‹e=%d, off£t_a·î=%d, c‹ª˘i⁄_pos=%u\n", x->
off£t_bef‹e
, x->
off£t_a·î
, x->
c‹ª˘i⁄_pos
);

	)

46 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

47 
	#DUMP_OFFSET
(
x
)

	)

50 
DECLARE_LOCK
(
ù_«t_£qofs_lock
);

53 
ölöe
 

54 
	$adju°_t˝_£quí˚
(
u32
 
£q
,

55 
sizediff
,

56 
ù_c⁄¡øck
 *
˘
,

57 
ù_c⁄¡øck_öfo
 
˘öfo
)

59 
dú
;

60 
ù_«t_£q
 *
this_way
, *
Ÿhî_way
;

62 
	`DEBUGP
("ip_nat_resize_packet: old_size = %u,Çew_size = %u\n",

63 (*
skb
)->
Àn
, 
√w_size
);

65 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

67 
this_way
 = &
˘
->
«t
.
öfo
.
£q
[
dú
];

68 
Ÿhî_way
 = &
˘
->
«t
.
öfo
.
£q
[!
dú
];

70 
	`DEBUGP
("ip_nat_resize_packet: Seq_offset before: ");

71 
	`DUMP_OFFSET
(
this_way
);

73 
	`LOCK_BH
(&
ù_«t_£qofs_lock
);

79 i‡(
this_way
->
off£t_bef‹e
 =this_way->
off£t_a·î


80 || 
	`bef‹e
(
this_way
->
c‹ª˘i⁄_pos
, 
£q
)) {

81 
this_way
->
c‹ª˘i⁄_pos
 = 
£q
;

82 
this_way
->
off£t_bef‹e
 =Åhis_way->
off£t_a·î
;

83 
this_way
->
off£t_a·î
 +
sizediff
;

85 
	`UNLOCK_BH
(&
ù_«t_£qofs_lock
);

87 
	`DEBUGP
("ip_nat_resize_packet: Seq_offsetáfter: ");

88 
	`DUMP_OFFSET
(
this_way
);

89 
	}
}

92 
	$m™gÀ_c⁄ã¡s
(
sk_buff
 *
skb
,

93 
d©aoff
,

94 
m©ch_off£t
,

95 
m©ch_Àn
,

96 c⁄° *
ªp_buf„r
,

97 
ªp_Àn
)

99 *
d©a
;

101 
	`BUG_ON
(
	`skb_is_n⁄löór
(
skb
));

102 
d©a
 = (*)
skb
->
nh
.
ùh
 + 
d©aoff
;

105 
	`memmove
(
d©a
 + 
m©ch_off£t
 + 
ªp_Àn
,

106 
d©a
 + 
m©ch_off£t
 + 
m©ch_Àn
,

107 
skb
->
èû
 - (
d©a
 + 
m©ch_off£t
 + 
m©ch_Àn
));

110 
	`mem˝y
(
d©a
 + 
m©ch_off£t
, 
ªp_buf„r
, 
ªp_Àn
);

113 i‡(
ªp_Àn
 > 
m©ch_Àn
) {

114 
	`DEBUGP
("ip_nat_mangle_packet: ExtendingÖacket by "

115 "%u from %u byãs\n", 
ªp_Àn
 - 
m©ch_Àn
,

116 
skb
->
Àn
);

117 
	`skb_put
(
skb
, 
ªp_Àn
 - 
m©ch_Àn
);

119 
	`DEBUGP
("ip_nat_mangle_packet: ShrinkingÖacket from "

120 "%u from %u byãs\n", 
m©ch_Àn
 - 
ªp_Àn
,

121 
skb
->
Àn
);

122 
	`__skb_åim
(
skb
, skb->
Àn
 + 
ªp_Àn
 - 
m©ch_Àn
);

126 
skb
->
nh
.
ùh
->
tŸ_Àn
 = 
	`ht⁄s
(skb->
Àn
);

127 
	`ù_£nd_check
(
skb
->
nh
.
ùh
);

128 
	}
}

131 
	$íœrge_skb
(
sk_buff
 **
pskb
, 
exåa
)

133 
sk_buff
 *
nskb
;

135 i‡((*
pskb
)->
Àn
 + 
exåa
 > 65535)

138 
nskb
 = 
	`skb_c›y_ex∑nd
(*
pskb
, 
	`skb_hódroom
(*pskb), 
exåa
, 
GFP_ATOMIC
);

139 i‡(!
nskb
)

143 i‡((*
pskb
)->
sk
)

144 
	`skb_£t_ow√r_w
(
nskb
, (*
pskb
)->
sk
);

145 #ifde‡
CONFIG_NETFILTER_DEBUG


146 
nskb
->
nf_debug
 = (*
pskb
)->nf_debug;

148 
	`k‰ì_skb
(*
pskb
);

149 *
pskb
 = 
nskb
;

151 
	}
}

162 
	$ù_«t_m™gÀ_t˝_∑ckë
(
sk_buff
 **
pskb
,

163 
ù_c⁄¡øck
 *
˘
,

164 
ù_c⁄¡øck_öfo
 
˘öfo
,

165 
m©ch_off£t
,

166 
m©ch_Àn
,

167 c⁄° *
ªp_buf„r
,

168 
ªp_Àn
)

170 
ùhdr
 *
ùh
;

171 
t˝hdr
 *
t˝h
;

172 
d©Æí
;

174 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, (*pskb)->
Àn
))

177 i‡(
ªp_Àn
 > 
m©ch_Àn


178 && 
ªp_Àn
 - 
m©ch_Àn
 > 
	`skb_èûroom
(*
pskb
)

179 && !
	`íœrge_skb
(
pskb
, 
ªp_Àn
 - 
m©ch_Àn
))

182 
	`SKB_LINEAR_ASSERT
(*
pskb
);

184 
ùh
 = (*
pskb
)->
nh
.iph;

185 
t˝h
 = (*)
ùh
 + iph->
ihl
*4;

187 
	`m™gÀ_c⁄ã¡s
(*
pskb
, 
ùh
->
ihl
*4 + 
t˝h
->
doff
*4,

188 
m©ch_off£t
, 
m©ch_Àn
, 
ªp_buf„r
, 
ªp_Àn
);

190 
d©Æí
 = (*
pskb
)->
Àn
 - 
ùh
->
ihl
*4;

191 
t˝h
->
check
 = 0;

192 
t˝h
->
check
 = 
	`t˝_v4_check
—˝h, 
d©Æí
, 
ùh
->
ßddr
, iph->
daddr
,

193 
	`csum_∑πül
((*)
t˝h
, 
d©Æí
, 0));

195 
	`adju°_t˝_£quí˚
(
	`¡ohl
(
t˝h
->
£q
),

196 ()
ªp_Àn
 - ()
m©ch_Àn
,

197 
˘
, 
˘öfo
);

199 
	}
}

212 
	$ù_«t_m™gÀ_udp_∑ckë
(
sk_buff
 **
pskb
,

213 
ù_c⁄¡øck
 *
˘
,

214 
ù_c⁄¡øck_öfo
 
˘öfo
,

215 
m©ch_off£t
,

216 
m©ch_Àn
,

217 c⁄° *
ªp_buf„r
,

218 
ªp_Àn
)

220 
ùhdr
 *
ùh
;

221 
udphdr
 *
udph
;

224 
ùh
 = (*
pskb
)->
nh
.iph;

225 i‡((*
pskb
)->
Àn
 < 
ùh
->
ihl
*4 + (*
udph
) +

226 
m©ch_off£t
 + 
m©ch_Àn
)

229 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, (*pskb)->
Àn
))

232 i‡(
ªp_Àn
 > 
m©ch_Àn


233 && 
ªp_Àn
 - 
m©ch_Àn
 > 
	`skb_èûroom
(*
pskb
)

234 && !
	`íœrge_skb
(
pskb
, 
ªp_Àn
 - 
m©ch_Àn
))

237 
ùh
 = (*
pskb
)->
nh
.iph;

238 
udph
 = (*)
ùh
 + iph->
ihl
*4;

239 
	`m™gÀ_c⁄ã¡s
(*
pskb
, 
ùh
->
ihl
*4 + (*
udph
),

240 
m©ch_off£t
, 
m©ch_Àn
, 
ªp_buf„r
, 
ªp_Àn
);

243 
udph
->
Àn
 = 
	`ht⁄s
((*
pskb
)->À¿- 
ùh
->
ihl
*4);

246 i‡(
udph
->
check
) {

247 
d©Æí
 = (*
pskb
)->
Àn
 - 
ùh
->
ihl
 * 4;

248 
udph
->
check
 = 0;

249 
udph
->
check
 = 
	`csum_t˝udp_magic
(
ùh
->
ßddr
, iph->
daddr
,

250 
d©Æí
, 
IPPROTO_UDP
,

251 
	`csum_∑πül
((*)
udph
,

252 
d©Æí
, 0));

256 
	}
}

260 
	$ßck_adju°
(
sk_buff
 *
skb
,

261 
t˝hdr
 *
t˝h
,

262 
ßckoff
,

263 
ßckíd
,

264 
ù_«t_£q
 *
«t£q
)

266 
ßckoff
 < 
ßckíd
) {

267 
t˝_ßck_block
 *
ßck
;

268 
u_öt32_t
 
√w_°¨t_£q
, 
√w_íd_£q
;

270 
ßck
 = (*)
skb
->
d©a
 + 
ßckoff
;

271 i‡(
	`a·î
(
	`¡ohl
(
ßck
->
°¨t_£q
Ë- 
«t£q
->
off£t_bef‹e
,

272 
«t£q
->
c‹ª˘i⁄_pos
))

273 
√w_°¨t_£q
 = 
	`¡ohl
(
ßck
->
°¨t_£q
)

274 - 
«t£q
->
off£t_a·î
;

276 
√w_°¨t_£q
 = 
	`¡ohl
(
ßck
->
°¨t_£q
)

277 - 
«t£q
->
off£t_bef‹e
;

278 
√w_°¨t_£q
 = 
	`ht⁄l
(new_start_seq);

280 i‡(
	`a·î
(
	`¡ohl
(
ßck
->
íd_£q
Ë- 
«t£q
->
off£t_bef‹e
,

281 
«t£q
->
c‹ª˘i⁄_pos
))

282 
√w_íd_£q
 = 
	`¡ohl
(
ßck
->
íd_£q
)

283 - 
«t£q
->
off£t_a·î
;

285 
√w_íd_£q
 = 
	`¡ohl
(
ßck
->
íd_£q
)

286 - 
«t£q
->
off£t_bef‹e
;

287 
√w_íd_£q
 = 
	`ht⁄l
(new_end_seq);

289 
	`DEBUGP
("sack_adjust: start_seq: %d->%d,Énd_seq: %d->%d\n",

290 
	`¡ohl
(
ßck
->
°¨t_£q
), 
√w_°¨t_£q
,

291 
	`¡ohl
(
ßck
->
íd_£q
), 
√w_íd_£q
);

293 
t˝h
->
check
 =

294 
	`ù_«t_chót_check
(~
ßck
->
°¨t_£q
, 
√w_°¨t_£q
,

295 
	`ù_«t_chót_check
(~
ßck
->
íd_£q
,

296 
√w_íd_£q
,

297 
t˝h
->
check
));

298 
ßck
->
°¨t_£q
 = 
√w_°¨t_£q
;

299 
ßck
->
íd_£q
 = 
√w_íd_£q
;

300 
ßckoff
 +(*
ßck
);

302 
	}
}

305 
ölöe
 

306 
	$ù_«t_ßck_adju°
(
sk_buff
 **
pskb
,

307 
t˝hdr
 *
t˝h
,

308 
ù_c⁄¡øck
 *
˘
,

309 
ù_c⁄¡øck_öfo
 
˘öfo
)

311 
dú
, 
›toff
, 
›ãnd
;

313 
›toff
 = (*
pskb
)->
nh
.
ùh
->
ihl
*4 + (
t˝hdr
);

314 
›ãnd
 = (*
pskb
)->
nh
.
ùh
->
ihl
*4 + 
t˝h
->
doff
*4;

316 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, 
›ãnd
))

319 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

321 
›toff
 < 
›ãnd
) {

323 *
›
 = (*
pskb
)->
d©a
 + 
›toff
;

325 
›
[0]) {

326 
TCPOPT_EOL
:

328 
TCPOPT_NOP
:

329 
›toff
++;

333 i‡(
›toff
 + 1 =
›ãnd


334 || 
›toff
 + 
›
[1] > 
›ãnd


335 || 
›
[1] < 2)

337 i‡(
›
[0] =
TCPOPT_SACK


338 && 
›
[1] >2+
TCPOLEN_SACK_PERBLOCK


339 && ((
›
[1] - 2Ë% 
TCPOLEN_SACK_PERBLOCK
) == 0)

340 
	`ßck_adju°
(*
pskb
, 
t˝h
, 
›toff
+2,

341 
›toff
+
›
[1],

342 &
˘
->
«t
.
öfo
.
£q
[!
dú
]);

343 
›toff
 +
›
[1];

347 
	}
}

351 
	$ù_«t_£q_adju°
(
sk_buff
 **
pskb
,

352 
ù_c⁄¡øck
 *
˘
,

353 
ù_c⁄¡øck_öfo
 
˘öfo
)

355 
t˝hdr
 *
t˝h
;

356 
dú
, 
√w£q
, 
√wack
;

357 
ù_«t_£q
 *
this_way
, *
Ÿhî_way
;

359 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

361 
this_way
 = &
˘
->
«t
.
öfo
.
£q
[
dú
];

362 
Ÿhî_way
 = &
˘
->
«t
.
öfo
.
£q
[!
dú
];

365 i‡(!
this_way
->
off£t_bef‹e
 && !this_way->
off£t_a·î


366 && !
Ÿhî_way
->
off£t_bef‹e
 && !Ÿhî_way->
off£t_a·î
)

369 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, (*pskb)->
nh
.
ùh
->
ihl
*4+(*
t˝h
)))

372 
t˝h
 = (*)(*
pskb
)->
d©a
 + (*pskb)->
nh
.
ùh
->
ihl
*4;

373 i‡(
	`a·î
(
	`¡ohl
(
t˝h
->
£q
), 
this_way
->
c‹ª˘i⁄_pos
))

374 
√w£q
 = 
	`¡ohl
(
t˝h
->
£q
Ë+ 
this_way
->
off£t_a·î
;

376 
√w£q
 = 
	`¡ohl
(
t˝h
->
£q
Ë+ 
this_way
->
off£t_bef‹e
;

377 
√w£q
 = 
	`ht⁄l
(newseq);

379 i‡(
	`a·î
(
	`¡ohl
(
t˝h
->
ack_£q
Ë- 
Ÿhî_way
->
off£t_bef‹e
,

380 
Ÿhî_way
->
c‹ª˘i⁄_pos
))

381 
√wack
 = 
	`¡ohl
(
t˝h
->
ack_£q
Ë- 
Ÿhî_way
->
off£t_a·î
;

383 
√wack
 = 
	`¡ohl
(
t˝h
->
ack_£q
Ë- 
Ÿhî_way
->
off£t_bef‹e
;

384 
√wack
 = 
	`ht⁄l
(newack);

386 
t˝h
->
check
 = 
	`ù_«t_chót_check
(~t˝h->
£q
, 
√w£q
,

387 
	`ù_«t_chót_check
(~
t˝h
->
ack_£q
,

388 
√wack
,

389 
t˝h
->
check
));

391 
	`DEBUGP
("Adjusting sequenceÇumber from %u->%u,áck from %u->%u\n",

392 
	`¡ohl
(
t˝h
->
£q
),Çtohl(
√w£q
),Çtohl—˝h->
ack_£q
),

393 
	`¡ohl
(
√wack
));

395 
t˝h
->
£q
 = 
√w£q
;

396 
t˝h
->
ack_£q
 = 
√wack
;

398  
	`ù_«t_ßck_adju°
(
pskb
, 
t˝h
, 
˘
, 
˘öfo
);

399 
	}
}

401 
ölöe
 

402 
	$hñ≥r_cmp
(c⁄° 
ù_«t_hñ≥r
 *
hñ≥r
,

403 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
)

405  
	`ù_˘_tu∂e_mask_cmp
(
tu∂e
, &
hñ≥r
->tu∂e, &hñ≥r->
mask
);

406 
	}
}

408 
	$ù_«t_hñ≥r_ªgi°î
(
ù_«t_hñ≥r
 *
me
)

410 
ªt
 = 0;

412 
	`WRITE_LOCK
(&
ù_«t_lock
);

413 i‡(
	`LIST_FIND
(&
hñ≥rs
, 
hñ≥r_cmp
, 
ù_«t_hñ≥r
 *,&
me
->
tu∂e
))

414 
ªt
 = -
EBUSY
;

416 
	`li°_¥ïíd
(&
hñ≥rs
, 
me
);

417 
	`WRITE_UNLOCK
(&
ù_«t_lock
);

419  
ªt
;

420 
	}
}

423 
	$kûl_hñ≥r
(c⁄° 
ù_c⁄¡øck
 *
i
, *
hñ≥r
)

425 
ªt
;

427 
	`READ_LOCK
(&
ù_«t_lock
);

428 
ªt
 = (
i
->
«t
.
öfo
.
hñ≥r
 == helper);

429 
	`READ_UNLOCK
(&
ù_«t_lock
);

431  
ªt
;

432 
	}
}

434 
	$ù_«t_hñ≥r_uƒegi°î
(
ù_«t_hñ≥r
 *
me
)

436 
	`WRITE_LOCK
(&
ù_«t_lock
);

438 i‡(
	`LIST_FIND
(&
hñ≥rs
, 
hñ≥r_cmp
, 
ù_«t_hñ≥r
 *,&
me
->
tu∂e
)) {

439 
	`LIST_DELETE
(&
hñ≥rs
, 
me
);

441 
	`WRITE_UNLOCK
(&
ù_«t_lock
);

444 
	`synchr⁄ize_√t
();

453 
	`ù_˘_£À˘ive_˛ónup
(
kûl_hñ≥r
, 
me
);

454 
	}
}

	@ip_nat_irc.c

19 
	~<löux/moduÀ.h
>

20 
	~<löux/√tfûãr_ùv4.h
>

21 
	~<löux/ù.h
>

22 
	~<löux/t˝.h
>

23 
	~<löux/kî√l.h
>

24 
	~<√t/t˝.h
>

25 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

26 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

27 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

28 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_úc.h
>

29 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

32 
	#DEBUGP
 
¥ötk


	)

34 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

37 
	#MAX_PORTS
 8

	)

38 
	gp‹ts
[
MAX_PORTS
];

39 
	gp‹ts_c
;

41 
MODULE_AUTHOR
("Harald Welte <laforge@gnumonks.org>");

42 
MODULE_DESCRIPTION
("IRC (DCC) NAT helper");

43 
MODULE_LICENSE
("GPL");

44 
MODULE_PARM
(
p‹ts
, "1-" 
__MODULE_STRING
(
MAX_PORTS
) "i");

45 
MODULE_PARM_DESC
(
p‹ts
, "portÇumbers of IRC servers");

48 
DECLARE_LOCK_EXTERN
(
ù_úc_lock
);

53 
	$úc_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

54 
hooknum
,

55 
ù_c⁄¡øck
 *
˘
,

56 
ù_«t_öfo
 *
öfo
)

58 
ù_«t_mu…i_ønge
 
mr
;

59 
u_öt32_t
 
√wd°ù
, 
√w§cù
, 
√wù
;

61 
ù_c⁄¡øck
 *
ma°î
 = 
	`ma°î_˘
(
˘
);

63 
	`IP_NF_ASSERT
(
öfo
);

64 
	`IP_NF_ASSERT
(
ma°î
);

66 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))));

68 
	`DEBUGP
("nat_expected: We haveá connection!\n");

70 
√wd°ù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
;

71 
√w§cù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
;

72 
	`DEBUGP
("nat_expected: DCC cmd. %u.%u.%u.%u->%u.%u.%u.%u\n",

73 
	`NIPQUAD
(
√w§cù
), NIPQUAD(
√wd°ù
));

75 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
)

76 
√wù
 = 
√w§cù
;

78 
√wù
 = 
√wd°ù
;

80 
	`DEBUGP
("«t_ex≥˘ed: IPÅÿ%u.%u.%u.%u\n", 
	`NIPQUAD
(
√wù
));

82 
mr
.
øngesize
 = 1;

84 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
;

85 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
√wù
;

87  
	`ù_«t_£tup_öfo
(
˘
, &
mr
, 
hooknum
);

88 
	}
}

90 
	$úc_d©a_fixup
(c⁄° 
ù_˘_úc_ex≥˘
 *
˘_úc_öfo
,

91 
ù_c⁄¡øck
 *
˘
,

92 
sk_buff
 **
pskb
,

93 
ù_c⁄¡øck_öfo
 
˘öfo
,

94 
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
)

96 
u_öt32_t
 
√wù
;

97 
ù_c⁄¡øck_tu∂e
 
t
;

98 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

99 
t˝hdr
 *
t˝h
 = (*Ë
ùh
 + iph->
ihl
 * 4;

100 
u_öt16_t
 
p‹t
;

103 
buf„r
[18];

105 
	`MUST_BE_LOCKED
(&
ù_úc_lock
);

107 
	`DEBUGP
("IRC_NAT: info (seq %u + %u) in %u\n",

108 
ex≥˘
->
£q
, 
˘_úc_öfo
->
Àn
,

109 
	`¡ohl
(
t˝h
->
£q
));

111 
√wù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
;

119 
t
 = 
ex≥˘
->
tu∂e
;

120 
t
.
d°
.
ù
 = 
√wù
;

121 
p‹t
 = 
˘_úc_öfo
->port;Öort != 0;Öort++) {

122 
t
.
d°
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(port);

123 i‡(
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
ex≥˘
, &
t
) == 0) {

124 
	`DEBUGP
("usögÖ‹à%d", 
p‹t
);

129 i‡(
p‹t
 == 0)

145 
	`•rötf
(
buf„r
, "%u %u", 
	`¡ohl
(
√wù
), 
p‹t
);

146 
	`DEBUGP
("ip_nat_irc: Inserting '%s' == %u.%u.%u.%u,Öort %u\n",

147 
buf„r
, 
	`NIPQUAD
(
√wù
), 
p‹t
);

149  
	`ù_«t_m™gÀ_t˝_∑ckë
(
pskb
, 
˘
, 
˘öfo
,

150 
ex≥˘
->
£q
 - 
	`¡ohl
(
t˝h
->seq),

151 
˘_úc_öfo
->
Àn
, 
buf„r
,

152 
	`°æí
(
buf„r
));

153 
	}
}

155 
	$hñp
(
ù_c⁄¡øck
 *
˘
,

156 
ù_c⁄¡øck_ex≥˘
 *
exp
,

157 
ù_«t_öfo
 *
öfo
,

158 
ù_c⁄¡øck_öfo
 
˘öfo
,

159 
hooknum
,

160 
sk_buff
 **
pskb
)

162 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

163 
t˝hdr
 *
t˝h
 = (*Ë
ùh
 + iph->
ihl
 * 4;

164 
d©Æí
;

165 
dú
;

166 
ù_˘_úc_ex≥˘
 *
˘_úc_öfo
;

168 i‡(!
exp
)

169 
	`DEBUGP
("ip_nat_irc:ÇoÉxp!!");

171 
˘_úc_öfo
 = &
exp
->
hñp
.
exp_úc_öfo
;

175 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

176 i‡(!((
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

177 || (
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
))) {

178 
	`DEBUGP
("nat_irc: NotÅouching dir %sát hook %s\n",

179 
dú
 =
IP_CT_DIR_ORIGINAL
 ? "ORIG" : "REPLY",

180 
hooknum
 =
NF_IP_POST_ROUTING
 ? "POSTROUTING"

181 : 
hooknum
 =
NF_IP_PRE_ROUTING
 ? "PREROUTING"

182 : 
hooknum
 =
NF_IP_LOCAL_OUT
 ? "OUTPUT" : "???");

183  
NF_ACCEPT
;

185 
	`DEBUGP
("got beyondÇotÅouching\n");

187 
d©Æí
 = (*
pskb
)->
Àn
 - 
ùh
->
ihl
 * 4 - 
t˝h
->
doff
 * 4;

188 
	`LOCK_BH
(&
ù_úc_lock
);

190 i‡(
	`bëwìn
(
exp
->
£q
 + 
˘_úc_öfo
->
Àn
,

191 
	`¡ohl
(
t˝h
->
£q
),

192 
	`¡ohl
(
t˝h
->
£q
Ë+ 
d©Æí
)) {

193 i‡(!
	`úc_d©a_fixup
(
˘_úc_öfo
, 
˘
, 
pskb
, 
˘öfo
, 
exp
)) {

194 
	`UNLOCK_BH
(&
ù_úc_lock
);

195  
NF_DROP
;

200 i‡(
	`√t_øãlimô
()) {

201 
¥ötk


203 
exp
->
£q
, 
˘_úc_öfo
->
Àn
,

204 
	`¡ohl
(
t˝h
->
£q
),

205 
	`¡ohl
(
t˝h
->
£q
Ë+ 
d©Æí
);

207 
	`UNLOCK_BH
(&
ù_úc_lock
);

208  
NF_DROP
;

210 
	`UNLOCK_BH
(&
ù_úc_lock
);

212  
NF_ACCEPT
;

213 
	}
}

215 
ù_«t_hñ≥r
 
	gù_«t_úc_hñ≥rs
[
MAX_PORTS
];

216 
	gúc_«mes
[
MAX_PORTS
][10];

220 
	$föi
()

222 
i
;

224 
i
 = 0; i < 
p‹ts_c
; i++) {

225 
	`DEBUGP
("ip_nat_irc: unregistering helper forÖort %d\n",

226 
p‹ts
[
i
]);

227 
	`ù_«t_hñ≥r_uƒegi°î
(&
ù_«t_úc_hñ≥rs
[
i
]);

229 
	}
}

231 
__öô
 
	$öô
()

233 
ªt
 = 0;

234 
i
;

235 
ù_«t_hñ≥r
 *
hÕr
;

236 *
tm≤ame
;

238 i‡(
p‹ts
[0] == 0) {

239 
p‹ts
[0] = 
IRC_PORT
;

242 
i
 = 0; (ò< 
MAX_PORTS
Ë&& 
p‹ts
[i] != 0; i++) {

243 
hÕr
 = &
ù_«t_úc_hñ≥rs
[
i
];

244 
hÕr
->
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

245 
hÕr
->
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[
i
]);

246 
hÕr
->
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

247 
hÕr
->
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

248 
hÕr
->
hñp
 = help;

249 
hÕr
->
Êags
 = 0;

250 
hÕr
->
me
 = 
THIS_MODULE
;

251 
hÕr
->
ex≥˘
 = 
úc_«t_ex≥˘ed
;

253 
tm≤ame
 = &
úc_«mes
[
i
][0];

254 i‡(
p‹ts
[
i
] =
IRC_PORT
)

255 
	`•rötf
(
tm≤ame
, "irc");

257 
	`•rötf
(
tm≤ame
, "úc-%d", 
i
);

258 
hÕr
->
«me
 = 
tm≤ame
;

260 
DEBUGP


262 
p‹ts
[
i
], 
hÕr
->
«me
);

263 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(
hÕr
);

265 i‡(
ªt
) {

266 
¥ötk


268 
p‹ts
[
i
]);

269 
	`föi
();

272 
p‹ts_c
++;

274  
ªt
;

275 
	}
}

277 
NEEDS_CONNTRACK
(
úc
);

279 
moduÀ_öô
(
öô
);

280 
moduÀ_exô
(
föi
);

	@ip_nat_irc.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_nat_pptp.c

35 
	~<löux/c⁄fig.h
>

36 
	~<löux/moduÀ.h
>

37 
	~<löux/ù.h
>

38 
	~<löux/t˝.h
>

39 
	~<√t/t˝.h
>

40 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

41 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

42 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

43 
	~<löux/√tfûãr_ùv4/ù_«t_µç.h
>

44 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

45 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_¥Ÿo_gª.h
>

46 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_µç.h
>

48 
	#IP_NAT_PPTP_VERSION
 "1.5"

	)

50 
MODULE_LICENSE
("GPL");

51 
MODULE_AUTHOR
("Harald Welte <laforge@gnumonks.org>");

52 
MODULE_DESCRIPTION
("Netfilter NAT helper module for PPTP");

56 
	~"ù_c⁄¡øck_µç_¥iv.h
"

57 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(
KERN_DEBUG
 
__FILE__
 ":" 
__FUNCTION__
 \

58 ": " 
f‹m©
, ## 
¨gs
)

	)

60 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

64 
	$µç_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

65 
hooknum
,

66 
ù_c⁄¡øck
 *
˘
,

67 
ù_«t_öfo
 *
öfo
)

69 
ù_c⁄¡øck
 *
ma°î
 = 
	`ma°î_˘
(
˘
);

70 
ù_«t_mu…i_ønge
 
mr
;

71 
ù_˘_µç_ma°î
 *
˘_µç_öfo
;

72 
ù_«t_µç
 *
«t_µç_öfo
;

73 
u_öt32_t
 
√wù
, 
√wcid
;

74 
ªt
;

76 
	`IP_NF_ASSERT
(
öfo
);

77 
	`IP_NF_ASSERT
(
ma°î
);

78 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))));

80 
	`DEBUGP
("we haveá connection!\n");

82 
	`LOCK_BH
(&
ù_µç_lock
);

83 
˘_µç_öfo
 = &
ma°î
->
hñp
.ct_pptp_info;

84 
«t_µç_öfo
 = &
ma°î
->
«t
.
hñp
.nat_pptp_info;

88 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_DST
) {

89 
	`DEBUGP
("completingÅuples with NAT info \n");

91 i‡(
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
u
.
gª
.
key
 ==

92 
	`ht⁄l
(
˘_µç_öfo
->
∑c_ˇŒ_id
)) {

94 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
u
.
gª
.
key
 =

95 
	`ht⁄l
(
«t_µç_öfo
->
≤s_ˇŒ_id
);

96 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
u
.
gª
.
key
 =

97 
	`ht⁄l
(
«t_µç_öfo
->
≤s_ˇŒ_id
);

98 
√wù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
;

99 
√wcid
 = 
	`ht⁄l
(
«t_µç_öfo
->
∑c_ˇŒ_id
);

102 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
u
.
gª
.
key
 =

103 
	`ht⁄l
(
«t_µç_öfo
->
∑c_ˇŒ_id
);

104 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
u
.
gª
.
key
 =

105 
	`ht⁄l
(
«t_µç_öfo
->
∑c_ˇŒ_id
);

106 
√wù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
;

107 
√wcid
 = 
	`ht⁄l
(
«t_µç_öfo
->
≤s_ˇŒ_id
);

110 i‡(
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
u
.
gª
.
key
 ==

111 
	`ht⁄l
(
˘_µç_öfo
->
∑c_ˇŒ_id
)) {

113 
√wù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
;

114 
√wcid
 = 
	`ht⁄l
(
˘_µç_öfo
->
≤s_ˇŒ_id
);

118 
√wù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
;

119 
√wcid
 = 
	`ht⁄l
(
˘_µç_öfo
->
∑c_ˇŒ_id
);

123 
mr
.
øngesize
 = 1;

124 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
 | 
IP_NAT_RANGE_PROTO_SPECIFIED
;

125 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
√wù
;

126 
mr
.
ønge
[0].
mö
 = mr.ønge[0].
max
 =

127 ((
ù_c⁄¡øck_m™ù_¥Ÿo
 ) { 
√wcid
 });

128 
	`DEBUGP
("change ipÅo %u.%u.%u.%u\n",

129 
	`NIPQUAD
(
√wù
));

130 
	`DEBUGP
("ch™gêkeyÅÿ0x%x\n", 
	`¡ohl
(
√wcid
));

131 
ªt
 = 
	`ù_«t_£tup_öfo
(
˘
, &
mr
, 
hooknum
);

133 
	`UNLOCK_BH
(&
ù_µç_lock
);

135  
ªt
;

137 
	}
}

140 
ölöe
 

141 
	$µç_outbound_pkt
(
sk_buff
 **
pskb
,

142 
ù_c⁄¡øck
 *
˘
,

143 
ù_c⁄¡øck_öfo
 
˘öfo
,

144 
ù_c⁄¡øck_ex≥˘
 *
exp
)

147 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

148 
t˝hdr
 *
t˝h
 = (*Ë
ùh
 + iph->
ihl
*4;

149 
µç_pkt_hdr
 *
µçh
 = (pptp_pkt_hdr *)

150 ((*)
t˝h
 +Å˝h->
doff
*4);

152 
P±pC⁄åﬁHódî
 *
˘lh
;

153 
µç_˘æ_uni⁄
 
µçReq
;

154 
ù_˘_µç_ma°î
 *
˘_µç_öfo
 = &
˘
->
hñp
.ct_pptp_info;

155 
ù_«t_µç
 *
«t_µç_öfo
 = &
˘
->
«t
.
hñp
.nat_pptp_info;

157 
u_öt16_t
 
msg
, *
cid
 = 
NULL
, 
√w_ˇŒid
;

160 
˘lh
 = (
P±pC⁄åﬁHódî
 *Ë((*Ë
µçh
 + (*pptph));

161 
µçReq
.
øwªq
 = (*Ë((*Ë
˘lh
 + (*ctlh));

163 
√w_ˇŒid
 = 
	`ht⁄s
(
˘_µç_öfo
->
≤s_ˇŒ_id
);

165 
msg
 = 
	`¡ohs
(
˘lh
->
mesßgeTy≥
)) {

166 
PPTP_OUT_CALL_REQUEST
:

167 
cid
 = &
µçReq
.
o¸eq
->
ˇŒID
;

174 
«t_µç_öfo
->
≤s_ˇŒ_id
 = 
˘_µç_öfo
->pns_call_id;

178 
√w_ˇŒid
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
u
.
t˝
.
p‹t
;

181 
˘_µç_öfo
->
≤s_ˇŒ_id
 = 
	`¡ohs
(
√w_ˇŒid
);

183 
PPTP_IN_CALL_REPLY
:

184 
cid
 = &
µçReq
.
i¸eq
->
ˇŒID
;

186 
PPTP_CALL_CLEAR_REQUEST
:

187 
cid
 = &
µçReq
.
˛ºeq
->
ˇŒID
;

190 
	`DEBUGP
("unknow¿outboundÖackë 0x%04x:%s\n", 
msg
,

191 (
msg
 <
PPTP_MSG_MAX
)? 
°rMName
[msg]:strMName[0]);

194 
PPTP_SET_LINK_INFO
:

196 
PPTP_START_SESSION_REQUEST
:

197 
PPTP_START_SESSION_REPLY
:

198 
PPTP_STOP_SESSION_REQUEST
:

199 
PPTP_STOP_SESSION_REPLY
:

200 
PPTP_ECHO_REQUEST
:

201 
PPTP_ECHO_REPLY
:

203  
NF_ACCEPT
;

206 
	`IP_NF_ASSERT
(
cid
);

208 
	`DEBUGP
("altering call id from 0x%04xÅo 0x%04x\n",

209 
	`¡ohs
(*
cid
),Çtohs(
√w_ˇŒid
));

212 
	`ù_«t_m™gÀ_t˝_∑ckë
(
pskb
, 
˘
, 
˘öfo
, (*)
cid
 - (*)
µçh
,

213 (
√w_ˇŒid
), (*)&new_callid,

214 (
√w_ˇŒid
));

216  
NF_ACCEPT
;

217 
	}
}

220 
ölöe
 

221 
	$µç_öbound_pkt
(
sk_buff
 **
pskb
,

222 
ù_c⁄¡øck
 *
˘
,

223 
ù_c⁄¡øck_öfo
 
˘öfo
,

224 
ù_c⁄¡øck_ex≥˘
 *
ﬁdexp
)

226 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

227 
t˝hdr
 *
t˝h
 = (*Ë
ùh
 + iph->
ihl
*4;

228 
µç_pkt_hdr
 *
µçh
 = (pptp_pkt_hdr *)

229 ((*)
t˝h
 +Å˝h->
doff
*4);

231 
P±pC⁄åﬁHódî
 *
˘lh
;

232 
µç_˘æ_uni⁄
 
µçReq
;

233 
ù_˘_µç_ma°î
 *
˘_µç_öfo
 = &
˘
->
hñp
.ct_pptp_info;

234 
ù_«t_µç
 *
«t_µç_öfo
 = &
˘
->
«t
.
hñp
.nat_pptp_info;

236 
u_öt16_t
 
msg
, 
√w_cid
 = 0, 
√w_pcid
, *
pcid
 = 
NULL
, *
cid
 = NULL;

237 
u_öt32_t
 
ﬁd_d°_ù
;

239 
ù_c⁄¡øck_tu∂e
 
t
, 
öv_t
;

240 
ù_c⁄¡øck_tu∂e
 *
‹ig_t
, *
ª∂y_t
;

243 
˘lh
 = (
P±pC⁄åﬁHódî
 *Ë((*Ë
µçh
 + (*pptph));

244 
µçReq
.
øwªq
 = (*Ë((*Ë
˘lh
 + (*ctlh));

246 
√w_pcid
 = 
	`ht⁄s
(
«t_µç_öfo
->
≤s_ˇŒ_id
);

248 
msg
 = 
	`¡ohs
(
˘lh
->
mesßgeTy≥
)) {

249 
PPTP_OUT_CALL_REPLY
:

250 
pcid
 = &
µçReq
.
oˇck
->
≥îsCÆlID
;

251 
cid
 = &
µçReq
.
oˇck
->
ˇŒID
;

252 i‡(!
ﬁdexp
) {

253 
	`DEBUGP
("outcall butÇoÉxpectation\n");

256 
ﬁd_d°_ù
 = 
ﬁdexp
->
tu∂e
.
d°
.
ù
;

257 
t
 = 
ﬁdexp
->
tu∂e
;

258 
	`övît_tu∂ïr
(&
öv_t
, &
t
);

261 
«t_µç_öfo
->
∑c_ˇŒ_id
 = 
˘_µç_öfo
->pac_call_id;

264 
‹ig_t
 = &
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
;

265 
ª∂y_t
 = &
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
;

266 i‡(
t
.
§c
.
ù
 =
‹ig_t
->§c.ù &&Å.
d°
.ip == orig_t->dst.ip) {

268 
t
.
§c
.
u
.
gª
.
key
 = 
	`ht⁄l
(
«t_µç_öfo
->
≤s_ˇŒ_id
);

269 
t
.
d°
.
u
.
gª
.
key
 = 
	`ht⁄l
(
˘_µç_öfo
->
∑c_ˇŒ_id
);

270 
öv_t
.
§c
.
ù
 = 
ª∂y_t
->src.ip;

271 
öv_t
.
d°
.
ù
 = 
ª∂y_t
->dst.ip;

272 
öv_t
.
§c
.
u
.
gª
.
key
 = 
	`ht⁄l
(
«t_µç_öfo
->
∑c_ˇŒ_id
);

273 
öv_t
.
d°
.
u
.
gª
.
key
 = 
	`ht⁄l
(
˘_µç_öfo
->
≤s_ˇŒ_id
);

276 
t
.
§c
.
u
.
gª
.
key
 = 
	`ht⁄l
(
«t_µç_öfo
->
∑c_ˇŒ_id
);

277 
t
.
d°
.
u
.
gª
.
key
 = 
	`ht⁄l
(
˘_µç_öfo
->
≤s_ˇŒ_id
);

278 
öv_t
.
§c
.
ù
 = 
‹ig_t
->src.ip;

279 
öv_t
.
d°
.
ù
 = 
‹ig_t
->dst.ip;

280 
öv_t
.
§c
.
u
.
gª
.
key
 = 
	`ht⁄l
(
«t_µç_öfo
->
≤s_ˇŒ_id
);

281 
öv_t
.
d°
.
u
.
gª
.
key
 = 
	`ht⁄l
(
˘_µç_öfo
->
∑c_ˇŒ_id
);

284 i‡(!
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
ﬁdexp
, &
t
)) {

285 
	`DEBUGP
("successfully changedÉxpect\n");

287 
	`DEBUGP
("can't changeÉxpect\n");

289 
	`ù_˘_gª_keym≠_ch™ge
(
ﬁdexp
->
¥Ÿo
.
gª
.
keym≠_‹ig
, &
t
);

290 
	`ù_˘_gª_keym≠_ch™ge
(
ﬁdexp
->
¥Ÿo
.
gª
.
keym≠_ª∂y
, &
öv_t
);

292 
PPTP_IN_CALL_CONNECT
:

293 
pcid
 = &
µçReq
.
icc⁄
->
≥îsCÆlID
;

294 i‡(!
ﬁdexp
)

296 
ﬁd_d°_ù
 = 
ﬁdexp
->
tu∂e
.
d°
.
ù
;

297 
t
 = 
ﬁdexp
->
tu∂e
;

300 i‡(
t
.
d°
.
ù
 =
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.dst.ip) {

302 
t
.
§c
.
ù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.ip;

305 
t
.
d°
.
ù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.dst.ip;

308 i‡(!
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
ﬁdexp
, &
t
)) {

309 
	`DEBUGP
("successfully changedÉxpect\n");

311 
	`DEBUGP
("can't changeÉxpect\n");

314 
PPTP_IN_CALL_REQUEST
:

317 
PPTP_WAN_ERROR_NOTIFY
:

318 
pcid
 = &
µçReq
.
w™îr
->
≥îsCÆlID
;

320 
PPTP_CALL_DISCONNECT_NOTIFY
:

321 
pcid
 = &
µçReq
.
disc
->
ˇŒID
;

325 
	`DEBUGP
("unknown inboundÖacket %s\n",

326 (
msg
 <
PPTP_MSG_MAX
)? 
°rMName
[msg]:strMName[0]);

329 
PPTP_START_SESSION_REQUEST
:

330 
PPTP_START_SESSION_REPLY
:

331 
PPTP_STOP_SESSION_REQUEST
:

332 
PPTP_STOP_SESSION_REPLY
:

333 
PPTP_ECHO_REQUEST
:

334 
PPTP_ECHO_REPLY
:

336  
NF_ACCEPT
;

340 
	`IP_NF_ASSERT
(
pcid
);

341 
	`DEBUGP
("alteringÖeer call id from 0x%04xÅo 0x%04x\n",

342 
	`¡ohs
(*
pcid
),Çtohs(
√w_pcid
));

343 
	`ù_«t_m™gÀ_t˝_∑ckë
(
pskb
, 
˘
, 
˘öfo
, (*)
pcid
 - (*)
µçh
,

344 (
√w_pcid
), (*)&new_pcid,

345 (
√w_pcid
));

347 i‡(
√w_cid
) {

348 
	`IP_NF_ASSERT
(
cid
);

349 
	`DEBUGP
("altering call id from 0x%04xÅo 0x%04x\n",

350 
	`¡ohs
(*
cid
),Çtohs(
√w_cid
));

351 
	`ù_«t_m™gÀ_t˝_∑ckë
(
pskb
, 
˘
, 
˘öfo
,

352 (*)
cid
 - (*)
µçh
,

353 (
√w_cid
), (*)&new_cid,

354 (
√w_cid
));

358  
NF_ACCEPT
;

359 
	}
}

362 
	$t˝_hñp
(
ù_c⁄¡øck
 *
˘
,

363 
ù_c⁄¡øck_ex≥˘
 *
exp
,

364 
ù_«t_öfo
 *
öfo
,

365 
ù_c⁄¡øck_öfo
 
˘öfo
,

366 
hooknum
, 
sk_buff
 **
pskb
)

368 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

369 
t˝hdr
 *
t˝h
 = (*Ë
ùh
 + iph->
ihl
*4;

370 
d©Æí
 = (*
pskb
)->
Àn
 - 
ùh
->
ihl
*4 - 
t˝h
->
doff
*4;

371 
µç_pkt_hdr
 *
µçh
;

373 
dú
;

375 
	`DEBUGP
("entering\n");

379 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

380 i‡(!((
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC


381 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

382 || (
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_DST


383 && 
dú
 =
IP_CT_DIR_REPLY
))) {

384 
	`DEBUGP
("NotÅouching dir %sát hook %s\n",

385 
dú
 =
IP_CT_DIR_ORIGINAL
 ? "ORIG" : "REPLY",

386 
hooknum
 =
NF_IP_POST_ROUTING
 ? "POSTROUTING"

387 : 
hooknum
 =
NF_IP_PRE_ROUTING
 ? "PREROUTING"

388 : 
hooknum
 =
NF_IP_LOCAL_OUT
 ? "OUTPUT"

389 : 
hooknum
 =
NF_IP_LOCAL_IN
 ? "INPUT" : "???");

390  
NF_ACCEPT
;

394 i‡(
d©Æí
 < (
µç_pkt_hdr
)+

395 (
P±pC⁄åﬁHódî
)) {

396 
	`DEBUGP
("pptpÖacketÅoo short\n");

397  
NF_ACCEPT
;

400 
µçh
 = (
µç_pkt_hdr
 *Ë((*)
t˝h
 +Å˝h->
doff
*4);

403 i‡(
	`¡ohs
(
µçh
->
∑ckëTy≥
Ë!
PPTP_PACKET_CONTROL
 ||

404 
	`¡ohl
(
µçh
->
magicCookõ
Ë!
PPTP_MAGIC_COOKIE
) {

405 
	`DEBUGP
("notáÖptp controlÖacket\n");

406  
NF_ACCEPT
;

409 
	`LOCK_BH
(&
ù_µç_lock
);

411 i‡(
dú
 =
IP_CT_DIR_ORIGINAL
) {

413 
	`µç_outbound_pkt
(
pskb
, 
˘
, 
˘öfo
, 
exp
);

416 
	`µç_öbound_pkt
(
pskb
, 
˘
, 
˘öfo
, 
exp
);

419 
	`UNLOCK_BH
(&
ù_µç_lock
);

421  
NF_ACCEPT
;

422 
	}
}

425 
ù_«t_hñ≥r
 
	gµç_t˝_hñ≥r
 = {

426 .
li°
 = { 
NULL
, NULL },

427 .
	g«me
 = "pptp",

428 .
	gÊags
 = 
IP_NAT_HELPER_F_ALWAYS
,

429 .
	gme
 = 
THIS_MODULE
,

430 .
	gtu∂e
 = { .
§c
 = { .
ù
 = 0,

431 .
	gu
 = { .
t˝
 = { .
p‹t
 =

432 
__c⁄°™t_ht⁄s
(
PPTP_CONTROL_PORT
) }

435 .
	gd°
 = { .
ù
 = 0,

436 .
	gu
 = { .
Æl
 = 0 },

437 .
	g¥Ÿ⁄um
 = 
IPPROTO_TCP


441 .
	gmask
 = { .
§c
 = { .
ù
 = 0,

442 .
	gu
 = { .
t˝
 = { .
p‹t
 = 0xFFFF } }

444 .
	gd°
 = { .
ù
 = 0,

445 .
	gu
 = { .
Æl
 = 0 },

446 .
	g¥Ÿ⁄um
 = 0xFFFF

449 .
	ghñp
 = 
t˝_hñp
,

450 .
	gex≥˘
 = 
µç_«t_ex≥˘ed


454 
__öô
 
	$öô
()

456 
	`DEBUGP
("%s:Ñegi°îög NAT hñ≥r\n", 
__FILE__
);

458 i‡(
	`ù_«t_hñ≥r_ªgi°î
(&
µç_t˝_hñ≥r
)) {

459 
	`¥ötk
(
KERN_ERR
 "UnableÅoÑegister NATápplication helper "

461  -
EIO
;

464 
	`¥ötk
("ù_«t_µç vîsi⁄ %†lﬂded\n", 
IP_NAT_PPTP_VERSION
);

466 
	}
}

468 
__exô
 
	$föi
()

471 
	`DEBUGP
("cleanup_module\n" );

472 
	`ù_«t_hñ≥r_uƒegi°î
(&
µç_t˝_hñ≥r
);

473 
	`¥ötk
("ù_«t_µç vîsi⁄ %†u∆ﬂded\n", 
IP_NAT_PPTP_VERSION
);

474 
	}
}

476 
moduÀ_öô
(
öô
);

477 
moduÀ_exô
(
föi
);

	@ip_nat_pptp.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_nat_proto_esp.c

29 
	~<löux/ty≥s.h
>

30 
	~<löux/öô.h
>

31 
	~<löux/√tfûãr.h
>

32 
	~<löux/ù.h
>

33 
	~<löux/if.h
>

35 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

36 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

37 
	~<löux/√tfûãr_ùv4/ù_«t_¥Ÿocﬁ.h
>

39 
	#TEMP_SPI_START
 1500

	)

42 
	$e•_ö_ønge
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

43 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

44 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
mö
,

45 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
max
)

51 
	}
}

54 
	$e•_unique_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

55 c⁄° 
ù_«t_ønge
 *
ønge
,

56 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

57 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

59 
u_öt16_t
 
id
 = 0, *
t•i
;

60 
ønge_size
 = 0x40;

61 
i
;

68 i‡(!(
ønge
->
Êags
 & 
IP_NAT_RANGE_PROTO_SPECIFIED
))

69 
ønge_size
 = 0x40;

71 i‡–
m™ùty≥
 =
IP_NAT_MANIP_SRC
 ) {

72 
t•i
 = &
tu∂e
->
§c
.
u
.
e•
.
•i
;

74 
t•i
 = &
tu∂e
->
d°
.
u
.
e•
.
•i
;

77 
i
 = 0; i < 
ønge_size
; i++, 
id
++) {

78 *
t•i
 = 
TEMP_SPI_START
 + (
id
 % 
ønge_size
);

79 i‡(!
	`ù_«t_u£d_tu∂e
(
tu∂e
, 
c⁄¡øck
))

84 
	}
}

87 
	$e•_m™ù_pkt
(
sk_buff
 **
pskb
,

88 
hdroff
,

89 c⁄° 
ù_c⁄¡øck_m™ù
 *
m™ù
,

90 
ù_«t_m™ù_ty≥
 
m™ùty≥
)

92 
u_öt32_t
 
ﬁdù
;

95 i‡(
m™ùty≥
 =
IP_NAT_MANIP_SRC
) {

97 
ﬁdù
 = (*
pskb
)->
nh
.
ùh
->
ßddr
;

105 
ﬁdù
 = (*
pskb
)->
nh
.
ùh
->
daddr
;

113 
	}
}

116 
	$e•_¥öt
(*
buf„r
,

117 c⁄° 
ù_c⁄¡øck_tu∂e
 *
m©ch
,

118 c⁄° 
ù_c⁄¡øck_tu∂e
 *
mask
)

120 
Àn
 = 0;

124 i‡(
mask
->
§c
.
u
.
e•
.
•i
)

125 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "spi=%u ",

126 
	`¡ohs
(
m©ch
->
§c
.
u
.
e•
.
•i
));

128  
Àn
;

129 
	}
}

132 
	$e•_¥öt_ønge
(*
buf„r
, c⁄° 
ù_«t_ønge
 *
ønge
)

136 i‡(
ønge
->
mö
.
e•
.
•i
 != 0 ) {

137  
	`•rötf
(
buf„r
, "port %u ",

138 
	`¡ohs
(
ønge
->
mö
.
e•
.
•i
));

139 } i‡–
ønge
->
max
.
e•
.
•i
 != 0 ) {

140  
	`•rötf
(
buf„r
, "ports %u-%u ",

141 
	`¡ohs
(
ønge
->
mö
.
e•
.
•i
),

142 
	`¡ohs
(
ønge
->
max
.
e•
.
•i
));

145 
	}
}

147 
ù_«t_¥Ÿocﬁ
 
	gù_«t_¥Ÿocﬁ_e•


148 { { 
NULL
, NULL }, "ESP", 
IPPROTO_ESP
,

149 
e•_m™ù_pkt
,

150 
e•_ö_ønge
,

151 
e•_unique_tu∂e
,

152 
e•_¥öt
,

153 
e•_¥öt_ønge


	@ip_nat_proto_icmp.c

9 
	~<löux/ty≥s.h
>

10 
	~<löux/öô.h
>

11 
	~<löux/√tfûãr.h
>

12 
	~<löux/ù.h
>

13 
	~<löux/icmp.h
>

14 
	~<löux/if.h
>

16 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

17 
	~<löux/√tfûãr_ùv4/ù_«t_c‹e.h
>

18 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

19 
	~<löux/√tfûãr_ùv4/ù_«t_¥Ÿocﬁ.h
>

22 
	$icmp_ö_ønge
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

23 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

24 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
mö
,

25 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
max
)

27  (
tu∂e
->
§c
.
u
.
icmp
.
id
 >
mö
->icmp.id

28 && 
tu∂e
->
§c
.
u
.
icmp
.
id
 <
max
->icmp.id);

29 
	}
}

32 
	$icmp_unique_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

33 c⁄° 
ù_«t_ønge
 *
ønge
,

34 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

35 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

37 
u_öt16_t
 
id
;

38 
ønge_size


39 ()
ønge
->
max
.
icmp
.
id
 -Ñ™ge->
mö
.icmp.id + 1;

40 
i
;

43 i‡(!(
ønge
->
Êags
 & 
IP_NAT_RANGE_PROTO_SPECIFIED
))

44 
ønge_size
 = 0xFFFF;

46 
i
 = 0; i < 
ønge_size
; i++, 
id
++) {

47 
tu∂e
->
§c
.
u
.
icmp
.
id
 = 
ønge
->
mö
.icmp.id + (id % 
ønge_size
);

48 i‡(!
	`ù_«t_u£d_tu∂e
(
tu∂e
, 
c⁄¡øck
))

52 
	}
}

55 
	$icmp_m™ù_pkt
(
sk_buff
 **
pskb
,

56 
hdroff
,

57 c⁄° 
ù_c⁄¡øck_m™ù
 *
m™ù
,

58 
ù_«t_m™ù_ty≥
 
m™ùty≥
)

60 
icmphdr
 *
hdr
;

62 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, 
hdroff
 + (*
hdr
)))

65 
hdr
 = (*)(*
pskb
)->
d©a
 + 
hdroff
;

67 
hdr
->
checksum
 = 
	`ù_«t_chót_check
(hdr->
un
.
echo
.
id
 ^ 0xFFFF,

68 
m™ù
->
u
.
icmp
.
id
,

69 
hdr
->
checksum
);

70 
hdr
->
un
.
echo
.
id
 = 
m™ù
->
u
.
icmp
.id;

72 
	}
}

75 
	$icmp_¥öt
(*
buf„r
,

76 c⁄° 
ù_c⁄¡øck_tu∂e
 *
m©ch
,

77 c⁄° 
ù_c⁄¡øck_tu∂e
 *
mask
)

79 
Àn
 = 0;

81 i‡(
mask
->
§c
.
u
.
icmp
.
id
)

82 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "id=%u ",

83 
	`¡ohs
(
m©ch
->
§c
.
u
.
icmp
.
id
));

85 i‡(
mask
->
d°
.
u
.
icmp
.
ty≥
)

86 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "type=%u ",

87 
	`¡ohs
(
m©ch
->
d°
.
u
.
icmp
.
ty≥
));

89 i‡(
mask
->
d°
.
u
.
icmp
.
code
)

90 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "code=%u ",

91 
	`¡ohs
(
m©ch
->
d°
.
u
.
icmp
.
code
));

93  
Àn
;

94 
	}
}

97 
	$icmp_¥öt_ønge
(*
buf„r
, c⁄° 
ù_«t_ønge
 *
ønge
)

99 i‡(
ønge
->
mö
.
icmp
.
id
 !0 ||Ñ™ge->
max
.icmp.id != 0xFFFF)

100  
	`•rötf
(
buf„r
, "id %u-%u ",

101 
	`¡ohs
(
ønge
->
mö
.
icmp
.
id
),

102 
	`¡ohs
(
ønge
->
max
.
icmp
.
id
));

104 
	}
}

106 
ù_«t_¥Ÿocﬁ
 
	gù_«t_¥Ÿocﬁ_icmp


107 { { 
NULL
, NULL }, "ICMP", 
IPPROTO_ICMP
,

108 
icmp_m™ù_pkt
,

109 
icmp_ö_ønge
,

110 
icmp_unique_tu∂e
,

111 
icmp_¥öt
,

112 
icmp_¥öt_ønge


	@ip_nat_proto_tcp.c

9 
	~<löux/ty≥s.h
>

10 
	~<löux/öô.h
>

11 
	~<löux/√tfûãr.h
>

12 
	~<löux/ù.h
>

13 
	~<löux/t˝.h
>

14 
	~<löux/if.h
>

15 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

16 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

17 
	~<löux/√tfûãr_ùv4/ù_«t_¥Ÿocﬁ.h
>

18 
	~<löux/√tfûãr_ùv4/ù_«t_c‹e.h
>

21 
	$t˝_ö_ønge
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

22 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

23 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
mö
,

24 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
max
)

26 
u_öt16_t
 
p‹t
;

28 i‡(
m™ùty≥
 =
IP_NAT_MANIP_SRC
)

29 
p‹t
 = 
tu∂e
->
§c
.
u
.
t˝
.port;

31 
p‹t
 = 
tu∂e
->
d°
.
u
.
t˝
.port;

33  
	`¡ohs
(
p‹t
Ë>¡ohs(
mö
->
t˝
.port)

34 && 
	`¡ohs
(
p‹t
Ë<¡ohs(
max
->
t˝
.port);

35 
	}
}

38 
	$t˝_unique_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

39 c⁄° 
ù_«t_ønge
 *
ønge
,

40 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

41 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

43 
u_öt16_t
 
p‹t
, *
p‹çå
;

44 
ønge_size
, 
mö
, 
i
;

46 i‡(
m™ùty≥
 =
IP_NAT_MANIP_SRC
)

47 
p‹çå
 = &
tu∂e
->
§c
.
u
.
t˝
.
p‹t
;

49 
p‹çå
 = &
tu∂e
->
d°
.
u
.
t˝
.
p‹t
;

52 i‡(!(
ønge
->
Êags
 & 
IP_NAT_RANGE_PROTO_SPECIFIED
)) {

54 i‡(
m™ùty≥
 =
IP_NAT_MANIP_DST
)

58 i‡(
	`¡ohs
(*
p‹çå
) < 1024) {

60 i‡(
	`¡ohs
(*
p‹çå
)<512) {

61 
mö
 = 1;

62 
ønge_size
 = 511 - 
mö
 + 1;

64 
mö
 = 600;

65 
ønge_size
 = 1023 - 
mö
 + 1;

68 
mö
 = 1024;

69 
ønge_size
 = 65535 - 1024 + 1;

72 
mö
 = 
	`¡ohs
(
ønge
->mö.
t˝
.
p‹t
);

73 
ønge_size
 = 
	`¡ohs
(
ønge
->
max
.
t˝
.
p‹t
Ë- 
mö
 + 1;

76 
i
 = 0; i < 
ønge_size
; i++, 
p‹t
++) {

77 *
p‹çå
 = 
	`ht⁄s
(
mö
 + 
p‹t
 % 
ønge_size
);

78 i‡(!
	`ù_«t_u£d_tu∂e
(
tu∂e
, 
c⁄¡øck
)) {

83 
	}
}

86 
	$t˝_m™ù_pkt
(
sk_buff
 **
pskb
,

87 
hdroff
,

88 c⁄° 
ù_c⁄¡øck_m™ù
 *
m™ù
,

89 
ù_«t_m™ù_ty≥
 
m™ùty≥
)

91 
t˝hdr
 *
hdr
;

92 
u_öt32_t
 
ﬁdù
;

93 
u_öt16_t
 *
p‹çå
, 
ﬁdp‹t
;

94 
hdrsize
 = 8;

99 i‡((*
pskb
)->
Àn
 >
hdroff
 + (
t˝hdr
))

100 
hdrsize
 = (
t˝hdr
);

102 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, 
hdroff
 + 
hdrsize
))

105 
hdr
 = (*)(*
pskb
)->
d©a
 + 
hdroff
;

107 i‡(
m™ùty≥
 =
IP_NAT_MANIP_SRC
) {

109 
ﬁdù
 = (*
pskb
)->
nh
.
ùh
->
ßddr
;

110 
p‹çå
 = &
hdr
->
sour˚
;

113 
ﬁdù
 = (*
pskb
)->
nh
.
ùh
->
daddr
;

114 
p‹çå
 = &
hdr
->
de°
;

117 
ﬁdp‹t
 = *
p‹çå
;

118 *
p‹çå
 = 
m™ù
->
u
.
t˝
.
p‹t
;

120 i‡(
hdrsize
 < (*
hdr
))

123 
hdr
->
check
 = 
	`ù_«t_chót_check
(~
ﬁdù
, 
m™ù
->
ù
,

124 
	`ù_«t_chót_check
(
ﬁdp‹t
 ^ 0xFFFF,

125 
m™ù
->
u
.
t˝
.
p‹t
,

126 
hdr
->
check
));

128 
	}
}

131 
	$t˝_¥öt
(*
buf„r
,

132 c⁄° 
ù_c⁄¡øck_tu∂e
 *
m©ch
,

133 c⁄° 
ù_c⁄¡øck_tu∂e
 *
mask
)

135 
Àn
 = 0;

137 i‡(
mask
->
§c
.
u
.
t˝
.
p‹t
)

138 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "srcpt=%u ",

139 
	`¡ohs
(
m©ch
->
§c
.
u
.
t˝
.
p‹t
));

142 i‡(
mask
->
d°
.
u
.
t˝
.
p‹t
)

143 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "dstpt=%u ",

144 
	`¡ohs
(
m©ch
->
d°
.
u
.
t˝
.
p‹t
));

146  
Àn
;

147 
	}
}

150 
	$t˝_¥öt_ønge
(*
buf„r
, c⁄° 
ù_«t_ønge
 *
ønge
)

152 i‡(
ønge
->
mö
.
t˝
.
p‹t
 !0 ||Ñ™ge->
max
.tcp.port != 0xFFFF) {

153 i‡(
ønge
->
mö
.
t˝
.
p‹t
 =ønge->
max
.tcp.port)

154  
	`•rötf
(
buf„r
, "port %u ",

155 
	`¡ohs
(
ønge
->
mö
.
t˝
.
p‹t
));

157  
	`•rötf
(
buf„r
, "ports %u-%u ",

158 
	`¡ohs
(
ønge
->
mö
.
t˝
.
p‹t
),

159 
	`¡ohs
(
ønge
->
max
.
t˝
.
p‹t
));

162 
	}
}

164 
ù_«t_¥Ÿocﬁ
 
	gù_«t_¥Ÿocﬁ_t˝


165 { { 
NULL
, NULL }, "TCP", 
IPPROTO_TCP
,

166 
t˝_m™ù_pkt
,

167 
t˝_ö_ønge
,

168 
t˝_unique_tu∂e
,

169 
t˝_¥öt
,

170 
t˝_¥öt_ønge


	@ip_nat_proto_udp.c

9 
	~<löux/ty≥s.h
>

10 
	~<löux/öô.h
>

11 
	~<löux/√tfûãr.h
>

12 
	~<löux/ù.h
>

13 
	~<löux/udp.h
>

14 
	~<löux/if.h
>

16 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

17 
	~<löux/√tfûãr_ùv4/ù_«t_c‹e.h
>

18 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

19 
	~<löux/√tfûãr_ùv4/ù_«t_¥Ÿocﬁ.h
>

22 
	$udp_ö_ønge
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

23 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

24 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
mö
,

25 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
max
)

27 
u_öt16_t
 
p‹t
;

29 i‡(
m™ùty≥
 =
IP_NAT_MANIP_SRC
)

30 
p‹t
 = 
tu∂e
->
§c
.
u
.
udp
.port;

32 
p‹t
 = 
tu∂e
->
d°
.
u
.
udp
.port;

34  
	`¡ohs
(
p‹t
Ë>¡ohs(
mö
->
udp
.port)

35 && 
	`¡ohs
(
p‹t
Ë<¡ohs(
max
->
udp
.port);

36 
	}
}

39 
	$udp_unique_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

40 c⁄° 
ù_«t_ønge
 *
ønge
,

41 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

42 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

44 
u_öt16_t
 
p‹t
, *
p‹çå
;

45 
ønge_size
, 
mö
, 
i
;

47 i‡(
m™ùty≥
 =
IP_NAT_MANIP_SRC
)

48 
p‹çå
 = &
tu∂e
->
§c
.
u
.
udp
.
p‹t
;

50 
p‹çå
 = &
tu∂e
->
d°
.
u
.
udp
.
p‹t
;

53 i‡(!(
ønge
->
Êags
 & 
IP_NAT_RANGE_PROTO_SPECIFIED
)) {

55 i‡(
m™ùty≥
 =
IP_NAT_MANIP_DST
)

58 i‡(
	`¡ohs
(*
p‹çå
) < 1024) {

60 i‡(
	`¡ohs
(*
p‹çå
)<512) {

61 
mö
 = 1;

62 
ønge_size
 = 511 - 
mö
 + 1;

64 
mö
 = 600;

65 
ønge_size
 = 1023 - 
mö
 + 1;

68 
mö
 = 1024;

69 
ønge_size
 = 65535 - 1024 + 1;

72 
mö
 = 
	`¡ohs
(
ønge
->mö.
udp
.
p‹t
);

73 
ønge_size
 = 
	`¡ohs
(
ønge
->
max
.
udp
.
p‹t
Ë- 
mö
 + 1;

76 
i
 = 0; i < 
ønge_size
; i++, 
p‹t
++) {

77 *
p‹çå
 = 
	`ht⁄s
(
mö
 + 
p‹t
 % 
ønge_size
);

78 i‡(!
	`ù_«t_u£d_tu∂e
(
tu∂e
, 
c⁄¡øck
))

82 
	}
}

85 
	$udp_m™ù_pkt
(
sk_buff
 **
pskb
,

86 
hdroff
,

87 c⁄° 
ù_c⁄¡øck_m™ù
 *
m™ù
,

88 
ù_«t_m™ù_ty≥
 
m™ùty≥
)

90 
udphdr
 *
hdr
;

91 
u_öt32_t
 
ﬁdù
;

92 
u_öt16_t
 *
p‹çå
;

94 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, 
hdroff
 + (
hdr
)))

97 
hdr
 = (*)(*
pskb
)->
d©a
 + 
hdroff
;

98 i‡(
m™ùty≥
 =
IP_NAT_MANIP_SRC
) {

100 
ﬁdù
 = (*
pskb
)->
nh
.
ùh
->
ßddr
;

101 
p‹çå
 = &
hdr
->
sour˚
;

104 
ﬁdù
 = (*
pskb
)->
nh
.
ùh
->
daddr
;

105 
p‹çå
 = &
hdr
->
de°
;

107 i‡(
hdr
->
check
)

108 
hdr
->
check
 = 
	`ù_«t_chót_check
(~
ﬁdù
, 
m™ù
->
ù
,

109 
	`ù_«t_chót_check
(*
p‹çå
 ^ 0xFFFF,

110 
m™ù
->
u
.
udp
.
p‹t
,

111 
hdr
->
check
));

112 *
p‹çå
 = 
m™ù
->
u
.
udp
.
p‹t
;

114 
	}
}

117 
	$udp_¥öt
(*
buf„r
,

118 c⁄° 
ù_c⁄¡øck_tu∂e
 *
m©ch
,

119 c⁄° 
ù_c⁄¡øck_tu∂e
 *
mask
)

121 
Àn
 = 0;

123 i‡(
mask
->
§c
.
u
.
udp
.
p‹t
)

124 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "srcpt=%u ",

125 
	`¡ohs
(
m©ch
->
§c
.
u
.
udp
.
p‹t
));

128 i‡(
mask
->
d°
.
u
.
udp
.
p‹t
)

129 
Àn
 +
	`•rötf
(
buf„r
 +Üen, "dstpt=%u ",

130 
	`¡ohs
(
m©ch
->
d°
.
u
.
udp
.
p‹t
));

132  
Àn
;

133 
	}
}

136 
	$udp_¥öt_ønge
(*
buf„r
, c⁄° 
ù_«t_ønge
 *
ønge
)

138 i‡(
ønge
->
mö
.
udp
.
p‹t
 !0 ||Ñ™ge->
max
.udp.port != 0xFFFF) {

139 i‡(
ønge
->
mö
.
udp
.
p‹t
 =ønge->
max
.udp.port)

140  
	`•rötf
(
buf„r
, "port %u ",

141 
	`¡ohs
(
ønge
->
mö
.
udp
.
p‹t
));

143  
	`•rötf
(
buf„r
, "ports %u-%u ",

144 
	`¡ohs
(
ønge
->
mö
.
udp
.
p‹t
),

145 
	`¡ohs
(
ønge
->
max
.
udp
.
p‹t
));

148 
	}
}

150 
ù_«t_¥Ÿocﬁ
 
	gù_«t_¥Ÿocﬁ_udp


151 { { 
NULL
, NULL }, "UDP", 
IPPROTO_UDP
,

152 
udp_m™ù_pkt
,

153 
udp_ö_ønge
,

154 
udp_unique_tu∂e
,

155 
udp_¥öt
,

156 
udp_¥öt_ønge


	@ip_nat_proto_unknown.c

13 
	~<löux/ty≥s.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/√tfûãr.h
>

16 
	~<löux/if.h
>

18 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

19 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

20 
	~<löux/√tfûãr_ùv4/ù_«t_¥Ÿocﬁ.h
>

22 
	$unknown_ö_ønge
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

23 
ù_«t_m™ù_ty≥
 
m™ù_ty≥
,

24 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
mö
,

25 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
max
)

28 
	}
}

30 
	$unknown_unique_tu∂e
(
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

31 c⁄° 
ù_«t_ønge
 *
ønge
,

32 
ù_«t_m™ù_ty≥
 
m™ùty≥
,

33 c⁄° 
ù_c⁄¡øck
 *
c⁄¡øck
)

38 
	}
}

41 
	$unknown_m™ù_pkt
(
sk_buff
 **
pskb
,

42 
hdroff
,

43 c⁄° 
ù_c⁄¡øck_m™ù
 *
m™ù
,

44 
ù_«t_m™ù_ty≥
 
m™ùty≥
)

47 
	}
}

50 
	$unknown_¥öt
(*
buf„r
,

51 c⁄° 
ù_c⁄¡øck_tu∂e
 *
m©ch
,

52 c⁄° 
ù_c⁄¡øck_tu∂e
 *
mask
)

55 
	}
}

58 
	$unknown_¥öt_ønge
(*
buf„r
, c⁄° 
ù_«t_ønge
 *
ønge
)

61 
	}
}

63 
ù_«t_¥Ÿocﬁ
 
	gunknown_«t_¥Ÿocﬁ
 = {

64 { 
NULL
, NULL }, "unknown", 0,

65 
unknown_m™ù_pkt
,

66 
unknown_ö_ønge
,

67 
unknown_unique_tu∂e
,

68 
unknown_¥öt
,

69 
unknown_¥öt_ønge


	@ip_nat_rtsp.c

33 
	~<löux/moduÀ.h
>

34 
	~<löux/√tfûãr_ùv4.h
>

35 
	~<löux/ù.h
>

36 
	~<löux/t˝.h
>

37 
	~<löux/udp.h
>

38 
	~<löux/kî√l.h
>

39 
	~<√t/t˝.h
>

40 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

41 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

42 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

43 
	~<löux/√tfûãr_ùv4/ù_«t_π•.h
>

44 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_π•.h
>

45 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

47 
	~<löux/öë.h
>

48 
	~<löux/˘y≥.h
>

49 
	#NF_NEED_STRNCASECMP


	)

50 
	#NF_NEED_STRTOU16


	)

51 
	~<löux/√tfûãr_hñ≥rs.h
>

52 
	#NF_NEED_MIME_NEXTLINE


	)

53 
	~<löux/√tfûãr_mime.h
>

58 #unde‡
IP_NF_RTSP_DEBUG


59 
	#INFOP
(
¨gs
...Ë
	`¥ötk
◊rgs)

	)

60 #ifde‡
IP_NF_RTSP_DEBUG


61 
	#DUMP_TUPLE
(
¨gs
...)

	)

62 
	#DEBUGP
(
¨gs
...Ë
	`¥ötk
(
KERN_DEBUG
 "%s:%†", 
__FILE__
, 
__FUNCTION__
); \

63 
	`¥ötk
(
¨gs
)

	)

65 
	#DEBUGP
(
¨gs
...)

	)

68 
	#MAX_PORTS
 8

	)

69 
	#DSTACT_AUTO
 0

	)

70 
	#DSTACT_STRIP
 1

	)

71 
	#DSTACT_NONE
 2

	)

72 
	#MAX_NAT_PORTS
 16

	)

74 
	gp‹ts
[
MAX_PORTS
];

75 * 
	g°u«ddr
 = 
NULL
;

76 * 
	gde°a˘i⁄
 = 
NULL
;

78 
	gnum_p‹ts
 = 0;

79 
u_öt32_t
 
	gextù
 = 0;

80 
	gd°a˘
 = 0;

82 
MODULE_AUTHOR
("Tom Marshall <tmarshall@real.com>");

83 
MODULE_DESCRIPTION
("RTSPÇetworkáddressÅranslation module");

84 
MODULE_LICENSE
("GPL");

85 #ifde‡
MODULE_PARM


86 
MODULE_PARM
(
p‹ts
, "1-" 
__MODULE_STRING
(
MAX_PORTS
) "i");

87 
MODULE_PARM_DESC
(
p‹ts
, "portÇumbers of RTSP servers");

88 
MODULE_PARM
(
°u«ddr
, "s");

89 
MODULE_PARM_DESC
(
°u«ddr
, "Address for detecting STUN");

90 
MODULE_PARM
(
de°a˘i⁄
, "s");

91 
MODULE_PARM_DESC
(
de°a˘i⁄
, "Action for destinationÖarameter (auto/strip/none)");

95 
DECLARE_LOCK_EXTERN
(
ù_π•_lock
);

97 
	#SKIP_WSPACE
(
±r
,
Àn
,
off
Ëof‡<Üí && 
	`is•a˚
(*’å+off))Ë{ off++; }

	)

102 
	$π•_«t_föd_ch¨
(*
°r
, 
ch
, 
size_t
 
Àn
)

104 *
pSå
 = 
NULL
;

105 i‡(
Àn
 != 0) {

106 
pSå
 = 
°r
;

109 i‡(*
pSå
++ =
ch
) {

110  ((*)(
pSå
 - 1));

112 } --
Àn
 != 0);

113  (
NULL
);

114 
	}
}

117 
	$gë_skb_t˝d©a
(
sk_buff
* 
skb
, ** 
µt˝d©a
, 
uöt
* 
±˝d©Æí
)

119 
ùhdr
* 
ùh
 = (ùhdr*)
skb
->
nh
.iph;

120 
t˝hdr
* 
t˝h
 = (t˝hdr*)((*)
ùh
 + iph->
ihl
*4);

122 *
µt˝d©a
 = (*)
t˝h
 +Å˝h->
doff
*4;

123 *
±˝d©Æí
 = ((*)
skb
->
h
.
øw
 + skb->
Àn
Ë- *
µt˝d©a
;

124 
	}
}

146 
	$π•_m™gÀ_å™
(
ù_c⁄¡øck
* 
˘
, 
ù_c⁄¡øck_öfo
 
˘öfo
,

147 
ù_c⁄¡øck_ex≥˘
* 
exp
,

148 
sk_buff
** 
pskb
, 
uöt
 
å™off
, uöà
å™Àn
)

150 * 
±˝
;

151 
uöt
 
t˝Àn
;

152 * 
±øn
;

153 
rbuf1
[16];

154 
uöt
 
rbuf1Àn
;

155 
rbuÁ
[16];

156 
uöt
 
rbuÁÀn
;

157 
u_öt32_t
 
√wù
;

158 
u_öt16_t
 
l›‹t
, 
hù‹t
;

159 
uöt
 
off
 = 0;

160 
uöt
 
diff
;

162 
ù_˘_π•_ex≥˘
* 
¥t•exp
 = &
exp
->
hñp
.
exp_π•_öfo
;

163 
ù_c⁄¡øck_tu∂e
 
t
;

165 
szexèddr
[15+1];

166 
uöt
 
exèddæí
;

167 
is_°un
;

169 
	`gë_skb_t˝d©a
(*
pskb
, &
±˝
, &
t˝Àn
);

170 
±øn
 = 
±˝
+
å™off
;

172 i‡(
å™off
+
å™Àn
 > 
t˝Àn
 ||Åcplen-tranoff <Åranlen ||

173 
å™Àn
 < 10 || !
	`i£ﬁ
(
±øn
[tranlen-1]) ||

174 
	`nf_°∫ˇ£cmp
(
±øn
, "Transport:", 10) != 0)

176 
	`INFOP
("sanity check failed\n");

179 
off
 += 10;

180 
	`SKIP_WSPACE
(
±˝
+
å™off
, 
å™Àn
, 
off
);

182 
√wù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
;

183 
t
 = 
exp
->
tu∂e
;

184 
t
.
d°
.
ù
 = 
√wù
;

186 
exèddæí
 = 
extù
 ? 
	`•rötf
(
szexèddr
, "%u.%u.%u.%u", 
	`NIPQUAD
(extip))

187 : 
	`•rötf
(
szexèddr
, "%u.%u.%u.%u", 
	`NIPQUAD
(
√wù
));

188 
	`DEBUGP
("°u«ddr=%†(%s)\n", 
szexèddr
, (
extù
?"forced":"auto"));

189 
	`DEBUGP
("Found Tøn•‹àmesßgê%s\n", 
±øn
);

191 
rbuf1Àn
 = 
rbuÁÀn
 = 0;

192 
¥t•exp
->
pbty≥
)

194 
pb_sögÀ
:

195 
l›‹t
 = 
¥t•exp
->loport;Üoport != 0;Üoport++)

197 
	`DEBUGP
("OrigöÆ UDP PORT vÆuêi†%huÉx∞l›‹à%hu hù‹à%hu\n", 
t
.
d°
.
u
.
udp
.
p‹t
,

198 
¥t•exp
->
l›‹t
,Öπ•exp->
hù‹t
);

202 i‡(
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
exp
, &
t
) == 0)

204 
	`DEBUGP
("usögÖ‹à%hu\n", 
l›‹t
);

208 i‡(
l›‹t
 != 0)

210 
rbuf1Àn
 = 
	`•rötf
(
rbuf1
, "%hu", 
l›‹t
);

211 
rbuÁÀn
 = 
	`•rötf
(
rbuÁ
, "%hu", 
l›‹t
);

214 
pb_ønge
:

215 
l›‹t
 = 
¥t•exp
->loport;

216 i‡(
l›‹t
 != 0)

218 
rbuf1Àn
 = 
	`•rötf
(
rbuf1
, "%hu", 
l›‹t
);

219 
rbuÁÀn
 = 
	`•rötf
(
rbuÁ
, "%hu-%hu", 
l›‹t
,Üoport+1);

220 
	`DEBUGP
("MANGLINGÅÿp‹t†(%hu-%huËrbuf1 %†rbuÁ %s\n", 
¥t•exp
->
l›‹t
,Örtspexp->loport+1,

221 
rbuf1
, 
rbuÁ
);

224 
pb_disc⁄
:

225 
l›‹t
 = 
¥t•exp
->loport;Üoport != 0;Üoport++)

227 
	`DEBUGP
("OrigöÆ UDP PORT vÆuêi†%huÉx∞l›‹à%hu hù‹à%hu\n", 
t
.
d°
.
u
.
udp
.
p‹t
,

228 
¥t•exp
->
l›‹t
,Öπ•exp->
hù‹t
);

232 i‡(
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
exp
, &
t
) == 0)

234 
	`DEBUGP
("usögÖ‹à%hu (1 o‡2)\n", 
l›‹t
);

238 
hù‹t
 = 
¥t•exp
->hiport; hiport != 0; hiport++)

240 
t
.
d°
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(
hù‹t
);

241 i‡(
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
exp
, &
t
) == 0)

243 
	`DEBUGP
("usögÖ‹à%hu (2 o‡2)\n", 
hù‹t
);

247 i‡(
l›‹t
 !0 && 
hù‹t
 != 0)

249 
rbuf1Àn
 = 
	`•rötf
(
rbuf1
, "%hu", 
l›‹t
);

250 i‡(
hù‹t
 =
l›‹t
+1)

252 
rbuÁÀn
 = 
	`•rötf
(
rbuÁ
, "%hu-%hu", 
l›‹t
, 
hù‹t
);

253 
	`DEBUGP
("P‹t†%hu-%hu\n", 
l›‹t
, 
hù‹t
);

257 
rbuÁÀn
 = 
	`•rötf
(
rbuÁ
, "%hu/%hu", 
l›‹t
, 
hù‹t
);

258 
	`DEBUGP
("p‹t†%hu-%hu\n", 
l›‹t
, 
hù‹t
);

267 i‡(
rbuf1Àn
 == 0)

269 
	`DEBUGP
("Cannot getÑeplacementÖorts\n");

274 
off
 < 
å™Àn
)

276 
uöt
 
ßveoff
;

277 c⁄° * 
µ¨amíd
;

278 
uöt
 
√xç¨amoff
;

280 
µ¨amíd
 = 
	`π•_«t_föd_ch¨
(
±øn
+
off
, ',', 
å™Àn
-off);

281 
µ¨amíd
 = (µ¨amíd =
NULL
Ë? 
±øn
+
å™Àn
 :Öparamend+1;

282 
√xç¨amoff
 = 
µ¨amíd
-
±˝
;

290 
is_°un
 = 0;

291 
ßveoff
 = 
off
;

292 
off
 < 
√xç¨amoff
)

294 c⁄° * 
pfõldíd
;

295 
uöt
 
√xtfõldoff
;

297 
pfõldíd
 = 
	`π•_«t_föd_ch¨
(
±øn
+
off
, ';', 
√xç¨amoff
-off);

298 
√xtfõldoff
 = (
pfõldíd
 =
NULL
Ë? 
√xç¨amoff
 :Öfõldíd-
±øn
+1;

300 i‡(
d°a˘
 !
DSTACT_NONE
 && 
	`°∫cmp
(
±øn
+
off
, "destination=", 12) == 0)

302 i‡(
	`°∫cmp
(
±øn
+
off
+12, 
szexèddr
, 
exèddæí
) == 0)

304 
is_°un
 = 1;

306 i‡(
d°a˘
 =
DSTACT_STRIP
 || (d°a˘ =
DSTACT_AUTO
 && !
is_°un
))

308 
diff
 = 
√xtfõldoff
-
off
;

309 i‡(!
	`ù_«t_m™gÀ_t˝_∑ckë
(
pskb
, 
˘
, 
˘öfo
,

310 
off
, 
diff
, 
NULL
, 0))

313 
	`DEBUGP
("mangle failed bailing outÇow\n");

316 
	`gë_skb_t˝d©a
(*
pskb
, &
±˝
, &
t˝Àn
);

317 
±øn
 = 
±˝
+
å™off
;

318 
å™Àn
 -
diff
;

319 
√xç¨amoff
 -
diff
;

320 
√xtfõldoff
 -
diff
;

324 
off
 = 
√xtfõldoff
;

326 i‡(
is_°un
)

330 
off
 = 
ßveoff
;

331 
off
 < 
√xç¨amoff
)

333 c⁄° * 
pfõldíd
;

334 
uöt
 
√xtfõldoff
;

336 
pfõldíd
 = 
	`π•_«t_föd_ch¨
(
±øn
+
off
, ';', 
√xç¨amoff
-off);

337 
√xtfõldoff
 = (
pfõldíd
 =
NULL
Ë? 
√xç¨amoff
 :Öfõldíd-
±øn
+1;

339 
	`DEBUGP
("of‡%dÇexç¨amof‡%d %s\n", 
off
, 
√xç¨amoff
, 
±øn
+off);

340 i‡(
	`°∫cmp
(
±øn
+
off
, "client_port=", 12) == 0)

342 
u_öt16_t
 
p‹t
;

343 
uöt
 
numÀn
;

344 
uöt
 
‹igoff
;

345 
uöt
 
‹igÀn
;

346 * 
rbuf
 = 
rbuf1
;

347 
uöt
 
rbuÊí
 = 
rbuf1Àn
;

349 
off
 += 12;

350 
‹igoff
 = (
±øn
-
±˝
)+
off
;

351 
‹igÀn
 = 0;

352 
numÀn
 = 
	`nf_°πou16
(
±øn
+
off
, &
p‹t
);

353 
off
 +
numÀn
;

354 
‹igÀn
 +
numÀn
;

355 
	`DEBUGP
("CheckingÖort %huÉxpecÖort %huÑbufa %sÑbufalen %d\n",

356 
p‹t
, 
¥t•exp
->
l›‹t
, 
rbuÁ
, 
rbuÁÀn
);

357 i‡(
±øn
[
off
] == '-' ||Ötran[off] == '/')

359 
off
++;

360 
‹igÀn
++;

361 
numÀn
 = 
	`nf_°πou16
(
±øn
+
off
, &
p‹t
);

362 
off
 +
numÀn
;

363 
‹igÀn
 +
numÀn
;

364 
rbuf
 = 
rbuÁ
;

365 
rbuÊí
 = 
rbuÁÀn
;

375 
diff
 = 
‹igÀn
-
rbuÊí
;

376 
	`DEBUGP
("Bef‹êm™gÀÑbu‡%†dif‡%dÖå™ %s\n", 
rbuf
, 
diff
, 
±øn
+
off
);

377 i‡(!
	`ù_«t_m™gÀ_t˝_∑ckë
(
pskb
, 
˘
, 
˘öfo
,

378 
‹igoff
, 
‹igÀn
, 
rbuf
, 
rbuÊí
))

381 
	`DEBUGP
("MANGLE Failed\n");

384 
	`gë_skb_t˝d©a
(*
pskb
, &
±˝
, &
t˝Àn
);

385 
±øn
 = 
±˝
+
å™off
;

386 
å™Àn
 -
diff
;

387 
√xç¨amoff
 -
diff
;

388 
√xtfõldoff
 -
diff
;

389 
	`DEBUGP
("After mangleÇextparamoff %dÇextfieldoff %dÖtran %s\n",

390 
√xç¨amoff
, 
√xtfõldoff
, 
±øn
);

393 
off
 = 
√xtfõldoff
;

396 
off
 = 
√xç¨amoff
;

400 
	}
}

403 
	$ex≥˘ed
(
sk_buff
** 
pskb
, 
uöt
 
hooknum
,

404 
ù_c⁄¡øck
* 
˘
, 
ù_«t_öfo
* 
öfo
)

406 
ùhdr
* 
ùh
 = (ùhdr*)(*
pskb
)->
nh
.iph;

407 
udphdr
 *
udph
 = (*)
ùh
 + iph->
ihl
 * 4;

408 
ù_«t_mu…i_ønge
 
mr
;

409 
u_öt32_t
 
√wd°ù
, 
√w§cù
, 
√wù
;

411 
ù_c⁄¡øck
 *
ma°î
 = 
	`ma°î_˘
(
˘
);

413 
	`IP_NF_ASSERT
(
öfo
);

414 
	`IP_NF_ASSERT
(
ma°î
);

416 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))));

418 
√wd°ù
 = 
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
;

419 
√w§cù
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
;

420 
√wù
 = (
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
Ë? 
√w§cù
 : 
√wd°ù
;

422 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

423 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

424 
	`DEBUGP
("newsrcip=%u.%u.%u.%u,Çewdstip=%u.%u.%u.%u,Çewip=%u.%u.%u.%u CLIENT PORT %hu\n",

425 
	`NIPQUAD
(
√w§cù
), NIPQUAD(
√wd°ù
), NIPQUAD(
√wù
), 
˘
->
«t
.
π•_öfo
.
‹ig_p‹t
);

426 
	`DUMP_TUPLE
(&
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

427 
	`DUMP_TUPLE
(&
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

432 
udph
->
de°
 = 
˘
->
«t
.
π•_öfo
.
‹ig_p‹t
;

433 
udph
->
check
 = 0;

435 
mr
.
øngesize
 = 1;

440 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
;

441 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
√wù
;

443  
	`ù_«t_£tup_öfo
(
˘
, &
mr
, 
hooknum
);

444 
	}
}

446 
uöt


447 
	$hñp_out
(
ù_c⁄¡øck
* 
˘
, 
ù_c⁄¡øck_öfo
 
˘öfo
,

448 
ù_c⁄¡øck_ex≥˘
* 
exp
, 
sk_buff
** 
pskb
)

450 * 
±˝
;

451 
uöt
 
t˝Àn
;

452 
uöt
 
hdrsoff
;

453 
uöt
 
hdr¶í
;

454 
uöt
 
löeoff
;

455 
uöt
 
löñí
;

456 
uöt
 
off
;

458 
ùhdr
* 
ùh
 = (ùhdr*)(*
pskb
)->
nh
.iph;

459 
t˝hdr
* 
t˝h
 = (t˝hdr*)((*)
ùh
 + iph->
ihl
*4);

461 
ù_˘_π•_ex≥˘
* 
¥t•exp
 = &
exp
->
hñp
.
exp_π•_öfo
;

463 
	`gë_skb_t˝d©a
(*
pskb
, &
±˝
, &
t˝Àn
);

465 
hdrsoff
 = 
exp
->
£q
 - 
	`¡ohl
(
t˝h
->seq);

466 
hdr¶í
 = 
¥t•exp
->
Àn
;

467 
off
 = 
hdrsoff
;

469 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

470 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

472 
	`DEBUGP
("SRC IP %u.%u.%u.%u DST IP %u.%u.%u.%u PORTS %hu-%hu\n",

473 
	`NIPQUAD
(
ùh
->
ßddr
), NIPQUAD(ùh->
daddr
), 
¥t•exp
->
l›‹t
,

474 
¥t•exp
->
hù‹t
);

475 
	`nf_mime_√xéöe
(
±˝
, 
hdrsoff
+
hdr¶í
, &
off
, &
löeoff
, &
löñí
))

477 i‡(
löñí
 == 0)

481 i‡(
off
 > 
hdrsoff
+
hdr¶í
)

483 
	`INFOP
("!! overrun !!\n");

486 
	`DEBUGP
("hdr:Üí=%u, %.*s", 
löñí
, (Óöñí, 
±˝
+
löeoff
);

488 i‡(
	`nf_°∫ˇ£cmp
(
±˝
+
löeoff
, "Transport:", 10) == 0)

490 
uöt
 
ﬁdt˝Àn
 = 
t˝Àn
;

491 i‡(!
	`π•_m™gÀ_å™
(
˘
, 
˘öfo
, 
exp
, 
pskb
, 
löeoff
, 
löñí
))

495 
	`gë_skb_t˝d©a
(*
pskb
, &
±˝
, &
t˝Àn
);

496 
hdr¶í
 -(
ﬁdt˝Àn
-
t˝Àn
);

497 
off
 -(
ﬁdt˝Àn
-
t˝Àn
);

498 
löeoff
 -(
ﬁdt˝Àn
-
t˝Àn
);

499 
löñí
 -(
ﬁdt˝Àn
-
t˝Àn
);

500 
	`DEBUGP
("ªp:Üí=%u, %.*s", 
löñí
, (Óöñí, 
±˝
+
löeoff
);

503 
	`DEBUGP
("SRC IP %u.%u.%u.%u DST IP %u.%u.%u.%u PORTS (%hu-%hu)\n",

504 
	`NIPQUAD
(
ùh
->
ßddr
), NIPQUAD(ùh->
daddr
), 
t˝h
->
sour˚
,Å˝h->
de°
);

506  
NF_ACCEPT
;

507 
	}
}

509 
uöt


510 
	$hñp_ö
(
ù_c⁄¡øck
* 
˘
, 
ù_c⁄¡øck_öfo
 
˘öfo
,

511 
ù_c⁄¡øck_ex≥˘
* 
exp
, 
sk_buff
** 
pskb
)

514 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

515 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

516  
NF_ACCEPT
;

517 
	}
}

519 
uöt


520 
	$hñp
(
ù_c⁄¡øck
* 
˘
, 
ù_c⁄¡øck_ex≥˘
* 
exp
,

521 
ù_«t_öfo
* 
öfo
, 
ù_c⁄¡øck_öfo
 
˘öfo
,

522 
hooknum
, 
sk_buff
** 
pskb
)

524 
ùhdr
* 
ùh
 = (ùhdr*)(*
pskb
)->
nh
.iph;

525 
t˝hdr
* 
t˝h
 = (t˝hdr*)((*)
ùh
 + iph->
ihl
 * 4);

526 
uöt
 
d©Æí
;

527 
dú
;

528 
ù_˘_π•_ex≥˘
* 
˘_π•_öfo
;

529 
rc
 = 
NF_ACCEPT
;

531 
	`DEBUGP
("SRC IP %u.%u.%u.%u DST IP %u.%u.%u.%u PORTS %hu-%hu\n",

532 
	`NIPQUAD
(
ùh
->
ßddr
), NIPQUAD(ùh->
daddr
), 
t˝h
->
sour˚
,

533 
t˝h
->
de°
);

534 i‡(
˘
 =
NULL
 || 
exp
 =NULL || 
öfo
 =NULL || 
pskb
 == NULL)

536 
	`DEBUGP
("!!ÇuŒÖå (%p,%p,%p,%pË!!\n", 
˘
, 
exp
, 
öfo
, 
pskb
);

537  
NF_ACCEPT
;

540 
˘_π•_öfo
 = &
exp
->
hñp
.
exp_π•_öfo
;

546 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

547 i‡(!((
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

548 || (
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
)))

550 
	`DEBUGP
("NotÅouching dir %sát hook %s\n",

551 
dú
 =
IP_CT_DIR_ORIGINAL
 ? "ORIG" : "REPLY",

552 
hooknum
 =
NF_IP_POST_ROUTING
 ? "POSTROUTING"

553 : 
hooknum
 =
NF_IP_PRE_ROUTING
 ? "PREROUTING"

554 : 
hooknum
 =
NF_IP_LOCAL_OUT
 ? "OUTPUT" : "???");

555  
NF_ACCEPT
;

557 
	`DEBUGP
("got beyondÇotÅouching\n");

559 
d©Æí
 = (*
pskb
)->
Àn
 - 
ùh
->
ihl
 * 4 - 
t˝h
->
doff
 * 4;

561 
	`LOCK_BH
(&
ù_π•_lock
);

563 i‡(!
	`bëwìn
(
exp
->
£q
 + 
˘_π•_öfo
->
Àn
,

564 
	`¡ohl
(
t˝h
->
£q
),Çtohl—˝h->£qË+ 
d©Æí
))

567 i‡(
	`√t_øãlimô
())

569 
	`INFOP
("partialÖacket %u/%u in %u/%u\n",

570 
exp
->
£q
, 
˘_π•_öfo
->
Àn
, 
	`¡ohl
(
t˝h
->£q),Çtohl—˝h->£qË+ 
d©Æí
);

572 
	`UNLOCK_BH
(&
ù_π•_lock
);

573  
NF_DROP
;

576 
dú
)

578 
IP_CT_DIR_ORIGINAL
:

579 
rc
 = 
	`hñp_out
(
˘
, 
˘öfo
, 
exp
, 
pskb
);

581 
IP_CT_DIR_REPLY
:

582 
rc
 = 
	`hñp_ö
(
˘
, 
˘öfo
, 
exp
, 
pskb
);

588 
	`UNLOCK_BH
(&
ù_π•_lock
);

590  
rc
;

591 
	}
}

593 
ù_«t_hñ≥r
 
	gù_«t_π•_hñ≥rs
[
MAX_PORTS
];

594 
	gπ•_«mes
[
MAX_PORTS
][10];

598 
	$föi
()

600 
i
;

602 
i
 = 0; i < 
num_p‹ts
; i++)

604 
	`DEBUGP
("uƒegi°îög hñ≥∏f‹Ö‹à%d\n", 
p‹ts
[
i
]);

605 
	`ù_«t_hñ≥r_uƒegi°î
(&
ù_«t_π•_hñ≥rs
[
i
]);

607 
	}
}

609 
__öô


610 
	$öô
()

612 
ªt
 = 0;

613 
i
;

614 
ù_«t_hñ≥r
* 
hÕr
;

615 * 
tm≤ame
;

617 
	`¥ötk
("ù_«t_π• v" 
IP_NF_RTSP_VERSION
 "Üoading\n");

619 i‡(
p‹ts
[0] == 0)

621 
p‹ts
[0] = 
RTSP_PORT
;

624 
i
 = 0; (ò< 
MAX_PORTS
Ë&& 
p‹ts
[i] != 0; i++)

626 
hÕr
 = &
ù_«t_π•_hñ≥rs
[
i
];

627 
	`mem£t
(
hÕr
, 0, (
ù_«t_hñ≥r
));

629 
hÕr
->
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_TCP
;

630 
hÕr
->
tu∂e
.
§c
.
u
.
t˝
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[
i
]);

631 
hÕr
->
mask
.
§c
.
u
.
t˝
.
p‹t
 = 0xFFFF;

632 
hÕr
->
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

633 
hÕr
->
hñp
 = help;

634 #ifde‡
CONFIG_MIPS_BRCM


638 
hÕr
->
Êags
 = 0;

639 
hÕr
->
me
 = 
THIS_MODULE
;

641 
hÕr
->
ex≥˘
 = 
ex≥˘ed
;

643 
tm≤ame
 = &
π•_«mes
[
i
][0];

644 i‡(
p‹ts
[
i
] =
RTSP_PORT
)

646 
	`•rötf
(
tm≤ame
, "rtsp");

650 
	`•rötf
(
tm≤ame
, "π•-%d", 
i
);

652 
hÕr
->
«me
 = 
tm≤ame
;

654 
	`DEBUGP
("ªgi°îög hñ≥∏f‹Ö‹à%d:Çamê%s\n", 
p‹ts
[
i
], 
hÕr
->
«me
);

655 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(
hÕr
);

657 i‡(
ªt
)

659 
	`¥ötk
("ù_«t_π•:Éº‹Ñegi°îög hñ≥∏f‹Ö‹à%d\n", 
p‹ts
[
i
]);

660 
	`föi
();

663 
num_p‹ts
++;

665 i‡(
°u«ddr
 !
NULL
)

667 
extù
 = 
	`ö_©⁄
(
°u«ddr
);

669 i‡(
de°a˘i⁄
 !
NULL
)

671 i‡(
	`°rcmp
(
de°a˘i⁄
, "auto") == 0)

673 
d°a˘
 = 
DSTACT_AUTO
;

675 i‡(
	`°rcmp
(
de°a˘i⁄
, "strip") == 0)

677 
d°a˘
 = 
DSTACT_STRIP
;

679 i‡(
	`°rcmp
(
de°a˘i⁄
, "none") == 0)

681 
d°a˘
 = 
DSTACT_NONE
;

684  
ªt
;

685 
	}
}

687 
NEEDS_CONNTRACK
(
π•
);

689 
moduÀ_öô
(
öô
);

690 
moduÀ_exô
(
föi
);

	@ip_nat_rule.c

10 
	~<löux/ty≥s.h
>

11 
	~<löux/ù.h
>

12 
	~<löux/√tfûãr.h
>

13 
	~<löux/√tfûãr_ùv4.h
>

14 
	~<löux/moduÀ.h
>

15 
	~<löux/kmod.h
>

16 
	~<löux/skbuff.h
>

17 
	~<löux/¥oc_fs.h
>

18 
	~<√t/checksum.h
>

19 
	~<löux/bô›s.h
>

21 
	#ASSERT_READ_LOCK
(
x
Ë
	`MUST_BE_READ_LOCKED
(&
ù_«t_lock
)

	)

22 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`MUST_BE_WRITE_LOCKED
(&
ù_«t_lock
)

	)

24 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

25 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

26 
	~<löux/√tfûãr_ùv4/ù_«t_c‹e.h
>

27 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

28 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

31 
	#DEBUGP
 
¥ötk


	)

33 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

36 
	#NAT_VALID_HOOKS
 ((1<<
NF_IP_PRE_ROUTING
Ë| (1<<
NF_IP_POST_ROUTING
Ë| (1<<
NF_IP_LOCAL_OUT
))

	)

39 
	sùt_°™d¨d


41 
ùt_íåy
 
	míåy
;

42 
ùt_°™d¨d_èrgë
 
	mèrgë
;

45 
	sùt_îr‹_èrgë


47 
ùt_íåy_èrgë
 
	mèrgë
;

48 
	mîr‹«me
[
IPT_FUNCTION_MAXNAMELEN
];

51 
	sùt_îr‹


53 
ùt_íåy
 
	míåy
;

54 
ùt_îr‹_èrgë
 
	mèrgë
;

59 
ùt_ª∂a˚
 
	mª∂
;

60 
ùt_°™d¨d
 
	míåõs
[3];

61 
ùt_îr‹
 
	mãrm
;

62 } 
«t_öôül_èbÀ
 
	g__öôd©a


63 { { "«t", 
NAT_VALID_HOOKS
, 4,

64 (
ùt_°™d¨d
Ë* 3 + (
ùt_îr‹
),

65 { [
NF_IP_PRE_ROUTING
] = 0,

66 [
NF_IP_POST_ROUTING
] = (
ùt_°™d¨d
),

67 [
NF_IP_LOCAL_OUT
] = (
ùt_°™d¨d
) * 2 },

68 { [
NF_IP_PRE_ROUTING
] = 0,

69 [
NF_IP_POST_ROUTING
] = (
ùt_°™d¨d
),

70 [
NF_IP_LOCAL_OUT
] = (
ùt_°™d¨d
) * 2 },

71 0, 
	gNULL
, { } },

76 (
	gùt_íåy
),

77 (
	gùt_°™d¨d
),

79 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

80 -
	gNF_ACCEPT
 - 1 } },

84 (
	gùt_íåy
),

85 (
	gùt_°™d¨d
),

87 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

88 -
	gNF_ACCEPT
 - 1 } },

92 (
	gùt_íåy
),

93 (
	gùt_°™d¨d
),

95 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

96 -
	gNF_ACCEPT
 - 1 } }

101 (
	gùt_íåy
),

102 (
	gùt_îr‹
),

104 { { { { 
IPT_ALIGN
((
ùt_îr‹_èrgë
)), 
	gIPT_ERROR_TARGET
 } },

111 
ùt_èbÀ
 
	g«t_èbÀ
 = {

112 .
«me
 = "nat",

113 .
	gèbÀ
 = &
«t_öôül_èbÀ
.
ª∂
,

114 .
	gvÆid_hooks
 = 
NAT_VALID_HOOKS
,

115 .
	glock
 = 
RW_LOCK_UNLOCKED
,

116 .
	gme
 = 
THIS_MODULE
,

120 
	$ùt_¢©_èrgë
(
sk_buff
 **
pskb
,

121 c⁄° 
√t_devi˚
 *
ö
,

122 c⁄° 
√t_devi˚
 *
out
,

123 
hooknum
,

124 c⁄° *
èrgöfo
,

125 *
u£röfo
)

127 
ù_c⁄¡øck
 *
˘
;

128 
ù_c⁄¡øck_öfo
 
˘öfo
;

130 
	`IP_NF_ASSERT
(
hooknum
 =
NF_IP_POST_ROUTING
);

132 
˘
 = 
	`ù_c⁄¡øck_gë
(*
pskb
, &
˘öfo
);

135 
	`IP_NF_ASSERT
(
˘
 && (
˘öfo
 =
IP_CT_NEW
 || ctöfÿ=
IP_CT_RELATED
));

136 
	`IP_NF_ASSERT
(
out
);

138  
	`ù_«t_£tup_öfo
(
˘
, 
èrgöfo
, 
hooknum
);

139 
	}
}

141 
	$ùt_d«t_èrgë
(
sk_buff
 **
pskb
,

142 c⁄° 
√t_devi˚
 *
ö
,

143 c⁄° 
√t_devi˚
 *
out
,

144 
hooknum
,

145 c⁄° *
èrgöfo
,

146 *
u£röfo
)

148 
ù_c⁄¡øck
 *
˘
;

149 
ù_c⁄¡øck_öfo
 
˘öfo
;

151 #ifde‡
CONFIG_IP_NF_NAT_LOCAL


152 
	`IP_NF_ASSERT
(
hooknum
 =
NF_IP_PRE_ROUTING


153 || 
hooknum
 =
NF_IP_LOCAL_OUT
);

155 
	`IP_NF_ASSERT
(
hooknum
 =
NF_IP_PRE_ROUTING
);

158 
˘
 = 
	`ù_c⁄¡øck_gë
(*
pskb
, &
˘öfo
);

161 
	`IP_NF_ASSERT
(
˘
 && (
˘öfo
 =
IP_CT_NEW
 || ctöfÿ=
IP_CT_RELATED
));

163  
	`ù_«t_£tup_öfo
(
˘
, 
èrgöfo
, 
hooknum
);

164 
	}
}

166 
	$ùt_¢©_checkíåy
(c⁄° *
èbÀ«me
,

167 c⁄° 
ùt_íåy
 *
e
,

168 *
èrgöfo
,

169 
èrgöfosize
,

170 
hook_mask
)

172 
ù_«t_mu…i_ønge
 *
mr
 = 
èrgöfo
;

175 i‡(
èrgöfosize
 < (
ù_«t_mu…i_ønge
)) {

176 
	`DEBUGP
("SNAT: T¨gë sizê%uÅoÿsmÆl\n", 
èrgöfosize
);

180 i‡(
èrgöfosize
 !
	`IPT_ALIGN
(((
ù_«t_mu…i_ønge
)

181 + ((
ù_«t_ønge
)

182 * (
mr
->
øngesize
 - 1))))) {

183 
	`DEBUGP
("SNAT: Target size %u wrong for %uÑanges\n",

184 
èrgöfosize
, 
mr
->
øngesize
);

189 i‡(
	`°rcmp
(
èbÀ«me
, "nat") != 0) {

190 
	`DEBUGP
("SNAT: wr⁄gÅabÀ %s\n", 
èbÀ«me
);

194 i‡(
hook_mask
 & ~(1 << 
NF_IP_POST_ROUTING
)) {

195 
	`DEBUGP
("SNAT: hook mask 0x%x bad\n", 
hook_mask
);

199 
	}
}

201 
	$ùt_d«t_checkíåy
(c⁄° *
èbÀ«me
,

202 c⁄° 
ùt_íåy
 *
e
,

203 *
èrgöfo
,

204 
èrgöfosize
,

205 
hook_mask
)

207 
ù_«t_mu…i_ønge
 *
mr
 = 
èrgöfo
;

210 i‡(
èrgöfosize
 < (
ù_«t_mu…i_ønge
)) {

211 
	`DEBUGP
("DNAT: T¨gë sizê%uÅoÿsmÆl\n", 
èrgöfosize
);

215 i‡(
èrgöfosize
 !
	`IPT_ALIGN
(((
ù_«t_mu…i_ønge
)

216 + ((
ù_«t_ønge
)

217 * (
mr
->
øngesize
 - 1))))) {

218 
	`DEBUGP
("DNAT: Target size %u wrong for %uÑanges\n",

219 
èrgöfosize
, 
mr
->
øngesize
);

224 i‡(
	`°rcmp
(
èbÀ«me
, "nat") != 0) {

225 
	`DEBUGP
("DNAT: wr⁄gÅabÀ %s\n", 
èbÀ«me
);

229 i‡(
hook_mask
 & ~((1 << 
NF_IP_PRE_ROUTING
Ë| (1 << 
NF_IP_LOCAL_OUT
))) {

230 
	`DEBUGP
("DNAT: hook mask 0x%x bad\n", 
hook_mask
);

234 #i‚de‡
CONFIG_IP_NF_NAT_LOCAL


235 i‡(
hook_mask
 & (1 << 
NF_IP_LOCAL_OUT
)) {

236 
	`DEBUGP
("DNAT: CONFIG_IP_NF_NAT_LOCALÇotÉnabled\n");

242 
	}
}

244 
ölöe
 

245 
	$Æloc_nuŒ_bödög
(
ù_c⁄¡øck
 *
c⁄¡øck
,

246 
ù_«t_öfo
 *
öfo
,

247 
hooknum
)

253 
u_öt32_t
 
ù


254 (
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC


255 ? 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù


256 : 
c⁄¡øck
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
);

257 
ù_«t_mu…i_ønge
 
mr


258 { 1, { { 
IP_NAT_RANGE_MAP_IPS
, 
ù
, ip, { 0 }, { 0 } } } };

260 
	`DEBUGP
("AŒoˇtög NULL bödög f‹ %∞(%u.%u.%u.%u)\n", 
c⁄¡øck
,

261 
	`NIPQUAD
(
ù
));

262  
	`ù_«t_£tup_öfo
(
c⁄¡øck
, &
mr
, 
hooknum
);

263 
	}
}

265 
	$ù_«t_ruÀ_föd
(
sk_buff
 **
pskb
,

266 
hooknum
,

267 c⁄° 
√t_devi˚
 *
ö
,

268 c⁄° 
√t_devi˚
 *
out
,

269 
ù_c⁄¡øck
 *
˘
,

270 
ù_«t_öfo
 *
öfo
)

272 
ªt
;

274 
ªt
 = 
	`ùt_do_èbÀ
(
pskb
, 
hooknum
, 
ö
, 
out
, &
«t_èbÀ
, 
NULL
);

276 i‡(
ªt
 =
NF_ACCEPT
) {

277 i‡(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))))

279 
ªt
 = 
	`Æloc_nuŒ_bödög
(
˘
, 
öfo
, 
hooknum
);

281  
ªt
;

282 
	}
}

284 
ùt_èrgë
 
	gùt_¢©_ªg
 = {

285 .
«me
 = "SNAT",

286 .
	gèrgë
 = 
ùt_¢©_èrgë
,

287 .
	gcheckíåy
 = 
ùt_¢©_checkíåy
,

290 
ùt_èrgë
 
	gùt_d«t_ªg
 = {

291 .
«me
 = "DNAT",

292 .
	gèrgë
 = 
ùt_d«t_èrgë
,

293 .
	gcheckíåy
 = 
ùt_d«t_checkíåy
,

296 
__öô
 
	$ù_«t_ruÀ_öô
()

298 
ªt
;

300 
ªt
 = 
	`ùt_ªgi°î_èbÀ
(&
«t_èbÀ
);

301 i‡(
ªt
 != 0)

302  
ªt
;

303 
ªt
 = 
	`ùt_ªgi°î_èrgë
(&
ùt_¢©_ªg
);

304 i‡(
ªt
 != 0)

305 
uƒegi°î_èbÀ
;

307 
ªt
 = 
	`ùt_ªgi°î_èrgë
(&
ùt_d«t_ªg
);

308 i‡(
ªt
 != 0)

309 
uƒegi°î_¢©
;

311  
ªt
;

313 
uƒegi°î_¢©
:

314 
	`ùt_uƒegi°î_èrgë
(&
ùt_¢©_ªg
);

315 
uƒegi°î_èbÀ
:

316 
	`ùt_uƒegi°î_èbÀ
(&
«t_èbÀ
);

318  
ªt
;

319 
	}
}

321 
	$ù_«t_ruÀ_˛ónup
()

323 
	`ùt_uƒegi°î_èrgë
(&
ùt_d«t_ªg
);

324 
	`ùt_uƒegi°î_èrgë
(&
ùt_¢©_ªg
);

325 
	`ùt_uƒegi°î_èbÀ
(&
«t_èbÀ
);

326 
	}
}

	@ip_nat_snmp_basic.c

46 
	~<löux/c⁄fig.h
>

47 
	~<löux/moduÀ.h
>

48 
	~<löux/ty≥s.h
>

49 
	~<löux/kî√l.h
>

50 
	~<löux/√tfûãr_ùv4.h
>

51 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

52 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

53 
	~<löux/ù.h
>

54 
	~<√t/checksum.h
>

55 
	~<√t/udp.h
>

56 
	~<asm/uac˚ss.h
>

58 
MODULE_LICENSE
("GPL");

59 
MODULE_AUTHOR
("James Morris <jmorris@intercode.com.au>");

60 
MODULE_DESCRIPTION
("Basic SNMP Application Layer Gateway");

62 
	#SNMP_PORT
 161

	)

63 
	#SNMP_TRAP_PORT
 162

	)

64 
	#NOCT1
(
n
Ë(
u_öt8_t
 )(“Ë& 0xff)

	)

66 
	gdebug
;

67 
•ölock_t
 
	g¢mp_lock
 = 
SPIN_LOCK_UNLOCKED
;

74 
	so˘1_m≠


76 
u_öt8_t
 
	m‰om
;

77 
u_öt8_t
 
	mto
;

88 
	#ASN1_UNI
 0

	)

89 
	#ASN1_APL
 1

	)

90 
	#ASN1_CTX
 2

	)

91 
	#ASN1_PRV
 3

	)

94 
	#ASN1_EOC
 0

	)

95 
	#ASN1_BOL
 1

	)

96 
	#ASN1_INT
 2

	)

97 
	#ASN1_BTS
 3

	)

98 
	#ASN1_OTS
 4

	)

99 
	#ASN1_NUL
 5

	)

100 
	#ASN1_OJI
 6

	)

101 
	#ASN1_OJD
 7

	)

102 
	#ASN1_EXT
 8

	)

103 
	#ASN1_SEQ
 16

	)

104 
	#ASN1_SET
 17

	)

105 
	#ASN1_NUMSTR
 18

	)

106 
	#ASN1_PRNSTR
 19

	)

107 
	#ASN1_TEXSTR
 20

	)

108 
	#ASN1_VIDSTR
 21

	)

109 
	#ASN1_IA5STR
 22

	)

110 
	#ASN1_UNITIM
 23

	)

111 
	#ASN1_GENTIM
 24

	)

112 
	#ASN1_GRASTR
 25

	)

113 
	#ASN1_VISSTR
 26

	)

114 
	#ASN1_GENSTR
 27

	)

117 
	#ASN1_PRI
 0

	)

118 
	#ASN1_CON
 1

	)

123 
	#ASN1_ERR_NOERROR
 0

	)

124 
	#ASN1_ERR_DEC_EMPTY
 2

	)

125 
	#ASN1_ERR_DEC_EOC_MISMATCH
 3

	)

126 
	#ASN1_ERR_DEC_LENGTH_MISMATCH
 4

	)

127 
	#ASN1_ERR_DEC_BADVALUE
 5

	)

132 
	sa¢1_˘x


134 
	mîr‹
;

135 *
	mpoöãr
;

136 *
	mbegö
;

137 *
	míd
;

143 
	sa¢1_o˘°r


145 *
	md©a
;

146 
	mÀn
;

149 
	$a¢1_›í
(
a¢1_˘x
 *
˘x
,

150 *
buf
,

151 
Àn
)

153 
˘x
->
begö
 = 
buf
;

154 
˘x
->
íd
 = 
buf
 + 
Àn
;

155 
˘x
->
poöãr
 = 
buf
;

156 
˘x
->
îr‹
 = 
ASN1_ERR_NOERROR
;

157 
	}
}

159 
	$a¢1_o˘ë_decode
(
a¢1_˘x
 *
˘x
, *
ch
)

161 i‡(
˘x
->
poöãr
 >˘x->
íd
) {

162 
˘x
->
îr‹
 = 
ASN1_ERR_DEC_EMPTY
;

165 *
ch
 = *(
˘x
->
poöãr
)++;

167 
	}
}

169 
	$a¢1_èg_decode
(
a¢1_˘x
 *
˘x
, *
èg
)

171 
ch
;

173 *
èg
 = 0;

177 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

179 *
èg
 <<= 7;

180 *
èg
 |
ch
 & 0x7F;

181 } (
ch
 & 0x80) == 0x80);

183 
	}
}

185 
	$a¢1_id_decode
(
a¢1_˘x
 *
˘x
,

186 *
˛s
,

187 *
c⁄
,

188 *
èg
)

190 
ch
;

192 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

195 *
˛s
 = (
ch
 & 0xC0) >> 6;

196 *
c⁄
 = (
ch
 & 0x20) >> 5;

197 *
èg
 = (
ch
 & 0x1F);

199 i‡(*
èg
 == 0x1F) {

200 i‡(!
	`a¢1_èg_decode
(
˘x
, 
èg
))

204 
	}
}

206 
	$a¢1_Àngth_decode
(
a¢1_˘x
 *
˘x
,

207 *
def
,

208 *
Àn
)

210 
ch
, 
˙t
;

212 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

215 i‡(
ch
 == 0x80)

216 *
def
 = 0;

218 *
def
 = 1;

220 i‡(
ch
 < 0x80)

221 *
Àn
 = 
ch
;

223 
˙t
 = (Ë(
ch
 & 0x7F);

224 *
Àn
 = 0;

226 
˙t
 > 0) {

227 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

229 *
Àn
 <<= 8;

230 *
Àn
 |
ch
;

231 
˙t
--;

236 
	}
}

238 
	$a¢1_hódî_decode
(
a¢1_˘x
 *
˘x
,

239 **
eoc
,

240 *
˛s
,

241 *
c⁄
,

242 *
èg
)

244 
def
, 
Àn
;

246 i‡(!
	`a¢1_id_decode
(
˘x
, 
˛s
, 
c⁄
, 
èg
))

249 i‡(!
	`a¢1_Àngth_decode
(
˘x
, &
def
, &
Àn
))

252 i‡(
def
)

253 *
eoc
 = 
˘x
->
poöãr
 + 
Àn
;

255 *
eoc
 = 
NULL
;

257 
	}
}

259 
	$a¢1_eoc_decode
(
a¢1_˘x
 *
˘x
, *
eoc
)

261 
ch
;

263 i‡(
eoc
 == 0) {

264 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

267 i‡(
ch
 != 0x00) {

268 
˘x
->
îr‹
 = 
ASN1_ERR_DEC_EOC_MISMATCH
;

272 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

275 i‡(
ch
 != 0x00) {

276 
˘x
->
îr‹
 = 
ASN1_ERR_DEC_EOC_MISMATCH
;

281 i‡(
˘x
->
poöãr
 !
eoc
) {

282 
˘x
->
îr‹
 = 
ASN1_ERR_DEC_LENGTH_MISMATCH
;

287 
	}
}

289 
	$a¢1_nuŒ_decode
(
a¢1_˘x
 *
˘x
, *
eoc
)

291 
˘x
->
poöãr
 = 
eoc
;

293 
	}
}

295 
	$a¢1_l⁄g_decode
(
a¢1_˘x
 *
˘x
,

296 *
eoc
,

297 *
öãgî
)

299 
ch
;

300 
Àn
;

302 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

305 *
öãgî
 = (sig√d Ë
ch
;

306 
Àn
 = 1;

308 
˘x
->
poöãr
 < 
eoc
) {

309 i‡(++
Àn
 >  ()) {

310 
˘x
->
îr‹
 = 
ASN1_ERR_DEC_BADVALUE
;

314 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

317 *
öãgî
 <<= 8;

318 *
öãgî
 |
ch
;

321 
	}
}

323 
	$a¢1_uöt_decode
(
a¢1_˘x
 *
˘x
,

324 *
eoc
,

325 *
öãgî
)

327 
ch
;

328 
Àn
;

330 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

333 *
öãgî
 = 
ch
;

334 i‡(
ch
 =0Ë
Àn
 = 0;

335 
Àn
 = 1;

337 
˘x
->
poöãr
 < 
eoc
) {

338 i‡(++
Àn
 >  ()) {

339 
˘x
->
îr‹
 = 
ASN1_ERR_DEC_BADVALUE
;

343 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

346 *
öãgî
 <<= 8;

347 *
öãgî
 |
ch
;

350 
	}
}

352 
	$a¢1_ul⁄g_decode
(
a¢1_˘x
 *
˘x
,

353 *
eoc
,

354 *
öãgî
)

356 
ch
;

357 
Àn
;

359 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

362 *
öãgî
 = 
ch
;

363 i‡(
ch
 =0Ë
Àn
 = 0;

364 
Àn
 = 1;

366 
˘x
->
poöãr
 < 
eoc
) {

367 i‡(++
Àn
 >  ()) {

368 
˘x
->
îr‹
 = 
ASN1_ERR_DEC_BADVALUE
;

372 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

375 *
öãgî
 <<= 8;

376 *
öãgî
 |
ch
;

379 
	}
}

381 
	$a¢1_o˘ës_decode
(
a¢1_˘x
 *
˘x
,

382 *
eoc
,

383 **
o˘ës
,

384 *
Àn
)

386 *
±r
;

388 *
Àn
 = 0;

390 *
o˘ës
 = 
	`kmÆloc
(
eoc
 - 
˘x
->
poöãr
, 
GFP_ATOMIC
);

391 i‡(*
o˘ës
 =
NULL
) {

392 i‡(
	`√t_øãlimô
())

393 
	`¥ötk
("OOM i¿bßlg (%d)\n", 
__LINE__
);

397 
±r
 = *
o˘ës
;

398 
˘x
->
poöãr
 < 
eoc
) {

399 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, (*)
±r
++)) {

400 
	`k‰ì
(*
o˘ës
);

401 *
o˘ës
 = 
NULL
;

404 (*
Àn
)++;

407 
	}
}

409 
	$a¢1_subid_decode
(
a¢1_˘x
 *
˘x
,

410 *
subid
)

412 
ch
;

414 *
subid
 = 0;

417 i‡(!
	`a¢1_o˘ë_decode
(
˘x
, &
ch
))

420 *
subid
 <<= 7;

421 *
subid
 |
ch
 & 0x7F;

422 } (
ch
 & 0x80) == 0x80);

424 
	}
}

426 
	$a¢1_oid_decode
(
a¢1_˘x
 *
˘x
,

427 *
eoc
,

428 **
oid
,

429 *
Àn
)

431 
subid
;

432 
size
;

433 *
›å
;

435 
size
 = 
eoc
 - 
˘x
->
poöãr
 + 1;

436 *
oid
 = 
	`kmÆloc
(
size
 * (), 
GFP_ATOMIC
);

437 i‡(*
oid
 =
NULL
) {

438 i‡(
	`√t_øãlimô
())

439 
	`¥ötk
("OOM i¿bßlg (%d)\n", 
__LINE__
);

443 
›å
 = *
oid
;

445 i‡(!
	`a¢1_subid_decode
(
˘x
, &
subid
)) {

446 
	`k‰ì
(*
oid
);

447 *
oid
 = 
NULL
;

451 i‡(
subid
 < 40) {

452 
›å
 [0] = 0;

453 
›å
 [1] = 
subid
;

454 } i‡(
subid
 < 80) {

455 
›å
 [0] = 1;

456 
›å
 [1] = 
subid
 - 40;

458 
›å
 [0] = 2;

459 
›å
 [1] = 
subid
 - 80;

462 *
Àn
 = 2;

463 
›å
 += 2;

465 
˘x
->
poöãr
 < 
eoc
) {

466 i‡(++(*
Àn
Ë> 
size
) {

467 
˘x
->
îr‹
 = 
ASN1_ERR_DEC_BADVALUE
;

468 
	`k‰ì
(*
oid
);

469 *
oid
 = 
NULL
;

473 i‡(!
	`a¢1_subid_decode
(
˘x
, 
›å
++)) {

474 
	`k‰ì
(*
oid
);

475 *
oid
 = 
NULL
;

480 
	}
}

489 
	#SNMP_V1
 0

	)

490 
	#SNMP_V2C
 1

	)

491 
	#SNMP_V2
 2

	)

492 
	#SNMP_V3
 3

	)

495 
	#SNMP_SIZE_COMM
 256

	)

496 
	#SNMP_SIZE_OBJECTID
 128

	)

497 
	#SNMP_SIZE_BUFCHR
 256

	)

498 
	#SNMP_SIZE_BUFINT
 128

	)

499 
	#SNMP_SIZE_SMALLOBJECTID
 16

	)

502 
	#SNMP_PDU_GET
 0

	)

503 
	#SNMP_PDU_NEXT
 1

	)

504 
	#SNMP_PDU_RESPONSE
 2

	)

505 
	#SNMP_PDU_SET
 3

	)

506 
	#SNMP_PDU_TRAP1
 4

	)

507 
	#SNMP_PDU_BULK
 5

	)

508 
	#SNMP_PDU_INFORM
 6

	)

509 
	#SNMP_PDU_TRAP2
 7

	)

512 
	#SNMP_NOERROR
 0

	)

513 
	#SNMP_TOOBIG
 1

	)

514 
	#SNMP_NOSUCHNAME
 2

	)

515 
	#SNMP_BADVALUE
 3

	)

516 
	#SNMP_READONLY
 4

	)

517 
	#SNMP_GENERROR
 5

	)

518 
	#SNMP_NOACCESS
 6

	)

519 
	#SNMP_WRONGTYPE
 7

	)

520 
	#SNMP_WRONGLENGTH
 8

	)

521 
	#SNMP_WRONGENCODING
 9

	)

522 
	#SNMP_WRONGVALUE
 10

	)

523 
	#SNMP_NOCREATION
 11

	)

524 
	#SNMP_INCONSISTENTVALUE
 12

	)

525 
	#SNMP_RESOURCEUNAVAILABLE
 13

	)

526 
	#SNMP_COMMITFAILED
 14

	)

527 
	#SNMP_UNDOFAILED
 15

	)

528 
	#SNMP_AUTHORIZATIONERROR
 16

	)

529 
	#SNMP_NOTWRITABLE
 17

	)

530 
	#SNMP_INCONSISTENTNAME
 18

	)

533 
	#SNMP_TRAP_COLDSTART
 0

	)

534 
	#SNMP_TRAP_WARMSTART
 1

	)

535 
	#SNMP_TRAP_LINKDOWN
 2

	)

536 
	#SNMP_TRAP_LINKUP
 3

	)

537 
	#SNMP_TRAP_AUTFAILURE
 4

	)

538 
	#SNMP_TRAP_EQPNEIGHBORLOSS
 5

	)

539 
	#SNMP_TRAP_ENTSPECIFIC
 6

	)

542 
	#SNMP_NULL
 0

	)

543 
	#SNMP_INTEGER
 1

	)

544 
	#SNMP_OCTETSTR
 2

	)

545 
	#SNMP_DISPLAYSTR
 2

	)

546 
	#SNMP_OBJECTID
 3

	)

547 
	#SNMP_IPADDR
 4

	)

548 
	#SNMP_COUNTER
 5

	)

549 
	#SNMP_GAUGE
 6

	)

550 
	#SNMP_TIMETICKS
 7

	)

551 
	#SNMP_OPAQUE
 8

	)

554 
	#SNMP_UINTEGER
 5

	)

555 
	#SNMP_BITSTR
 9

	)

556 
	#SNMP_NSAP
 10

	)

557 
	#SNMP_COUNTER64
 11

	)

558 
	#SNMP_NOSUCHOBJECT
 12

	)

559 
	#SNMP_NOSUCHINSTANCE
 13

	)

560 
	#SNMP_ENDOFMIBVIEW
 14

	)

562 
	u¢mp_sy¡ax


564 
	muc
[0];

565 
	mc
[0];

566 
	mul
[0];

567 
	ml
[0];

570 
	s¢mp_obje˘


572 *
	mid
;

573 
	mid_Àn
;

574 
	mty≥
;

575 
	msy¡ax_Àn
;

576 
¢mp_sy¡ax
 
	msy¡ax
;

579 
	s¢mp_ªque°


581 
	mid
;

582 
	mîr‹_°©us
;

583 
	mîr‹_ödex
;

586 
	s¢mp_v1_å≠


588 *
	mid
;

589 
	mid_Àn
;

590 
	mù_addªss
;

591 
	mgíîÆ
;

592 
	m•ecific
;

593 
	mtime
;

597 
	#SNMP_IPA
 0

	)

598 
	#SNMP_CNT
 1

	)

599 
	#SNMP_GGE
 2

	)

600 
	#SNMP_TIT
 3

	)

601 
	#SNMP_OPQ
 4

	)

602 
	#SNMP_C64
 6

	)

605 
	#SERR_NSO
 0

	)

606 
	#SERR_NSI
 1

	)

607 
	#SERR_EOM
 2

	)

609 
ölöe
 
m™gÀ_addªss
(*
begö
,

610 *
addr
,

611 c⁄° 
o˘1_m≠
 *
m≠
,

612 
u_öt16_t
 *
check
);

613 
	s¢mp_˙v


615 
	m˛ass
;

616 
	mèg
;

617 
	msy¡ax
;

620 
¢mp_˙v
 
	g¢mp_c⁄v
 [] =

622 {
ASN1_UNI
, 
ASN1_NUL
, 
SNMP_NULL
},

623 {
ASN1_UNI
, 
ASN1_INT
, 
SNMP_INTEGER
},

624 {
ASN1_UNI
, 
ASN1_OTS
, 
SNMP_OCTETSTR
},

625 {
ASN1_UNI
, 
ASN1_OTS
, 
SNMP_DISPLAYSTR
},

626 {
ASN1_UNI
, 
ASN1_OJI
, 
SNMP_OBJECTID
},

627 {
ASN1_APL
, 
SNMP_IPA
, 
SNMP_IPADDR
},

628 {
ASN1_APL
, 
SNMP_CNT
, 
SNMP_COUNTER
},

629 {
ASN1_APL
, 
SNMP_GGE
, 
SNMP_GAUGE
},

630 {
ASN1_APL
, 
SNMP_TIT
, 
SNMP_TIMETICKS
},

631 {
ASN1_APL
, 
SNMP_OPQ
, 
SNMP_OPAQUE
},

634 {
ASN1_UNI
, 
ASN1_BTS
, 
SNMP_BITSTR
},

635 {
ASN1_APL
, 
SNMP_C64
, 
SNMP_COUNTER64
},

636 {
ASN1_CTX
, 
SERR_NSO
, 
SNMP_NOSUCHOBJECT
},

637 {
ASN1_CTX
, 
SERR_NSI
, 
SNMP_NOSUCHINSTANCE
},

638 {
ASN1_CTX
, 
SERR_EOM
, 
SNMP_ENDOFMIBVIEW
},

642 
	$¢mp_èg_˛s2sy¡ax
(
èg
,

643 
˛s
,

644 *
sy¡ax
)

646 
¢mp_˙v
 *
˙v
;

648 
˙v
 = 
¢mp_c⁄v
;

650 
˙v
->
sy¡ax
 != -1) {

651 i‡(
˙v
->
èg
 =èg && cnv->
˛ass
 =
˛s
) {

652 *
sy¡ax
 = 
˙v
->syntax;

655 
˙v
++;

658 
	}
}

660 
	$¢mp_obje˘_decode
(
a¢1_˘x
 *
˘x
,

661 
¢mp_obje˘
 **
obj
)

663 
˛s
, 
c⁄
, 
èg
, 
Àn
, 
idÀn
;

664 
ty≥
;

665 *
eoc
, *
íd
, *
p
;

666 *
Õ
, *
id
;

667 
ul
;

668 
l
;

670 *
obj
 = 
NULL
;

671 
id
 = 
NULL
;

673 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
eoc
, &
˛s
, &
c⁄
, &
èg
))

676 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_CON
 || 
èg
 !
ASN1_SEQ
)

679 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

682 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_PRI
 || 
èg
 !
ASN1_OJI
)

685 i‡(!
	`a¢1_oid_decode
(
˘x
, 
íd
, &
id
, &
idÀn
))

688 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
)) {

689 
	`k‰ì
(
id
);

693 i‡(
c⁄
 !
ASN1_PRI
) {

694 
	`k‰ì
(
id
);

698 i‡(!
	`¢mp_èg_˛s2sy¡ax
(
èg
, 
˛s
, &
ty≥
)) {

699 
	`k‰ì
(
id
);

703 
ty≥
) {

704 
SNMP_INTEGER
:

705 
Àn
 = ();

706 i‡(!
	`a¢1_l⁄g_decode
(
˘x
, 
íd
, &
l
)) {

707 
	`k‰ì
(
id
);

710 *
obj
 = 
	`kmÆloc
((
¢mp_obje˘
Ë+ 
Àn
,

711 
GFP_ATOMIC
);

712 i‡(*
obj
 =
NULL
) {

713 
	`k‰ì
(
id
);

714 i‡(
	`√t_øãlimô
())

715 
	`¥ötk
("OOM i¿bßlg (%d)\n", 
__LINE__
);

718 (*
obj
)->
sy¡ax
.
l
[0] =Ü;

720 
SNMP_OCTETSTR
:

721 
SNMP_OPAQUE
:

722 i‡(!
	`a¢1_o˘ës_decode
(
˘x
, 
íd
, &
p
, &
Àn
)) {

723 
	`k‰ì
(
id
);

726 *
obj
 = 
	`kmÆloc
((
¢mp_obje˘
Ë+ 
Àn
,

727 
GFP_ATOMIC
);

728 i‡(*
obj
 =
NULL
) {

729 
	`k‰ì
(
id
);

730 i‡(
	`√t_øãlimô
())

731 
	`¥ötk
("OOM i¿bßlg (%d)\n", 
__LINE__
);

734 
	`mem˝y
((*
obj
)->
sy¡ax
.
c
, 
p
, 
Àn
);

735 
	`k‰ì
(
p
);

737 
SNMP_NULL
:

738 
SNMP_NOSUCHOBJECT
:

739 
SNMP_NOSUCHINSTANCE
:

740 
SNMP_ENDOFMIBVIEW
:

741 
Àn
 = 0;

742 *
obj
 = 
	`kmÆloc
((
¢mp_obje˘
), 
GFP_ATOMIC
);

743 i‡(*
obj
 =
NULL
) {

744 
	`k‰ì
(
id
);

745 i‡(
	`√t_øãlimô
())

746 
	`¥ötk
("OOM i¿bßlg (%d)\n", 
__LINE__
);

749 i‡(!
	`a¢1_nuŒ_decode
(
˘x
, 
íd
)) {

750 
	`k‰ì
(
id
);

751 
	`k‰ì
(*
obj
);

752 *
obj
 = 
NULL
;

756 
SNMP_OBJECTID
:

757 i‡(!
	`a¢1_oid_decode
(
˘x
, 
íd
, (**)&
Õ
, &
Àn
)) {

758 
	`k‰ì
(
id
);

761 
Àn
 *= ();

762 *
obj
 = 
	`kmÆloc
((
¢mp_obje˘
Ë+ 
Àn
, 
GFP_ATOMIC
);

763 i‡(*
obj
 =
NULL
) {

764 
	`k‰ì
(
id
);

765 i‡(
	`√t_øãlimô
())

766 
	`¥ötk
("OOM i¿bßlg (%d)\n", 
__LINE__
);

769 
	`mem˝y
((*
obj
)->
sy¡ax
.
ul
, 
Õ
, 
Àn
);

770 
	`k‰ì
(
Õ
);

772 
SNMP_IPADDR
:

773 i‡(!
	`a¢1_o˘ës_decode
(
˘x
, 
íd
, &
p
, &
Àn
)) {

774 
	`k‰ì
(
id
);

777 i‡(
Àn
 != 4) {

778 
	`k‰ì
(
p
);

779 
	`k‰ì
(
id
);

782 *
obj
 = 
	`kmÆloc
((
¢mp_obje˘
Ë+ 
Àn
, 
GFP_ATOMIC
);

783 i‡(*
obj
 =
NULL
) {

784 
	`k‰ì
(
p
);

785 
	`k‰ì
(
id
);

786 i‡(
	`√t_øãlimô
())

787 
	`¥ötk
("OOM i¿bßlg (%d)\n", 
__LINE__
);

790 
	`mem˝y
((*
obj
)->
sy¡ax
.
uc
, 
p
, 
Àn
);

791 
	`k‰ì
(
p
);

793 
SNMP_COUNTER
:

794 
SNMP_GAUGE
:

795 
SNMP_TIMETICKS
:

796 
Àn
 = ();

797 i‡(!
	`a¢1_ul⁄g_decode
(
˘x
, 
íd
, &
ul
)) {

798 
	`k‰ì
(
id
);

801 *
obj
 = 
	`kmÆloc
((
¢mp_obje˘
Ë+ 
Àn
, 
GFP_ATOMIC
);

802 i‡(*
obj
 =
NULL
) {

803 
	`k‰ì
(
id
);

804 i‡(
	`√t_øãlimô
())

805 
	`¥ötk
("OOM i¿bßlg (%d)\n", 
__LINE__
);

808 (*
obj
)->
sy¡ax
.
ul
[0] = ul;

811 
	`k‰ì
(
id
);

815 (*
obj
)->
sy¡ax_Àn
 = 
Àn
;

816 (*
obj
)->
ty≥
 =Åype;

817 (*
obj
)->
id
 = id;

818 (*
obj
)->
id_Àn
 = 
idÀn
;

820 i‡(!
	`a¢1_eoc_decode
(
˘x
, 
eoc
)) {

821 
	`k‰ì
(
id
);

822 
	`k‰ì
(*
obj
);

823 *
obj
 = 
NULL
;

827 
	}
}

829 
	$¢mp_ªque°_decode
(
a¢1_˘x
 *
˘x
,

830 
¢mp_ªque°
 *
ªque°
)

832 
˛s
, 
c⁄
, 
èg
;

833 *
íd
;

835 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

838 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_PRI
 || 
èg
 !
ASN1_INT
)

841 i‡(!
	`a¢1_ul⁄g_decode
(
˘x
, 
íd
, &
ªque°
->
id
))

844 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

847 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_PRI
 || 
èg
 !
ASN1_INT
)

850 i‡(!
	`a¢1_uöt_decode
(
˘x
, 
íd
, &
ªque°
->
îr‹_°©us
))

853 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

856 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_PRI
 || 
èg
 !
ASN1_INT
)

859 i‡(!
	`a¢1_uöt_decode
(
˘x
, 
íd
, &
ªque°
->
îr‹_ödex
))

863 
	}
}

869 
	$Á°_csum
(*
csum
,

870 c⁄° *
›å
,

871 c⁄° *
≈å
,

872 
odd
)

874 
x
, 
ﬁd
, 
√w
;

876 
x
 = 
csum
[0] * 256 + csum[1];

878 
x
 =~ x & 0xFFFF;

880 i‡(
odd
Ë
ﬁd
 = 
›å
[0] * 256;

881 
ﬁd
 = 
›å
[0];

883 
x
 -
ﬁd
 & 0xFFFF;

884 i‡(
x
 <= 0) {

885 
x
--;

886 
x
 &= 0xFFFF;

889 i‡(
odd
Ë
√w
 = 
≈å
[0] * 256;

890 
√w
 = 
≈å
[0];

892 
x
 +
√w
 & 0xFFFF;

893 i‡(
x
 & 0x10000) {

894 
x
++;

895 
x
 &= 0xFFFF;

898 
x
 =~ x & 0xFFFF;

899 
csum
[0] = 
x
 / 256;

900 
csum
[1] = 
x
 & 0xFF;

901 
	}
}

908 
ölöe
 
	$m™gÀ_addªss
(*
begö
,

909 *
addr
,

910 c⁄° 
o˘1_m≠
 *
m≠
,

911 
u_öt16_t
 *
check
)

913 i‡(
m≠
->
‰om
 =
	`NOCT1
(*
addr
)) {

914 
u_öt32_t
 
ﬁd
;

916 i‡(
debug
)

917 
	`mem˝y
(&
ﬁd
, (*)
addr
, (old));

919 *
addr
 = 
m≠
->
to
;

922 i‡(*
check
) {

923 
odd
 = !((
addr
 - 
begö
) % 2);

925 
	`Á°_csum
((*)
check
,

926 &
m≠
->
‰om
, &m≠->
to
, 
odd
);

930 i‡(
debug
)

931 
	`¥ötk
(
KERN_DEBUG
 "bsalg: mapped %u.%u.%u.%uÅo "

932 "%u.%u.%u.%u\n", 
	`NIPQUAD
(
ﬁd
), NIPQUAD(*
addr
));

934 
	}
}

936 
	$¢mp_å≠_decode
(
a¢1_˘x
 *
˘x
,

937 
¢mp_v1_å≠
 *
å≠
,

938 c⁄° 
o˘1_m≠
 *
m≠
,

939 
u_öt16_t
 *
check
)

941 
˛s
, 
c⁄
, 
èg
, 
Àn
;

942 *
íd
;

944 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

947 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_PRI
 || 
èg
 !
ASN1_OJI
)

950 i‡(!
	`a¢1_oid_decode
(
˘x
, 
íd
, &
å≠
->
id
, &å≠->
id_Àn
))

953 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

954 
îr_id_‰ì
;

956 i‡(!((
˛s
 =
ASN1_APL
 && 
c⁄
 =
ASN1_PRI
 && 
èg
 =
SNMP_IPA
) ||

957 (
˛s
 =
ASN1_UNI
 && 
c⁄
 =
ASN1_PRI
 && 
èg
 =
ASN1_OTS
)))

958 
îr_id_‰ì
;

960 i‡(!
	`a¢1_o˘ës_decode
(
˘x
, 
íd
, (**)&
å≠
->
ù_addªss
, &
Àn
))

961 
îr_id_‰ì
;

964 i‡(
Àn
 != 4)

965 
îr_addr_‰ì
;

967 
	`m™gÀ_addªss
(
˘x
->
begö
, ctx->
poöãr
 - 4, 
m≠
, 
check
);

969 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

970 
îr_addr_‰ì
;

972 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_PRI
 || 
èg
 !
ASN1_INT
)

973 
îr_addr_‰ì
;

975 i‡(!
	`a¢1_uöt_decode
(
˘x
, 
íd
, &
å≠
->
gíîÆ
))

976 
îr_addr_‰ì
;

978 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

979 
îr_addr_‰ì
;

981 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_PRI
 || 
èg
 !
ASN1_INT
)

982 
îr_addr_‰ì
;

984 i‡(!
	`a¢1_uöt_decode
(
˘x
, 
íd
, &
å≠
->
•ecific
))

985 
îr_addr_‰ì
;

987 i‡(!
	`a¢1_hódî_decode
(
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

988 
îr_addr_‰ì
;

990 i‡(!((
˛s
 =
ASN1_APL
 && 
c⁄
 =
ASN1_PRI
 && 
èg
 =
SNMP_TIT
) ||

991 (
˛s
 =
ASN1_UNI
 && 
c⁄
 =
ASN1_PRI
 && 
èg
 =
ASN1_INT
)))

992 
îr_addr_‰ì
;

994 i‡(!
	`a¢1_ul⁄g_decode
(
˘x
, 
íd
, &
å≠
->
time
))

995 
îr_addr_‰ì
;

999 
îr_id_‰ì
:

1000 
	`k‰ì
(
å≠
->
id
);

1002 
îr_addr_‰ì
:

1003 
	`k‰ì
((*)
å≠
->
ù_addªss
);

1006 
	}
}

1014 
	$hex_dump
(*
buf
, 
size_t
 
Àn
)

1016 
size_t
 
i
;

1018 
i
 = 0; i < 
Àn
; i++) {

1019 i‡(
i
 && !(i % 16))

1020 
	`¥ötk
("\n");

1021 
	`¥ötk
("%02x ", *(
buf
 + 
i
));

1023 
	`¥ötk
("\n");

1024 
	}
}

1030 
	$¢mp_∑r£_m™gÀ
(*
msg
,

1031 
u_öt16_t
 
Àn
,

1032 c⁄° 
o˘1_m≠
 *
m≠
,

1033 
u_öt16_t
 *
check
)

1035 *
eoc
, *
íd
;

1036 
˛s
, 
c⁄
, 
èg
, 
vîs
, 
pduty≥
;

1037 
a¢1_˘x
 
˘x
;

1038 
a¢1_o˘°r
 
comm
;

1039 
¢mp_obje˘
 **
obj
;

1041 i‡(
debug
 > 1)

1042 
	`hex_dump
(
msg
, 
Àn
);

1044 
	`a¢1_›í
(&
˘x
, 
msg
, 
Àn
);

1049 i‡(!
	`a¢1_hódî_decode
(&
˘x
, &
eoc
, &
˛s
, &
c⁄
, &
èg
))

1051 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_CON
 || 
èg
 !
ASN1_SEQ
)

1057 i‡(!
	`a¢1_hódî_decode
(&
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

1059 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_PRI
 || 
èg
 !
ASN1_INT
)

1061 i‡(!
	`a¢1_uöt_decode
 (&
˘x
, 
íd
, &
vîs
))

1063 i‡(
debug
 > 1)

1064 
	`¥ötk
(
KERN_DEBUG
 "bßlg: snm∞vîsi⁄: %u\n", 
vîs
 + 1);

1065 i‡(
vîs
 > 1)

1071 i‡(!
	`a¢1_hódî_decode
 (&
˘x
, &
íd
, &
˛s
, &
c⁄
, &
èg
))

1073 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_PRI
 || 
èg
 !
ASN1_OTS
)

1075 i‡(!
	`a¢1_o˘ës_decode
(&
˘x
, 
íd
, &
comm
.
d©a
, &comm.
Àn
))

1077 i‡(
debug
 > 1) {

1078 
i
;

1080 
	`¥ötk
(
KERN_DEBUG
 "bsalg: community: ");

1081 
i
 = 0; i < 
comm
.
Àn
; i++)

1082 
	`¥ötk
("%c", 
comm
.
d©a
[
i
]);

1083 
	`¥ötk
("\n");

1085 
	`k‰ì
(
comm
.
d©a
);

1090 i‡(!
	`a¢1_hódî_decode
(&
˘x
, &
eoc
, &
˛s
, &
c⁄
, &
pduty≥
))

1092 i‡(
˛s
 !
ASN1_CTX
 || 
c⁄
 !
ASN1_CON
)

1094 i‡(
debug
 > 1) {

1095 *
pdus
[] = {

1096 [
SNMP_PDU_GET
] = "get",

1097 [
SNMP_PDU_NEXT
] = "get-next",

1098 [
SNMP_PDU_RESPONSE
] = "response",

1099 [
SNMP_PDU_SET
] = "set",

1100 [
SNMP_PDU_TRAP1
] = "trapv1",

1101 [
SNMP_PDU_BULK
] = "bulk",

1102 [
SNMP_PDU_INFORM
] = "inform",

1103 [
SNMP_PDU_TRAP2
] = "trapv2"

1106 i‡(
pduty≥
 > 
SNMP_PDU_TRAP2
)

1107 
	`¥ötk
(
KERN_DEBUG
 "bßlg: badÖduÅy≥ %u\n", 
pduty≥
);

1109 
	`¥ötk
(
KERN_DEBUG
 "bßlg:Ödu: %s\n", 
pdus
[
pduty≥
]);

1111 i‡(
pduty≥
 !
SNMP_PDU_RESPONSE
 &&

1112 
pduty≥
 !
SNMP_PDU_TRAP1
 &&Öduty≥ !
SNMP_PDU_TRAP2
)

1118 i‡(
pduty≥
 =
SNMP_PDU_TRAP1
) {

1119 
¢mp_v1_å≠
 
å≠
;

1120 
ªt
 = 
	`¢mp_å≠_decode
(&
˘x
, &
å≠
, 
m≠
, 
check
);

1123 
	`k‰ì
(
å≠
.
id
);

1124 
	`k‰ì
((*)
å≠
.
ù_addªss
);

1126 i‡(!
ªt
)

1127  
ªt
;

1130 
¢mp_ªque°
 
ªq
;

1132 i‡(!
	`¢mp_ªque°_decode
(&
˘x
, &
ªq
))

1135 i‡(
debug
 > 1)

1136 
	`¥ötk
(
KERN_DEBUG
 "bsalg:Ñequest: id=0x%lxÉrror_status=%u "

1137 "îr‹_ödex=%u\n", 
ªq
.
id
,Ñeq.
îr‹_°©us
,

1138 
ªq
.
îr‹_ödex
);

1144 i‡(!
	`a¢1_hódî_decode
(&
˘x
, &
eoc
, &
˛s
, &
c⁄
, &
èg
))

1147 i‡(
˛s
 !
ASN1_UNI
 || 
c⁄
 !
ASN1_CON
 || 
èg
 !
ASN1_SEQ
)

1150 
obj
 = 
	`kmÆloc
((
¢mp_obje˘
), 
GFP_ATOMIC
);

1151 i‡(
obj
 =
NULL
) {

1152 i‡(
	`√t_øãlimô
())

1153 
	`¥ötk
(
KERN_WARNING
 "OOM i¿bßlg(%d)\n", 
__LINE__
);

1157 !
	`a¢1_eoc_decode
(&
˘x
, 
eoc
)) {

1158 
i
;

1160 i‡(!
	`¢mp_obje˘_decode
(&
˘x
, 
obj
)) {

1161 i‡(*
obj
) {

1162 i‡((*
obj
)->
id
)

1163 
	`k‰ì
((*
obj
)->
id
);

1164 
	`k‰ì
(*
obj
);

1166 
	`k‰ì
(
obj
);

1170 i‡(
debug
 > 1) {

1171 
	`¥ötk
(
KERN_DEBUG
 "bsalg: object: ");

1172 
i
 = 0; i < (*
obj
)->
id_Àn
; i++) {

1173 i‡(
i
 > 0)

1174 
	`¥ötk
(".");

1175 
	`¥ötk
("%lu", (*
obj
)->
id
[
i
]);

1177 
	`¥ötk
(":Åy≥=%u\n", (*
obj
)->
ty≥
);

1181 i‡((*
obj
)->
ty≥
 =
SNMP_IPADDR
)

1182 
	`m™gÀ_addªss
(
˘x
.
begö
, ctx.
poöãr
 - 4 , 
m≠
, 
check
);

1184 
	`k‰ì
((*
obj
)->
id
);

1185 
	`k‰ì
(*
obj
);

1187 
	`k‰ì
(
obj
);

1189 i‡(!
	`a¢1_eoc_decode
(&
˘x
, 
eoc
))

1193 
	}
}

1204 
	$¢mp_å™¶©e
(
ù_c⁄¡øck
 *
˘
,

1205 
ù_«t_öfo
 *
öfo
,

1206 
ù_c⁄¡øck_öfo
 
˘öfo
,

1207 
hooknum
,

1208 
sk_buff
 **
pskb
)

1210 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

1211 
udphdr
 *
udph
 = (udphd∏*)((
u_öt32_t
 *)
ùh
 + iph->
ihl
);

1212 
u_öt16_t
 
ud∂í
 = 
	`¡ohs
(
udph
->
Àn
);

1213 
u_öt16_t
 
∑yÀn
 = 
ud∂í
 - (
udphdr
);

1214 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

1215 
o˘1_m≠
 
m≠
;

1221 i‡(
dú
 =
IP_CT_DIR_ORIGINAL
) {

1223 
m≠
.
‰om
 = 
	`NOCT1
(
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
);

1224 
m≠
.
to
 = 
	`NOCT1
(
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
);

1227 
m≠
.
‰om
 = 
	`NOCT1
(
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
);

1228 
m≠
.
to
 = 
	`NOCT1
(
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
);

1231 i‡(
m≠
.
‰om
 =m≠.
to
)

1232  
NF_ACCEPT
;

1234 i‡(!
	`¢mp_∑r£_m™gÀ
((*)
udph
 + (
udphdr
),

1235 
∑yÀn
, &
m≠
, &
udph
->
check
)) {

1236 
	`¥ötk
(
KERN_WARNING
 "bsalg:Öarser failed\n");

1237  
NF_DROP
;

1239  
NF_ACCEPT
;

1240 
	}
}

1245 
	$«t_hñp
(
ù_c⁄¡øck
 *
˘
,

1246 
ù_c⁄¡øck_ex≥˘
 *
exp
,

1247 
ù_«t_öfo
 *
öfo
,

1248 
ù_c⁄¡øck_öfo
 
˘öfo
,

1249 
hooknum
,

1250 
sk_buff
 **
pskb
)

1252 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

1253 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

1254 
udphdr
 *
udph
 = (udphd∏*)((
u_öt32_t
 *)
ùh
 + iph->
ihl
);

1256 
	`•ö_lock_bh
(&
¢mp_lock
);

1262 i‡(!((
dú
 =
IP_CT_DIR_REPLY
 && 
hooknum
 =
NF_IP_PRE_ROUTING
 &&

1263 
udph
->
sour˚
 =
	`¡ohs
(
SNMP_PORT
)) ||

1264 (
dú
 =
IP_CT_DIR_ORIGINAL
 && 
hooknum
 =
NF_IP_POST_ROUTING
 &&

1265 
udph
->
de°
 =
	`¡ohs
(
SNMP_TRAP_PORT
)))) {

1266 
	`•ö_u∆ock_bh
(&
¢mp_lock
);

1267  
NF_ACCEPT
;

1270 i‡(
debug
 > 1) {

1271 
	`¥ötk
(
KERN_DEBUG
 "bsalg: dir=%s hook=%d manip=%sÜen=%d "

1276 
dú
 =
IP_CT_DIR_REPLY
 ? "ª∂y" : "‹ig", 
hooknum
,

1277 
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
 ? "snat" :

1278 "d«t", (*
pskb
)->
Àn
,

1279 
	`NIPQUAD
(
ùh
->
ßddr
), 
	`¡ohs
(
udph
->
sour˚
),

1280 
	`NIPQUAD
(
ùh
->
daddr
), 
	`¡ohs
(
udph
->
de°
),

1281 
	`NIPQUAD
(
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
),

1282 
	`NIPQUAD
(
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
),

1283 
	`NIPQUAD
(
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
),

1284 
	`NIPQUAD
(
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
));

1293 i‡(
	`¡ohs
(
udph
->
Àn
Ë=(*
pskb
)->À¿- (
ùh
->
ihl
 << 2)) {

1294 
ªt
 = 
	`¢mp_å™¶©e
(
˘
, 
öfo
, 
˘öfo
, 
hooknum
, 
pskb
);

1295 
	`•ö_u∆ock_bh
(&
¢mp_lock
);

1296  
ªt
;

1299 i‡(
	`√t_øãlimô
())

1300 
	`¥ötk
(
KERN_WARNING
 "bsalg: dropping malformedÖacket "

1302 
	`NIPQUAD
(
ùh
->
ßddr
), NIPQUAD(ùh->
daddr
));

1303 
	`•ö_u∆ock_bh
(&
¢mp_lock
);

1304  
NF_DROP
;

1305 
	}
}

1307 
ù_«t_hñ≥r
 
	g¢mp
 = {

1308 { 
NULL
, NULL },

1311 
THIS_MODULE
,

1312 { { 0, { .
udp
 = { 
__c⁄°™t_ht⁄s
(
SNMP_PORT
) } } },

1313 { 0, { 0 }, 
	gIPPROTO_UDP
 } },

1314 { { 0, { .
	gudp
 = { 0xFFFF } } },

1316 
	g«t_hñp
, 
	gNULL
 };

1318 
ù_«t_hñ≥r
 
	g¢mp_å≠
 = {

1319 { 
NULL
, NULL },

1322 
THIS_MODULE
,

1323 { { 0, { .
udp
 = { 
__c⁄°™t_ht⁄s
(
SNMP_TRAP_PORT
) } } },

1324 { 0, { 0 }, 
	gIPPROTO_UDP
 } },

1325 { { 0, { .
	gudp
 = { 0xFFFF } } },

1327 
	g«t_hñp
, 
	gNULL
 };

1335 
__öô
 
	$öô
()

1337 
ªt
 = 0;

1339 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(&
¢mp
);

1340 i‡(
ªt
 < 0)

1341  
ªt
;

1342 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(&
¢mp_å≠
);

1343 i‡(
ªt
 < 0) {

1344 
	`ù_«t_hñ≥r_uƒegi°î
(&
¢mp
);

1345  
ªt
;

1347  
ªt
;

1348 
	}
}

1350 
__exô
 
	$föi
()

1352 
	`ù_«t_hñ≥r_uƒegi°î
(&
¢mp
);

1353 
	`ù_«t_hñ≥r_uƒegi°î
(&
¢mp_å≠
);

1354 
	`synchr⁄ize_√t
();

1355 
	}
}

1357 
moduÀ_öô
(
öô
);

1358 
moduÀ_exô
(
föi
);

1360 
MODULE_PARM
(
debug
, "i");

	@ip_nat_standalone.c

21 
	~<löux/c⁄fig.h
>

22 
	~<löux/ty≥s.h
>

23 
	~<löux/icmp.h
>

24 
	~<löux/ù.h
>

25 
	~<löux/√tfûãr.h
>

26 
	~<löux/√tfûãr_ùv4.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/skbuff.h
>

29 
	~<löux/¥oc_fs.h
>

30 
	~<√t/ù.h
>

31 
	~<√t/checksum.h
>

32 
	~<löux/•ölock.h
>

34 
	#ASSERT_READ_LOCK
(
x
Ë
	`MUST_BE_READ_LOCKED
(&
ù_«t_lock
)

	)

35 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`MUST_BE_WRITE_LOCKED
(&
ù_«t_lock
)

	)

37 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

38 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

39 
	~<löux/√tfûãr_ùv4/ù_«t_¥Ÿocﬁ.h
>

40 
	~<löux/√tfûãr_ùv4/ù_«t_c‹e.h
>

41 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

42 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

43 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_c‹e.h
>

44 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

47 
	#DEBUGP
 
¥ötk


	)

49 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

52 
	#HOOKNAME
(
hooknum
Ë((hooknumË=
NF_IP_POST_ROUTING
 ? "POST_ROUTING" \

53 : ((
hooknum
Ë=
NF_IP_PRE_ROUTING
 ? "PRE_ROUTING" \

54 : ((
hooknum
Ë=
NF_IP_LOCAL_OUT
 ? "LOCAL_OUT" \

55 : ((
hooknum
Ë=
NF_IP_LOCAL_IN
 ? "LOCAL_IN" \

56 : "*ERROR*")))

	)

58 
ölöe
 
	$ˇŒ_ex≥˘
(
ù_c⁄¡øck
 *
ma°î
,

59 
sk_buff
 **
pskb
,

60 
hooknum
,

61 
ù_c⁄¡øck
 *
˘
,

62 
ù_«t_öfo
 *
öfo
)

64  
ma°î
->
«t
.
öfo
.
hñ≥r
->
	`ex≥˘
(
pskb
, 
hooknum
, 
˘
, info);

65 
	}
}

68 
ù_«t_‚
(
hooknum
,

69 
sk_buff
 **
pskb
,

70 c⁄° 
√t_devi˚
 *
ö
,

71 c⁄° 
√t_devi˚
 *
out
,

72 (*
ok‚
)(
sk_buff
 *))

74 
ù_c⁄¡øck
 *
˘
;

75 
ù_c⁄¡øck_öfo
 
˘öfo
;

76 
ù_«t_öfo
 *
öfo
;

78 
ù_«t_m™ù_ty≥
 
m™ùty≥
 = 
	`HOOK2MANIP
(
hooknum
);

82 
	`IP_NF_ASSERT
(!((*
pskb
)->
nh
.
ùh
->
‰ag_off


83 & 
	`ht⁄s
(
IP_MF
|
IP_OFFSET
)));

85 (*
pskb
)->
nfˇche
 |
NFC_UNKNOWN
;

88 i‡((*
pskb
)->
ù_summed
 =
CHECKSUM_HW
)

89 i‡(
	`skb_checksum_hñp
(
pskb
, (
out
 =
NULL
)))

90  
NF_DROP
;

92 
˘
 = 
	`ù_c⁄¡øck_gë
(*
pskb
, &
˘öfo
);

97 i‡(!
˘
) {

101 i‡((*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 =
IPPROTO_ICMP
) {

102 
icmphdr
 
hdr
;

104 i‡(
	`skb_c›y_bôs
(*
pskb
, (*pskb)->
nh
.
ùh
->
ihl
*4,

105 &
hdr
, (hdr)) == 0

106 && 
hdr
.
ty≥
 =
ICMP_REDIRECT
)

107  
NF_DROP
;

109  
NF_ACCEPT
;

112 
˘öfo
) {

113 
IP_CT_RELATED
:

114 
IP_CT_RELATED
+
IP_CT_IS_REPLY
:

115 i‡((*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 =
IPPROTO_ICMP
) {

116 i‡(!
	`icmp_ª∂y_å™¶©i⁄
(
pskb
, 
˘
, 
hooknum
,

117 
	`CTINFO2DIR
(
˘öfo
)))

118  
NF_DROP
;

120  
NF_ACCEPT
;

123 
IP_CT_NEW
:

124 
öfo
 = &
˘
->
«t
.info;

126 
	`WRITE_LOCK
(&
ù_«t_lock
);

129 i‡(!(
öfo
->
öôülized
 & (1 << 
m™ùty≥
))

130 #i‚de‡
CONFIG_IP_NF_NAT_LOCAL


136 && !(
˘
->
°©us
 & 
IPS_CONFIRMED
)

139 
ªt
;

141 i‡(
˘
->
ma°î


142 && 
	`ma°î_˘
(
˘
)->
«t
.
öfo
.
hñ≥r


143 && 
	`ma°î_˘
(
˘
)->
«t
.
öfo
.
hñ≥r
->
ex≥˘
) {

144 
ªt
 = 
	`ˇŒ_ex≥˘
(
	`ma°î_˘
(
˘
), 
pskb
,

145 
hooknum
, 
˘
, 
öfo
);

147 #ifde‡
CONFIG_IP_NF_NAT_LOCAL


149 i‡(
hooknum
 =
NF_IP_LOCAL_IN
)

150 
ªt
 = 
	`Æloc_nuŒ_bödög
(
˘
, 
öfo
,

151 
hooknum
);

154 
ªt
 = 
	`ù_«t_ruÀ_föd
(
pskb
, 
hooknum
, 
ö
, 
out
,

155 
˘
, 
öfo
);

158 i‡(
ªt
 !
NF_ACCEPT
) {

159 
	`WRITE_UNLOCK
(&
ù_«t_lock
);

160  
ªt
;

163 
	`DEBUGP
("Already setup manip %s for ct %p\n",

164 
m™ùty≥
 =
IP_NAT_MANIP_SRC
 ? "SRC" : "DST",

165 
˘
);

166 
	`WRITE_UNLOCK
(&
ù_«t_lock
);

171 
	`IP_NF_ASSERT
(
˘öfo
 =
IP_CT_ESTABLISHED


172 || 
˘öfo
 =(
IP_CT_ESTABLISHED
+
IP_CT_IS_REPLY
));

173 
öfo
 = &
˘
->
«t
.info;

176 
	`IP_NF_ASSERT
(
öfo
);

177  
	`do_bödögs
(
˘
, 
˘öfo
, 
öfo
, 
hooknum
, 
pskb
);

178 
	}
}

181 
ù_«t_out
(
hooknum
,

182 
sk_buff
 **
pskb
,

183 c⁄° 
√t_devi˚
 *
ö
,

184 c⁄° 
√t_devi˚
 *
out
,

185 (*
ok‚
)(
sk_buff
 *))

188 i‡((*
pskb
)->
Àn
 < (
ùhdr
)

189 || (*
pskb
)->
nh
.
ùh
->
ihl
 * 4 < (
ùhdr
))

190  
NF_ACCEPT
;

202 i‡((*
pskb
)->
nh
.
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_MF
|
IP_OFFSET
)) {

203 *
pskb
 = 
	`ù_˘_g©hî_‰ags
(*pskb);

205 i‡(!*
pskb
)

206  
NF_STOLEN
;

209  
	`ù_«t_‚
(
hooknum
, 
pskb
, 
ö
, 
out
, 
ok‚
);

210 
	}
}

212 #ifde‡
CONFIG_IP_NF_NAT_LOCAL


214 
ù_«t_loˇl_‚
(
hooknum
,

215 
sk_buff
 **
pskb
,

216 c⁄° 
√t_devi˚
 *
ö
,

217 c⁄° 
√t_devi˚
 *
out
,

218 (*
ok‚
)(
sk_buff
 *))

220 
u_öt32_t
 
ßddr
, 
daddr
;

221 
ªt
;

224 i‡((*
pskb
)->
Àn
 < (
ùhdr
)

225 || (*
pskb
)->
nh
.
ùh
->
ihl
 * 4 < (
ùhdr
))

226  
NF_ACCEPT
;

228 
ßddr
 = (*
pskb
)->
nh
.
ùh
->saddr;

229 
daddr
 = (*
pskb
)->
nh
.
ùh
->daddr;

231 
ªt
 = 
	`ù_«t_‚
(
hooknum
, 
pskb
, 
ö
, 
out
, 
ok‚
);

232 i‡(
ªt
 !
NF_DROP
 &&Ñë !
NF_STOLEN


233 && ((*
pskb
)->
nh
.
ùh
->
ßddr
 != saddr

234 || (*
pskb
)->
nh
.
ùh
->
daddr
 != daddr))

235  
	`ù_rouã_me_h¨dî
(
pskb
Ë=0 ? 
ªt
 : 
NF_DROP
;

236  
ªt
;

237 
	}
}

243 
nf_hook_›s
 
	gù_«t_ö_›s
 = {

244 .
hook
 = 
ù_«t_‚
,

245 .
	gow√r
 = 
THIS_MODULE
,

246 .
	gpf
 = 
PF_INET
,

247 .
	ghooknum
 = 
NF_IP_PRE_ROUTING
,

248 .
	g¥i‹ôy
 = 
NF_IP_PRI_NAT_DST
,

252 
nf_hook_›s
 
	gù_«t_out_›s
 = {

253 .
hook
 = 
ù_«t_out
,

254 .
	gow√r
 = 
THIS_MODULE
,

255 .
	gpf
 = 
PF_INET
,

256 .
	ghooknum
 = 
NF_IP_POST_ROUTING
,

257 .
	g¥i‹ôy
 = 
NF_IP_PRI_NAT_SRC
,

260 #ifde‡
CONFIG_IP_NF_NAT_LOCAL


262 
nf_hook_›s
 
	gù_«t_loˇl_out_›s
 = {

263 .
hook
 = 
ù_«t_loˇl_‚
,

264 .
	gow√r
 = 
THIS_MODULE
,

265 .
	gpf
 = 
PF_INET
,

266 .
	ghooknum
 = 
NF_IP_LOCAL_OUT
,

267 .
	g¥i‹ôy
 = 
NF_IP_PRI_NAT_DST
,

271 
nf_hook_›s
 
	gù_«t_loˇl_ö_›s
 = {

272 .
hook
 = 
ù_«t_‚
,

273 .
	gow√r
 = 
THIS_MODULE
,

274 .
	gpf
 = 
PF_INET
,

275 .
	ghooknum
 = 
NF_IP_LOCAL_IN
,

276 .
	g¥i‹ôy
 = 
NF_IP_PRI_NAT_SRC
,

281 
	$ù_«t_¥Ÿocﬁ_ªgi°î
(
ù_«t_¥Ÿocﬁ
 *
¥Ÿo
)

283 
ªt
 = 0;

284 
li°_hód
 *
i
;

286 
	`WRITE_LOCK
(&
ù_«t_lock
);

287 
	`li°_f‹_óch
(
i
, &
¥Ÿos
) {

288 i‡(((
ù_«t_¥Ÿocﬁ
 *)
i
)->
¥Ÿ⁄um


289 =
¥Ÿo
->
¥Ÿ⁄um
) {

290 
ªt
 = -
EBUSY
;

291 
out
;

295 
	`li°_¥ïíd
(&
¥Ÿos
, 
¥Ÿo
);

296 
out
:

297 
	`WRITE_UNLOCK
(&
ù_«t_lock
);

298  
ªt
;

299 
	}
}

302 
	$ù_«t_¥Ÿocﬁ_uƒegi°î
(
ù_«t_¥Ÿocﬁ
 *
¥Ÿo
)

304 
	`WRITE_LOCK
(&
ù_«t_lock
);

305 
	`LIST_DELETE
(&
¥Ÿos
, 
¥Ÿo
);

306 
	`WRITE_UNLOCK
(&
ù_«t_lock
);

309 
	`synchr⁄ize_√t
();

310 
	}
}

312 
	$öô_‹_˛ónup
(
öô
)

314 
ªt
 = 0;

316 
	`√ed_ù_c⁄¡øck
();

318 i‡(!
öô
Ë
˛ónup
;

320 
ªt
 = 
	`ù_«t_ruÀ_öô
();

321 i‡(
ªt
 < 0) {

322 
	`¥ötk
("ip_nat_init: can't setupÑules.\n");

323 
˛ónup_nŸhög
;

325 
ªt
 = 
	`ù_«t_öô
();

326 i‡(
ªt
 < 0) {

327 
	`¥ötk
("ip_nat_init: can't setupÑules.\n");

328 
˛ónup_ruÀ_öô
;

330 
ªt
 = 
	`nf_ªgi°î_hook
(&
ù_«t_ö_›s
);

331 i‡(
ªt
 < 0) {

332 
	`¥ötk
("ip_nat_init: can'tÑegister in hook.\n");

333 
˛ónup_«t
;

335 
ªt
 = 
	`nf_ªgi°î_hook
(&
ù_«t_out_›s
);

336 i‡(
ªt
 < 0) {

337 
	`¥ötk
("ip_nat_init: can'tÑegister out hook.\n");

338 
˛ónup_ö›s
;

340 #ifde‡
CONFIG_IP_NF_NAT_LOCAL


341 
ªt
 = 
	`nf_ªgi°î_hook
(&
ù_«t_loˇl_out_›s
);

342 i‡(
ªt
 < 0) {

343 
	`¥ötk
("ip_nat_init: can'tÑegisterÜocal out hook.\n");

344 
˛ónup_out›s
;

346 
ªt
 = 
	`nf_ªgi°î_hook
(&
ù_«t_loˇl_ö_›s
);

347 i‡(
ªt
 < 0) {

348 
	`¥ötk
("ip_nat_init: can'tÑegisterÜocal in hook.\n");

349 
˛ónup_loˇlout›s
;

352  
ªt
;

354 
˛ónup
:

355 #ifde‡
CONFIG_IP_NF_NAT_LOCAL


356 
	`nf_uƒegi°î_hook
(&
ù_«t_loˇl_ö_›s
);

357 
˛ónup_loˇlout›s
:

358 
	`nf_uƒegi°î_hook
(&
ù_«t_loˇl_out_›s
);

359 
˛ónup_out›s
:

361 
	`nf_uƒegi°î_hook
(&
ù_«t_out_›s
);

362 
˛ónup_ö›s
:

363 
	`nf_uƒegi°î_hook
(&
ù_«t_ö_›s
);

364 
˛ónup_«t
:

365 
	`ù_«t_˛ónup
();

366 
˛ónup_ruÀ_öô
:

367 
	`ù_«t_ruÀ_˛ónup
();

368 
˛ónup_nŸhög
:

369 
	`MUST_BE_READ_WRITE_UNLOCKED
(&
ù_«t_lock
);

370  
ªt
;

371 
	}
}

373 
__öô
 
	$öô
()

375  
	`öô_‹_˛ónup
(1);

376 
	}
}

378 
__exô
 
	$föi
()

380 
	`öô_‹_˛ónup
(0);

381 
	}
}

383 
moduÀ_öô
(
öô
);

384 
moduÀ_exô
(
föi
);

386 
EXPORT_SYMBOL
(
ù_«t_£tup_öfo
);

387 
EXPORT_SYMBOL
(
ù_«t_¥Ÿocﬁ_ªgi°î
);

388 
EXPORT_SYMBOL
(
ù_«t_¥Ÿocﬁ_uƒegi°î
);

389 
EXPORT_SYMBOL
(
ù_«t_hñ≥r_ªgi°î
);

390 
EXPORT_SYMBOL
(
ù_«t_hñ≥r_uƒegi°î
);

391 
EXPORT_SYMBOL
(
ù_«t_chót_check
);

392 
EXPORT_SYMBOL
(
ù_«t_m™gÀ_t˝_∑ckë
);

393 
EXPORT_SYMBOL
(
ù_«t_m™gÀ_udp_∑ckë
);

394 
EXPORT_SYMBOL
(
ù_«t_u£d_tu∂e
);

395 
MODULE_LICENSE
("GPL");

	@ip_nat_tftp.c

24 
	~<löux/moduÀ.h
>

25 
	~<löux/√tfûãr_ùv4.h
>

26 
	~<löux/ù.h
>

27 
	~<löux/udp.h
>

29 
	~<löux/√tfûãr.h
>

30 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

31 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

32 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_t·p.h
>

33 
	~<löux/√tfûãr_ùv4/ù_«t_hñ≥r.h
>

34 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

36 
MODULE_AUTHOR
("Magnus Boden <mb@ozaba.mine.nu>");

37 
MODULE_DESCRIPTION
("tftp NAT helper");

38 
MODULE_LICENSE
("GPL");

40 
	#MAX_PORTS
 8

	)

42 
	gp‹ts
[
MAX_PORTS
];

43 
	gp‹ts_c
 = 0;

44 
MODULE_PARM
(
p‹ts
,"1-" 
__MODULE_STRING
(
MAX_PORTS
) "i");

45 
MODULE_PARM_DESC
(
p‹ts
, "portÇumbers ofÅftp servers");

48 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
("%s:%s:" format, \

49 
__FILE__
, 
__FUNCTION__
 , ## 
¨gs
)

	)

51 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

54 
	$t·p_«t_hñp
(
ù_c⁄¡øck
 *
˘
,

55 
ù_c⁄¡øck_ex≥˘
 *
exp
,

56 
ù_«t_öfo
 *
öfo
,

57 
ù_c⁄¡øck_öfo
 
˘öfo
,

58 
hooknum
,

59 
sk_buff
 **
pskb
)

61 
dú
 = 
	`CTINFO2DIR
(
˘öfo
);

62 
t·phdr
 
t·ph
;

63 
ù_c⁄¡øck_tu∂e
 
ª∂
;

65 i‡(!((
hooknum
 =
NF_IP_POST_ROUTING
 && 
dú
 =
IP_CT_DIR_ORIGINAL
)

66 || (
hooknum
 =
NF_IP_PRE_ROUTING
 && 
dú
 =
IP_CT_DIR_REPLY
)))

67  
NF_ACCEPT
;

69 i‡(!
exp
) {

70 
	`DEBUGP
("no conntrackÉxpectationÅo modify\n");

71  
NF_ACCEPT
;

74 i‡(
	`skb_c›y_bôs
(*
pskb
, (*pskb)->
nh
.
ùh
->
ihl
*4+(
udphdr
),

75 &
t·ph
, (tftph)) != 0)

76  
NF_DROP
;

78 
	`¡ohs
(
t·ph
.
›code
)) {

80 
TFTP_OPCODE_READ
:

81 
TFTP_OPCODE_WRITE
:

82 
ª∂
 = 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
;

83 
	`DEBUGP
("");

84 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
);

85 
	`DUMP_TUPLE
(&
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
);

86 
	`DEBUGP
("expecting: ");

87 
	`DUMP_TUPLE
(&
ª∂
);

88 
	`DUMP_TUPLE
(&
exp
->
mask
);

89 
	`ù_c⁄¡øck_ch™ge_ex≥˘
(
exp
, &
ª∂
);

92 
	`DEBUGP
("Unknown opcode\n");

95  
NF_ACCEPT
;

96 
	}
}

99 
	$t·p_«t_ex≥˘ed
(
sk_buff
 **
pskb
,

100 
hooknum
,

101 
ù_c⁄¡øck
 *
˘
,

102 
ù_«t_öfo
 *
öfo
)

104 c⁄° 
ù_c⁄¡øck
 *
ma°î
 = 
˘
->ma°î->
ex≥˘™t
;

105 c⁄° 
ù_c⁄¡øck_tu∂e
 *
‹ig
 =

106 &
ma°î
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
;

107 
ù_«t_mu…i_ønge
 
mr
;

109 c⁄° 
ù_c⁄¡øck_tu∂e
 *
ª∂
 =

110 &
ma°î
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
;

111 
udphdr
 
udph
;

113 i‡(
	`skb_c›y_bôs
(*
pskb
,(*pskb)->
nh
.
ùh
->
ihl
*4,&
udph
,(udph))!=0)

114  
NF_DROP
;

117 
	`IP_NF_ASSERT
(
öfo
);

118 
	`IP_NF_ASSERT
(
ma°î
);

119 
	`IP_NF_ASSERT
(!(
öfo
->
öôülized
 & (1 << 
	`HOOK2MANIP
(
hooknum
))));

121 
mr
.
øngesize
 = 1;

122 
mr
.
ønge
[0].
Êags
 = 
IP_NAT_RANGE_MAP_IPS
;

124 i‡(
	`HOOK2MANIP
(
hooknum
Ë=
IP_NAT_MANIP_SRC
) {

125 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
‹ig
->
d°
.
ù
;

126 
	`DEBUGP
("orig: %u.%u.%u.%u:%u <-> %u.%u.%u.%u:%u "

128 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
udph
.
sour˚
),

129 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
), 
	`¡ohs
(
udph
.
de°
),

130 
	`NIPQUAD
(
‹ig
->
d°
.
ù
));

132 
mr
.
ønge
[0].
mö_ù
 = mr.ønge[0].
max_ù
 = 
‹ig
->
§c
.
ù
;

133 
mr
.
ønge
[0].
mö
.
udp
.
p‹t
 = mr.ønge[0].
max
.udp.port =

134 
‹ig
->
§c
.
u
.
udp
.
p‹t
;

135 
mr
.
ønge
[0].
Êags
 |
IP_NAT_RANGE_PROTO_SPECIFIED
;

137 
	`DEBUGP
("orig: %u.%u.%u.%u:%u <-> %u.%u.%u.%u:%u "

139 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
), 
	`¡ohs
(
udph
.
sour˚
),

140 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
), 
	`¡ohs
(
udph
.
de°
),

141 
	`NIPQUAD
(
‹ig
->
§c
.
ù
), 
	`¡ohs
(‹ig->§c.
u
.
udp
.
p‹t
));

144  
	`ù_«t_£tup_öfo
(
˘
,&
mr
,
hooknum
);

145 
	}
}

147 
ù_«t_hñ≥r
 
	gt·p
[
MAX_PORTS
];

148 
	gt·p_«mes
[
MAX_PORTS
][10];

150 
	$föi
()

152 
i
;

154 
i
 = 0 ; i < 
p‹ts_c
; i++) {

155 
	`DEBUGP
("uƒegi°îög hñ≥∏f‹Ö‹à%d\n", 
p‹ts
[
i
]);

156 
	`ù_«t_hñ≥r_uƒegi°î
(&
t·p
[
i
]);

158 
	}
}

160 
__öô
 
	$öô
()

162 
i
, 
ªt
 = 0;

163 *
tm≤ame
;

165 i‡(!
p‹ts
[0])

166 
p‹ts
[0] = 
TFTP_PORT
;

168 
i
 = 0 ; (ò< 
MAX_PORTS
Ë&& 
p‹ts
[i] ; i++) {

169 
	`mem£t
(&
t·p
[
i
], 0, (
ù_«t_hñ≥r
));

171 
t·p
[
i
].
tu∂e
.
d°
.
¥Ÿ⁄um
 = 
IPPROTO_UDP
;

172 
t·p
[
i
].
tu∂e
.
§c
.
u
.
udp
.
p‹t
 = 
	`ht⁄s
(
p‹ts
[i]);

173 
t·p
[
i
].
mask
.
d°
.
¥Ÿ⁄um
 = 0xFFFF;

174 
t·p
[
i
].
mask
.
§c
.
u
.
udp
.
p‹t
 = 0xFFFF;

175 
t·p
[
i
].
hñp
 = 
t·p_«t_hñp
;

176 
t·p
[
i
].
Êags
 = 0;

177 
t·p
[
i
].
me
 = 
THIS_MODULE
;

178 
t·p
[
i
].
ex≥˘
 = 
t·p_«t_ex≥˘ed
;

180 
tm≤ame
 = &
t·p_«mes
[
i
][0];

181 i‡(
p‹ts
[
i
] =
TFTP_PORT
)

182 
	`•rötf
(
tm≤ame
, "tftp");

184 
	`•rötf
(
tm≤ame
, "t·p-%d", 
i
);

185 
t·p
[
i
].
«me
 = 
tm≤ame
;

187 
	`DEBUGP
("ip_nat_tftp:Ñegistering forÖort %d:Çame %s\n",

188 
p‹ts
[
i
], 
t·p
[i].
«me
);

189 
ªt
 = 
	`ù_«t_hñ≥r_ªgi°î
(&
t·p
[
i
]);

191 i‡(
ªt
) {

192 
	`¥ötk
("ip_nat_tftp: unableÅoÑegister forÖort %d\n",

193 
p‹ts
[
i
]);

194 
	`föi
();

195  
ªt
;

197 
p‹ts_c
++;

199  
ªt
;

200 
	}
}

202 
moduÀ_öô
(
öô
);

203 
moduÀ_exô
(
föi
);

	@ip_nat_tftp.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_queue.c

19 
	~<löux/moduÀ.h
>

20 
	~<löux/skbuff.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/ù.h
>

23 
	~<löux/nŸifõr.h
>

24 
	~<löux/√tdevi˚.h
>

25 
	~<löux/√tfûãr.h
>

26 
	~<löux/√tfûãr_ùv4/ù_queue.h
>

27 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

28 
	~<löux/√éök.h
>

29 
	~<löux/•ölock.h
>

30 
	~<löux/sys˘l.h
>

31 
	~<löux/¥oc_fs.h
>

32 
	~<löux/£curôy.h
>

33 
	~<√t/sock.h
>

34 
	~<√t/rouã.h
>

36 
	#IPQ_QMAX_DEFAULT
 1024

	)

37 
	#IPQ_PROC_FS_NAME
 "ù_queue"

	)

38 
	#NET_IPQ_QMAX
 2088

	)

39 
	#NET_IPQ_QMAX_NAME
 "ù_queue_maxÀn"

	)

41 
	sùq_π_öfo
 {

42 
__u8
 
	mtos
;

43 
__u32
 
	mdaddr
;

44 
__u32
 
	mßddr
;

47 
	sùq_queue_íåy
 {

48 
li°_hód
 
	mli°
;

49 
nf_öfo
 *
	möfo
;

50 
sk_buff
 *
	mskb
;

51 
ùq_π_öfo
 
	mπ_öfo
;

54 (*
	tùq_cmp‚
)(
	tùq_queue_íåy
 *, );

56 
c›y_mode
 = 
IPQ_COPY_NONE
;

57 
queue_maxÀn
 = 
IPQ_QMAX_DEFAULT
;

58 
rwlock_t
 
queue_lock
 = 
RW_LOCK_UNLOCKED
;

59 
≥î_pid
;

60 
c›y_ønge
;

61 
queue_tŸÆ
;

62 
sock
 *
ùq∆
;

63 
	`LIST_HEAD
(
queue_li°
);

64 
	`DECLARE_MUTEX
(
ùq∆_£m
);

67 
	$ùq_issue_vîdi˘
(
ùq_queue_íåy
 *
íåy
, 
vîdi˘
)

69 
	`nf_ªöje˘
(
íåy
->
skb
,É¡ry->
öfo
, 
vîdi˘
);

70 
	`k‰ì
(
íåy
);

71 
	}
}

73 
ölöe
 

74 
	$__ùq_íqueue_íåy
(
ùq_queue_íåy
 *
íåy
)

76 i‡(
queue_tŸÆ
 >
queue_maxÀn
) {

77 i‡(
	`√t_øãlimô
())

78 
	`¥ötk
(
KERN_WARNING
 "ip_queue: fullát %dÉntries, "

79 "dr›pögÖackë(s).\n", 
queue_tŸÆ
);

80  -
ENOSPC
;

82 
	`li°_add
(&
íåy
->
li°
, &
queue_li°
);

83 
queue_tŸÆ
++;

85 
	}
}

91 
ölöe
 
ùq_queue_íåy
 *

92 
	$__ùq_föd_íåy
(
ùq_cmp‚
 
cmp‚
, 
d©a
)

94 
li°_hód
 *
p
;

96 
	`li°_f‹_óch_¥ev
(
p
, &
queue_li°
) {

97 
ùq_queue_íåy
 *
íåy
 = (ùq_queue_íåy *)
p
;

99 i‡(!
cmp‚
 || 
	`cmp‚
(
íåy
, 
d©a
))

100  
íåy
;

102  
NULL
;

103 
	}
}

105 
ölöe
 

106 
	$__ùq_dequeue_íåy
(
ùq_queue_íåy
 *
íåy
)

108 
	`li°_dñ
(&
íåy
->
li°
);

109 
queue_tŸÆ
--;

110 
	}
}

112 
ölöe
 
ùq_queue_íåy
 *

113 
	$__ùq_föd_dequeue_íåy
(
ùq_cmp‚
 
cmp‚
, 
d©a
)

115 
ùq_queue_íåy
 *
íåy
;

117 
íåy
 = 
	`__ùq_föd_íåy
(
cmp‚
, 
d©a
);

118 i‡(
íåy
 =
NULL
)

119  
NULL
;

121 
	`__ùq_dequeue_íåy
(
íåy
);

122  
íåy
;

123 
	}
}

126 
ölöe
 

127 
	$__ùq_Êush
(
vîdi˘
)

129 
ùq_queue_íåy
 *
íåy
;

131 (
íåy
 = 
	`__ùq_föd_dequeue_íåy
(
NULL
, 0)))

132 
	`ùq_issue_vîdi˘
(
íåy
, 
vîdi˘
);

133 
	}
}

135 
ölöe
 

136 
	$__ùq_£t_mode
(
mode
, 
ønge
)

138 
°©us
 = 0;

140 
mode
) {

141 
IPQ_COPY_NONE
:

142 
IPQ_COPY_META
:

143 
c›y_mode
 = 
mode
;

144 
c›y_ønge
 = 0;

147 
IPQ_COPY_PACKET
:

148 
c›y_mode
 = 
mode
;

149 
c›y_ønge
 = 
ønge
;

150 i‡(
c›y_ønge
 > 0xFFFF)

151 
c›y_ønge
 = 0xFFFF;

155 
°©us
 = -
EINVAL
;

158  
°©us
;

159 
	}
}

161 
ölöe
 

162 
	$__ùq_ª£t
()

164 
≥î_pid
 = 0;

165 
	`__ùq_£t_mode
(
IPQ_COPY_NONE
, 0);

166 
	`__ùq_Êush
(
NF_DROP
);

167 
	}
}

169 
ùq_queue_íåy
 *

170 
	$ùq_föd_dequeue_íåy
(
ùq_cmp‚
 
cmp‚
, 
d©a
)

172 
ùq_queue_íåy
 *
íåy
;

174 
	`wrôe_lock_bh
(&
queue_lock
);

175 
íåy
 = 
	`__ùq_föd_dequeue_íåy
(
cmp‚
, 
d©a
);

176 
	`wrôe_u∆ock_bh
(&
queue_lock
);

177  
íåy
;

178 
	}
}

181 
	$ùq_Êush
(
vîdi˘
)

183 
	`wrôe_lock_bh
(&
queue_lock
);

184 
	`__ùq_Êush
(
vîdi˘
);

185 
	`wrôe_u∆ock_bh
(&
queue_lock
);

186 
	}
}

188 
sk_buff
 *

189 
	$ùq_buûd_∑ckë_mesßge
(
ùq_queue_íåy
 *
íåy
, *
îΩ
)

191 *
ﬁd_èû
;

192 
size_t
 
size
 = 0;

193 
size_t
 
d©a_Àn
 = 0;

194 
sk_buff
 *
skb
;

195 
ùq_∑ckë_msg
 *
pmsg
;

196 
∆msghdr
 *
∆h
;

198 
	`ªad_lock_bh
(&
queue_lock
);

200 
c›y_mode
) {

201 
IPQ_COPY_META
:

202 
IPQ_COPY_NONE
:

203 
size
 = 
	`NLMSG_SPACE
((*
pmsg
));

204 
d©a_Àn
 = 0;

207 
IPQ_COPY_PACKET
:

208 i‡(
c›y_ønge
 =0 || c›y_øngê> 
íåy
->
skb
->
Àn
)

209 
d©a_Àn
 = 
íåy
->
skb
->
Àn
;

211 
d©a_Àn
 = 
c›y_ønge
;

213 
size
 = 
	`NLMSG_SPACE
((*
pmsg
Ë+ 
d©a_Àn
);

217 *
îΩ
 = -
EINVAL
;

218 
	`ªad_u∆ock_bh
(&
queue_lock
);

219  
NULL
;

222 
	`ªad_u∆ock_bh
(&
queue_lock
);

224 
skb
 = 
	`Æloc_skb
(
size
, 
GFP_ATOMIC
);

225 i‡(!
skb
)

226 
∆msg_Áûuª
;

228 
ﬁd_èû

skb
->
èû
;

229 
∆h
 = 
	`NLMSG_PUT
(
skb
, 0, 0, 
IPQM_PACKET
, 
size
 - (*nlh));

230 
pmsg
 = 
	`NLMSG_DATA
(
∆h
);

231 
	`mem£t
(
pmsg
, 0, (*pmsg));

233 
pmsg
->
∑ckë_id
 = ()
íåy
;

234 
pmsg
->
d©a_Àn
 = data_len;

235 
pmsg
->
time°amp_£c
 = 
íåy
->
skb
->
°amp
.
tv_£c
;

236 
pmsg
->
time°amp_u£c
 = 
íåy
->
skb
->
°amp
.
tv_u£c
;

237 
pmsg
->
m¨k
 = 
íåy
->
skb
->
nfm¨k
;

238 
pmsg
->
hook
 = 
íåy
->
öfo
->hook;

239 
pmsg
->
hw_¥Ÿocﬁ
 = 
íåy
->
skb
->
¥Ÿocﬁ
;

241 i‡(
íåy
->
öfo
->
ödev
)

242 
	`°r˝y
(
pmsg
->
ödev_«me
, 
íåy
->
öfo
->
ödev
->
«me
);

244 
pmsg
->
ödev_«me
[0] = '\0';

246 i‡(
íåy
->
öfo
->
outdev
)

247 
	`°r˝y
(
pmsg
->
outdev_«me
, 
íåy
->
öfo
->
outdev
->
«me
);

249 
pmsg
->
outdev_«me
[0] = '\0';

251 i‡(
íåy
->
öfo
->
ödev
 &&É¡ry->
skb
->
dev
) {

252 
pmsg
->
hw_ty≥
 = 
íåy
->
skb
->
dev
->
ty≥
;

253 i‡(
íåy
->
skb
->
dev
->
h¨d_hódî_∑r£
)

254 
pmsg
->
hw_addæí
 =

255 
íåy
->
skb
->
dev
->
	`h¨d_hódî_∑r£
(entry->skb,

256 
pmsg
->
hw_addr
);

259 i‡(
d©a_Àn
)

260 
	`mem˝y
(
pmsg
->
∑ylﬂd
, 
íåy
->
skb
->
d©a
, 
d©a_Àn
);

262 
∆h
->
∆msg_Àn
 = 
skb
->
èû
 - 
ﬁd_èû
;

263  
skb
;

265 
∆msg_Áûuª
:

266 i‡(
skb
)

267 
	`k‰ì_skb
(
skb
);

268 *
îΩ
 = -
EINVAL
;

269 
	`¥ötk
(
KERN_ERR
 "ip_queue:Érror creatingÖacket message\n");

270  
NULL
;

271 
	}
}

274 
	$ùq_íqueue_∑ckë
(
sk_buff
 *
skb
, 
nf_öfo
 *
öfo
, *
d©a
)

276 
°©us
 = -
EINVAL
;

277 
sk_buff
 *
nskb
;

278 
ùq_queue_íåy
 *
íåy
;

280 i‡(
c›y_mode
 =
IPQ_COPY_NONE
)

281  -
EAGAIN
;

283 
íåy
 = 
	`kmÆloc
((*íåy), 
GFP_ATOMIC
);

284 i‡(
íåy
 =
NULL
) {

285 
	`¥ötk
(
KERN_ERR
 "ip_queue: OOM in ipq_enqueue_packet()\n");

286  -
ENOMEM
;

289 
íåy
->
öfo
 = info;

290 
íåy
->
skb
 = skb;

292 i‡(
íåy
->
öfo
->
hook
 =
NF_IP_LOCAL_OUT
) {

293 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

295 
íåy
->
π_öfo
.
tos
 = 
ùh
->tos;

296 
íåy
->
π_öfo
.
daddr
 = 
ùh
->daddr;

297 
íåy
->
π_öfo
.
ßddr
 = 
ùh
->saddr;

300 
nskb
 = 
	`ùq_buûd_∑ckë_mesßge
(
íåy
, &
°©us
);

301 i‡(
nskb
 =
NULL
)

302 
îr_out_‰ì
;

304 
	`wrôe_lock_bh
(&
queue_lock
);

306 i‡(!
≥î_pid
)

307 
îr_out_‰ì_nskb
;

310 
°©us
 = 
	`√éök_uniˇ°
(
ùq∆
, 
nskb
, 
≥î_pid
, 
MSG_DONTWAIT
);

311 i‡(
°©us
 < 0)

312 
îr_out_u∆ock
;

314 
°©us
 = 
	`__ùq_íqueue_íåy
(
íåy
);

315 i‡(
°©us
 < 0)

316 
îr_out_u∆ock
;

318 
	`wrôe_u∆ock_bh
(&
queue_lock
);

319  
°©us
;

321 
îr_out_‰ì_nskb
:

322 
	`k‰ì_skb
(
nskb
);

324 
îr_out_u∆ock
:

325 
	`wrôe_u∆ock_bh
(&
queue_lock
);

327 
îr_out_‰ì
:

328 
	`k‰ì
(
íåy
);

329  
°©us
;

330 
	}
}

333 
	$ùq_m™gÀ_ùv4
(
ùq_vîdi˘_msg_t
 *
v
, 
ùq_queue_íåy
 *
e
)

335 
diff
;

336 
ùhdr
 *
u£r_ùh
 = (ùhd∏*)
v
->
∑ylﬂd
;

338 i‡(
v
->
d©a_Àn
 < (*
u£r_ùh
))

340 
diff
 = 
v
->
d©a_Àn
 - 
e
->
skb
->
Àn
;

341 i‡(
diff
 < 0)

342 
	`skb_åim
(
e
->
skb
, 
v
->
d©a_Àn
);

343 i‡(
diff
 > 0) {

344 i‡(
v
->
d©a_Àn
 > 0xFFFF)

345  -
EINVAL
;

346 i‡(
diff
 > 
	`skb_èûroom
(
e
->
skb
)) {

347 
sk_buff
 *
√wskb
;

349 
√wskb
 = 
	`skb_c›y_ex∑nd
(
e
->
skb
,

350 
	`skb_hódroom
(
e
->
skb
),

351 
diff
,

352 
GFP_ATOMIC
);

353 i‡(
√wskb
 =
NULL
) {

354 
	`¥ötk
(
KERN_WARNING
 "ip_queue: OOM "

356  -
ENOMEM
;

358 i‡(
e
->
skb
->
sk
)

359 
	`skb_£t_ow√r_w
(
√wskb
, 
e
->
skb
->
sk
);

360 
	`k‰ì_skb
(
e
->
skb
);

361 
e
->
skb
 = 
√wskb
;

363 
	`skb_put
(
e
->
skb
, 
diff
);

365 
	`mem˝y
(
e
->
skb
->
d©a
, 
v
->
∑ylﬂd
, v->
d©a_Àn
);

366 
e
->
skb
->
nfˇche
 |
NFC_ALTERED
;

372 i‡(
e
->
öfo
->
hook
 =
NF_IP_LOCAL_OUT
) {

373 
ùhdr
 *
ùh
 = 
e
->
skb
->
nh
.iph;

375 i‡(!(
ùh
->
tos
 =
e
->
π_öfo
.tos

376 && 
ùh
->
daddr
 =
e
->
π_öfo
.daddr

377 && 
ùh
->
ßddr
 =
e
->
π_öfo
.saddr))

378  
	`ù_rouã_me_h¨dî
(&
e
->
skb
);

381 
	}
}

383 
ölöe
 

384 
	$id_cmp
(
ùq_queue_íåy
 *
e
, 
id
)

386  (
id
 =()
e
);

387 
	}
}

390 
	$ùq_£t_vîdi˘
(
ùq_vîdi˘_msg
 *
vmsg
, 
Àn
)

392 
ùq_queue_íåy
 *
íåy
;

394 i‡(
vmsg
->
vÆue
 > 
NF_MAX_VERDICT
)

395  -
EINVAL
;

397 
íåy
 = 
	`ùq_föd_dequeue_íåy
(
id_cmp
, 
vmsg
->
id
);

398 i‡(
íåy
 =
NULL
)

399  -
ENOENT
;

401 
vîdi˘
 = 
vmsg
->
vÆue
;

403 i‡(
vmsg
->
d©a_Àn
 && vmsg->d©a_À¿=
Àn
)

404 i‡(
	`ùq_m™gÀ_ùv4
(
vmsg
, 
íåy
) < 0)

405 
vîdi˘
 = 
NF_DROP
;

407 
	`ùq_issue_vîdi˘
(
íåy
, 
vîdi˘
);

410 
	}
}

413 
	$ùq_£t_mode
(
mode
, 
ønge
)

415 
°©us
;

417 
	`wrôe_lock_bh
(&
queue_lock
);

418 
°©us
 = 
	`__ùq_£t_mode
(
mode
, 
ønge
);

419 
	`wrôe_u∆ock_bh
(&
queue_lock
);

420  
°©us
;

421 
	}
}

424 
	$ùq_ª˚ive_≥î
(
ùq_≥î_msg
 *
pmsg
,

425 
ty≥
, 
Àn
)

427 
°©us
 = 0;

429 i‡(
Àn
 < (*
pmsg
))

430  -
EINVAL
;

432 
ty≥
) {

433 
IPQM_MODE
:

434 
°©us
 = 
	`ùq_£t_mode
(
pmsg
->
msg
.
mode
.
vÆue
,

435 
pmsg
->
msg
.
mode
.
ønge
);

438 
IPQM_VERDICT
:

439 i‡(
pmsg
->
msg
.
vîdi˘
.
vÆue
 > 
NF_MAX_VERDICT
)

440 
°©us
 = -
EINVAL
;

442 
°©us
 = 
	`ùq_£t_vîdi˘
(&
pmsg
->
msg
.
vîdi˘
,

443 
Àn
 - (*
pmsg
));

446 
°©us
 = -
EINVAL
;

448  
°©us
;

449 
	}
}

452 
	$dev_cmp
(
ùq_queue_íåy
 *
íåy
, 
ifödex
)

454 i‡(
íåy
->
öfo
->
ödev
)

455 i‡(
íåy
->
öfo
->
ödev
->
ifödex
 == ifindex)

458 i‡(
íåy
->
öfo
->
outdev
)

459 i‡(
íåy
->
öfo
->
outdev
->
ifödex
 == ifindex)

463 
	}
}

466 
	$ùq_dev_dr›
(
ifödex
)

468 
ùq_queue_íåy
 *
íåy
;

470 (
íåy
 = 
	`ùq_föd_dequeue_íåy
(
dev_cmp
, 
ifödex
)Ë!
NULL
)

471 
	`ùq_issue_vîdi˘
(
íåy
, 
NF_DROP
);

472 
	}
}

474 
	#RCV_SKB_FAIL
(
îr
Ëdÿ{ 
	`√éök_ack
(
skb
, 
∆h
, (îr)); ; } 0)

	)

476 
ölöe
 

477 
	$ùq_rcv_skb
(
sk_buff
 *
skb
)

479 
°©us
, 
ty≥
, 
pid
, 
Êags
, 
∆msgÀn
, 
skbÀn
;

480 
∆msghdr
 *
∆h
;

482 
skbÀn
 = 
skb
->
Àn
;

483 i‡(
skbÀn
 < (*
∆h
))

486 
∆h
 = (
∆msghdr
 *)
skb
->
d©a
;

487 
∆msgÀn
 = 
∆h
->
∆msg_Àn
;

488 i‡(
∆msgÀn
 < (*
∆h
Ë|| 
skbÀn
 <Çlmsglen)

491 
pid
 = 
∆h
->
∆msg_pid
;

492 
Êags
 = 
∆h
->
∆msg_Êags
;

494 if(
pid
 <0 || !(
Êags
 & 
NLM_F_REQUEST
Ë|| fœg†& 
NLM_F_MULTI
)

495 
	`RCV_SKB_FAIL
(-
EINVAL
);

497 i‡(
Êags
 & 
MSG_TRUNC
)

498 
	`RCV_SKB_FAIL
(-
ECOMM
);

500 
ty≥
 = 
∆h
->
∆msg_ty≥
;

501 i‡(
ty≥
 < 
NLMSG_NOOP
 ||Åy≥ >
IPQM_MAX
)

502 
	`RCV_SKB_FAIL
(-
EINVAL
);

504 i‡(
ty≥
 <
IPQM_BASE
)

507 i‡(
	`£curôy_√éök_ªcv
(
skb
))

508 
	`RCV_SKB_FAIL
(-
EPERM
);

510 
	`wrôe_lock_bh
(&
queue_lock
);

512 i‡(
≥î_pid
) {

513 i‡(
≥î_pid
 !
pid
) {

514 
	`wrôe_u∆ock_bh
(&
queue_lock
);

515 
	`RCV_SKB_FAIL
(-
EBUSY
);

519 
≥î_pid
 = 
pid
;

521 
	`wrôe_u∆ock_bh
(&
queue_lock
);

523 
°©us
 = 
	`ùq_ª˚ive_≥î
(
	`NLMSG_DATA
(
∆h
), 
ty≥
,

524 
skbÀn
 - 
	`NLMSG_LENGTH
(0));

525 i‡(
°©us
 < 0)

526 
	`RCV_SKB_FAIL
(
°©us
);

528 i‡(
Êags
 & 
NLM_F_ACK
)

529 
	`√éök_ack
(
skb
, 
∆h
, 0);

531 
	}
}

534 
	$ùq_rcv_sk
(
sock
 *
sk
, 
Àn
)

537 
sk_buff
 *
skb
;

539 i‡(
	`down_åylock
(&
ùq∆_£m
))

542 (
skb
 = 
	`skb_dequeue
(&
sk
->
sk_ª˚ive_queue
)Ë!
NULL
) {

543 
	`ùq_rcv_skb
(
skb
);

544 
	`k‰ì_skb
(
skb
);

547 
	`up
(&
ùq∆_£m
);

549 } 
ùq∆
 && ipq∆->
sk_ª˚ive_queue
.
qÀn
);

550 
	}
}

553 
	$ùq_rcv_dev_evít
(
nŸifõr_block
 *
this
,

554 
evít
, *
±r
)

556 
√t_devi˚
 *
dev
 = 
±r
;

559 i‡(
evít
 =
NETDEV_DOWN
)

560 
	`ùq_dev_dr›
(
dev
->
ifödex
);

561  
NOTIFY_DONE
;

562 
	}
}

564 
nŸifõr_block
 
	gùq_dev_nŸifõr
 = {

565 .
nŸifõr_ˇŒ
 = 
ùq_rcv_dev_evít
,

569 
	$ùq_rcv_∆_evít
(
nŸifõr_block
 *
this
,

570 
evít
, *
±r
)

572 
√éök_nŸify
 *
n
 = 
±r
;

574 i‡(
evít
 =
NETLINK_URELEASE
 &&

575 
n
->
¥Ÿocﬁ
 =
NETLINK_FIREWALL
 &&Ç->
pid
) {

576 
	`wrôe_lock_bh
(&
queue_lock
);

577 i‡(
n
->
pid
 =
≥î_pid
)

578 
	`__ùq_ª£t
();

579 
	`wrôe_u∆ock_bh
(&
queue_lock
);

581  
NOTIFY_DONE
;

582 
	}
}

584 
nŸifõr_block
 
	gùq_∆_nŸifõr
 = {

585 .
nŸifõr_ˇŒ
 = 
ùq_rcv_∆_evít
,

588 
˘l_èbÀ_hódî
 *
	gùq_sys˘l_hódî
;

590 
˘l_èbÀ
 
	gùq_èbÀ
[] = {

592 .
˘l_«me
 = 
NET_IPQ_QMAX
,

593 .
	g¥o˙ame
 = 
NET_IPQ_QMAX_NAME
,

594 .
	gd©a
 = &
queue_maxÀn
,

595 .
	gmaxÀn
 = (
queue_maxÀn
),

596 .
	gmode
 = 0644,

597 .
	g¥oc_h™dÀr
 = 
¥oc_doötvec


599 { .
	g˘l_«me
 = 0 }

602 
˘l_èbÀ
 
	gùq_dú_èbÀ
[] = {

604 .
˘l_«me
 = 
NET_IPV4
,

605 .
	g¥o˙ame
 = "ipv4",

606 .
	gmode
 = 0555,

607 .
	gchûd
 = 
ùq_èbÀ


609 { .
	g˘l_«me
 = 0 }

612 
˘l_èbÀ
 
	gùq_roŸ_èbÀ
[] = {

614 .
˘l_«me
 = 
CTL_NET
,

615 .
	g¥o˙ame
 = "net",

616 .
	gmode
 = 0555,

617 .
	gchûd
 = 
ùq_dú_èbÀ


619 { .
	g˘l_«me
 = 0 }

623 
	$ùq_gë_öfo
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

625 
Àn
;

627 
	`ªad_lock_bh
(&
queue_lock
);

629 
Àn
 = 
	`•rötf
(
buf„r
,

635 
≥î_pid
,

636 
c›y_mode
,

637 
c›y_ønge
,

638 
queue_tŸÆ
,

639 
queue_maxÀn
);

641 
	`ªad_u∆ock_bh
(&
queue_lock
);

643 *
°¨t
 = 
buf„r
 + 
off£t
;

644 
Àn
 -
off£t
;

645 i‡(
Àn
 > 
Àngth
)

646 
Àn
 = 
Àngth
;

647 i‡(
Àn
 < 0)

648 
Àn
 = 0;

649  
Àn
;

650 
	}
}

653 
	$öô_‹_˛ónup
(
öô
)

655 
°©us
 = -
ENOMEM
;

656 
¥oc_dú_íåy
 *
¥oc
;

658 i‡(!
öô
)

659 
˛ónup
;

661 
	`√éök_ªgi°î_nŸifõr
(&
ùq_∆_nŸifõr
);

662 
ùq∆
 = 
	`√éök_kî√l_¸óã
(
NETLINK_FIREWALL
, 
ùq_rcv_sk
);

663 i‡(
ùq∆
 =
NULL
) {

664 
	`¥ötk
(
KERN_ERR
 "ip_queue: failedÅo createÇetlink socket\n");

665 
˛ónup_√éök_nŸifõr
;

668 
¥oc
 = 
	`¥oc_√t_¸óã
(
IPQ_PROC_FS_NAME
, 0, 
ùq_gë_öfo
);

669 i‡(
¥oc
)

670 
¥oc
->
ow√r
 = 
THIS_MODULE
;

672 
	`¥ötk
(
KERN_ERR
 "ip_queue: failedÅo createÖrocÉntry\n");

673 
˛ónup_ùq∆
;

676 
	`ªgi°î_√tdevi˚_nŸifõr
(&
ùq_dev_nŸifõr
);

677 
ùq_sys˘l_hódî
 = 
	`ªgi°î_sys˘l_èbÀ
(
ùq_roŸ_èbÀ
, 0);

679 
°©us
 = 
	`nf_ªgi°î_queue_h™dÀr
(
PF_INET
, 
ùq_íqueue_∑ckë
, 
NULL
);

680 i‡(
°©us
 < 0) {

681 
	`¥ötk
(
KERN_ERR
 "ip_queue: failedÅoÑegister queue handler\n");

682 
˛ónup_sys˘l
;

684  
°©us
;

686 
˛ónup
:

687 
	`nf_uƒegi°î_queue_h™dÀr
(
PF_INET
);

688 
	`synchr⁄ize_√t
();

689 
	`ùq_Êush
(
NF_DROP
);

691 
˛ónup_sys˘l
:

692 
	`uƒegi°î_sys˘l_èbÀ
(
ùq_sys˘l_hódî
);

693 
	`uƒegi°î_√tdevi˚_nŸifõr
(&
ùq_dev_nŸifõr
);

694 
	`¥oc_√t_ªmove
(
IPQ_PROC_FS_NAME
);

696 
˛ónup_ùq∆
:

697 
	`sock_ªÀa£
(
ùq∆
->
sk_sockë
);

698 
	`down
(&
ùq∆_£m
);

699 
	`up
(&
ùq∆_£m
);

701 
˛ónup_√éök_nŸifõr
:

702 
	`√éök_uƒegi°î_nŸifõr
(&
ùq_∆_nŸifõr
);

703  
°©us
;

704 
	}
}

706 
__öô
 
	$öô
()

709  
	`öô_‹_˛ónup
(1);

710 
	}
}

712 
__exô
 
	$föi
()

714 
	`öô_‹_˛ónup
(0);

715 
	}
}

717 
MODULE_DESCRIPTION
("IPv4Öacket queue handler");

718 
MODULE_AUTHOR
("James Morris <jmorris@intercode.com.au>");

719 
MODULE_LICENSE
("GPL");

721 
moduÀ_öô
(
öô
);

722 
moduÀ_exô
(
föi
);

	@ip_queue.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_tables.c

15 
	~<löux/c⁄fig.h
>

16 
	~<löux/ˇche.h
>

17 
	~<löux/skbuff.h
>

18 
	~<löux/kmod.h
>

19 
	~<löux/vmÆloc.h
>

20 
	~<löux/√tdevi˚.h
>

21 
	~<löux/moduÀ.h
>

22 
	~<löux/t˝.h
>

23 
	~<löux/udp.h
>

24 
	~<löux/icmp.h
>

25 
	~<√t/ù.h
>

26 
	~<asm/uac˚ss.h
>

27 
	~<asm/£m≠h‹e.h
>

28 
	~<löux/¥oc_fs.h
>

30 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

32 
MODULE_LICENSE
("GPL");

33 
MODULE_AUTHOR
("Netfilter Core Team <coreteam@netfilter.org>");

34 
MODULE_DESCRIPTION
("IPv4Öacket filter");

40 #ifde‡
DEBUG_IP_FIREWALL


41 
	#d¥ötf
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(f‹m© , ##árgs)

	)

43 
	#d¥ötf
(
f‹m©
, 
¨gs
...)

	)

46 #ifde‡
DEBUG_IP_FIREWALL_USER


47 
	#du¥ötf
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(f‹m© , ##árgs)

	)

49 
	#du¥ötf
(
f‹m©
, 
¨gs
...)

	)

52 #ifde‡
CONFIG_NETFILTER_DEBUG


53 
	#IP_NF_ASSERT
(
x
) \

55 i‡(!(
x
)) \

56 
	`¥ötk
("IP_NF_ASSERT: %s:%s:%u\n", \

57 
__FUNCTION__
, 
__FILE__
, 
__LINE__
); \

58 } 0)

	)

60 
	#IP_NF_ASSERT
(
x
)

	)

62 
	#SMP_ALIGN
(
x
Ë(((xË+ 
SMP_CACHE_BYTES
-1Ë& ~(SMP_CACHE_BYTES-1))

	)

65 
	#ASSERT_READ_LOCK
(
x
Ë
	`IP_NF_ASSERT
(
	`down_åylock
(&
ùt_muãx
Ë!0)

	)

66 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`IP_NF_ASSERT
(
	`down_åylock
(&
ùt_muãx
Ë!0)

	)

67 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

68 
	~<löux/√tfûãr_ùv4/li°hñp.h
>

72 

	)

73 
	#ölöe


	)

91 
	sùt_èbÀ_öfo


94 
	msize
;

96 
	mnumbî
;

98 
	möôül_íåõs
;

101 
	mhook_íåy
[
NF_IP_NUMHOOKS
];

102 
	mundîÊow
[
NF_IP_NUMHOOKS
];

105 
	míåõs
[0] 
	m____ˇchñöe_Æig√d
;

108 
LIST_HEAD
(
ùt_èrgë
);

109 
LIST_HEAD
(
ùt_m©ch
);

110 
LIST_HEAD
(
ùt_èbÀs
);

111 
	#ADD_COUNTER
(
c
,
b
,
p
Ëdÿ{ (c).
b˙t
 +(b); (c).
p˙t
 +’); } 0)

	)

113 #ifde‡
CONFIG_SMP


114 
	#TABLE_OFFSET
(
t
,
p
Ë(
	`SMP_ALIGN
(—)->
size
)*’))

	)

116 
	#TABLE_OFFSET
(
t
,
p
Ë0

	)

120 
	#down
(
x
Ëdÿ{ 
	`¥ötk
("DOWN:%u:" #x "\n", 
__LINE__
); 
	`down
(x); } 0)

	)

121 
	#down_öãºu±ibÀ
(
x
Ë({ 
__r
; 
	`¥ötk
("DOWNi:%u:" #x "\n", 
__LINE__
); __∏
	`down_öãºu±ibÀ
(x); i‡(__∏!0Ë¥ötk("ABORT-DOWNi:%u\n", __LINE__); __r; })

	)

122 
	#up
(
x
Ëdÿ{ 
	`¥ötk
("UP:%u:" #x "\n", 
__LINE__
); 
	`up
(x); } 0)

	)

126 
ölöe
 

127 
	$ù_∑ckë_m©ch
(c⁄° 
ùhdr
 *
ù
,

128 c⁄° *
ödev
,

129 c⁄° *
outdev
,

130 c⁄° 
ùt_ù
 *
ùöfo
,

131 
is‰ag
)

133 
size_t
 
i
;

134 
ªt
;

136 
	#FWINV
(
boﬁ
,
övÊg
Ë((boﬁË^ !!(
ùöfo
->
övÊags
 & invÊg))

	)

138 i‡(
	`FWINV
((
ù
->
ßddr
&
ùöfo
->
smsk
.
s_addr
Ë!ùöfo->
§c
.s_addr,

139 
IPT_INV_SRCIP
)

140 || 
	`FWINV
((
ù
->
daddr
&
ùöfo
->
dmsk
.
s_addr
Ë!ùöfo->
d°
.s_addr,

141 
IPT_INV_DSTIP
)) {

142 
	`d¥ötf
("Source or dest mismatch.\n");

144 
	`d¥ötf
("SRC: %u.%u.%u.%u. Mask: %u.%u.%u.%u. Target: %u.%u.%u.%u.%s\n",

145 
	`NIPQUAD
(
ù
->
ßddr
),

146 
	`NIPQUAD
(
ùöfo
->
smsk
.
s_addr
),

147 
	`NIPQUAD
(
ùöfo
->
§c
.
s_addr
),

148 
ùöfo
->
övÊags
 & 
IPT_INV_SRCIP
 ? " (INV)" : "");

149 
	`d¥ötf
("DST: %u.%u.%u.%u Mask: %u.%u.%u.%u Target: %u.%u.%u.%u.%s\n",

150 
	`NIPQUAD
(
ù
->
daddr
),

151 
	`NIPQUAD
(
ùöfo
->
dmsk
.
s_addr
),

152 
	`NIPQUAD
(
ùöfo
->
d°
.
s_addr
),

153 
ùöfo
->
övÊags
 & 
IPT_INV_DSTIP
 ? " (INV)" : "");

158 
i
 = 0, 
ªt
 = 0; i < 
IFNAMSIZ
/(); i++) {

159 
ªt
 |(((c⁄° *)
ödev
)[
i
]

160 ^ ((c⁄° *)
ùöfo
->
öiÁ˚
)[
i
])

161 & ((c⁄° *)
ùöfo
->
öiÁ˚_mask
)[
i
];

164 i‡(
	`FWINV
(
ªt
 !0, 
IPT_INV_VIA_IN
)) {

165 
	`d¥ötf
("VIA in mismatch (%s vs %s).%s\n",

166 
ödev
, 
ùöfo
->
öiÁ˚
,

167 
ùöfo
->
övÊags
&
IPT_INV_VIA_IN
 ?" (INV)":"");

171 
i
 = 0, 
ªt
 = 0; i < 
IFNAMSIZ
/(); i++) {

172 
ªt
 |(((c⁄° *)
outdev
)[
i
]

173 ^ ((c⁄° *)
ùöfo
->
outiÁ˚
)[
i
])

174 & ((c⁄° *)
ùöfo
->
outiÁ˚_mask
)[
i
];

177 i‡(
	`FWINV
(
ªt
 !0, 
IPT_INV_VIA_OUT
)) {

178 
	`d¥ötf
("VIA out mismatch (%s vs %s).%s\n",

179 
outdev
, 
ùöfo
->
outiÁ˚
,

180 
ùöfo
->
övÊags
&
IPT_INV_VIA_OUT
 ?" (INV)":"");

185 i‡(
ùöfo
->
¥Ÿo


186 && 
	`FWINV
(
ù
->
¥Ÿocﬁ
 !
ùöfo
->
¥Ÿo
, 
IPT_INV_PROTO
)) {

187 
	`d¥ötf
("PacketÖrotocol %hi doesÇot match %hi.%s\n",

188 
ù
->
¥Ÿocﬁ
, 
ùöfo
->
¥Ÿo
,

189 
ùöfo
->
övÊags
&
IPT_INV_PROTO
 ? " (INV)":"");

195 i‡(
	`FWINV
((
ùöfo
->
Êags
&
IPT_F_FRAG
Ë&& !
is‰ag
, 
IPT_INV_FRAG
)) {

196 
	`d¥ötf
("FragmentÑule butÇot fragment.%s\n",

197 
ùöfo
->
övÊags
 & 
IPT_INV_FRAG
 ? " (INV)" : "");

202 
	}
}

204 
ölöe
 

205 
	$ù_checkíåy
(c⁄° 
ùt_ù
 *
ù
)

207 i‡(
ù
->
Êags
 & ~
IPT_F_MASK
) {

208 
	`du¥ötf
("Unknown flag bits set: %08X\n",

209 
ù
->
Êags
 & ~
IPT_F_MASK
);

212 i‡(
ù
->
övÊags
 & ~
IPT_INV_MASK
) {

213 
	`du¥ötf
("Unknown invflag bits set: %08X\n",

214 
ù
->
övÊags
 & ~
IPT_INV_MASK
);

218 
	}
}

221 
	$ùt_îr‹
(
sk_buff
 **
pskb
,

222 c⁄° 
√t_devi˚
 *
ö
,

223 c⁄° 
√t_devi˚
 *
out
,

224 
hooknum
,

225 c⁄° *
èrgöfo
,

226 *
u£röfo
)

228 i‡(
	`√t_øãlimô
())

229 
	`¥ötk
("ù_èbÀs:Éº‹: `%s'\n", (*)
èrgöfo
);

231  
NF_DROP
;

232 
	}
}

234 
ölöe


235 
	$do_m©ch
(
ùt_íåy_m©ch
 *
m
,

236 c⁄° 
sk_buff
 *
skb
,

237 c⁄° 
√t_devi˚
 *
ö
,

238 c⁄° 
√t_devi˚
 *
out
,

239 
off£t
,

240 *
hŸdr›
)

243 i‡(!
m
->
u
.
kî√l
.
m©ch
->
	`m©ch
(
skb
, 
ö
, 
out
, m->
d©a
, 
off£t
, 
hŸdr›
))

247 
	}
}

249 
ölöe
 
ùt_íåy
 *

250 
	$gë_íåy
(*
ba£
, 
off£t
)

252  (
ùt_íåy
 *)(
ba£
 + 
off£t
);

253 
	}
}

257 
	$ùt_do_èbÀ
(
sk_buff
 **
pskb
,

258 
hook
,

259 c⁄° 
√t_devi˚
 *
ö
,

260 c⁄° 
√t_devi˚
 *
out
,

261 
ùt_èbÀ
 *
èbÀ
,

262 *
u£rd©a
)

264 c⁄° 
nuŒdev«me
[
IFNAMSIZ
] 
	`__©åibuã__
((
	`Æig√d
(())));

265 
u_öt16_t
 
off£t
;

266 
ùhdr
 *
ù
;

267 
u_öt16_t
 
d©Æí
;

268 
hŸdr›
 = 0;

270 
vîdi˘
 = 
NF_DROP
;

271 c⁄° *
ödev
, *
outdev
;

272 *
èbÀ_ba£
;

273 
ùt_íåy
 *
e
, *
back
;

276 
ù
 = (*
pskb
)->
nh
.
ùh
;

277 
d©Æí
 = (*
pskb
)->
Àn
 - 
ù
->
ihl
 * 4;

278 
ödev
 = 
ö
 ? in->
«me
 : 
nuŒdev«me
;

279 
outdev
 = 
out
 ? out->
«me
 : 
nuŒdev«me
;

286 
off£t
 = 
	`¡ohs
(
ù
->
‰ag_off
Ë& 
IP_OFFSET
;

288 
	`ªad_lock_bh
(&
èbÀ
->
lock
);

289 
	`IP_NF_ASSERT
(
èbÀ
->
vÆid_hooks
 & (1 << 
hook
));

290 
èbÀ_ba£
 = (*)
èbÀ
->
¥iv©e
->
íåõs


291 + 
	`TABLE_OFFSET
(
èbÀ
->
¥iv©e
, 
	`smp_¥o˚ss‹_id
());

292 
e
 = 
	`gë_íåy
(
èbÀ_ba£
, 
èbÀ
->
¥iv©e
->
hook_íåy
[
hook
]);

294 #ifde‡
CONFIG_NETFILTER_DEBUG


296 i‡(((
ùt_íåy
 *)
èbÀ_ba£
)->
come‰om
 != 0xdead57ac

297 && ((
ùt_íåy
 *)
èbÀ_ba£
)->
come‰om
 != 0xeeeeeeec) {

298 
	`¥ötk
("ASSERT: CPU #%u, %s comefrom(%p) = %X\n",

299 
	`smp_¥o˚ss‹_id
(),

300 
èbÀ
->
«me
,

301 &((
ùt_íåy
 *)
èbÀ_ba£
)->
come‰om
,

302 ((
ùt_íåy
 *)
èbÀ_ba£
)->
come‰om
);

304 ((
ùt_íåy
 *)
èbÀ_ba£
)->
come‰om
 = 0x57acc001;

308 
back
 = 
	`gë_íåy
(
èbÀ_ba£
, 
èbÀ
->
¥iv©e
->
undîÊow
[
hook
]);

311 
	`IP_NF_ASSERT
(
e
);

312 
	`IP_NF_ASSERT
(
back
);

313 (*
pskb
)->
nfˇche
 |
e
->nfcache;

314 i‡(
	`ù_∑ckë_m©ch
(
ù
, 
ödev
, 
outdev
, &
e
->ù, 
off£t
)) {

315 
ùt_íåy_èrgë
 *
t
;

317 i‡(
	`IPT_MATCH_ITERATE
(
e
, 
do_m©ch
,

318 *
pskb
, 
ö
, 
out
,

319 
off£t
, &
hŸdr›
) != 0)

320 
no_m©ch
;

322 
	`ADD_COUNTER
(
e
->
cou¡îs
, 
	`¡ohs
(
ù
->
tŸ_Àn
), 1);

324 
t
 = 
	`ùt_gë_èrgë
(
e
);

325 
	`IP_NF_ASSERT
(
t
->
u
.
kî√l
.
èrgë
);

327 i‡(!
t
->
u
.
kî√l
.
èrgë
->target) {

328 
v
;

330 
v
 = ((
ùt_°™d¨d_èrgë
 *)
t
)->
vîdi˘
;

331 i‡(
v
 < 0) {

333 i‡(
v
 !
IPT_RETURN
) {

334 
vîdi˘
 = ()(-
v
) - 1;

337 
e
 = 
back
;

338 
back
 = 
	`gë_íåy
(
èbÀ_ba£
,

339 
back
->
come‰om
);

342 i‡(
èbÀ_ba£
 + 
v


343 !(*)
e
 +É->
√xt_off£t
) {

345 
ùt_íåy
 *
√xt


346 (*)
e
 +É->
√xt_off£t
;

347 
√xt
->
come‰om


348 (*)
back
 - 
èbÀ_ba£
;

350 
back
 = 
√xt
;

353 
e
 = 
	`gë_íåy
(
èbÀ_ba£
, 
v
);

357 #ifde‡
CONFIG_NETFILTER_DEBUG


358 ((
ùt_íåy
 *)
èbÀ_ba£
)->
come‰om


361 
vîdi˘
 = 
t
->
u
.
kî√l
.
èrgë
->
	`èrgë
(
pskb
,

362 
ö
, 
out
,

363 
hook
,

364 
t
->
d©a
,

365 
u£rd©a
);

367 #ifde‡
CONFIG_NETFILTER_DEBUG


368 i‡(((
ùt_íåy
 *)
èbÀ_ba£
)->
come‰om


370 && 
vîdi˘
 =
IPT_CONTINUE
) {

371 
	`¥ötk
("Target %sÑeentered!\n",

372 
t
->
u
.
kî√l
.
èrgë
->
«me
);

373 
vîdi˘
 = 
NF_DROP
;

375 ((
ùt_íåy
 *)
èbÀ_ba£
)->
come‰om


379 
ù
 = (*
pskb
)->
nh
.
ùh
;

380 
d©Æí
 = (*
pskb
)->
Àn
 - 
ù
->
ihl
 * 4;

382 i‡(
vîdi˘
 =
IPT_CONTINUE
)

383 
e
 = (*Î +É->
√xt_off£t
;

390 
no_m©ch
:

391 
e
 = (*Î +É->
√xt_off£t
;

393 } !
hŸdr›
);

395 #ifde‡
CONFIG_NETFILTER_DEBUG


396 ((
ùt_íåy
 *)
èbÀ_ba£
)->
come‰om
 = 0xdead57ac;

398 
	`ªad_u∆ock_bh
(&
èbÀ
->
lock
);

400 #ifde‡
DEBUG_ALLOW_ALL


401  
NF_ACCEPT
;

403 i‡(
hŸdr›
)

404  
NF_DROP
;

405  
vîdi˘
;

407 
	}
}

410 
ölöe
 *

411 
	$föd_öli°_lock_nﬁﬂd
(
li°_hód
 *
hód
,

412 c⁄° *
«me
,

413 *
îr‹
,

414 
£m≠h‹e
 *
muãx
)

416 *
ªt
;

419 
	`du¥ötf
("find_inlist: searching for `%s' in %s.\n",

420 
«me
, 
hód
 =&
ùt_èrgë
 ? "ipt_target"

421 : 
hód
 =&
ùt_m©ch
 ? "ipt_match"

422 : 
hód
 =&
ùt_èbÀs
 ? "ipt_tables" : "UNKNOWN");

425 *
îr‹
 = 
	`down_öãºu±ibÀ
(
muãx
);

426 i‡(*
îr‹
 != 0)

427  
NULL
;

429 
ªt
 = 
	`li°_«med_föd
(
hód
, 
«me
);

430 i‡(!
ªt
) {

431 *
îr‹
 = -
ENOENT
;

432 
	`up
(
muãx
);

434  
ªt
;

435 
	}
}

437 #i‚de‡
CONFIG_KMOD


438 
	#föd_öli°_lock
(
h
,
n
,
p
,
e
,
m
Ë
	`föd_öli°_lock_nﬁﬂd
((h),“),”),(m))

	)

441 
	$föd_öli°_lock
(
li°_hód
 *
hód
,

442 c⁄° *
«me
,

443 c⁄° *
¥efix
,

444 *
îr‹
,

445 
£m≠h‹e
 *
muãx
)

447 *
ªt
;

449 
ªt
 = 
	`föd_öli°_lock_nﬁﬂd
(
hód
, 
«me
, 
îr‹
, 
muãx
);

450 i‡(!
ªt
) {

451 
	`du¥ötf
("föd_öli°:Üﬂdög `%s%s'.\n", 
¥efix
, 
«me
);

452 
	`ªque°_moduÀ
("%s%s", 
¥efix
, 
«me
);

453 
ªt
 = 
	`föd_öli°_lock_nﬁﬂd
(
hód
, 
«me
, 
îr‹
, 
muãx
);

456  
ªt
;

457 
	}
}

460 
ölöe
 
ùt_èbÀ
 *

461 
	$ùt_föd_èbÀ_lock
(c⁄° *
«me
, *
îr‹
, 
£m≠h‹e
 *
muãx
)

463  
	`föd_öli°_lock
(&
ùt_èbÀs
, 
«me
, "ùèbÀ_", 
îr‹
, 
muãx
);

464 
	}
}

466 
ölöe
 
ùt_m©ch
 *

467 
	$föd_m©ch_lock
(c⁄° *
«me
, *
îr‹
, 
£m≠h‹e
 *
muãx
)

469  
	`föd_öli°_lock
(&
ùt_m©ch
, 
«me
, "ùt_", 
îr‹
, 
muãx
);

470 
	}
}

472 
ùt_èrgë
 *

473 
	$ùt_föd_èrgë_lock
(c⁄° *
«me
, *
îr‹
, 
£m≠h‹e
 *
muãx
)

475  
	`föd_öli°_lock
(&
ùt_èrgë
, 
«me
, "ùt_", 
îr‹
, 
muãx
);

476 
	}
}

479 
ölöe
 

480 
	$unc⁄dôi⁄Æ
(c⁄° 
ùt_ù
 *
ù
)

482 
i
;

484 
i
 = 0; i < (*
ù
)/(
__u32
); i++)

485 i‡(((
__u32
 *)
ù
)[
i
])

489 
	}
}

494 
	$m¨k_sour˚_chaös
(
ùt_èbÀ_öfo
 *
√wöfo
, 
vÆid_hooks
)

496 
hook
;

500 
hook
 = 0; hook < 
NF_IP_NUMHOOKS
; hook++) {

501 
pos
 = 
√wöfo
->
hook_íåy
[
hook
];

502 
ùt_íåy
 *
e


503 (
ùt_íåy
 *)(
√wöfo
->
íåõs
 + 
pos
);

505 i‡(!(
vÆid_hooks
 & (1 << 
hook
)))

509 
e
->
cou¡îs
.
p˙t
 = 
pos
;

512 
ùt_°™d¨d_èrgë
 *
t


513 (*)
	`ùt_gë_èrgë
(
e
);

515 i‡(
e
->
come‰om
 & (1 << 
NF_IP_NUMHOOKS
)) {

516 
	`¥ötk
("iptables:Üoop hook %uÖos %u %08X.\n",

517 
hook
, 
pos
, 
e
->
come‰om
);

520 
e
->
come‰om


521 |((1 << 
hook
Ë| (1 << 
NF_IP_NUMHOOKS
));

524 i‡(
e
->
èrgë_off£t
 =(
ùt_íåy
)

525 && (
	`°rcmp
(
t
->
èrgë
.
u
.
u£r
.
«me
,

526 
IPT_STANDARD_TARGET
) == 0)

527 && 
t
->
vîdi˘
 < 0

528 && 
	`unc⁄dôi⁄Æ
(&
e
->
ù
)) {

529 
ﬁdpos
, 
size
;

534 
e
->
come‰om
 ^(1<<
NF_IP_NUMHOOKS
);

535 #ifde‡
DEBUG_IP_FIREWALL_USER


536 i‡(
e
->
come‰om


537 & (1 << 
NF_IP_NUMHOOKS
)) {

538 
	`du¥ötf
("Back unset "

541 
hook
, 
pos
);

544 
ﬁdpos
 = 
pos
;

545 
pos
 = 
e
->
cou¡îs
.
p˙t
;

546 
e
->
cou¡îs
.
p˙t
 = 0;

549 i‡(
pos
 =
ﬁdpos
)

550 
√xt
;

552 
e
 = (
ùt_íåy
 *)

553 (
√wöfo
->
íåõs
 + 
pos
);

554 } 
ﬁdpos
 =
pos
 + 
e
->
√xt_off£t
);

557 
size
 = 
e
->
√xt_off£t
;

558 
e
 = (
ùt_íåy
 *)

559 (
√wöfo
->
íåõs
 + 
pos
 + 
size
);

560 
e
->
cou¡îs
.
p˙t
 = 
pos
;

561 
pos
 +
size
;

563 
√wpos
 = 
t
->
vîdi˘
;

565 i‡(
	`°rcmp
(
t
->
èrgë
.
u
.
u£r
.
«me
,

566 
IPT_STANDARD_TARGET
) == 0

567 && 
√wpos
 >= 0) {

569 
	`du¥ötf
("JumpÑule %u -> %u\n",

570 
pos
, 
√wpos
);

573 
√wpos
 = 
pos
 + 
e
->
√xt_off£t
;

575 
e
 = (
ùt_íåy
 *)

576 (
√wöfo
->
íåõs
 + 
√wpos
);

577 
e
->
cou¡îs
.
p˙t
 = 
pos
;

578 
pos
 = 
√wpos
;

581 
√xt
:

582 
	`du¥ötf
("Föished chaö %u\n", 
hook
);

585 
	}
}

587 
ölöe
 

588 
	$˛ónup_m©ch
(
ùt_íåy_m©ch
 *
m
, *
i
)

590 i‡(
i
 && (*i)-- == 0)

593 i‡(
m
->
u
.
kî√l
.
m©ch
->
de°roy
)

594 
m
->
u
.
kî√l
.
m©ch
->
	`de°roy
(m->
d©a
,

595 
m
->
u
.
m©ch_size
 - (*m));

596 
	`moduÀ_put
(
m
->
u
.
kî√l
.
m©ch
->
me
);

598 
	}
}

600 
ölöe
 

601 
	$°™d¨d_check
(c⁄° 
ùt_íåy_èrgë
 *
t
,

602 
max_off£t
)

604 
ùt_°™d¨d_èrgë
 *
èrg
 = (*)
t
;

607 i‡(
t
->
u
.
èrgë_size


608 !
	`IPT_ALIGN
((
ùt_°™d¨d_èrgë
))) {

609 
	`du¥ötf
("standard_check:Åarget size %u != %u\n",

610 
t
->
u
.
èrgë_size
,

611 
	`IPT_ALIGN
((
ùt_°™d¨d_èrgë
)));

615 i‡(
èrg
->
vîdi˘
 >= 0

616 && 
èrg
->
vîdi˘
 > 
max_off£t
 - (
ùt_íåy
)) {

617 
	`du¥ötf
("ipt_standard_check: bad verdict (%i)\n",

618 
èrg
->
vîdi˘
);

622 i‡(
èrg
->
vîdi˘
 < -
NF_MAX_VERDICT
 - 1) {

623 
	`du¥ötf
("ipt_standard_check: badÇegative verdict (%i)\n",

624 
èrg
->
vîdi˘
);

628 
	}
}

630 
ölöe
 

631 
	$check_m©ch
(
ùt_íåy_m©ch
 *
m
,

632 c⁄° *
«me
,

633 c⁄° 
ùt_ù
 *
ù
,

634 
hookmask
,

635 *
i
)

637 
ªt
;

638 
ùt_m©ch
 *
m©ch
;

640 
m©ch
 = 
	`föd_m©ch_lock
(
m
->
u
.
u£r
.
«me
, &
ªt
, &
ùt_muãx
);

641 i‡(!
m©ch
) {

642 
	`du¥ötf
("check_m©ch: `%s'ÇŸ found\n", 
m
->
u
.
u£r
.
«me
);

643  
ªt
;

645 i‡(!
	`åy_moduÀ_gë
(
m©ch
->
me
)) {

646 
	`up
(&
ùt_muãx
);

647  -
ENOENT
;

649 
m
->
u
.
kî√l
.
m©ch
 = match;

650 
	`up
(&
ùt_muãx
);

652 i‡(
m
->
u
.
kî√l
.
m©ch
->
checkíåy


653 && !
m
->
u
.
kî√l
.
m©ch
->
	`checkíåy
(
«me
, 
ù
, m->
d©a
,

654 
m
->
u
.
m©ch_size
 - (*m),

655 
hookmask
)) {

656 
	`moduÀ_put
(
m
->
u
.
kî√l
.
m©ch
->
me
);

657 
	`du¥ötf
("ip_tables: check failed for `%s'.\n",

658 
m
->
u
.
kî√l
.
m©ch
->
«me
);

659  -
EINVAL
;

662 (*
i
)++;

664 
	}
}

666 
ùt_èrgë
 
	gùt_°™d¨d_èrgë
;

668 
ölöe
 

669 
	$check_íåy
(
ùt_íåy
 *
e
, c⁄° *
«me
, 
size
,

670 *
i
)

672 
ùt_íåy_èrgë
 *
t
;

673 
ùt_èrgë
 *
èrgë
;

674 
ªt
;

675 
j
;

677 i‡(!
	`ù_checkíåy
(&
e
->
ù
)) {

678 
	`du¥ötf
("ù_èbÀs: i∞check faûed %∞%s.\n", 
e
, 
«me
);

679  -
EINVAL
;

682 
j
 = 0;

683 
ªt
 = 
	`IPT_MATCH_ITERATE
(
e
, 
check_m©ch
, 
«me
, &e->
ù
,É->
come‰om
, &
j
);

684 i‡(
ªt
 != 0)

685 
˛ónup_m©ches
;

687 
t
 = 
	`ùt_gë_èrgë
(
e
);

688 
èrgë
 = 
	`ùt_föd_èrgë_lock
(
t
->
u
.
u£r
.
«me
, &
ªt
, &
ùt_muãx
);

689 i‡(!
èrgë
) {

690 
	`du¥ötf
("check_íåy: `%s'ÇŸ found\n", 
t
->
u
.
u£r
.
«me
);

691 
˛ónup_m©ches
;

693 i‡(!
	`åy_moduÀ_gë
(
èrgë
->
me
)) {

694 
	`up
(&
ùt_muãx
);

695 
ªt
 = -
ENOENT
;

696 
˛ónup_m©ches
;

698 
t
->
u
.
kî√l
.
èrgë
 =Åarget;

699 
	`up
(&
ùt_muãx
);

701 i‡(
t
->
u
.
kî√l
.
èrgë
 =&
ùt_°™d¨d_èrgë
) {

702 i‡(!
	`°™d¨d_check
(
t
, 
size
)) {

703 
ªt
 = -
EINVAL
;

704 
˛ónup_m©ches
;

706 } i‡(
t
->
u
.
kî√l
.
èrgë
->
checkíåy


707 && !
t
->
u
.
kî√l
.
èrgë
->
	`checkíåy
(
«me
, 
e
,Å->
d©a
,

708 
t
->
u
.
èrgë_size


709 - (*
t
),

710 
e
->
come‰om
)) {

711 
	`moduÀ_put
(
t
->
u
.
kî√l
.
èrgë
->
me
);

712 
	`du¥ötf
("ip_tables: check failed for `%s'.\n",

713 
t
->
u
.
kî√l
.
èrgë
->
«me
);

714 
ªt
 = -
EINVAL
;

715 
˛ónup_m©ches
;

718 (*
i
)++;

721 
˛ónup_m©ches
:

722 
	`IPT_MATCH_ITERATE
(
e
, 
˛ónup_m©ch
, &
j
);

723  
ªt
;

724 
	}
}

726 
ölöe
 

727 
	$check_íåy_size_™d_hooks
(
ùt_íåy
 *
e
,

728 
ùt_èbÀ_öfo
 *
√wöfo
,

729 *
ba£
,

730 *
limô
,

731 c⁄° *
hook_íåõs
,

732 c⁄° *
undîÊows
,

733 *
i
)

735 
h
;

737 i‡(()
e
 % 
	`__Æignof__
(
ùt_íåy
) != 0

738 || (*)
e
 + (
ùt_íåy
Ë>
limô
) {

739 
	`du¥ötf
("Bad off£à%p\n", 
e
);

740  -
EINVAL
;

743 i‡(
e
->
√xt_off£t


744 < (
ùt_íåy
Ë+ (
ùt_íåy_èrgë
)) {

745 
	`du¥ötf
("checking:Élement %p size %u\n",

746 
e
,É->
√xt_off£t
);

747  -
EINVAL
;

751 
h
 = 0; h < 
NF_IP_NUMHOOKS
; h++) {

752 i‡((*)
e
 - 
ba£
 =
hook_íåõs
[
h
])

753 
√wöfo
->
hook_íåy
[
h
] = 
hook_íåõs
[h];

754 i‡((*)
e
 - 
ba£
 =
undîÊows
[
h
])

755 
√wöfo
->
undîÊow
[
h
] = 
undîÊows
[h];

762 
e
->
cou¡îs
 = ((
ùt_cou¡îs
) { 0, 0 });

763 
e
->
come‰om
 = 0;

765 (*
i
)++;

767 
	}
}

769 
ölöe
 

770 
	$˛ónup_íåy
(
ùt_íåy
 *
e
, *
i
)

772 
ùt_íåy_èrgë
 *
t
;

774 i‡(
i
 && (*i)-- == 0)

778 
	`IPT_MATCH_ITERATE
(
e
, 
˛ónup_m©ch
, 
NULL
);

779 
t
 = 
	`ùt_gë_èrgë
(
e
);

780 i‡(
t
->
u
.
kî√l
.
èrgë
->
de°roy
)

781 
t
->
u
.
kî√l
.
èrgë
->
	`de°roy
—->
d©a
,

782 
t
->
u
.
èrgë_size
 - (*t));

783 
	`moduÀ_put
(
t
->
u
.
kî√l
.
èrgë
->
me
);

785 
	}
}

790 
	$å™¶©e_èbÀ
(c⁄° *
«me
,

791 
vÆid_hooks
,

792 
ùt_èbÀ_öfo
 *
√wöfo
,

793 
size
,

794 
numbî
,

795 c⁄° *
hook_íåõs
,

796 c⁄° *
undîÊows
)

798 
i
;

799 
ªt
;

801 
√wöfo
->
size
 = size;

802 
√wöfo
->
numbî
 =Çumber;

805 
i
 = 0; i < 
NF_IP_NUMHOOKS
; i++) {

806 
√wöfo
->
hook_íåy
[
i
] = 0xFFFFFFFF;

807 
√wöfo
->
undîÊow
[
i
] = 0xFFFFFFFF;

810 
	`du¥ötf
("å™¶©e_èbÀ: sizê%u\n", 
√wöfo
->
size
);

811 
i
 = 0;

813 
ªt
 = 
	`IPT_ENTRY_ITERATE
(
√wöfo
->
íåõs
,Çewöfo->
size
,

814 
check_íåy_size_™d_hooks
,

815 
√wöfo
,

816 
√wöfo
->
íåõs
,

817 
√wöfo
->
íåõs
 + 
size
,

818 
hook_íåõs
, 
undîÊows
, &
i
);

819 i‡(
ªt
 != 0)

820  
ªt
;

822 i‡(
i
 !
numbî
) {

823 
	`du¥ötf
("translate_table: %uÇot %uÉntries\n",

824 
i
, 
numbî
);

825  -
EINVAL
;

829 
i
 = 0; i < 
NF_IP_NUMHOOKS
; i++) {

831 i‡(!(
vÆid_hooks
 & (1 << 
i
)))

833 i‡(
√wöfo
->
hook_íåy
[
i
] == 0xFFFFFFFF) {

834 
	`du¥ötf
("Invalid hookÉntry %u %u\n",

835 
i
, 
hook_íåõs
[i]);

836  -
EINVAL
;

838 i‡(
√wöfo
->
undîÊow
[
i
] == 0xFFFFFFFF) {

839 
	`du¥ötf
("Invalid underflow %u %u\n",

840 
i
, 
undîÊows
[i]);

841  -
EINVAL
;

845 i‡(!
	`m¨k_sour˚_chaös
(
√wöfo
, 
vÆid_hooks
))

846  -
ELOOP
;

849 
i
 = 0;

850 
ªt
 = 
	`IPT_ENTRY_ITERATE
(
√wöfo
->
íåõs
,Çewöfo->
size
,

851 
check_íåy
, 
«me
, 
size
, &
i
);

853 i‡(
ªt
 != 0) {

854 
	`IPT_ENTRY_ITERATE
(
√wöfo
->
íåõs
,Çewöfo->
size
,

855 
˛ónup_íåy
, &
i
);

856  
ªt
;

860 
i
 = 1; i < 
NR_CPUS
; i++) {

861 
	`mem˝y
(
√wöfo
->
íåõs
 + 
	`SMP_ALIGN
“ewöfo->
size
)*
i
,

862 
√wöfo
->
íåõs
,

863 
	`SMP_ALIGN
(
√wöfo
->
size
));

866  
ªt
;

867 
	}
}

869 
ùt_èbÀ_öfo
 *

870 
	$ª∂a˚_èbÀ
(
ùt_èbÀ
 *
èbÀ
,

871 
num_cou¡îs
,

872 
ùt_èbÀ_öfo
 *
√wöfo
,

873 *
îr‹
)

875 
ùt_èbÀ_öfo
 *
ﬁdöfo
;

877 #ifde‡
CONFIG_NETFILTER_DEBUG


879 
ùt_íåy
 *
èbÀ_ba£
;

880 
i
;

882 
i
 = 0; i < 
NR_CPUS
; i++) {

883 
èbÀ_ba£
 =

884 (*)
√wöfo
->
íåõs


885 + 
	`TABLE_OFFSET
(
√wöfo
, 
i
);

887 
èbÀ_ba£
->
come‰om
 = 0xdead57ac;

893 
	`wrôe_lock_bh
(&
èbÀ
->
lock
);

895 i‡(
num_cou¡îs
 !
èbÀ
->
¥iv©e
->
numbî
) {

896 
	`du¥ötf
("num_counters !=Åable->private->number (%u/%u)\n",

897 
num_cou¡îs
, 
èbÀ
->
¥iv©e
->
numbî
);

898 
	`wrôe_u∆ock_bh
(&
èbÀ
->
lock
);

899 *
îr‹
 = -
EAGAIN
;

900  
NULL
;

902 
ﬁdöfo
 = 
èbÀ
->
¥iv©e
;

903 
èbÀ
->
¥iv©e
 = 
√wöfo
;

904 
√wöfo
->
öôül_íåõs
 = 
ﬁdöfo
->initial_entries;

905 
	`wrôe_u∆ock_bh
(&
èbÀ
->
lock
);

907  
ﬁdöfo
;

908 
	}
}

911 
ölöe
 

912 
	$add_íåy_to_cou¡î
(c⁄° 
ùt_íåy
 *
e
,

913 
ùt_cou¡îs
 
tŸÆ
[],

914 *
i
)

916 
	`ADD_COUNTER
(
tŸÆ
[*
i
], 
e
->
cou¡îs
.
b˙t
,É->cou¡îs.
p˙t
);

918 (*
i
)++;

920 
	}
}

923 
	$gë_cou¡îs
(c⁄° 
ùt_èbÀ_öfo
 *
t
,

924 
ùt_cou¡îs
 
cou¡îs
[])

926 
˝u
;

927 
i
;

929 
˝u
 = 0; cpu < 
NR_CPUS
; cpu++) {

930 
i
 = 0;

931 
	`IPT_ENTRY_ITERATE
(
t
->
íåõs
 + 
	`TABLE_OFFSET
—, 
˝u
),

932 
t
->
size
,

933 
add_íåy_to_cou¡î
,

934 
cou¡îs
,

935 &
i
);

937 
	}
}

940 
	$c›y_íåõs_to_u£r
(
tŸÆ_size
,

941 
ùt_èbÀ
 *
èbÀ
,

942 
__u£r
 *
u£Ωå
)

944 
off
, 
num
, 
cou¡îsize
;

945 
ùt_íåy
 *
e
;

946 
ùt_cou¡îs
 *
cou¡îs
;

947 
ªt
 = 0;

952 
cou¡îsize
 = (
ùt_cou¡îs
Ë* 
èbÀ
->
¥iv©e
->
numbî
;

953 
cou¡îs
 = 
	`vmÆloc
(
cou¡îsize
);

955 i‡(
cou¡îs
 =
NULL
)

956  -
ENOMEM
;

959 
	`mem£t
(
cou¡îs
, 0, 
cou¡îsize
);

960 
	`wrôe_lock_bh
(&
èbÀ
->
lock
);

961 
	`gë_cou¡îs
(
èbÀ
->
¥iv©e
, 
cou¡îs
);

962 
	`wrôe_u∆ock_bh
(&
èbÀ
->
lock
);

965 i‡(
	`c›y_to_u£r
(
u£Ωå
, 
èbÀ
->
¥iv©e
->
íåõs
, 
tŸÆ_size
) != 0) {

966 
ªt
 = -
EFAULT
;

967 
‰ì_cou¡îs
;

972 
off
 = 0, 
num
 = 0; of‡< 
tŸÆ_size
; of‡+
e
->
√xt_off£t
,Çum++){

973 
i
;

974 
ùt_íåy_m©ch
 *
m
;

975 
ùt_íåy_èrgë
 *
t
;

977 
e
 = (
ùt_íåy
 *)(
èbÀ
->
¥iv©e
->
íåõs
 + 
off
);

978 i‡(
	`c›y_to_u£r
(
u£Ωå
 + 
off


979 + 
	`off£tof
(
ùt_íåy
, 
cou¡îs
),

980 &
cou¡îs
[
num
],

981 (
cou¡îs
[
num
])) != 0) {

982 
ªt
 = -
EFAULT
;

983 
‰ì_cou¡îs
;

986 
i
 = (
ùt_íåy
);

987 
i
 < 
e
->
èrgë_off£t
;

988 
i
 +
m
->
u
.
m©ch_size
) {

989 
m
 = (*)
e
 + 
i
;

991 i‡(
	`c›y_to_u£r
(
u£Ωå
 + 
off
 + 
i


992 + 
	`off£tof
(
ùt_íåy_m©ch
,

993 
u
.
u£r
.
«me
),

994 
m
->
u
.
kî√l
.
m©ch
->
«me
,

995 
	`°æí
(
m
->
u
.
kî√l
.
m©ch
->
«me
)+1)

997 
ªt
 = -
EFAULT
;

998 
‰ì_cou¡îs
;

1002 
t
 = 
	`ùt_gë_èrgë
(
e
);

1003 i‡(
	`c›y_to_u£r
(
u£Ωå
 + 
off
 + 
e
->
èrgë_off£t


1004 + 
	`off£tof
(
ùt_íåy_èrgë
,

1005 
u
.
u£r
.
«me
),

1006 
t
->
u
.
kî√l
.
èrgë
->
«me
,

1007 
	`°æí
(
t
->
u
.
kî√l
.
èrgë
->
«me
)+1) != 0) {

1008 
ªt
 = -
EFAULT
;

1009 
‰ì_cou¡îs
;

1013 
‰ì_cou¡îs
:

1014 
	`v‰ì
(
cou¡îs
);

1015  
ªt
;

1016 
	}
}

1019 
	$gë_íåõs
(c⁄° 
ùt_gë_íåõs
 *
íåõs
,

1020 
ùt_gë_íåõs
 
__u£r
 *
u±r
)

1022 
ªt
;

1023 
ùt_èbÀ
 *
t
;

1025 
t
 = 
	`ùt_föd_èbÀ_lock
(
íåõs
->
«me
, &
ªt
, &
ùt_muãx
);

1026 i‡(
t
) {

1027 
	`du¥ötf
("t->private->number = %u\n",

1028 
t
->
¥iv©e
->
numbî
);

1029 i‡(
íåõs
->
size
 =
t
->
¥iv©e
->size)

1030 
ªt
 = 
	`c›y_íåõs_to_u£r
(
t
->
¥iv©e
->
size
,

1031 
t
, 
u±r
->
íåyèbÀ
);

1033 
	`du¥ötf
("get_entries: I've got %uÇot %u!\n",

1034 
t
->
¥iv©e
->
size
,

1035 
íåõs
->
size
);

1036 
ªt
 = -
EINVAL
;

1038 
	`up
(&
ùt_muãx
);

1040 
	`du¥ötf
("get_entries: Can't find %s!\n",

1041 
íåõs
->
«me
);

1043  
ªt
;

1044 
	}
}

1047 
	$do_ª∂a˚
(
__u£r
 *
u£r
, 
Àn
)

1049 
ªt
;

1050 
ùt_ª∂a˚
 
tmp
;

1051 
ùt_èbÀ
 *
t
;

1052 
ùt_èbÀ_öfo
 *
√wöfo
, *
ﬁdöfo
;

1053 
ùt_cou¡îs
 *
cou¡îs
;

1055 i‡(
	`c›y_‰om_u£r
(&
tmp
, 
u£r
, (tmp)) != 0)

1056  -
EFAULT
;

1059 i‡(
Àn
 !(
tmp
Ë+Åmp.
size
)

1060  -
ENOPROTOOPT
;

1063 i‡((
	`SMP_ALIGN
(
tmp
.
size
Ë>> 
PAGE_SHIFT
Ë+ 2 > 
num_phy•ages
)

1064  -
ENOMEM
;

1066 
√wöfo
 = 
	`vmÆloc
((
ùt_èbÀ_öfo
)

1067 + 
	`SMP_ALIGN
(
tmp
.
size
Ë* 
NR_CPUS
);

1068 i‡(!
√wöfo
)

1069  -
ENOMEM
;

1071 i‡(
	`c›y_‰om_u£r
(
√wöfo
->
íåõs
, 
u£r
 + (
tmp
),

1072 
tmp
.
size
) != 0) {

1073 
ªt
 = -
EFAULT
;

1074 
‰ì_√wöfo
;

1077 
cou¡îs
 = 
	`vmÆloc
(
tmp
.
num_cou¡îs
 * (
ùt_cou¡îs
));

1078 i‡(!
cou¡îs
) {

1079 
ªt
 = -
ENOMEM
;

1080 
‰ì_√wöfo
;

1082 
	`mem£t
(
cou¡îs
, 0, 
tmp
.
num_cou¡îs
 * (
ùt_cou¡îs
));

1084 
ªt
 = 
	`å™¶©e_èbÀ
(
tmp
.
«me
,Åmp.
vÆid_hooks
,

1085 
√wöfo
, 
tmp
.
size
,Åmp.
num_íåõs
,

1086 
tmp
.
hook_íåy
,Åmp.
undîÊow
);

1087 i‡(
ªt
 != 0)

1088 
‰ì_√wöfo_cou¡îs
;

1090 
	`du¥ötf
("ip_tables: TranslatedÅable\n");

1092 
t
 = 
	`ùt_föd_èbÀ_lock
(
tmp
.
«me
, &
ªt
, &
ùt_muãx
);

1093 i‡(!
t
)

1094 
‰ì_√wöfo_cou¡îs_u¡øns
;

1097 i‡(
tmp
.
vÆid_hooks
 !
t
->valid_hooks) {

1098 
	`du¥ötf
("Valid hook crap: %08X vs %08X\n",

1099 
tmp
.
vÆid_hooks
, 
t
->valid_hooks);

1100 
ªt
 = -
EINVAL
;

1101 
‰ì_√wöfo_cou¡îs_u¡øns_u∆ock
;

1105 i‡(!
	`åy_moduÀ_gë
(
t
->
me
)) {

1106 
ªt
 = -
EBUSY
;

1107 
‰ì_√wöfo_cou¡îs_u¡øns_u∆ock
;

1111 
ﬁdöfo
 = 
	`ª∂a˚_èbÀ
(
t
, 
tmp
.
num_cou¡îs
, 
√wöfo
, &
ªt
);

1112 i‡(!
ﬁdöfo
)

1113 
put_moduÀ
;

1116 
	`du¥ötf
("do_replace: oldnum=%u, initnum=%u,Çewnum=%u\n",

1117 
ﬁdöfo
->
numbî
, oldöfo->
öôül_íåõs
, 
√wöfo
->number);

1118 i‡((
ﬁdöfo
->
numbî
 > oldöfo->
öôül_íåõs
) ||

1119 (
√wöfo
->
numbî
 <
ﬁdöfo
->
öôül_íåõs
))

1120 
	`moduÀ_put
(
t
->
me
);

1121 i‡((
ﬁdöfo
->
numbî
 > oldöfo->
öôül_íåõs
) &&

1122 (
√wöfo
->
numbî
 <
ﬁdöfo
->
öôül_íåõs
))

1123 
	`moduÀ_put
(
t
->
me
);

1126 
	`gë_cou¡îs
(
ﬁdöfo
, 
cou¡îs
);

1128 
	`IPT_ENTRY_ITERATE
(
ﬁdöfo
->
íåõs
, oldöfo->
size
, 
˛ónup_íåy
,
NULL
);

1129 
	`v‰ì
(
ﬁdöfo
);

1131 
	`c›y_to_u£r
(
tmp
.
cou¡îs
, counters,

1132 (
ùt_cou¡îs
Ë* 
tmp
.
num_cou¡îs
);

1133 
	`v‰ì
(
cou¡îs
);

1134 
	`up
(&
ùt_muãx
);

1137 
put_moduÀ
:

1138 
	`moduÀ_put
(
t
->
me
);

1139 
‰ì_√wöfo_cou¡îs_u¡øns_u∆ock
:

1140 
	`up
(&
ùt_muãx
);

1141 
‰ì_√wöfo_cou¡îs_u¡øns
:

1142 
	`IPT_ENTRY_ITERATE
(
√wöfo
->
íåõs
,Çewöfo->
size
, 
˛ónup_íåy
,
NULL
);

1143 
‰ì_√wöfo_cou¡îs
:

1144 
	`v‰ì
(
cou¡îs
);

1145 
‰ì_√wöfo
:

1146 
	`v‰ì
(
√wöfo
);

1147  
ªt
;

1148 
	}
}

1152 
ölöe
 

1153 
	$add_cou¡î_to_íåy
(
ùt_íåy
 *
e
,

1154 c⁄° 
ùt_cou¡îs
 
addme
[],

1155 *
i
)

1158 
	`du¥ötf
("add_counter: Entry %u %lu/%lu + %lu/%lu\n",

1159 *
i
,

1160 ()
e
->
cou¡îs
.
p˙t
,

1161 ()
e
->
cou¡îs
.
b˙t
,

1162 ()
addme
[*
i
].
p˙t
,

1163 ()
addme
[*
i
].
b˙t
);

1166 
	`ADD_COUNTER
(
e
->
cou¡îs
, 
addme
[*
i
].
b˙t
,áddme[*i].
p˙t
);

1168 (*
i
)++;

1170 
	}
}

1173 
	$do_add_cou¡îs
(
__u£r
 *
u£r
, 
Àn
)

1175 
i
;

1176 
ùt_cou¡îs_öfo
 
tmp
, *
∑ddc
;

1177 
ùt_èbÀ
 *
t
;

1178 
ªt
;

1180 i‡(
	`c›y_‰om_u£r
(&
tmp
, 
u£r
, (tmp)) != 0)

1181  -
EFAULT
;

1183 i‡(
Àn
 !(
tmp
Ë+Åmp.
num_cou¡îs
*(
ùt_cou¡îs
))

1184  -
EINVAL
;

1186 
∑ddc
 = 
	`vmÆloc
(
Àn
);

1187 i‡(!
∑ddc
)

1188  -
ENOMEM
;

1190 i‡(
	`c›y_‰om_u£r
(
∑ddc
, 
u£r
, 
Àn
) != 0) {

1191 
ªt
 = -
EFAULT
;

1192 
‰ì
;

1195 
t
 = 
	`ùt_föd_èbÀ_lock
(
tmp
.
«me
, &
ªt
, &
ùt_muãx
);

1196 i‡(!
t
)

1197 
‰ì
;

1199 
	`wrôe_lock_bh
(&
t
->
lock
);

1200 i‡(
t
->
¥iv©e
->
numbî
 !
∑ddc
->
num_cou¡îs
) {

1201 
ªt
 = -
EINVAL
;

1202 
u∆ock_up_‰ì
;

1205 
i
 = 0;

1206 
	`IPT_ENTRY_ITERATE
(
t
->
¥iv©e
->
íåõs
,

1207 
t
->
¥iv©e
->
size
,

1208 
add_cou¡î_to_íåy
,

1209 
∑ddc
->
cou¡îs
,

1210 &
i
);

1211 
u∆ock_up_‰ì
:

1212 
	`wrôe_u∆ock_bh
(&
t
->
lock
);

1213 
	`up
(&
ùt_muãx
);

1214 
‰ì
:

1215 
	`v‰ì
(
∑ddc
);

1217  
ªt
;

1218 
	}
}

1221 
	$do_ùt_£t_˘l
(
sock
 *
sk
, 
cmd
, 
__u£r
 *
u£r
, 
Àn
)

1223 
ªt
;

1225 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

1226  -
EPERM
;

1228 
cmd
) {

1229 
IPT_SO_SET_REPLACE
:

1230 
ªt
 = 
	`do_ª∂a˚
(
u£r
, 
Àn
);

1233 
IPT_SO_SET_ADD_COUNTERS
:

1234 
ªt
 = 
	`do_add_cou¡îs
(
u£r
, 
Àn
);

1238 
	`du¥ötf
("do_ùt_£t_˘l: unknow¿ªque° %i\n", 
cmd
);

1239 
ªt
 = -
EINVAL
;

1242  
ªt
;

1243 
	}
}

1246 
	$do_ùt_gë_˘l
(
sock
 *
sk
, 
cmd
, 
__u£r
 *
u£r
, *
Àn
)

1248 
ªt
;

1250 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

1251  -
EPERM
;

1253 
cmd
) {

1254 
IPT_SO_GET_INFO
: {

1255 
«me
[
IPT_TABLE_MAXNAMELEN
];

1256 
ùt_èbÀ
 *
t
;

1258 i‡(*
Àn
 !(
ùt_gëöfo
)) {

1259 
	`du¥ötf
("Àngth %u !%u\n", *
Àn
,

1260 (
ùt_gëöfo
));

1261 
ªt
 = -
EINVAL
;

1265 i‡(
	`c›y_‰om_u£r
(
«me
, 
u£r
, (name)) != 0) {

1266 
ªt
 = -
EFAULT
;

1269 
«me
[
IPT_TABLE_MAXNAMELEN
-1] = '\0';

1270 
t
 = 
	`ùt_föd_èbÀ_lock
(
«me
, &
ªt
, &
ùt_muãx
);

1271 i‡(
t
) {

1272 
ùt_gëöfo
 
öfo
;

1274 
öfo
.
vÆid_hooks
 = 
t
->valid_hooks;

1275 
	`mem˝y
(
öfo
.
hook_íåy
, 
t
->
¥iv©e
->hook_entry,

1276 (
öfo
.
hook_íåy
));

1277 
	`mem˝y
(
öfo
.
undîÊow
, 
t
->
¥iv©e
->underflow,

1278 (
öfo
.
undîÊow
));

1279 
öfo
.
num_íåõs
 = 
t
->
¥iv©e
->
numbî
;

1280 
öfo
.
size
 = 
t
->
¥iv©e
->size;

1281 
	`°r˝y
(
öfo
.
«me
,Çame);

1283 i‡(
	`c›y_to_u£r
(
u£r
, &
öfo
, *
Àn
) != 0)

1284 
ªt
 = -
EFAULT
;

1286 
ªt
 = 0;

1288 
	`up
(&
ùt_muãx
);

1293 
IPT_SO_GET_ENTRIES
: {

1294 
ùt_gë_íåõs
 
gë
;

1296 i‡(*
Àn
 < (
gë
)) {

1297 
	`du¥ötf
("gë_íåõs: %u < %u\n", *
Àn
, (
gë
));

1298 
ªt
 = -
EINVAL
;

1299 } i‡(
	`c›y_‰om_u£r
(&
gë
, 
u£r
, (get)) != 0) {

1300 
ªt
 = -
EFAULT
;

1301 } i‡(*
Àn
 !(
ùt_gë_íåõs
Ë+ 
gë
.
size
) {

1302 
	`du¥ötf
("gë_íåõs: %u !%u\n", *
Àn
,

1303 (
ùt_gë_íåõs
Ë+ 
gë
.
size
);

1304 
ªt
 = -
EINVAL
;

1306 
ªt
 = 
	`gë_íåõs
(&
gë
, 
u£r
);

1311 
	`du¥ötf
("do_ùt_gë_˘l: unknow¿ªque° %i\n", 
cmd
);

1312 
ªt
 = -
EINVAL
;

1315  
ªt
;

1316 
	}
}

1320 
	$ùt_ªgi°î_èrgë
(
ùt_èrgë
 *
èrgë
)

1322 
ªt
;

1324 
ªt
 = 
	`down_öãºu±ibÀ
(&
ùt_muãx
);

1325 i‡(
ªt
 != 0)

1326  
ªt
;

1328 i‡(!
	`li°_«med_ö£π
(&
ùt_èrgë
, 
èrgë
)) {

1329 
	`du¥ötf
("ipt_register_target: `%s'álready inÜist!\n",

1330 
èrgë
->
«me
);

1331 
ªt
 = -
EINVAL
;

1333 
	`up
(&
ùt_muãx
);

1334  
ªt
;

1335 
	}
}

1338 
	$ùt_uƒegi°î_èrgë
(
ùt_èrgë
 *
èrgë
)

1340 
	`down
(&
ùt_muãx
);

1341 
	`LIST_DELETE
(&
ùt_èrgë
, 
èrgë
);

1342 
	`up
(&
ùt_muãx
);

1343 
	}
}

1346 
	$ùt_ªgi°î_m©ch
(
ùt_m©ch
 *
m©ch
)

1348 
ªt
;

1350 
ªt
 = 
	`down_öãºu±ibÀ
(&
ùt_muãx
);

1351 i‡(
ªt
 != 0)

1352  
ªt
;

1354 i‡(!
	`li°_«med_ö£π
(&
ùt_m©ch
, 
m©ch
)) {

1355 
	`du¥ötf
("ipt_register_match: `%s'álready inÜist!\n",

1356 
m©ch
->
«me
);

1357 
ªt
 = -
EINVAL
;

1359 
	`up
(&
ùt_muãx
);

1361  
ªt
;

1362 
	}
}

1365 
	$ùt_uƒegi°î_m©ch
(
ùt_m©ch
 *
m©ch
)

1367 
	`down
(&
ùt_muãx
);

1368 
	`LIST_DELETE
(&
ùt_m©ch
, 
m©ch
);

1369 
	`up
(&
ùt_muãx
);

1370 
	}
}

1372 
	$ùt_ªgi°î_èbÀ
(
ùt_èbÀ
 *
èbÀ
)

1374 
ªt
;

1375 
ùt_èbÀ_öfo
 *
√wöfo
;

1376 
ùt_èbÀ_öfo
 
boŸ°øp


1379 
√wöfo
 = 
	`vmÆloc
((
ùt_èbÀ_öfo
)

1380 + 
	`SMP_ALIGN
(
èbÀ
->èbÀ->
size
Ë* 
NR_CPUS
);

1381 i‡(!
√wöfo
)

1382  -
ENOMEM
;

1384 
	`mem˝y
(
√wöfo
->
íåõs
, 
èbÀ
->èbÀ->íåõs,ÅabÀ->èbÀ->
size
);

1386 
ªt
 = 
	`å™¶©e_èbÀ
(
èbÀ
->
«me
,ÅabÀ->
vÆid_hooks
,

1387 
√wöfo
, 
èbÀ
->èbÀ->
size
,

1388 
èbÀ
->èbÀ->
num_íåõs
,

1389 
èbÀ
->èbÀ->
hook_íåy
,

1390 
èbÀ
->èbÀ->
undîÊow
);

1391 i‡(
ªt
 != 0) {

1392 
	`v‰ì
(
√wöfo
);

1393  
ªt
;

1396 
ªt
 = 
	`down_öãºu±ibÀ
(&
ùt_muãx
);

1397 i‡(
ªt
 != 0) {

1398 
	`v‰ì
(
√wöfo
);

1399  
ªt
;

1403 i‡(
	`li°_«med_föd
(&
ùt_èbÀs
, 
èbÀ
->
«me
)) {

1404 
ªt
 = -
EEXIST
;

1405 
‰ì_u∆ock
;

1409 
èbÀ
->
¥iv©e
 = &
boŸ°øp
;

1410 i‡(!
	`ª∂a˚_èbÀ
(
èbÀ
, 0, 
√wöfo
, &
ªt
))

1411 
‰ì_u∆ock
;

1413 
	`du¥ötf
("table->private->number = %u\n",

1414 
èbÀ
->
¥iv©e
->
numbî
);

1417 
èbÀ
->
¥iv©e
->
öôül_íåõs
 =ÅabÀ->¥iv©e->
numbî
;

1419 
èbÀ
->
lock
 = 
RW_LOCK_UNLOCKED
;

1420 
	`li°_¥ïíd
(&
ùt_èbÀs
, 
èbÀ
);

1422 
u∆ock
:

1423 
	`up
(&
ùt_muãx
);

1424  
ªt
;

1426 
‰ì_u∆ock
:

1427 
	`v‰ì
(
√wöfo
);

1428 
u∆ock
;

1429 
	}
}

1431 
	$ùt_uƒegi°î_èbÀ
(
ùt_èbÀ
 *
èbÀ
)

1433 
	`down
(&
ùt_muãx
);

1434 
	`LIST_DELETE
(&
ùt_èbÀs
, 
èbÀ
);

1435 
	`up
(&
ùt_muãx
);

1438 
	`IPT_ENTRY_ITERATE
(
èbÀ
->
¥iv©e
->
íåõs
,ÅabÀ->¥iv©e->
size
,

1439 
˛ónup_íåy
, 
NULL
);

1440 
	`v‰ì
(
èbÀ
->
¥iv©e
);

1441 
	}
}

1444 
ölöe
 

1445 
	$p‹t_m©ch
(
u_öt16_t
 
mö
, u_öt16_à
max
, u_öt16_à
p‹t
, 
övît
)

1447 
ªt
;

1449 
ªt
 = (
p‹t
 >
mö
 &&Ö‹à<
max
Ë^ 
övît
;

1450  
ªt
;

1451 
	}
}

1454 
	$t˝_föd_›ti⁄
(
u_öt8_t
 
›ti⁄
,

1455 c⁄° 
sk_buff
 *
skb
,

1456 
›éí
,

1457 
övît
,

1458 *
hŸdr›
)

1461 
u_öt8_t
 
›t
[60 - (
t˝hdr
)];

1462 
i
;

1464 
	`du¥ötf
("tcp_match: finding option\n");

1466 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4 + (
t˝hdr
),

1467 
›t
, 
›éí
) < 0) {

1468 *
hŸdr›
 = 1;

1472 
i
 = 0; i < 
›éí
; ) {

1473 i‡(
›t
[
i
] =
›ti⁄
Ë !
övît
;

1474 i‡(
›t
[
i
] < 2) i++;

1475 
i
 +
›t
[i+1]?:1;

1478  
övît
;

1479 
	}
}

1482 
	$t˝_m©ch
(c⁄° 
sk_buff
 *
skb
,

1483 c⁄° 
√t_devi˚
 *
ö
,

1484 c⁄° 
√t_devi˚
 *
out
,

1485 c⁄° *
m©chöfo
,

1486 
off£t
,

1487 *
hŸdr›
)

1489 
t˝hdr
 
t˝h
;

1490 c⁄° 
ùt_t˝
 *
t˝öfo
 = 
m©chöfo
;

1492 i‡(
off£t
) {

1499 i‡(
off£t
 == 1) {

1500 
	`du¥ötf
("DroppingÉvil TCP offset=1 frag.\n");

1501 *
hŸdr›
 = 1;

1507 
	#FWINVTCP
(
boﬁ
,
övÊg
Ë((boﬁË^ !!(
t˝öfo
->
övÊags
 & invÊg))

	)

1509 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
t˝h
, (tcph)) < 0) {

1512 
	`du¥ötf
("DroppingÉvil TCP offset=0Åinygram.\n");

1513 *
hŸdr›
 = 1;

1517 i‡(!
	`p‹t_m©ch
(
t˝öfo
->
•ts
[0],Åcpinfo->spts[1],

1518 
	`¡ohs
(
t˝h
.
sour˚
),

1519 !!(
t˝öfo
->
övÊags
 & 
IPT_TCP_INV_SRCPT
)))

1521 i‡(!
	`p‹t_m©ch
(
t˝öfo
->
d±s
[0],Åcpinfo->dpts[1],

1522 
	`¡ohs
(
t˝h
.
de°
),

1523 !!(
t˝öfo
->
övÊags
 & 
IPT_TCP_INV_DSTPT
)))

1525 i‡(!
	`FWINVTCP
((((*)&
t˝h
)[13] & 
t˝öfo
->
Êg_mask
)

1526 =
t˝öfo
->
Êg_cmp
,

1527 
IPT_TCP_INV_FLAGS
))

1529 i‡(
t˝öfo
->
›ti⁄
) {

1530 i‡(
t˝h
.
doff
 * 4 < (tcph)) {

1531 *
hŸdr›
 = 1;

1534 i‡(!
	`t˝_föd_›ti⁄
(
t˝öfo
->
›ti⁄
, 
skb
, 
t˝h
.
doff
*4 - (tcph),

1535 
t˝öfo
->
övÊags
 & 
IPT_TCP_INV_OPTION
,

1536 
hŸdr›
))

1540 
	}
}

1544 
	$t˝_checkíåy
(c⁄° *
èbÀ«me
,

1545 c⁄° 
ùt_ù
 *
ù
,

1546 *
m©chöfo
,

1547 
m©chsize
,

1548 
hook_mask
)

1550 c⁄° 
ùt_t˝
 *
t˝öfo
 = 
m©chöfo
;

1553  
ù
->
¥Ÿo
 =
IPPROTO_TCP


1554 && !(
ù
->
övÊags
 & 
IPT_INV_PROTO
)

1555 && 
m©chsize
 =
	`IPT_ALIGN
((
ùt_t˝
))

1556 && !(
t˝öfo
->
övÊags
 & ~
IPT_TCP_INV_MASK
);

1557 
	}
}

1560 
	$udp_m©ch
(c⁄° 
sk_buff
 *
skb
,

1561 c⁄° 
√t_devi˚
 *
ö
,

1562 c⁄° 
√t_devi˚
 *
out
,

1563 c⁄° *
m©chöfo
,

1564 
off£t
,

1565 *
hŸdr›
)

1567 
udphdr
 
udph
;

1568 c⁄° 
ùt_udp
 *
udpöfo
 = 
m©chöfo
;

1571 i‡(
off£t
)

1574 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
udph
, (udph)) < 0) {

1577 
	`du¥ötf
("DroppingÉvil UDPÅinygram.\n");

1578 *
hŸdr›
 = 1;

1582  
	`p‹t_m©ch
(
udpöfo
->
•ts
[0], udpinfo->spts[1],

1583 
	`¡ohs
(
udph
.
sour˚
),

1584 !!(
udpöfo
->
övÊags
 & 
IPT_UDP_INV_SRCPT
))

1585 && 
	`p‹t_m©ch
(
udpöfo
->
d±s
[0], udpinfo->dpts[1],

1586 
	`¡ohs
(
udph
.
de°
),

1587 !!(
udpöfo
->
övÊags
 & 
IPT_UDP_INV_DSTPT
));

1588 
	}
}

1592 
	$udp_checkíåy
(c⁄° *
èbÀ«me
,

1593 c⁄° 
ùt_ù
 *
ù
,

1594 *
m©chöfo
,

1595 
m©chöfosize
,

1596 
hook_mask
)

1598 c⁄° 
ùt_udp
 *
udpöfo
 = 
m©chöfo
;

1601 i‡(
ù
->
¥Ÿo
 !
IPPROTO_UDP
 || (ù->
övÊags
 & 
IPT_INV_PROTO
)) {

1602 
	`du¥ötf
("ùt_udp: PrŸocﬁ %u !%u\n", 
ù
->
¥Ÿo
,

1603 
IPPROTO_UDP
);

1606 i‡(
m©chöfosize
 !
	`IPT_ALIGN
((
ùt_udp
))) {

1607 
	`du¥ötf
("ipt_udp: matchsize %u != %u\n",

1608 
m©chöfosize
, 
	`IPT_ALIGN
((
ùt_udp
)));

1611 i‡(
udpöfo
->
övÊags
 & ~
IPT_UDP_INV_MASK
) {

1612 
	`du¥ötf
("ipt_udp: unknown flags %X\n",

1613 
udpöfo
->
övÊags
);

1618 
	}
}

1621 
ölöe
 

1622 
	$icmp_ty≥_code_m©ch
(
u_öt8_t
 
ã°_ty≥
, u_öt8_à
mö_code
, u_öt8_à
max_code
,

1623 
u_öt8_t
 
ty≥
, u_öt8_à
code
,

1624 
övît
)

1626  ((
ã°_ty≥
 =0xFFË|| (
ty≥
 =ã°_ty≥ && 
code
 >
mö_code
 && codê<
max_code
))

1627 ^ 
övît
;

1628 
	}
}

1631 
	$icmp_m©ch
(c⁄° 
sk_buff
 *
skb
,

1632 c⁄° 
√t_devi˚
 *
ö
,

1633 c⁄° 
√t_devi˚
 *
out
,

1634 c⁄° *
m©chöfo
,

1635 
off£t
,

1636 *
hŸdr›
)

1638 
icmphdr
 
icmph
;

1639 c⁄° 
ùt_icmp
 *
icmpöfo
 = 
m©chöfo
;

1642 i‡(
off£t
)

1645 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
icmph
, (icmph)) < 0){

1648 
	`du¥ötf
("DroppingÉvil ICMPÅinygram.\n");

1649 *
hŸdr›
 = 1;

1653  
	`icmp_ty≥_code_m©ch
(
icmpöfo
->
ty≥
,

1654 
icmpöfo
->
code
[0],

1655 
icmpöfo
->
code
[1],

1656 
icmph
.
ty≥
, icmph.
code
,

1657 !!(
icmpöfo
->
övÊags
&
IPT_ICMP_INV
));

1658 
	}
}

1662 
	$icmp_checkíåy
(c⁄° *
èbÀ«me
,

1663 c⁄° 
ùt_ù
 *
ù
,

1664 *
m©chöfo
,

1665 
m©chsize
,

1666 
hook_mask
)

1668 c⁄° 
ùt_icmp
 *
icmpöfo
 = 
m©chöfo
;

1671  
ù
->
¥Ÿo
 =
IPPROTO_ICMP


1672 && !(
ù
->
övÊags
 & 
IPT_INV_PROTO
)

1673 && 
m©chsize
 =
	`IPT_ALIGN
((
ùt_icmp
))

1674 && !(
icmpöfo
->
övÊags
 & ~
IPT_ICMP_INV
);

1675 
	}
}

1678 
ùt_èrgë
 
	gùt_°™d¨d_èrgë
 = {

1679 .
«me
 = 
IPT_STANDARD_TARGET
,

1682 
ùt_èrgë
 
	gùt_îr‹_èrgë
 = {

1683 .
«me
 = 
IPT_ERROR_TARGET
,

1684 .
	gèrgë
 = 
ùt_îr‹
,

1687 
nf_sock›t_›s
 
	gùt_sock›ts
 = {

1688 .
pf
 = 
PF_INET
,

1689 .
	g£t_›tmö
 = 
IPT_BASE_CTL
,

1690 .
	g£t_›tmax
 = 
IPT_SO_SET_MAX
+1,

1691 .
	g£t
 = 
do_ùt_£t_˘l
,

1692 .
	ggë_›tmö
 = 
IPT_BASE_CTL
,

1693 .
	ggë_›tmax
 = 
IPT_SO_GET_MAX
+1,

1694 .
	ggë
 = 
do_ùt_gë_˘l
,

1697 
ùt_m©ch
 
	gt˝_m©ch°ru˘
 = {

1698 .
«me
 = "tcp",

1699 .
	gm©ch
 = &
t˝_m©ch
,

1700 .
	gcheckíåy
 = &
t˝_checkíåy
,

1703 
ùt_m©ch
 
	gudp_m©ch°ru˘
 = {

1704 .
«me
 = "udp",

1705 .
	gm©ch
 = &
udp_m©ch
,

1706 .
	gcheckíåy
 = &
udp_checkíåy
,

1709 
ùt_m©ch
 
	gicmp_m©ch°ru˘
 = {

1710 .
«me
 = "icmp",

1711 .
	gm©ch
 = &
icmp_m©ch
,

1712 .
	gcheckíåy
 = &
icmp_checkíåy
,

1715 #ifde‡
CONFIG_PROC_FS


1716 
ölöe
 
	$¥öt_«me
(c⁄° *
i
,

1717 
off_t
 
°¨t_off£t
, *
buf„r
, 
Àngth
,

1718 
off_t
 *
pos
, *
cou¡
)

1720 i‡((*
cou¡
)++ >
°¨t_off£t
) {

1721 
«mñí
;

1723 
«mñí
 = 
	`•rötf
(
buf„r
 + *
pos
, "%s\n",

1724 
i
 + (
li°_hód
));

1725 i‡(*
pos
 + 
«mñí
 > 
Àngth
) {

1729 *
pos
 +
«mñí
;

1732 
	}
}

1734 
ölöe
 
	$¥öt_èrgë
(c⁄° 
ùt_èrgë
 *
t
,

1735 
off_t
 
°¨t_off£t
, *
buf„r
, 
Àngth
,

1736 
off_t
 *
pos
, *
cou¡
)

1738 i‡(
t
 =&
ùt_°™d¨d_èrgë
 ||Å =&
ùt_îr‹_èrgë
)

1740  
	`¥öt_«me
((*)
t
, 
°¨t_off£t
, 
buf„r
, 
Àngth
, 
pos
, 
cou¡
);

1741 
	}
}

1743 
	$ùt_gë_èbÀs
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

1745 
off_t
 
pos
 = 0;

1746 
cou¡
 = 0;

1748 i‡(
	`down_öãºu±ibÀ
(&
ùt_muãx
) != 0)

1751 
	`LIST_FIND
(&
ùt_èbÀs
, 
¥öt_«me
, *,

1752 
off£t
, 
buf„r
, 
Àngth
, &
pos
, &
cou¡
);

1754 
	`up
(&
ùt_muãx
);

1757 *
°¨t
=(*)(()
cou¡
-
off£t
);

1758  
pos
;

1759 
	}
}

1761 
	$ùt_gë_èrgës
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

1763 
off_t
 
pos
 = 0;

1764 
cou¡
 = 0;

1766 i‡(
	`down_öãºu±ibÀ
(&
ùt_muãx
) != 0)

1769 
	`LIST_FIND
(&
ùt_èrgë
, 
¥öt_èrgë
, ipt_target *,

1770 
off£t
, 
buf„r
, 
Àngth
, &
pos
, &
cou¡
);

1772 
	`up
(&
ùt_muãx
);

1774 *
°¨t
 = (*)(()
cou¡
 - 
off£t
);

1775  
pos
;

1776 
	}
}

1778 
	$ùt_gë_m©ches
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

1780 
off_t
 
pos
 = 0;

1781 
cou¡
 = 0;

1783 i‡(
	`down_öãºu±ibÀ
(&
ùt_muãx
) != 0)

1786 
	`LIST_FIND
(&
ùt_m©ch
, 
¥öt_«me
, *,

1787 
off£t
, 
buf„r
, 
Àngth
, &
pos
, &
cou¡
);

1789 
	`up
(&
ùt_muãx
);

1791 *
°¨t
 = (*)(()
cou¡
 - 
off£t
);

1792  
pos
;

1793 
	}
}

1795 °ru˘ { *
	m«me
; 
gë_öfo_t
 *
	mgë_öfo
; } 
	gùt_¥oc_íåy
[] =

1796 { { "ù_èbÀs_«mes", 
ùt_gë_èbÀs
 },

1797 { "ù_èbÀs_èrgës", 
ùt_gë_èrgës
 },

1798 { "ù_èbÀs_m©ches", 
ùt_gë_m©ches
 },

1799 { 
NULL
, NULL} };

1802 
__öô
 
	$öô
()

1804 
ªt
;

1807 
	`down
(&
ùt_muãx
);

1808 
	`li°_≠≥nd
(&
ùt_èrgë
, &
ùt_°™d¨d_èrgë
);

1809 
	`li°_≠≥nd
(&
ùt_èrgë
, &
ùt_îr‹_èrgë
);

1810 
	`li°_≠≥nd
(&
ùt_m©ch
, &
t˝_m©ch°ru˘
);

1811 
	`li°_≠≥nd
(&
ùt_m©ch
, &
udp_m©ch°ru˘
);

1812 
	`li°_≠≥nd
(&
ùt_m©ch
, &
icmp_m©ch°ru˘
);

1813 
	`up
(&
ùt_muãx
);

1816 
ªt
 = 
	`nf_ªgi°î_sock›t
(&
ùt_sock›ts
);

1817 i‡(
ªt
 < 0) {

1818 
	`du¥ötf
("UnableÅoÑegister sockopts.\n");

1819  
ªt
;

1822 #ifde‡
CONFIG_PROC_FS


1824 
¥oc_dú_íåy
 *
¥oc
;

1825 
i
;

1827 
i
 = 0; 
ùt_¥oc_íåy
[i].
«me
; i++) {

1828 
¥oc
 = 
	`¥oc_√t_¸óã
(
ùt_¥oc_íåy
[
i
].
«me
, 0,

1829 
ùt_¥oc_íåy
[
i
].
gë_öfo
);

1830 i‡(!
¥oc
) {

1831 --
i
 >= 0)

1832 
	`¥oc_√t_ªmove
(
ùt_¥oc_íåy
[
i
].
«me
);

1833 
	`nf_uƒegi°î_sock›t
(&
ùt_sock›ts
);

1834  -
ENOMEM
;

1836 
¥oc
->
ow√r
 = 
THIS_MODULE
;

1841 
	`¥ötk
("ip_tables: (C) 2000-2002 Netfilter coreÅeam\n");

1843 
	}
}

1845 
__exô
 
	$föi
()

1847 
	`nf_uƒegi°î_sock›t
(&
ùt_sock›ts
);

1848 #ifde‡
CONFIG_PROC_FS


1850 
i
;

1851 
i
 = 0; 
ùt_¥oc_íåy
[i].
«me
; i++)

1852 
	`¥oc_√t_ªmove
(
ùt_¥oc_íåy
[
i
].
«me
);

1855 
	}
}

1857 
EXPORT_SYMBOL
(
ùt_ªgi°î_èbÀ
);

1858 
EXPORT_SYMBOL
(
ùt_uƒegi°î_èbÀ
);

1859 
EXPORT_SYMBOL
(
ùt_ªgi°î_m©ch
);

1860 
EXPORT_SYMBOL
(
ùt_uƒegi°î_m©ch
);

1861 
EXPORT_SYMBOL
(
ùt_do_èbÀ
);

1862 
EXPORT_SYMBOL
(
ùt_ªgi°î_èrgë
);

1863 
EXPORT_SYMBOL
(
ùt_uƒegi°î_èrgë
);

1864 
EXPORT_SYMBOL
(
ùt_föd_èrgë_lock
);

1866 
moduÀ_öô
(
öô
);

1867 
moduÀ_exô
(
föi
);

	@ip_tables.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_traffic.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ip_traffic_standalone.c

10 
	~<löux/ty≥s.h
>

11 
	~<löux/ù.h
>

12 
	~<löux/√tfûãr.h
>

13 
	~<löux/√tfûãr_ùv4.h
>

14 
	~<löux/moduÀ.h
>

15 
	~<löux/skbuff.h
>

16 
	~<löux/¥oc_fs.h
>

17 
	~<löux/vîsi⁄.h
>

18 
	~<√t/checksum.h
>

19 
	~<löux/kî√l.h
>

21 
	~<löux/√tfûãr_ùv4/åaffic_defs.h
>

23 
	#ASSERT_READ_LOCK
(
x
Ë
	`MUST_BE_READ_LOCKED
(&
ù_åaffic_lock
)

	)

24 
	#ASSERT_WRITE_LOCK
(
x
Ë
	`MUST_BE_WRITE_LOCKED
(&
ù_åaffic_lock
)

	)

33 
	#DEBUGP
 
¥ötk


	)

35 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

38 
	#ECHO_DEBUG
 0

	)

40 
moduÀ
 *
	gù_åaffic_moduÀ
 = 
THIS_MODULE
;

41 
MODULE_LICENSE
 ("GPL");

42 
	#MEGA_BYTE
 0x00080000

43 

	)

44 
	gåaffic_byãs
 = 0;

45 
	gåaffic_tmp
 = 0;

47 
li°_hód
 
åaffic_c⁄fig_li°_hód
;

50 
	$li°_åaffics
 (*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

52 
Àn
 = 0;

53 
i
 = 0;

54 
	#BUFFSIZE
 1024

	)

55 *
tmp
 = 
	`kmÆloc
 (
BUFFSIZE
, 
GFP_KERNEL
);

56 i‡(
tmp
 =
NULL
)

58 
	`¥ötk
 ("kernel malloc memory failed.\n");

61 
tmp
[0] = 0;

72 c⁄° 
li°_hód
 *
__t
 = &
åaffic_c⁄fig_li°_hód
;

77 
	`•rötf
 (
tmp
, "%°hrough_byãs(MB)=%d\n",Åmp, 
åaffic_byãs
);

80 
__t
 = __t->
√xt
;

81 i‡(
__t
 =(&
åaffic_c⁄fig_li°_hód
))

83 
__t
 = 
NULL
;

86 
i
++;

87 
	`¢¥ötf
 (
tmp
, 
BUFFSIZE
, "%s%d %d\n",Åmp,

88 ((c⁄° 
±øffic_c⁄fig_t
Ë
__t
)->
ù_addªss
,

89 ((c⁄° 
±øffic_c⁄fig_t
Ë
__t
)->
ù_åaffic_MAX
);

92 
	`°∫˝y
 (
buf„r
, 
tmp
, 
BUFFSIZE
);

93 
	`k‰ì
 (
tmp
);

94 
Àn
 = 
	`°æí
 (
buf„r
);

95  
Àn
;

96 
	}
}

99 
ù_åaffic_c⁄åﬁ
 (
hooknum
, 
sk_buff
 **
pskb
,

100 c⁄° 
√t_devi˚
 *
ö
,

101 c⁄° 
√t_devi˚
 *
out
,

102 (*
ok‚
Ë(
sk_buff
 *))

107 
addr
;

108 *
p
 = (*Ë&
addr
;

109 
li°_hód
 *
__t
 = &
åaffic_c⁄fig_li°_hód
;

110 *
p
 = 192;

111 
p
[1] = 168;

112 
p
[2] = 10;

113 
p
[3] = 41;

115 #i‡
ECHO_DEBUG


116 
	`¥ötk
 (
KERN_INFO
 "aÖacket with daddr=%ld sapassÅhrouthÖost_routing.\n",

117 (*
pskb
)->
nh
.
ùh
->
daddr
);

118 
	`¥ötk
 (
KERN_INFO
 "ht⁄l◊ddrË%ld", 
	`ht⁄l
 (
addr
));

122 
åaffic_tmp
 +(*
pskb
)->
nh
.
ùh
->
tŸ_Àn
;

123 i‡(
åaffic_tmp
 >
MEGA_BYTE
)

125 
åaffic_byãs
 +
åaffic_tmp
 / 
MEGA_BYTE
;

126 
åaffic_tmp
 =Åøffic_tm∞% 
MEGA_BYTE
;

130 
__t
 = __t->
√xt
;

131 i‡(
__t
 =(&
åaffic_c⁄fig_li°_hód
))

133 
__t
 = 
NULL
;

141 i‡((*
pskb
)->
nh
.
ùh
->
daddr
 ==

142 
	`ht⁄l
 (((
±øffic_c⁄fig_t
Ë
__t
)->
ù_addªss
))

144 ((
±øffic_c⁄fig_t
Ë
__t
)->
ù_åaffic_loˇl
 +=

145 (*
pskb
)->
nh
.
ùh
->
tŸ_Àn
;

146 i‡(((
±øffic_c⁄fig_t
Ë
__t
)->
ù_åaffic_loˇl
 >
MEGA_BYTE
)

148 ((
±øffic_c⁄fig_t
Ë
__t
)->
ù_åaffic_MAX
 -=

149 ((
±øffic_c⁄fig_t
Ë
__t
)->
ù_åaffic_loˇl
 / 
MEGA_BYTE
;

150 ((
±øffic_c⁄fig_t
Ë
__t
)->
ù_åaffic_loˇl
 =

151 ((
±øffic_c⁄fig_t
Ë
__t
)->
ù_åaffic_loˇl
 % 
MEGA_BYTE
;

160  
NF_ACCEPT
;

164 i‡(
åaffic_byãs
 >
åaffic_MAX
)

165  
NF_DROP
;

167  
NF_ACCEPT
;

169 
	}
}

175 
nf_hook_›s
 
	gù_åaffic_c⁄åﬁ_›s


176 { {
NULL
, NULL}, 
ù_åaffic_c⁄åﬁ
, 
PF_INET
, 
NF_IP_POST_ROUTING
,

177 
NF_IP_PRI_CONNTRACK


181 
	$öô_‹_˛ónup
 (
öô
)

183 
¥oc_dú_íåy
 *
¥oc
;

184 
ªt
 = 0;

186 i‡(!
öô
)

187 
˛ónup
;

193 
¥oc
 = 
	`¥oc_√t_¸óã
 ("ù_åaffic", 0, 
li°_åaffics
);

194 i‡(!
¥oc
)

195 
˛ónup_öô
;

196 
¥oc
->
ow√r
 = 
THIS_MODULE
;

198 
ªt
 = 
	`nf_ªgi°î_hook
 (&
ù_åaffic_c⁄åﬁ_›s
);

199 i‡(
ªt
 < 0)

201 
	`¥ötk
 ("ip_traffic: can'tÑegister in hook.\n");

202 
˛ónup_¥oc
;

204  
ªt
;

206 
˛ónup
:

207 
˛ónup_ö›s
:

208 
	`nf_uƒegi°î_hook
 (&
ù_åaffic_c⁄åﬁ_›s
);

209 
˛ónup_¥oc
:

210 
	`¥oc_√t_ªmove
 ("ip_traffic");

211 
˛ónup_öô
:

215 
˛ónup_nŸhög
:

216  
ªt
;

217 
	}
}

219 
__öô


220 
	$öô
 ()

222  
	`öô_‹_˛ónup
 (1);

223 
	}
}

225 
__exô


226 
	$föi
 ()

228 
	`öô_‹_˛ónup
 (0);

229 
	}
}

231 
moduÀ_öô
 (
öô
);

232 
moduÀ_exô
 (
föi
);

	@ipchains_core.c

69 
	~<löux/c⁄fig.h
>

71 
	~<asm/uac˚ss.h
>

72 
	~<asm/sy°em.h
>

73 
	~<löux/ty≥s.h
>

74 
	~<löux/sched.h
>

75 
	~<löux/°rög.h
>

76 
	~<löux/î∫o.h
>

77 
	~<löux/moduÀ.h
>

79 
	~<löux/sockë.h
>

80 
	~<löux/sockios.h
>

81 
	~<löux/ö.h
>

82 
	~<löux/öë.h
>

83 
	~<löux/√tdevi˚.h
>

84 
	~<löux/icmp.h
>

85 
	~<löux/udp.h
>

86 
	~<√t/ù.h
>

87 
	~<√t/¥Ÿocﬁ.h
>

88 
	~<√t/rouã.h
>

89 
	~<√t/t˝.h
>

90 
	~<√t/udp.h
>

91 
	~<√t/sock.h
>

92 
	~<√t/icmp.h
>

93 
	~<löux/√éök.h
>

94 
	~<löux/√tfûãr.h
>

95 
	~<löux/√tfûãr_ùv4/com∑t_fúewÆl.h
>

96 
	~<löux/√tfûãr_ùv4/ùchaös_c‹e.h
>

97 
	~<löux/√tfûãr_ùv4/ù_«t_c‹e.h
>

99 
	~<√t/checksum.h
>

100 
	~<löux/¥oc_fs.h
>

101 
	~<löux/°©.h
>

103 
MODULE_LICENSE
("Dual BSD/GPL");

104 
MODULE_AUTHOR
("Rusty Russell <rusty@rustcorp.com.au>");

105 
MODULE_DESCRIPTION
("ipchains backwards compatibilityÜayer");

154 #i‡
deföed
(
CONFIG_NETLINK_DEV
Ë|| deföed(
CONFIG_NETLINK_DEV_MODULE
)

155 
sock
 *
	gùfwsk
;

158 #ifde‡
CONFIG_SMP


159 
	#SLOT_NUMBER
(Ë(
	`smp_¥o˚ss‹_id
()*2 + !
	`ö_öãºu±
())

	)

161 
	#SLOT_NUMBER
(Ë(!
	`ö_öãºu±
())

	)

163 
	#NUM_SLOTS
 (
NR_CPUS
*2)

	)

165 
	#SIZEOF_STRUCT_IP_CHAIN
 ((
ù_chaö
) \

166 + 
NUM_SLOTS
*(
ù_ªít
))

	)

167 
	#SIZEOF_STRUCT_IP_FW_KERNEL
 ((
ù_fwkî√l
) \

168 + 
NUM_SLOTS
*(
ù_cou¡îs
))

	)

170 #ifde‡
DEBUG_IP_FIREWALL_LOCKING


171 
	gfwc_æocks
, 
	gfwc_wlocks
;

172 
	#FWC_DEBUG_LOCK
(
d
) \

174 
	`FWC_DONT_HAVE_LOCK
(
d
); \

175 
d
 |(1 << 
	`SLOT_NUMBER
()); \

176 } 0)

	)

178 
	#FWC_DEBUG_UNLOCK
(
d
) \

180 
	`FWC_HAVE_LOCK
(
d
); \

181 
d
 &~(1 << 
	`SLOT_NUMBER
()); \

182 } 0)

	)

184 
	#FWC_DONT_HAVE_LOCK
(
d
) \

186 i‡((
d
Ë& (1 << 
	`SLOT_NUMBER
())) \

187 
	`¥ötk
("%s:%i: GotÜock on %iálready!\n", \

188 
__FILE__
, 
__LINE__
, 
	`SLOT_NUMBER
()); \

189 } 0)

	)

191 
	#FWC_HAVE_LOCK
(
d
) \

193 i‡(!((
d
Ë& (1 << 
	`SLOT_NUMBER
()))) \

194 
	`¥ötk
("%s:%i:NoÜock on %i!\n", \

195 
__FILE__
, 
__LINE__
, 
	`SLOT_NUMBER
()); \

196 } 0)

	)

199 
	#FWC_DEBUG_LOCK
(
d
Ëdÿ{ } 0)

	)

200 
	#FWC_DEBUG_UNLOCK
(
d
Ëdÿ{ } 0)

	)

201 
	#FWC_DONT_HAVE_LOCK
(
d
Ëdÿ{ } 0)

	)

202 
	#FWC_HAVE_LOCK
(
d
Ëdÿ{ } 0)

	)

205 
	#FWC_READ_LOCK
(
l
Ëdÿ{ 
	`FWC_DEBUG_LOCK
(
fwc_æocks
); 
	`ªad_lock
÷); } 0)

	)

206 
	#FWC_WRITE_LOCK
(
l
Ëdÿ{ 
	`FWC_DEBUG_LOCK
(
fwc_wlocks
); 
	`wrôe_lock
÷); } 0)

	)

207 
	#FWC_READ_LOCK_IRQ
(
l
,
f
Ëdÿ{ 
	`FWC_DEBUG_LOCK
(
fwc_æocks
); 
	`ªad_lock_úqßve
÷,f); } 0)

	)

208 
	#FWC_WRITE_LOCK_IRQ
(
l
,
f
Ëdÿ{ 
	`FWC_DEBUG_LOCK
(
fwc_wlocks
); 
	`wrôe_lock_úqßve
÷,f); } 0)

	)

209 
	#FWC_READ_UNLOCK
(
l
Ëdÿ{ 
	`FWC_DEBUG_UNLOCK
(
fwc_æocks
); 
	`ªad_u∆ock
÷); } 0)

	)

210 
	#FWC_WRITE_UNLOCK
(
l
Ëdÿ{ 
	`FWC_DEBUG_UNLOCK
(
fwc_wlocks
); 
	`wrôe_u∆ock
÷); } 0)

	)

211 
	#FWC_READ_UNLOCK_IRQ
(
l
,
f
Ëdÿ{ 
	`FWC_DEBUG_UNLOCK
(
fwc_æocks
); 
	`ªad_u∆ock_úqª°‹e
÷,f); } 0)

	)

212 
	#FWC_WRITE_UNLOCK_IRQ
(
l
,
f
Ëdÿ{ 
	`FWC_DEBUG_UNLOCK
(
fwc_wlocks
); 
	`wrôe_u∆ock_úqª°‹e
÷,f); } 0)

	)

214 
	gù_chaö
;

216 
	sù_cou¡îs


218 
__u64
 
	mp˙t
, 
	mb˙t
;

221 
	sù_fwkî√l


223 
ù_fw
 
	mùfw
;

224 
ù_fwkî√l
 *
	m√xt
;

226 
ù_chaö
 *
	mbønch
;

228 
	msim∂ebønch
;

229 
ù_cou¡îs
 
	mcou¡îs
[0];

232 
	sù_ªít


234 
ù_chaö
 *
	m¥evchaö
;

235 
ù_fwkî√l
 *
	m¥evruÀ
;

236 
ù_cou¡îs
 
	mcou¡îs
;

239 
	sù_chaö


241 
ù_chaöœbñ
 
	mœbñ
;

242 
ù_chaö
 *
	m√xt
;

243 
ù_fwkî√l
 *
	mchaö
;

244 
__u32
 
	mªfcou¡
;

245 
	mpﬁicy
;

247 
ù_ªít
 
	mªít
[0];

254 #ifde‡
DEBUG_IP_FIREWALL


255 
	#d¥ötf
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(f‹m© , ##árgs)

	)

257 
	#d¥ötf
(
f‹m©
, 
¨gs
...)

	)

260 #ifde‡
DEBUG_IP_FIREWALL_USER


261 
	#du¥ötf
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(f‹m© , ##árgs)

	)

263 
	#du¥ötf
(
f‹m©
, 
¨gs
...)

	)

267 
rwlock_t
 
	gù_fw_lock
 = 
RW_LOCK_UNLOCKED
;

270 
ù_chaö
 *
	gù_fw_chaös
;

272 
	#IP_FW_INPUT_CHAIN
 
ù_fw_chaös


	)

273 
	#IP_FW_FORWARD_CHAIN
 (
ù_fw_chaös
->
√xt
)

	)

274 
	#IP_FW_OUTPUT_CHAIN
 (
ù_fw_chaös
->
√xt
->√xt)

	)

277 
ölöe
 
	$p‹t_m©ch
(
__u16
 
mö
, __u16 
max
, __u16 
p‹t
,

278 
‰ag
, 
övît
)

280 i‡(
‰ag
)

281  (
mö
 =0 && 
max
 == 0xFFFF);

282  (
p‹t
 >
mö
 &&Ö‹à<
max
Ë^ 
övît
;

283 
	}
}

286 
	$ù_ruÀ_m©ch
(
ù_fwkî√l
 *
f
,

287 c⁄° *
i‚ame
,

288 
sk_buff
 **
pskb
,

289 
t˝syn
,

290 
__u16
 
§c_p‹t
, __u16 
d°_p‹t
,

291 
is‰ag
)

293 
ùhdr
 *
ù
 = (*
pskb
)->
nh
.
ùh
;

295 
	#FWINV
(
boﬁ
,
övÊg
Ë((boﬁË^ !!(
f
->
ùfw
.
fw_övÊg
 & invÊg))

	)

302 i‡(
	`FWINV
((
ù
->
ßddr
&
f
->
ùfw
.
fw_smsk
.
s_addr
Ë!f->ùfw.
fw_§c
.s_addr,

303 
IP_FW_INV_SRCIP
)

304 || 
	`FWINV
((
ù
->
daddr
&
f
->
ùfw
.
fw_dmsk
.
s_addr
)!=f->ùfw.
fw_d°
.s_addr,

305 
IP_FW_INV_DSTIP
)) {

306 
	`d¥ötf
("Source or dest mismatch.\n");

308 
	`d¥ötf
("SRC: %u. Mask: %u. T¨gë: %u.%s\n", 
ù
->
ßddr
,

309 
f
->
ùfw
.
fw_smsk
.
s_addr
, f->ùfw.
fw_§c
.s_addr,

310 
f
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_SRCIP
 ? " (INV)" : "");

311 
	`d¥ötf
("DST: %u. Mask: %u. T¨gë: %u.%s\n", 
ù
->
daddr
,

312 
f
->
ùfw
.
fw_dmsk
.
s_addr
, f->ùfw.
fw_d°
.s_addr,

313 
f
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_DSTIP
 ? " (INV)" : "");

320 i‡(
f
->
ùfw
.
fw_Êg
 & 
IP_FW_F_WILDIF
) {

321 i‡(
	`FWINV
(
	`°∫cmp
(
i‚ame
, 
f
->
ùfw
.
fw_vü«me
,

322 
	`°æí
(
f
->
ùfw
.
fw_vü«me
)) != 0,

323 
IP_FW_INV_VIA
)) {

324 
	`d¥ötf
("Wildcard interface mismatch.%s\n",

325 
f
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_VIA
 ? " (INV)" : "");

329 i‡(
	`FWINV
(
	`°rcmp
(
i‚ame
, 
f
->
ùfw
.
fw_vü«me
) != 0,

330 
IP_FW_INV_VIA
)) {

331 
	`d¥ötf
("InterfaceÇame doesÇot match.%s\n",

332 
f
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_VIA


343 i‡(
	`FWINV
((
f
->
ùfw
.
fw_Êg
&
IP_FW_F_FRAG
Ë&& !
is‰ag
, 
IP_FW_INV_FRAG
)) {

344 
	`d¥ötf
("FragmentÑule butÇot fragment.%s\n",

345 
f
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_FRAG
 ? " (INV)" : "");

350 i‡(
	`FWINV
((
f
->
ùfw
.
fw_Êg
&
IP_FW_F_TCPSYN
Ë&& !
t˝syn
, 
IP_FW_INV_SYN
)

351 || (
is‰ag
 && (
f
->
ùfw
.
fw_Êg
&
IP_FW_F_TCPSYN
))) {

352 
	`d¥ötf
("RuleÑequires SYNándÖacket hasÇo SYN.%s\n",

353 
f
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_SYN
 ? " (INV)" : "");

357 i‡(
f
->
ùfw
.
fw_¥Ÿo
) {

363 i‡(
	`FWINV
(
ù
->
¥Ÿocﬁ
!=
f
->
ùfw
.
fw_¥Ÿo
, 
IP_FW_INV_PROTO
)) {

364 
	`d¥ötf
("PacketÖrotocol %hi doesÇot match %hi.%s\n",

365 
ù
->
¥Ÿocﬁ
, 
f
->
ùfw
.
fw_¥Ÿo
,

366 
f
->
ùfw
.
fw_övÊg
&
IP_FW_INV_PROTO
 ? " (INV)":"");

371 i‡(!
	`p‹t_m©ch
(
f
->
ùfw
.
fw_•ts
[0],

372 
f
->
ùfw
.
fw_•ts
[1],

373 
§c_p‹t
, 
is‰ag
,

374 !!(
f
->
ùfw
.
fw_övÊg
&
IP_FW_INV_SRCPT
))

375 || !
	`p‹t_m©ch
(
f
->
ùfw
.
fw_d±s
[0],

376 
f
->
ùfw
.
fw_d±s
[1],

377 
d°_p‹t
, 
is‰ag
,

378 !!(
f
->
ùfw
.
fw_övÊg


379 &
IP_FW_INV_DSTPT
))) {

380 
	`d¥ötf
("Port match failed.\n");

385 
	`d¥ötf
("Match succeeded.\n");

387 
	}
}

389 c⁄° *
	$bønch«me
(
ù_chaö
 *
bønch
,
sim∂ebønch
)

391 i‡(
bønch
)

392  
bønch
->
œbñ
;

393 
sim∂ebønch
)

395 
FW_BLOCK
:  
IP_FW_LABEL_BLOCK
;

396 
FW_ACCEPT
:  
IP_FW_LABEL_ACCEPT
;

397 
FW_REJECT
:  
IP_FW_LABEL_REJECT
;

398 
FW_REDIRECT
:  
IP_FW_LABEL_REDIRECT
;

399 
FW_MASQUERADE
:  
IP_FW_LABEL_MASQUERADE
;

400 
FW_SKIP
:  "-";

401 
FW_SKIP
+1:  
IP_FW_LABEL_RETURN
;

405 
	}
}

411 
	$dump_∑ckë
(
sk_buff
 **
pskb
,

412 c⁄° *
i‚ame
,

413 
ù_fwkî√l
 *
f
,

414 c⁄° 
ù_chaöœbñ
 
chaöœbñ
,

415 
__u16
 
§c_p‹t
,

416 
__u16
 
d°_p‹t
,

417 
cou¡
,

418 
syn
)

420 
__u32
 *
›t
 = (__u32 *Ë((*
pskb
)->
nh
.
ùh
 + 1);

421 
›ti
;

423 i‡(
f
) {

424 
	`¥ötk
(
KERN_INFO
 "PackëÜog: %†",
chaöœbñ
);

425 
	`¥ötk
("%†",
	`bønch«me
(
f
->
bønch
,f->
sim∂ebønch
));

426 i‡(
f
->
sim∂ebønch
==
FW_REDIRECT
)

427 
	`¥ötk
("%d ",
f
->
ùfw
.
fw_ªdú±
);

430 
	`¥ötk
("%s PROTO=%d %u.%u.%u.%u:%hu %u.%u.%u.%u:%hu"

432 
i‚ame
, (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
,

433 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
),

434 
§c_p‹t
,

435 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
),

436 
d°_p‹t
,

437 
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
tŸ_Àn
),

438 (*
pskb
)->
nh
.
ùh
->
tos
,

439 
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
id
),

440 
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
‰ag_off
),

441 (*
pskb
)->
nh
.
ùh
->
âl
);

443 
›ti
 = 0; o±ò< ((*
pskb
)->
nh
.
ùh
->
ihl
 - (
ùhdr
) / 4); opti++)

444 
	`¥ötk
(" O=0x%8.8X", *
›t
++);

445 
	`¥ötk
(" %s(#%d)\n", 
syn
 ? "SYN " : "", 
cou¡
);

446 
	}
}

449 
	$check_œbñ
(
ù_chaöœbñ
 
œbñ
)

451 
i
;

453 
i
 = 0; i < 
IP_FW_MAX_LABEL_LENGTH
 + 1; i++)

454 i‡(
œbñ
[
i
] == '\0')  1;

457 
	}
}

461 
ù_chaö
 *
	$föd_œbñ
(
ù_chaöœbñ
 
œbñ
)

463 
ù_chaö
 *
tmp
;

464 
	`FWC_HAVE_LOCK
(
fwc_æocks
 | 
fwc_wlocks
);

465 
tmp
 = 
ù_fw_chaös
;Åmp;Åm∞tmp->
√xt
)

466 i‡(
	`°rcmp
(
tmp
->
œbñ
,label) == 0)

468  
tmp
;

469 
	}
}

473 
	$föd_•ecül
(
ù_chaöœbñ
 
œbñ
, *
™swî
)

475 i‡(
œbñ
[0] == '\0') {

476 *
™swî
 = 
FW_SKIP
;

478 } i‡(
	`°rcmp
(
œbñ
,
IP_FW_LABEL_ACCEPT
) == 0) {

479 *
™swî
 = 
FW_ACCEPT
;

481 } i‡(
	`°rcmp
(
œbñ
,
IP_FW_LABEL_BLOCK
) == 0) {

482 *
™swî
 = 
FW_BLOCK
;

484 } i‡(
	`°rcmp
(
œbñ
,
IP_FW_LABEL_REJECT
) == 0) {

485 *
™swî
 = 
FW_REJECT
;

487 } i‡(
	`°rcmp
(
œbñ
,
IP_FW_LABEL_REDIRECT
) == 0) {

488 *
™swî
 = 
FW_REDIRECT
;

490 } i‡(
	`°rcmp
(
œbñ
,
IP_FW_LABEL_MASQUERADE
) == 0) {

491 *
™swî
 = 
FW_MASQUERADE
;

493 } i‡(
	`°rcmp
(
œbñ
, 
IP_FW_LABEL_RETURN
) == 0) {

494 *
™swî
 = 
FW_SKIP
+1;

499 
	}
}

504 
	$˛ónup
(
ù_chaö
 *
chaö
,

505 c⁄° 
vîbo£
,

506 
¶Ÿ
)

508 
ù_chaö
 *
tmpchaö
 = 
chaö
->
ªít
[
¶Ÿ
].
¥evchaö
;

509 i‡(
vîbo£
)

510 
	`¥ötk
(
KERN_ERR
 "Chain backtrace: ");

511 
tmpchaö
) {

512 i‡(
vîbo£
)

513 
	`¥ötk
("%s<-",
chaö
->
œbñ
);

514 
chaö
->
ªít
[
¶Ÿ
].
¥evchaö
 = 
NULL
;

515 
chaö
 = 
tmpchaö
;

516 
tmpchaö
 = 
chaö
->
ªít
[
¶Ÿ
].
¥evchaö
;

518 i‡(
vîbo£
)

519 
	`¥ötk
("%s\n",
chaö
->
œbñ
);

520 
	}
}

522 
ölöe
 

523 
	$ù_fw_dom©ch
(
ù_fwkî√l
 *
f
,

524 c⁄° *
rif
,

525 c⁄° 
ù_chaöœbñ
 
œbñ
,

526 
sk_buff
 **
pskb
,

527 
¶Ÿ
,

528 
__u16
 
§c_p‹t
, __u16 
d°_p‹t
,

529 
cou¡
,

530 
t˝syn
,

531 *
tos
)

533 
f
->
cou¡îs
[
¶Ÿ
].
b˙t
+=
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
tŸ_Àn
);

534 
f
->
cou¡îs
[
¶Ÿ
].
p˙t
++;

535 i‡(
f
->
ùfw
.
fw_Êg
 & 
IP_FW_F_PRN
) {

536 
	`dump_∑ckë
(
pskb
,
rif
,
f
,
œbñ
,
§c_p‹t
,
d°_p‹t
,
cou¡
,
t˝syn
);

539 *
tos
 = (*to†& 
f
->
ùfw
.
fw_toßnd
Ë^ f->ùfw.
fw_tosx‹
;

544 i‡(
f
->
ùfw
.
fw_Êg
 & 
IP_FW_F_MARKABS
) {

545 (*
pskb
)->
nfm¨k
 = 
f
->
ùfw
.
fw_m¨k
;

547 (*
pskb
)->
nfm¨k
 +
f
->
ùfw
.
fw_m¨k
;

549 i‡(
f
->
ùfw
.
fw_Êg
 & 
IP_FW_F_NETLINK
) {

550 #i‡
	`deföed
(
CONFIG_NETLINK_DEV
Ë|| deföed(
CONFIG_NETLINK_DEV_MODULE
)

551 
size_t
 
Àn
 = 
	`mö_t
(, 
f
->
ùfw
.
fw_ouçutsize
, 
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
tŸ_Àn
))

552 + (
__u32
Ë+ ((*
pskb
)->
nfm¨k
Ë+ 
IFNAMSIZ
;

553 
sk_buff
 *
outskb
=
	`Æloc_skb
(
Àn
, 
GFP_ATOMIC
);

555 
	`du¥ötf
("SendingÖacket out NETLINK (length = %u).\n",

556 ()
Àn
);

557 i‡(
outskb
) {

559 
	`skb_put
(
outskb
, 
Àn
);

560 *((
__u32
 *)
outskb
->
d©a
Ë(__u32)
Àn
;

561 *((
__u32
 *)(
outskb
->
d©a
+(__u32))) =

562 (*
pskb
)->
nfm¨k
;

563 
	`°r˝y
(
outskb
->
d©a
+(
__u32
)*2, 
rif
);

564 
	`skb_c›y_bôs
(*
pskb
,

565 ((*)(*
pskb
)->
nh
.
ùh
 - (*)(*pskb)->
d©a
),

566 
outskb
->
d©a
+(
__u32
)*2+
IFNAMSIZ
,

567 
Àn
-((
__u32
)*2+
IFNAMSIZ
));

568 
	`√éök_brﬂdˇ°
(
ùfwsk
, 
outskb
, 0, ~0, 
GFP_ATOMIC
);

572 i‡(
	`√t_øãlimô
())

573 
	`¥ötk
(
KERN_WARNING
 "ip_fw:Öacket drop dueÅo "

576 #i‡
	`deföed
(
CONFIG_NETLINK_DEV
Ë|| deföed(
CONFIG_NETLINK_DEV_MODULE
)

581 
	}
}

590 
	$ù_fw_check
(c⁄° *
rif
,

591 
__u16
 *
ªdúp‹t
,

592 
ù_chaö
 *
chaö
,

593 
sk_buff
 **
pskb
,

594 
¶Ÿ
,

595 
ã°ög
)

597 
__u32
 
§c
, 
d°
;

598 
__u16
 
§c_p‹t
 = 0xFFFF, 
d°_p‹t
 = 0xFFFF;

599 
t˝syn
=0;

600 
__u16
 
off£t
;

601 
tos
;

602 
ù_fwkî√l
 *
f
;

603 
ªt
 = 
FW_SKIP
+2;

604 
cou¡
;

613 
off£t
 = 
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
‰ag_off
Ë& 
IP_OFFSET
;

621 i‡(
off£t
 =1 && (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 =
IPPROTO_TCP
) {

622 i‡(!
ã°ög
 && 
	`√t_øãlimô
()) {

623 
	`¥ötk
("Suspect TCP fragment.\n");

624 
	`dump_∑ckë
(
pskb
,
rif
,
NULL
,NULL,0,0,0,0);

626  
FW_BLOCK
;

634 i‡(
off£t
 == 0) {

635 
size_ªq
;

636 (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
) {

637 
IPPROTO_TCP
:

639 
size_ªq
 = 16;

642 
IPPROTO_UDP
:

643 
IPPROTO_ICMP
:

644 
size_ªq
 = 8;

648 
size_ªq
 = 0;

655 i‡(
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
tŸ_Àn
) <

656 ((*
pskb
)->
nh
.
ùh
->
ihl
<<2)+
size_ªq
) {

657 i‡(!
ã°ög
 && 
	`√t_øãlimô
()) {

658 
	`¥ötk
("Suspect short first fragment.\n");

659 
	`dump_∑ckë
(
pskb
,
rif
,
NULL
,NULL,0,0,0,0);

661  
FW_BLOCK
;

665 
§c
 = (*
pskb
)->
nh
.
ùh
->
ßddr
;

666 
d°
 = (*
pskb
)->
nh
.
ùh
->
daddr
;

667 
tos
 = (*
pskb
)->
nh
.
ùh
->tos;

677 
	`d¥ötf
("Packet ");

678 (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
) {

679 
IPPROTO_TCP
:

680 
	`d¥ötf
("TCP ");

681 i‡(!
off£t
) {

682 
t˝hdr
 
t˝h
;

684 i‡(
	`skb_c›y_bôs
(*
pskb
,

685 (*
pskb
)->
nh
.
ùh
->
ihl
 * 4,

686 &
t˝h
, (tcph)))

687  
FW_BLOCK
;

689 
§c_p‹t
 = 
	`¡ohs
(
t˝h
.
sour˚
);

690 
d°_p‹t
 = 
	`¡ohs
(
t˝h
.
de°
);

696 i‡(
t˝h
.
syn
 && !—˝h.
ack
 ||Å˝h.
r°
))

697 
t˝syn
 = 1;

700 
IPPROTO_UDP
:

701 
	`d¥ötf
("UDP ");

702 i‡(!
off£t
) {

703 
udphdr
 
udph
;

705 i‡(
	`skb_c›y_bôs
(*
pskb
,

706 (*
pskb
)->
nh
.
ùh
->
ihl
 * 4,

707 &
udph
, (udph)))

708  
FW_BLOCK
;

710 
§c_p‹t
 = 
	`¡ohs
(
udph
.
sour˚
);

711 
d°_p‹t
 = 
	`¡ohs
(
udph
.
de°
);

714 
IPPROTO_ICMP
:

715 i‡(!
off£t
) {

716 
icmphdr
 
icmph
;

718 i‡(
	`skb_c›y_bôs
(*
pskb
,

719 (*
pskb
)->
nh
.
ùh
->
ihl
 * 4,

720 &
icmph
, (icmph)))

721  
FW_BLOCK
;

723 
§c_p‹t
 = (
__u16
Ë
icmph
.
ty≥
;

724 
d°_p‹t
 = (
__u16
Ë
icmph
.
code
;

726 
	`d¥ötf
("ICMP ");

729 
	`d¥ötf
("p=%d ", (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
);

732 #ifde‡
DEBUG_IP_FIREWALL


733 
	`¥öt_ù
((*
pskb
)->
nh
.
ùh
->
ßddr
);

735 i‡(
off£t
)

736 
	`d¥ötf
(":‰agmíà(%iË", (()
off£t
)<<2);

737 i‡((*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 =
IPPROTO_TCP
 ||

738 (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 =
IPPROTO_UDP
 ||

739 (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 =
IPPROTO_ICMP
)

740 
	`d¥ötf
(":%hu:%hu", 
§c_p‹t
, 
d°_p‹t
);

741 
	`d¥ötf
("\n");

744 i‡(!
ã°ög
Ë
	`FWC_READ_LOCK
(&
ù_fw_lock
);

745 
	`FWC_HAVE_LOCK
(
fwc_æocks
);

747 
f
 = 
chaö
->chain;

749 
cou¡
 = 0;

750 ; 
f
; f = f->
√xt
) {

751 
cou¡
++;

752 i‡(
	`ù_ruÀ_m©ch
(
f
, 
rif
, 
pskb
,

753 
t˝syn
, 
§c_p‹t
, 
d°_p‹t
,

754 
off£t
)) {

755 i‡(!
ã°ög


756 && !
	`ù_fw_dom©ch
(
f
, 
rif
, 
chaö
->
œbñ
,

757 
pskb
, 
¶Ÿ
,

758 
§c_p‹t
, 
d°_p‹t
,

759 
cou¡
, 
t˝syn
, &
tos
)) {

760 
ªt
 = 
FW_BLOCK
;

761 
	`˛ónup
(
chaö
, 0, 
¶Ÿ
);

762 
out
;

767 i‡(
f
) {

768 i‡(
f
->
bønch
) {

772 i‡(
f
->
bønch
->
ªít
[
¶Ÿ
].
¥evchaö
) {

773 i‡(!
ã°ög
) {

774 
	`¥ötk
(
KERN_ERR


778 
f
->
bønch
->
œbñ
);

779 
	`˛ónup
(
chaö
, 1, 
¶Ÿ
);

780 
ªt
 = 
FW_BLOCK
;

782 
	`˛ónup
(
chaö
, 0, 
¶Ÿ
);

783 
ªt
 = 
FW_SKIP
+1;

787 
f
->
bønch
->
ªít
[
¶Ÿ
].
¥evchaö


788 
chaö
;

789 
f
->
bønch
->
ªít
[
¶Ÿ
].
¥evruÀ


790 
f
->
√xt
;

791 
chaö
 = 
f
->
bønch
;

792 
f
 = 
chaö
->chain;

795 i‡(
f
->
sim∂ebønch
 =
FW_SKIP
)

796 
f
 = f->
√xt
;

797 i‡(
f
->
sim∂ebønch
 =
FW_SKIP
+1) {

799 
ÁŒ_off_chaö
;

801 
	`˛ónup
(
chaö
, 0, 
¶Ÿ
);

802 
ªt
 = 
f
->
sim∂ebønch
;

806 
ÁŒ_off_chaö
:

807 i‡(
chaö
->
ªít
[
¶Ÿ
].
¥evchaö
) {

808 
ù_chaö
 *
tmp
 = 
chaö
;

809 
f
 = 
chaö
->
ªít
[
¶Ÿ
].
¥evruÀ
;

810 
chaö
 = chaö->
ªít
[
¶Ÿ
].
¥evchaö
;

811 
tmp
->
ªít
[
¶Ÿ
].
¥evchaö
 = 
NULL
;

814 
ªt
 = 
chaö
->
pﬁicy
;

815 i‡(!
ã°ög
) {

816 
chaö
->
ªít
[
¶Ÿ
].
cou¡îs
.
p˙t
++;

817 
chaö
->
ªít
[
¶Ÿ
].
cou¡îs
.
b˙t


818 +
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
tŸ_Àn
);

822 } 
ªt
 =
FW_SKIP
+2);

824 
out
:

825 i‡(!
ã°ög
Ë
	`FWC_READ_UNLOCK
(&
ù_fw_lock
);

828 i‡((*
pskb
)->
nh
.
ùh
->
tos
 !=Åos

829 && 
ªt
 !
FW_REJECT
 &&Ñë !
FW_BLOCK


830 && !
ã°ög
) {

831 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, 
	`off£tof
(
ùhdr
, 
tos
)+1))

832 
ªt
 = 
FW_BLOCK
;

834 (*
pskb
)->
nh
.
ùh
->
tos
 =Åos;

835 
	`ù_£nd_check
((*
pskb
)->
nh
.
ùh
);

839 i‡(
ªt
 =
FW_REDIRECT
 && 
ªdúp‹t
) {

840 i‡((*
ªdúp‹t
 = 
	`ht⁄s
(
f
->
ùfw
.
fw_ªdú±
)) == 0) {

845 *
ªdúp‹t
 = 
	`ht⁄s
(
d°_p‹t
);

849 #ifde‡
DEBUG_ALLOW_ALL


850  (
ã°ög
 ? 
ªt
 : 
FW_ACCEPT
);

852  
ªt
;

854 
	}
}

860 
	$zîo_fw_chaö
(
ù_chaö
 *
chaö±r
)

862 
ù_fwkî√l
 *
i
;

864 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

865 
i
 = 
chaö±r
->
chaö
; i; i = i->
√xt
)

866 
	`mem£t
(
i
->
cou¡îs
, 0, (
ù_cou¡îs
)*
NUM_SLOTS
);

868 
	}
}

870 
	$˛ór_fw_chaö
(
ù_chaö
 *
chaö±r
)

872 
ù_fwkî√l
 *
i

chaö±r
->
chaö
;

874 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

875 
chaö±r
->
chaö
=
NULL
;

877 
i
) {

878 
ù_fwkî√l
 *
tmp
 = 
i
->
√xt
;

879 i‡(
i
->
bønch
)

880 
i
->
bønch
->
ªfcou¡
--;

881 
	`k‰ì
(
i
);

882 
i
 = 
tmp
;

885 
	`moduÀ_put
(
THIS_MODULE
);

888 
	}
}

890 
	$ª∂a˚_ö_chaö
(
ù_chaö
 *
chaö±r
,

891 
ù_fwkî√l
 *
‰wl
,

892 
__u32
 
posôi⁄
)

894 
ù_fwkî√l
 *
f
 = 
chaö±r
->
chaö
;

896 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

898 --
posôi⁄
 && 
f
 !
NULL
Ë‡f->
√xt
;

899 i‡(
f
 =
NULL
)

900  
EINVAL
;

902 i‡(
f
->
bønch
Ëf->bønch->
ªfcou¡
--;

903 i‡(
‰wl
->
bønch
Ë‰wl->bønch->
ªfcou¡
++;

905 
‰wl
->
√xt
 = 
f
->next;

906 
	`mem˝y
(
f
,
‰wl
,(
ù_fwkî√l
));

907 
	`k‰ì
(
‰wl
);

909 
	}
}

911 
	$≠≥nd_to_chaö
(
ù_chaö
 *
chaö±r
, 
ù_fwkî√l
 *
ruÀ
)

913 
ù_fwkî√l
 *
i
;

915 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

918 i‡(!
	`åy_moduÀ_gë
(
THIS_MODULE
))

919  
ENOPROTOOPT
;

922 i‡(
chaö±r
->
chaö
 =
NULL
) {

926 
chaö±r
->
chaö
 = 
ruÀ
;

927 i‡(
ruÀ
->
bønch
ËruÀ->bønch->
ªfcou¡
++;

928 
≠≥nd_suc˚ssful
;

932 
i
 = 
chaö±r
->
chaö
; i->
√xt
; i = i->next);

933 
i
->
√xt
 = 
ruÀ
;

934 i‡(
ruÀ
->
bønch
ËruÀ->bønch->
ªfcou¡
++;

936 
≠≥nd_suc˚ssful
:

938 
	}
}

943 
	$ö£π_ö_chaö
(
ù_chaö
 *
chaö±r
,

944 
ù_fwkî√l
 *
‰wl
,

945 
__u32
 
posôi⁄
)

947 
ù_fwkî√l
 *
f
 = 
chaö±r
->
chaö
;

949 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

952 i‡(!
	`åy_moduÀ_gë
(
THIS_MODULE
))

953  
ENOPROTOOPT
;

956 i‡(
posôi⁄
 == 1) {

957 
‰wl
->
√xt
 = 
chaö±r
->
chaö
;

958 i‡(
‰wl
->
bønch
Ë‰wl->bønch->
ªfcou¡
++;

959 
chaö±r
->
chaö
 = 
‰wl
;

960 
ö£π_suc˚ssful
;

962 
posôi⁄
--;

963 --
posôi⁄
 && 
f
 !
NULL
Ë‡f->
√xt
;

964 i‡(
f
 =
NULL
)

965  
EINVAL
;

966 i‡(
‰wl
->
bønch
Ë‰wl->bønch->
ªfcou¡
++;

967 
‰wl
->
√xt
 = 
f
->next;

969 
f
->
√xt
 = 
‰wl
;

971 
ö£π_suc˚ssful
:

973 
	}
}

978 
	$dñ_num_‰om_chaö
(
ù_chaö
 *
chaö±r
, 
__u32
 
ruÀnum
)

980 
ù_fwkî√l
 *
i
=
chaö±r
->
chaö
,*
tmp
;

982 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

984 i‡(!
chaö±r
->
chaö
)

985  
ENOENT
;

988 i‡(
ruÀnum
 == 1) {

990 
tmp
 = 
chaö±r
->
chaö
;

991 i‡(
chaö±r
->
chaö
->
bønch
Ëchaö±r->chaö->bønch->
ªfcou¡
--;

992 
chaö±r
->
chaö
 = chaö±r->chaö->
√xt
;

993 
	`k‰ì
(
tmp
);

995 
ruÀnum
--;

996 --
ruÀnum
 && 
i
->
√xt
 ) i = i->next;

997 i‡(!
i
->
√xt
)

998  
ENOENT
;

999 
tmp
 = 
i
->
√xt
;

1000 i‡(
i
->
√xt
->
bønch
)

1001 
i
->
√xt
->
bønch
->
ªfcou¡
--;

1002 
i
->
√xt
 = i->next->next;

1003 
	`k‰ì
(
tmp
);

1008 
	`moduÀ_put
(
THIS_MODULE
);

1010 
	}
}

1015 
	$dñ_ruÀ_‰om_chaö
(
ù_chaö
 *
chaö±r
,

1016 
ù_fwkî√l
 *
‰wl
)

1018 
ù_fwkî√l
 *
…mp
,*
·mp
 = 
chaö±r
->
chaö
 ;

1019 
was_found
;

1021 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

1026 
…mp
=
NULL
, 
was_found
=0;

1027 !
was_found
 && 
·mp
 !
NULL
;

1028 
…mp
 = 
·mp
,·m∞·mp->
√xt
) {

1029 i‡(
·mp
->
ùfw
.
fw_§c
.
s_addr
!=
‰wl
->ipfw.fw_src.s_addr

1030 || 
·mp
->
ùfw
.
fw_d°
.
s_addr
!=
‰wl
->ipfw.fw_dst.s_addr

1031 || 
·mp
->
ùfw
.
fw_smsk
.
s_addr
!=
‰wl
->ipfw.fw_smsk.s_addr

1032 || 
·mp
->
ùfw
.
fw_dmsk
.
s_addr
!=
‰wl
->ipfw.fw_dmsk.s_addr

1034 || 
·mp
->
ùfw
.
fw_Êg
!=
‰wl
->ipfw.fw_flg

1036 || ((
·mp
->
ùfw
.
fw_Êg
 & ~
IP_FW_F_MARKABS
)

1037 !(
‰wl
->
ùfw
.
fw_Êg
 & ~
IP_FW_F_MARKABS
))

1039 || 
·mp
->
ùfw
.
fw_övÊg
!=
‰wl
->ipfw.fw_invflg

1040 || 
·mp
->
ùfw
.
fw_¥Ÿo
!=
‰wl
->ipfw.fw_proto

1042 || 
·mp
->
ùfw
.
fw_m¨k
!=
‰wl
->ipfw.fw_mark

1044 || 
·mp
->
ùfw
.
fw_ªdú±
!=
‰wl
->ipfw.fw_redirpt

1045 || 
·mp
->
ùfw
.
fw_•ts
[0]!=
‰wl
->ipfw.fw_spts[0]

1046 || 
·mp
->
ùfw
.
fw_•ts
[1]!=
‰wl
->ipfw.fw_spts[1]

1047 || 
·mp
->
ùfw
.
fw_d±s
[0]!=
‰wl
->ipfw.fw_dpts[0]

1048 || 
·mp
->
ùfw
.
fw_d±s
[1]!=
‰wl
->ipfw.fw_dpts[1]

1049 || 
·mp
->
ùfw
.
fw_ouçutsize
!=
‰wl
->ipfw.fw_outputsize) {

1050 
	`du¥ötf
("del_rule_from_chain: mismatch:"

1056 
·mp
->
ùfw
.
fw_§c
.
s_addr
,

1057 
‰wl
->
ùfw
.
fw_§c
.
s_addr
,

1058 
·mp
->
ùfw
.
fw_d°
.
s_addr
,

1059 
‰wl
->
ùfw
.
fw_d°
.
s_addr
,

1060 
·mp
->
ùfw
.
fw_smsk
.
s_addr
,

1061 
‰wl
->
ùfw
.
fw_smsk
.
s_addr
,

1062 
·mp
->
ùfw
.
fw_dmsk
.
s_addr
,

1063 
‰wl
->
ùfw
.
fw_dmsk
.
s_addr
,

1064 
·mp
->
ùfw
.
fw_Êg
,

1065 
‰wl
->
ùfw
.
fw_Êg
,

1066 
·mp
->
ùfw
.
fw_övÊg
,

1067 
‰wl
->
ùfw
.
fw_övÊg
,

1068 
·mp
->
ùfw
.
fw_¥Ÿo
,

1069 
‰wl
->
ùfw
.
fw_¥Ÿo
,

1070 
·mp
->
ùfw
.
fw_m¨k
,

1071 
‰wl
->
ùfw
.
fw_m¨k
,

1072 
·mp
->
ùfw
.
fw_•ts
[0],

1073 
‰wl
->
ùfw
.
fw_•ts
[0],

1074 
·mp
->
ùfw
.
fw_•ts
[1],

1075 
‰wl
->
ùfw
.
fw_•ts
[1],

1076 
·mp
->
ùfw
.
fw_d±s
[0],

1077 
‰wl
->
ùfw
.
fw_d±s
[0],

1078 
·mp
->
ùfw
.
fw_d±s
[1],

1079 
‰wl
->
ùfw
.
fw_d±s
[1],

1080 
·mp
->
ùfw
.
fw_ouçutsize
,

1081 
‰wl
->
ùfw
.
fw_ouçutsize
);

1085 i‡(
	`°∫cmp
(
·mp
->
ùfw
.
fw_vü«me
,

1086 
‰wl
->
ùfw
.
fw_vü«me
,

1087 
IFNAMSIZ
)) {

1088 
	`du¥ötf
("del_rule_from_chain: if mismatch: %s/%s\n",

1089 
·mp
->
ùfw
.
fw_vü«me
,

1090 
‰wl
->
ùfw
.
fw_vü«me
);

1093 i‡(
·mp
->
bønch
 !
‰wl
->branch) {

1094 
	`du¥ötf
("del_rule_from_chain: branch mismatch: "

1096 
·mp
->
bønch
?·mp->bønch->
œbñ
:"(null)",

1097 
‰wl
->
bønch
?‰wl->bønch->
œbñ
:"(null)");

1100 i‡(
·mp
->
bønch
 =
NULL


1101 && 
·mp
->
sim∂ebønch
 !
‰wl
->simplebranch) {

1102 
	`du¥ötf
("del_rule_from_chain: simplebranch mismatch: "

1104 
·mp
->
sim∂ebønch
, 
‰wl
->simplebranch);

1107 
was_found
 = 1;

1108 i‡(
·mp
->
bønch
)

1109 
·mp
->
bønch
->
ªfcou¡
--;

1110 i‡(
…mp
)

1111 
…mp
->
√xt
 = 
·mp
->next;

1113 
chaö±r
->
chaö
 = 
·mp
->
√xt
;

1114 
	`k‰ì
(
·mp
);

1117 
	`moduÀ_put
(
THIS_MODULE
);

1121 i‡(
was_found
)

1124 
	`du¥ötf
("del_rule_from_chain:Ço matchingÑule found\n");

1125  
EINVAL
;

1127 
	}
}

1133 
	$dñ_chaö
(
ù_chaöœbñ
 
œbñ
)

1135 
ù_chaö
 *
tmp
,*
tmp2
;

1137 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

1139 i‡(
	`°rcmp
(
œbñ
, 
ù_fw_chaös
->label) == 0)

1140  
EBUSY
;

1142 
tmp
 = 
ù_fw_chaös
;Åmp->
√xt
;Åmp =Åmp->next)

1143 if(
	`°rcmp
(
tmp
->
√xt
->
œbñ
,label) == 0)

1146 
tmp2
 = 
tmp
->
√xt
;

1147 i‡(!
tmp2
)

1148  
ENOENT
;

1150 i‡(
tmp2
->
ªfcou¡
)

1151  
EBUSY
;

1153 i‡(
tmp2
->
chaö
)

1154  
ENOTEMPTY
;

1156 
tmp
->
√xt
 = 
tmp2
->next;

1157 
	`k‰ì
(
tmp2
);

1161 
	`moduÀ_put
(
THIS_MODULE
);

1163 
	}
}

1168 
ù_chaö
 *
	$ù_öô_chaö
(
ù_chaöœbñ
 
«me
,

1169 
__u32
 
ªf
,

1170 
pﬁicy
)

1172 
i
;

1173 
ù_chaö
 *
œbñ


1174 
	`kmÆloc
(
SIZEOF_STRUCT_IP_CHAIN
, 
GFP_KERNEL
);

1175 i‡(
œbñ
 =
NULL
)

1176 
	`∑nic
("Can't kmalloc for firewall chains.\n");

1177 
	`°r˝y
(
œbñ
->œbñ,
«me
);

1178 
œbñ
->
√xt
 = 
NULL
;

1179 
œbñ
->
chaö
 = 
NULL
;

1180 
œbñ
->
ªfcou¡
 = 
ªf
;

1181 
œbñ
->
pﬁicy
 =Öolicy;

1182 
i
 = 0; i < 
NUM_SLOTS
; i++) {

1183 
œbñ
->
ªít
[
i
].
cou¡îs
.
p˙t
 =Üabñ->ªít[i].cou¡îs.
b˙t


1185 
œbñ
->
ªít
[
i
].
¥evchaö
 = 
NULL
;

1186 
œbñ
->
ªít
[
i
].
¥evruÀ
 = 
NULL
;

1189  
œbñ
;

1190 
	}
}

1194 
	$¸óã_chaö
(
ù_chaöœbñ
 
œbñ
)

1196 
ù_chaö
 *
tmp
;

1198 i‡(!
	`check_œbñ
(
œbñ
))

1199  
EINVAL
;

1201 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

1202 
tmp
 = 
ù_fw_chaös
;Åmp->
√xt
;Åmp =Åmp->next)

1203 i‡(
	`°rcmp
(
tmp
->
œbñ
,label) == 0)

1204  
EEXIST
;

1206 i‡(
	`°rcmp
(
tmp
->
œbñ
,label) == 0)

1207  
EEXIST
;

1210 i‡(!
	`åy_moduÀ_gë
(
THIS_MODULE
))

1211  
ENOPROTOOPT
;

1213 
tmp
->
√xt
 = 
	`ù_öô_chaö
(
œbñ
, 0, 
FW_SKIP
);

1219 
	}
}

1224 
	$ch™ge_pﬁicy
(
ù_chaö
 *
chaö±r
, 
pﬁicy
)

1226 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

1227 
chaö±r
->
pﬁicy
 =Öolicy;

1229 
	}
}

1233 
ù_fwkî√l
 *
	$c⁄vît_ùfw
(
ù_fwu£r
 *
fwu£r
, *
î∫o
)

1235 
ù_fwkî√l
 *
fwkîn
;

1237 i‡–(
fwu£r
->
ùfw
.
fw_Êg
 & ~
IP_FW_F_MASK
) != 0 ) {

1238 
	`du¥ötf
("convert_ipfw: undefined flag bits set (flags=%x)\n",

1239 
fwu£r
->
ùfw
.
fw_Êg
);

1240 *
î∫o
 = 
EINVAL
;

1241  
NULL
;

1244 #ifde‡
DEBUG_IP_FIREWALL_USER


1248 i‡((
fwu£r
->
ùfw
.
fw_Êg
 & 
IP_FW_F_TCPSYN
)

1249 && ((
fwu£r
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_PROTO
)

1250 || 
fwu£r
->
ùfw
.
fw_¥Ÿo
 !
IPPROTO_TCP
)) {

1251 
	`du¥ötf
("convert_ipfw: TCP SYN flag set butÖroto != TCP!\n");

1252 *
î∫o
 = 
EINVAL
;

1253  
NULL
;

1256 i‡(
	`°rcmp
(
fwu£r
->
œbñ
, 
IP_FW_LABEL_REDIRECT
) != 0

1257 && 
fwu£r
->
ùfw
.
fw_ªdú±
 != 0) {

1258 
	`du¥ötf
("convert_ipfw: TargetÇot REDIR butÑedirpt != 0!\n");

1259 *
î∫o
 = 
EINVAL
;

1260  
NULL
;

1263 i‡((!(
fwu£r
->
ùfw
.
fw_Êg
 & 
IP_FW_F_FRAG
)

1264 && (
fwu£r
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_FRAG
))

1265 || (!(
fwu£r
->
ùfw
.
fw_Êg
 & 
IP_FW_F_TCPSYN
)

1266 && (
fwu£r
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_SYN
))) {

1267 
	`du¥ötf
("convert_ipfw: Can't have INV flag if flag unset!\n");

1268 *
î∫o
 = 
EINVAL
;

1269  
NULL
;

1272 i‡(((
fwu£r
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_SRCPT
)

1273 && 
fwu£r
->
ùfw
.
fw_•ts
[0] == 0

1274 && 
fwu£r
->
ùfw
.
fw_•ts
[1] == 0xFFFF)

1275 || ((
fwu£r
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_DSTPT
)

1276 && 
fwu£r
->
ùfw
.
fw_d±s
[0] == 0

1277 && 
fwu£r
->
ùfw
.
fw_d±s
[1] == 0xFFFF)

1278 || ((
fwu£r
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_VIA
)

1279 && (
fwu£r
->
ùfw
.
fw_vü«me
)[0] == '\0')

1280 || ((
fwu£r
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_SRCIP
)

1281 && 
fwu£r
->
ùfw
.
fw_smsk
.
s_addr
 == 0)

1282 || ((
fwu£r
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_DSTIP
)

1283 && 
fwu£r
->
ùfw
.
fw_dmsk
.
s_addr
 == 0)) {

1284 
	`du¥ötf
("convert_ipfw: INV flag makesÑule unmatchable!\n");

1285 *
î∫o
 = 
EINVAL
;

1286  
NULL
;

1289 i‡((
fwu£r
->
ùfw
.
fw_Êg
 & 
IP_FW_F_FRAG
)

1290 && !(
fwu£r
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_FRAG
)

1291 && (
fwu£r
->
ùfw
.
fw_•ts
[0] != 0

1292 || 
fwu£r
->
ùfw
.
fw_•ts
[1] != 0xFFFF

1293 || 
fwu£r
->
ùfw
.
fw_d±s
[0] != 0

1294 || 
fwu£r
->
ùfw
.
fw_d±s
[1] != 0xFFFF

1295 || (
fwu£r
->
ùfw
.
fw_Êg
 & 
IP_FW_F_TCPSYN
))) {

1296 
	`du¥ötf
("convert_ipfw: Can'tÅestÖorts or SYN with frag!\n");

1297 *
î∫o
 = 
EINVAL
;

1298  
NULL
;

1302 i‡((
fwu£r
->
ùfw
.
fw_•ts
[0] != 0

1303 || 
fwu£r
->
ùfw
.
fw_•ts
[1] != 0xFFFF

1304 || 
fwu£r
->
ùfw
.
fw_d±s
[0] != 0

1305 || 
fwu£r
->
ùfw
.
fw_d±s
[1] != 0xFFFF)

1306 && ((
fwu£r
->
ùfw
.
fw_övÊg
 & 
IP_FW_INV_PROTO
)

1307 || (
fwu£r
->
ùfw
.
fw_¥Ÿo
 !
IPPROTO_TCP


1308 && 
fwu£r
->
ùfw
.
fw_¥Ÿo
 !
IPPROTO_UDP


1309 && 
fwu£r
->
ùfw
.
fw_¥Ÿo
 !
IPPROTO_ICMP
))) {

1310 
	`du¥ötf
("convert_ipfw: Can onlyÅestÖorts for TCP/UDP/ICMP!\n");

1311 *
î∫o
 = 
EINVAL
;

1312  
NULL
;

1315 
fwkîn
 = 
	`kmÆloc
(
SIZEOF_STRUCT_IP_FW_KERNEL
, 
GFP_ATOMIC
);

1316 i‡(!
fwkîn
) {

1317 
	`du¥ötf
("convert_ipfw: kmalloc failed!\n");

1318 *
î∫o
 = 
ENOMEM
;

1319  
NULL
;

1321 
	`mem˝y
(&
fwkîn
->
ùfw
,&
fwu£r
->ùfw,(
ù_fw
));

1323 i‡(!
	`föd_•ecül
(
fwu£r
->
œbñ
, &
fwkîn
->
sim∂ebønch
)) {

1324 
fwkîn
->
bønch
 = 
	`föd_œbñ
(
fwu£r
->
œbñ
);

1325 i‡(!
fwkîn
->
bønch
) {

1326 
	`du¥ötf
("convert_ipfw: chain doesn'tÉxist `%s'.\n",

1327 
fwu£r
->
œbñ
);

1328 
	`k‰ì
(
fwkîn
);

1329 *
î∫o
 = 
ENOENT
;

1330  
NULL
;

1331 } i‡(
fwkîn
->
bønch
 =
IP_FW_INPUT_CHAIN


1332 || 
fwkîn
->
bønch
 =
IP_FW_FORWARD_CHAIN


1333 || 
fwkîn
->
bønch
 =
IP_FW_OUTPUT_CHAIN
) {

1334 
	`du¥ötf
("convert_ipfw: Can't branchÅo builtin chain `%s'.\n",

1335 
fwu£r
->
œbñ
);

1336 
	`k‰ì
(
fwkîn
);

1337 *
î∫o
 = 
ENOENT
;

1338  
NULL
;

1341 
fwkîn
->
bønch
 = 
NULL
;

1342 
	`mem£t
(
fwkîn
->
cou¡îs
, 0, (
ù_cou¡îs
)*
NUM_SLOTS
);

1345 i‡((
fwkîn
->
ùfw
.
fw_vü«me
)[0] == '\0')

1346 
fwkîn
->
ùfw
.
fw_Êg
 |
IP_FW_F_WILDIF
;

1348 
fwkîn
->
√xt
 = 
NULL
;

1349  
fwkîn
;

1350 
	}
}

1352 
	$ù_fw_˘l
(
cmd
, *
m
, 
Àn
)

1354 
ªt
;

1355 
ù_chaö
 *
chaö
;

1356 
Êags
;

1358 
	`FWC_WRITE_LOCK_IRQ
(&
ù_fw_lock
, 
Êags
);

1360 
cmd
) {

1361 
IP_FW_FLUSH
:

1362 i‡(
Àn
 !(
ù_chaöœbñ
Ë|| !
	`check_œbñ
(
m
))

1363 
ªt
 = 
EINVAL
;

1364 i‡((
chaö
 = 
	`föd_œbñ
(
m
)Ë=
NULL
)

1365 
ªt
 = 
ENOENT
;

1366 
ªt
 = 
	`˛ór_fw_chaö
(
chaö
);

1369 
IP_FW_ZERO
:

1370 i‡(
Àn
 !(
ù_chaöœbñ
Ë|| !
	`check_œbñ
(
m
))

1371 
ªt
 = 
EINVAL
;

1372 i‡((
chaö
 = 
	`föd_œbñ
(
m
)Ë=
NULL
)

1373 
ªt
 = 
ENOENT
;

1374 
ªt
 = 
	`zîo_fw_chaö
(
chaö
);

1377 
IP_FW_CHECK
: {

1378 
ù_fwã°
 *
√w
 = 
m
;

1379 
ùhdr
 *
ù
;

1382 
	`FWC_WRITE_UNLOCK_IRQ
(&
ù_fw_lock
, 
Êags
);

1384 i‡(
Àn
 !(
ù_fwã°
Ë|| !
	`check_œbñ
(
m
))

1385  
EINVAL
;

1388 
	`FWC_READ_LOCK
(&
ù_fw_lock
);

1390 i‡((
chaö
 = 
	`föd_œbñ
(
√w
->
fwt_œbñ
)Ë=
NULL
)

1391 
ªt
 = 
ENOENT
;

1393 
sk_buff
 *
tmp_skb
;

1394 
hdæí
;

1396 
hdæí
 = (
ù_fwpkt
) -

1397 (
ö_addr
) -

1398 
IFNAMSIZ
;

1400 
ù
 = &(
√w
->
fwt_∑ckë
.
fwp_ùh
);

1405 i‡(
	`¡ohs
(
ù
->
tŸ_Àn
Ë> 
hdæí
)

1406 
ù
->
tŸ_Àn
 = 
	`ht⁄s
(
hdæí
);

1408 i‡(
ù
->
ihl
 !(
ùhdr
Ë/ (
u32
)) {

1409 
	`du¥ötf
("ip_fw_ctl: ip->ihl=%d, want %d\n",

1410 
ù
->
ihl
,

1411 (
ùhdr
Ë/ (
u32
));

1412 
ªt
 = 
EINVAL
;

1413 } i‡((
tmp_skb
 = 
	`Æloc_skb
(
hdæí
,

1414 
GFP_ATOMIC
)Ë=
NULL
) {

1415 
	`du¥ötf
("ip_fw_ctl:Åmp_skbálloc failure\n");

1416 
ªt
 = 
EFAULT
;

1418 
	`skb_ª£rve
(
tmp_skb
, 
hdæí
);

1419 
	`skb_push
(
tmp_skb
, 
hdæí
);

1420 
	`mem˝y
(
tmp_skb
->
d©a
, 
ù
, 
hdæí
);

1421 
tmp_skb
->
nh
.
øw
 =

1422 (*Ë
tmp_skb
->
d©a
;

1423 
ªt
 = 
	`ù_fw_check
(
√w
->
fwt_∑ckë
.
fwp_vü«me
,

1424 
NULL
, 
chaö
,

1425 &
tmp_skb
, 
	`SLOT_NUMBER
(), 1);

1426 
	`k‰ì_skb
(
tmp_skb
);

1427 
ªt
) {

1428 
FW_ACCEPT
:

1429 
ªt
 = 0; ;

1430 
FW_REDIRECT
:

1431 
ªt
 = 
ECONNABORTED
; ;

1432 
FW_MASQUERADE
:

1433 
ªt
 = 
ECONNRESET
; ;

1434 
FW_REJECT
:

1435 
ªt
 = 
ECONNREFUSED
; ;

1438 
FW_SKIP
+1:

1439 
ªt
 = 
ELOOP
; ;

1440 
FW_SKIP
:

1441 
ªt
 = 
ENFILE
; ;

1443 
ªt
 = 
ETIMEDOUT
; ;

1447 
	`FWC_READ_UNLOCK
(&
ù_fw_lock
);

1448  
ªt
;

1451 
IP_FW_MASQ_TIMEOUTS
: {

1452 
ªt
 = 
	`ù_fw_masq_timeouts
(
m
, 
Àn
);

1456 
IP_FW_REPLACE
: {

1457 
ù_fwkî√l
 *
ù_fwkîn
;

1458 
ù_fw√w
 *
√w
 = 
m
;

1460 i‡(
Àn
 !(
ù_fw√w
)

1461 || !
	`check_œbñ
(
√w
->
fwn_œbñ
))

1462 
ªt
 = 
EINVAL
;

1463 i‡((
chaö
 = 
	`föd_œbñ
(
√w
->
fwn_œbñ
)Ë=
NULL
)

1464 
ªt
 = 
ENOENT
;

1465 i‡((
ù_fwkîn
 = 
	`c⁄vît_ùfw
(&
√w
->
fwn_ruÀ
, &
ªt
))

1466 !
NULL
)

1467 
ªt
 = 
	`ª∂a˚_ö_chaö
(
chaö
, 
ù_fwkîn
,

1468 
√w
->
fwn_ruÀnum
);

1472 
IP_FW_APPEND
: {

1473 
ù_fwch™ge
 *
√w
 = 
m
;

1474 
ù_fwkî√l
 *
ù_fwkîn
;

1476 i‡(
Àn
 !(
ù_fwch™ge
)

1477 || !
	`check_œbñ
(
√w
->
fwc_œbñ
))

1478 
ªt
 = 
EINVAL
;

1479 i‡((
chaö
 = 
	`föd_œbñ
(
√w
->
fwc_œbñ
)Ë=
NULL
)

1480 
ªt
 = 
ENOENT
;

1481 i‡((
ù_fwkîn
 = 
	`c⁄vît_ùfw
(&
√w
->
fwc_ruÀ
, &
ªt
))

1482 !
NULL
)

1483 
ªt
 = 
	`≠≥nd_to_chaö
(
chaö
, 
ù_fwkîn
);

1487 
IP_FW_INSERT
: {

1488 
ù_fwkî√l
 *
ù_fwkîn
;

1489 
ù_fw√w
 *
√w
 = 
m
;

1491 i‡(
Àn
 !(
ù_fw√w
)

1492 || !
	`check_œbñ
(
√w
->
fwn_œbñ
))

1493 
ªt
 = 
EINVAL
;

1494 i‡((
chaö
 = 
	`föd_œbñ
(
√w
->
fwn_œbñ
)Ë=
NULL
)

1495 
ªt
 = 
ENOENT
;

1496 i‡((
ù_fwkîn
 = 
	`c⁄vît_ùfw
(&
√w
->
fwn_ruÀ
, &
ªt
))

1497 !
NULL
)

1498 
ªt
 = 
	`ö£π_ö_chaö
(
chaö
, 
ù_fwkîn
,

1499 
√w
->
fwn_ruÀnum
);

1503 
IP_FW_DELETE
: {

1504 
ù_fwch™ge
 *
√w
 = 
m
;

1505 
ù_fwkî√l
 *
ù_fwkîn
;

1507 i‡(
Àn
 !(
ù_fwch™ge
)

1508 || !
	`check_œbñ
(
√w
->
fwc_œbñ
))

1509 
ªt
 = 
EINVAL
;

1510 i‡((
chaö
 = 
	`föd_œbñ
(
√w
->
fwc_œbñ
)Ë=
NULL
)

1511 
ªt
 = 
ENOENT
;

1512 i‡((
ù_fwkîn
 = 
	`c⁄vît_ùfw
(&
√w
->
fwc_ruÀ
, &
ªt
))

1513 !
NULL
) {

1514 
ªt
 = 
	`dñ_ruÀ_‰om_chaö
(
chaö
, 
ù_fwkîn
);

1515 
	`k‰ì
(
ù_fwkîn
);

1520 
IP_FW_DELETE_NUM
: {

1521 
ù_fwdñnum
 *
√w
 = 
m
;

1523 i‡(
Àn
 !(
ù_fwdñnum
)

1524 || !
	`check_œbñ
(
√w
->
fwd_œbñ
))

1525 
ªt
 = 
EINVAL
;

1526 i‡((
chaö
 = 
	`föd_œbñ
(
√w
->
fwd_œbñ
)Ë=
NULL
)

1527 
ªt
 = 
ENOENT
;

1528 
ªt
 = 
	`dñ_num_‰om_chaö
(
chaö
, 
√w
->
fwd_ruÀnum
);

1532 
IP_FW_CREATECHAIN
: {

1533 i‡(
Àn
 !(
ù_chaöœbñ
)) {

1534 
	`du¥ötf
("¸óã_chaö: bad sizê%i\n", 
Àn
);

1535 
ªt
 = 
EINVAL
;

1537 
ªt
 = 
	`¸óã_chaö
(
m
);

1541 
IP_FW_DELETECHAIN
: {

1542 i‡(
Àn
 !(
ù_chaöœbñ
)) {

1543 
	`du¥ötf
("dñëe_chaö: bad sizê%i\n", 
Àn
);

1544 
ªt
 = 
EINVAL
;

1546 
ªt
 = 
	`dñ_chaö
(
m
);

1550 
IP_FW_POLICY
: {

1551 
ù_fwpﬁicy
 *
√w
 = 
m
;

1553 i‡(
Àn
 !(
ù_fwpﬁicy
)

1554 || !
	`check_œbñ
(
√w
->
fwp_œbñ
))

1555 
ªt
 = 
EINVAL
;

1556 i‡((
chaö
 = 
	`föd_œbñ
(
√w
->
fwp_œbñ
)Ë=
NULL
)

1557 
ªt
 = 
ENOENT
;

1558 i‡(
chaö
 !
IP_FW_INPUT_CHAIN


1559 && 
chaö
 !
IP_FW_FORWARD_CHAIN


1560 && 
chaö
 !
IP_FW_OUTPUT_CHAIN
) {

1561 
	`du¥ötf
("change_policy: can't changeÖolicy on user"

1563 
ªt
 = 
EINVAL
;

1566 
pﬁ
 = 
FW_SKIP
;

1567 
	`föd_•ecül
(
√w
->
fwp_pﬁicy
, &
pﬁ
);

1569 
pﬁ
) {

1570 
FW_MASQUERADE
:

1571 i‡(
chaö
 !
IP_FW_FORWARD_CHAIN
) {

1572 
ªt
 = 
EINVAL
;

1576 
FW_BLOCK
:

1577 
FW_ACCEPT
:

1578 
FW_REJECT
:

1579 
ªt
 = 
	`ch™ge_pﬁicy
(
chaö
, 
pﬁ
);

1582 
	`du¥ötf
("change_policy: badÖolicy `%s'\n",

1583 
√w
->
fwp_pﬁicy
);

1584 
ªt
 = 
EINVAL
;

1590 
	`du¥ötf
("ù_fw_˘l: unknow¿ªque° %d\n",
cmd
);

1591 
ªt
 = 
ENOPROTOOPT
;

1594 
	`FWC_WRITE_UNLOCK_IRQ
(&
ù_fw_lock
, 
Êags
);

1595  
ªt
;

1596 
	}
}

1599 
	$dump_ruÀ
(*
buf„r
,

1600 c⁄° *
chaöœbñ
,

1601 c⁄° 
ù_fwkî√l
 *
ruÀ
)

1603 
Àn
;

1604 
i
;

1605 
__u64
 
∑ckës
 = 0, 
byãs
 = 0;

1607 
	`FWC_HAVE_LOCK
(
fwc_wlocks
);

1608 
i
 = 0; i < 
NUM_SLOTS
; i++) {

1609 
∑ckës
 +
ruÀ
->
cou¡îs
[
i
].
p˙t
;

1610 
byãs
 +
ruÀ
->
cou¡îs
[
i
].
b˙t
;

1613 
Àn
=
	`•rötf
(
buf„r
,

1626 
chaöœbñ
,

1627 
	`¡ohl
(
ruÀ
->
ùfw
.
fw_§c
.
s_addr
),

1628 
	`¡ohl
(
ruÀ
->
ùfw
.
fw_smsk
.
s_addr
),

1629 
	`¡ohl
(
ruÀ
->
ùfw
.
fw_d°
.
s_addr
),

1630 
	`¡ohl
(
ruÀ
->
ùfw
.
fw_dmsk
.
s_addr
),

1631 (
ruÀ
->
ùfw
.
fw_vü«me
)[0] ?Ñule->ipfw.fw_vianame : "-",

1632 
ruÀ
->
ùfw
.
fw_Êg
,

1633 
ruÀ
->
ùfw
.
fw_övÊg
,

1634 
ruÀ
->
ùfw
.
fw_¥Ÿo
,

1635 (
__u32
)(
∑ckës
 >> 32), (__u32)packets,

1636 (
__u32
)(
byãs
 >> 32), (__u32)bytes,

1637 
ruÀ
->
ùfw
.
fw_•ts
[0],Ñule->ipfw.fw_spts[1],

1638 
ruÀ
->
ùfw
.
fw_d±s
[0],Ñule->ipfw.fw_dpts[1],

1639 
ruÀ
->
ùfw
.
fw_toßnd
,ÑuÀ->ùfw.
fw_tosx‹
,

1640 
ruÀ
->
ùfw
.
fw_ªdú±
,

1641 
ruÀ
->
ùfw
.
fw_m¨k
,

1642 
ruÀ
->
ùfw
.
fw_ouçutsize
,

1643 
	`bønch«me
(
ruÀ
->
bønch
,ruÀ->
sim∂ebønch
));

1645 
	`du¥ötf
("dump_ruÀ: %òbyã†d⁄e.\n", 
Àn
);

1646  
Àn
;

1647 
	}
}

1650 
	$ù_chaö_¥ocöfo
(*
buf„r
, **
°¨t
,

1651 
off_t
 
off£t
, 
Àngth
)

1653 
ù_chaö
 *
i
;

1654 
ù_fwkî√l
 *
j
 = 
ù_fw_chaös
->
chaö
;

1655 
Êags
;

1656 
Àn
 = 0;

1657 
œ°_Àn
 = 0;

1658 
off_t
 
u±o
 = 0;

1660 
	`du¥ötf
("Off£à°¨t†© %lu\n", 
off£t
);

1661 
	`du¥ötf
("ù_fw_chaö†i†0x%0lX\n", ()
ù_fw_chaös
);

1664 
	`FWC_WRITE_LOCK_IRQ
(&
ù_fw_lock
, 
Êags
);

1666 
i
 = 
ù_fw_chaös
; i; i = i->
√xt
) {

1667 
j
 = 
i
->
chaö
; j; j = j->
√xt
) {

1668 i‡(
u±o
 =
off£t
) ;

1669 
	`du¥ötf
("SkippingÑule in chain `%s'\n",

1670 
i
->
œbñ
);

1671 
u±o
++;

1673 i‡(
u±o
 =
off£t
) ;

1677 ; 
i
; ()((òi->
√xt
Ë&& (
j
 = i->
chaö
))) {

1678 
	`du¥ötf
("Dumpög chaö `%s'\n", 
i
->
œbñ
);

1679 ; 
j
; j = j->
√xt
, 
u±o
++, 
œ°_Àn
 = 
Àn
)

1681 
Àn
 +
	`dump_ruÀ
(
buf„r
+Àn, 
i
->
œbñ
, 
j
);

1682 i‡(
Àn
 > 
Àngth
) {

1683 
	`du¥ötf
("DumpedÅo %i (past %i). "

1685 
Àn
, 
Àngth
, 
œ°_Àn
);

1686 
Àn
 = 
œ°_Àn
;

1687 
outside
;

1691 
outside
:

1692 
	`FWC_WRITE_UNLOCK_IRQ
(&
ù_fw_lock
, 
Êags
);

1693 
buf„r
[
Àn
] = '\0';

1695 
	`du¥ötf
("ip_chain_procinfo: Length = %i (of %i). Offset = %li.\n",

1696 
Àn
, 
Àngth
, 
u±o
);

1698 *
°¨t
=(*)(()
u±o
-
off£t
);

1699  
Àn
;

1700 
	}
}

1702 
	$ù_chaö_«me_¥ocöfo
(*
buf„r
, **
°¨t
,

1703 
off_t
 
off£t
, 
Àngth
)

1705 
ù_chaö
 *
i
;

1706 
Àn
 = 0,
œ°_Àn
 = 0;

1707 
off_t
 
pos
 = 0,
begö
 = 0;

1708 
Êags
;

1711 
	`FWC_WRITE_LOCK_IRQ
(&
ù_fw_lock
, 
Êags
);

1713 
i
 = 
ù_fw_chaös
; i; i = i->
√xt
)

1715 
j
;

1716 
__u32
 
∑ckësHi
 = 0, 
∑ckësLo
 = 0, 
byãsHi
 = 0, 
byãsLo
 = 0;

1718 
j
 = 0; j < 
NUM_SLOTS
; j++) {

1719 
∑ckësLo
 +
i
->
ªít
[
j
].
cou¡îs
.
p˙t
 & 0xFFFFFFFF;

1720 
∑ckësHi
 +((
i
->
ªít
[
j
].
cou¡îs
.
p˙t
 >> 32)

1722 
byãsLo
 +
i
->
ªít
[
j
].
cou¡îs
.
b˙t
 & 0xFFFFFFFF;

1723 
byãsHi
 +((
i
->
ªít
[
j
].
cou¡îs
.
b˙t
 >> 32)

1728 
Àn
+=
	`•rötf
(
buf„r
+len,"%s %s %i %u %u %u %u\n",

1729 
i
->
œbñ
,
	`bønch«me
(
NULL
, i->
pﬁicy
),i->
ªfcou¡
,

1730 
∑ckësHi
, 
∑ckësLo
, 
byãsHi
, 
byãsLo
);

1731 
pos
=
begö
+
Àn
;

1732 if(
pos
<
off£t
) {

1733 
Àn
=0;

1734 
begö
=
pos
;

1736 if(
pos
>
off£t
+
Àngth
) {

1737 
Àn
 = 
œ°_Àn
;

1741 
œ°_Àn
 = 
Àn
;

1743 
	`FWC_WRITE_UNLOCK_IRQ
(&
ù_fw_lock
, 
Êags
);

1745 *
°¨t
 = 
buf„r
+(
off£t
-
begö
);

1746 
Àn
-=(
off£t
-
begö
);

1747 if(
Àn
>
Àngth
)

1748 
Àn
=
Àngth
;

1749  
Àn
;

1750 
	}
}

1755 
	$ùfw_öput_check
(
fúewÆl_›s
 *
this
, 
pf
,

1756 
√t_devi˚
 *
dev
, *
¨g
,

1757 
sk_buff
 **
pskb
)

1759  
	`ù_fw_check
(
dev
->
«me
,

1760 
¨g
, 
IP_FW_INPUT_CHAIN
, 
pskb
, 
	`SLOT_NUMBER
(), 0);

1761 
	}
}

1763 
	$ùfw_ouçut_check
(
fúewÆl_›s
 *
this
, 
pf
,

1764 
√t_devi˚
 *
dev
, *
¨g
,

1765 
sk_buff
 **
pskb
)

1768 i‡((*
pskb
)->
Àn
 < (
ùhdr
) ||

1769 (*
pskb
)->
nh
.
ùh
->
ihl
 * 4 < (
ùhdr
))

1770  
FW_ACCEPT
;

1771  
	`ù_fw_check
(
dev
->
«me
,

1772 
¨g
, 
IP_FW_OUTPUT_CHAIN
, 
pskb
, 
	`SLOT_NUMBER
(), 0);

1773 
	}
}

1775 
	$ùfw_f‹w¨d_check
(
fúewÆl_›s
 *
this
, 
pf
,

1776 
√t_devi˚
 *
dev
, *
¨g
,

1777 
sk_buff
 **
pskb
)

1779  
	`ù_fw_check
(
dev
->
«me
,

1780 
¨g
, 
IP_FW_FORWARD_CHAIN
, 
pskb
, 
	`SLOT_NUMBER
(), 0);

1781 
	}
}

1783 
fúewÆl_›s
 
ùfw_›s
 = {

1784 .
fw_f‹w¨d
 = 
ùfw_f‹w¨d_check
,

1785 .
fw_öput
 = 
ùfw_öput_check
,

1786 .
fw_ouçut
 = 
ùfw_ouçut_check
,

1789 
	$ùfw_öô_‹_˛ónup
(
öô
)

1791 
¥oc_dú_íåy
 *
¥oc
;

1792 
ªt
 = 0;

1793 
Êags
;

1795 i‡(!
öô
Ë
˛ónup
;

1797 #ifde‡
DEBUG_IP_FIREWALL_LOCKING


1798 
fwc_wlocks
 = 
fwc_æocks
 = 0;

1801 #i‡
	`deföed
(
CONFIG_NETLINK_DEV
Ë|| deföed(
CONFIG_NETLINK_DEV_MODULE
)

1802 
ùfwsk
 = 
	`√éök_kî√l_¸óã
(
NETLINK_FIREWALL
, 
NULL
);

1803 i‡(
ùfwsk
 =
NULL
)

1804 
˛ónup_nŸhög
;

1807 
ªt
 = 
	`ªgi°î_fúewÆl
(
PF_INET
, &
ùfw_›s
);

1808 i‡(
ªt
 < 0)

1809 
˛ónup_√éök
;

1811 
¥oc
 = 
	`¥oc_√t_¸óã
(
IP_FW_PROC_CHAINS
, 
S_IFREG
 | 
S_IRUSR
 | 
S_IWUSR
,

1812 
ù_chaö_¥ocöfo
);

1813 i‡(
¥oc
Ë¥oc->
ow√r
 = 
THIS_MODULE
;

1814 
¥oc
 = 
	`¥oc_√t_¸óã
(
IP_FW_PROC_CHAIN_NAMES
,

1815 
S_IFREG
 | 
S_IRUSR
 | 
S_IWUSR
,

1816 
ù_chaö_«me_¥ocöfo
);

1817 i‡(
¥oc
Ë¥oc->
ow√r
 = 
THIS_MODULE
;

1819 
IP_FW_INPUT_CHAIN
 = 
	`ù_öô_chaö
(
IP_FW_LABEL_INPUT
, 1, 
FW_ACCEPT
);

1820 
IP_FW_FORWARD_CHAIN
 = 
	`ù_öô_chaö
(
IP_FW_LABEL_FORWARD
, 1, 
FW_ACCEPT
);

1821 
IP_FW_OUTPUT_CHAIN
 = 
	`ù_öô_chaö
(
IP_FW_LABEL_OUTPUT
, 1, 
FW_ACCEPT
);

1823  
ªt
;

1825 
˛ónup
:

1826 
	`uƒegi°î_fúewÆl
(
PF_INET
, &
ùfw_›s
);

1828 
	`FWC_WRITE_LOCK_IRQ
(&
ù_fw_lock
, 
Êags
);

1829 
ù_fw_chaös
) {

1830 
ù_chaö
 *
√xt
 = 
ù_fw_chaös
->next;

1832 
	`˛ór_fw_chaö
(
ù_fw_chaös
);

1833 
	`k‰ì
(
ù_fw_chaös
);

1834 
ù_fw_chaös
 = 
√xt
;

1836 
	`FWC_WRITE_UNLOCK_IRQ
(&
ù_fw_lock
, 
Êags
);

1838 
	`¥oc_√t_ªmove
(
IP_FW_PROC_CHAINS
);

1839 
	`¥oc_√t_ªmove
(
IP_FW_PROC_CHAIN_NAMES
);

1841 
˛ónup_√éök
:

1842 #i‡
	`deföed
(
CONFIG_NETLINK_DEV
Ë|| deföed(
CONFIG_NETLINK_DEV_MODULE
)

1843 
	`sock_ªÀa£
(
ùfwsk
->
sk_sockë
);

1845 
˛ónup_nŸhög
:

1847  
ªt
;

1848 
	}
}

	@ipfwadm_core.c

5 
	~<löux/c⁄fig.h
>

6 
	#CONFIG_IP_FIREWALL


	)

7 
	#CONFIG_IP_FIREWALL_VERBOSE


	)

8 
	#CONFIG_IP_MASQUERADE


	)

9 
	#CONFIG_IP_ACCT


	)

10 
	#CONFIG_IP_TRANSPARENT_PROXY


	)

11 #i‡
deföed
(
CONFIG_NETLINK_DEV
Ë|| deföed(
CONFIG_NETLINK_DEV_MODULE
)

12 
	#CONFIG_IP_FIREWALL_NETLINK


	)

100 
	~<asm/uac˚ss.h
>

101 
	~<asm/sy°em.h
>

102 
	~<löux/ty≥s.h
>

103 
	~<löux/kî√l.h
>

104 
	~<löux/sched.h
>

105 
	~<löux/°rög.h
>

106 
	~<löux/î∫o.h
>

107 
	~<löux/moduÀ.h
>

109 
	~<löux/sockë.h
>

110 
	~<löux/sockios.h
>

111 
	~<löux/ö.h
>

112 
	~<löux/öë.h
>

113 
	~<löux/√tdevi˚.h
>

114 
	~<löux/icmp.h
>

115 
	~<löux/udp.h
>

116 
	~<√t/ù.h
>

117 
	~<√t/¥Ÿocﬁ.h
>

118 
	~<√t/rouã.h
>

119 
	~<√t/t˝.h
>

120 
	~<√t/udp.h
>

121 
	~<√t/sock.h
>

122 
	~<√t/icmp.h
>

123 
	~<löux/√éök.h
>

124 
	~<löux/öô.h
>

125 
	~<löux/•ölock.h
>

126 
	~<löux/√tfûãr_ùv4/ùfwadm_c‹e.h
>

127 
	~<löux/√tfûãr_ùv4/com∑t_fúewÆl.h
>

128 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

129 
	~<löux/√tfûãr_ùv4/ù_«t_c‹e.h
>

131 
	~<√t/checksum.h
>

132 
	~<löux/¥oc_fs.h
>

133 
	~<löux/°©.h
>

135 
MODULE_LICENSE
("Dual BSD/GPL");

136 
MODULE_DESCRIPTION
("ipfwadm backwards compatibilityÜayer");

142 #ifde‡
DEBUG_IP_FIREWALL


143 
	#d¥ötf1
(
a
Ë
	`¥ötk
◊)

	)

144 
	#d¥ötf2
(
a1
,
a2
Ë
	`¥ötk
◊1,a2)

	)

145 
	#d¥ötf3
(
a1
,
a2
,
a3
Ë
	`¥ötk
◊1,a2,a3)

	)

146 
	#d¥ötf4
(
a1
,
a2
,
a3
,
a4
Ë
	`¥ötk
◊1,a2,a3,a4)

	)

148 
	#d¥ötf1
(
a
)

	)

149 
	#d¥ötf2
(
a1
,
a2
)

	)

150 
	#d¥ötf3
(
a1
,
a2
,
a3
)

	)

151 
	#d¥ötf4
(
a1
,
a2
,
a3
,
a4
)

	)

154 
	#¥öt_ù
(
a
Ë
	`¥ötk
("%u.%u.%u.%u", 
	`NIPQUAD
◊));

	)

156 #ifde‡
DEBUG_IP_FIREWALL


157 
	#d¥öt_ù
(
a
Ë
	`¥öt_ù
◊)

	)

159 
	#d¥öt_ù
(
a
)

	)

162 
DECLARE_RWLOCK
(
ù_fw_lock
);

164 #i‡
deföed
(
CONFIG_IP_ACCT
Ë|| deföed(
CONFIG_IP_FIREWALL
)

166 
ù_fw
 *
	gù_fw_fwd_chaö
;

167 
ù_fw
 *
	gù_fw_ö_chaö
;

168 
ù_fw
 *
	gù_fw_out_chaö
;

169 
ù_fw
 *
	gù_ac˘_chaö
;

170 
ù_fw
 *
	gù_masq_chaö
;

172 
ù_fw
 **
	gchaös
[] =

173 {&
ù_fw_fwd_chaö
, &
ù_fw_ö_chaö
, &
ù_fw_out_chaö
, &
ù_ac˘_chaö
,

174 &
ù_masq_chaö


178 #ifde‡
CONFIG_IP_FIREWALL


179 
	gù_fw_fwd_pﬁicy
=
IP_FW_F_ACCEPT
;

180 
	gù_fw_ö_pﬁicy
=
IP_FW_F_ACCEPT
;

181 
	gù_fw_out_pﬁicy
=
IP_FW_F_ACCEPT
;

183 *
	gpﬁicõs
[] =

184 {&
ù_fw_fwd_pﬁicy
, &
ù_fw_ö_pﬁicy
, &
ù_fw_out_pﬁicy
};

188 #ifde‡
CONFIG_IP_FIREWALL_NETLINK


189 
sock
 *
	gùfwsk
;

196 
ölöe
 
	$p‹t_m©ch
(*
p‹çå
,
≈‹ts
,
p‹t
,
ønge_Êag
)

198 i‡(!
≈‹ts
)

200 i‡–
ønge_Êag
 )

202 i‡–
p‹çå
[0] <
p‹t
 &&Öort <=Öortptr[1] )

206 
≈‹ts
 -= 2;

207 
p‹çå
 += 2;

209  
≈‹ts
-- > 0 )

211 i‡–*
p‹çå
++ =
p‹t
 )

217 
	}
}

219 #i‡
deföed
(
CONFIG_IP_ACCT
Ë|| deföed(
CONFIG_IP_FIREWALL
)

221 #ifde‡
CONFIG_IP_FIREWALL_VERBOSE


228 *
	$chaö_«me
(
ù_fw
 *
chaö
, 
mode
)

230 
mode
) {

231 
IP_FW_MODE_ACCT_IN
:  "acct in";

232 
IP_FW_MODE_ACCT_OUT
:  "acct out";

234 i‡(
chaö
 =
ù_fw_fwd_chaö
)

236 i‡(
chaö
 =
ù_fw_ö_chaö
)

241 
	}
}

243 *
	$ruÀ_«me
(
ù_fw
 *
f
, 
mode
, *
buf
)

245 i‡(
mode
 =
IP_FW_MODE_ACCT_IN
 || modê=
IP_FW_MODE_ACCT_OUT
)

248 if(
f
->
fw_Êg
&
IP_FW_F_ACCEPT
) {

249 if(
f
->
fw_Êg
&
IP_FW_F_REDIR
) {

250 
	`•rötf
(
buf
, "acc/r%d ", 
f
->
fw_±s
[f->
fw_n•
+f->
fw_ndp
]);

251  
buf
;

252 } if(
f
->
fw_Êg
&
IP_FW_F_MASQ
)

256 } if(
f
->
fw_Êg
&
IP_FW_F_ICMPRPL
) {

261 
	}
}

263 
	$¥öt_∑ckë
(
sk_buff
 **
pskb
,

264 
u16
 
§c_p‹t
, u16 
d°_p‹t
, u16 
icmp_ty≥
,

265 *
chaö
, *
ruÀ
, *
dev«me
)

267 
__u32
 *
›t
 = (__u32 *Ë((*
pskb
)->
nh
.
ùh
 + 1);

268 
›ti
;

269 
__u16
 
foff
 = 
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
‰ag_off
);

270 
¥Ÿocﬁ
 = (*
pskb
)->
nh
.
ùh
->protocol;

272 
	`¥ötk
(
KERN_INFO
 "IP %†%s%s", 
chaö
, 
ruÀ
, 
dev«me
);

274 
¥Ÿocﬁ
) {

275 
IPPROTO_TCP
:

276 
	`¥ötk
(" TCP ");

278 
IPPROTO_UDP
:

279 
	`¥ötk
(" UDP ");

281 
IPPROTO_ICMP
:

282 
	`¥ötk
(" ICMP/%d ", 
icmp_ty≥
);

285 
	`¥ötk
(" PROTO=%d ", 
¥Ÿocﬁ
);

289 
	`¥öt_ù
((*
pskb
)->
nh
.
ùh
->
ßddr
);

290 i‡(
¥Ÿocﬁ
 =
IPPROTO_TCP
 ||ÖrŸocﬁ =
IPPROTO_UDP
)

291 
	`¥ötk
(":%hu", 
§c_p‹t
);

292 
	`¥ötk
(" ");

293 
	`¥öt_ù
((*
pskb
)->
nh
.
ùh
->
daddr
);

294 i‡(
¥Ÿocﬁ
 =
IPPROTO_TCP
 ||ÖrŸocﬁ =
IPPROTO_UDP
)

295 
	`¥ötk
(":%hu", 
d°_p‹t
);

296 
	`¥ötk
(" L=%hu S=0x%2.2hX I=%hu FO=0x%4.4hX T=%hu",

297 
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
tŸ_Àn
),

298 (*
pskb
)->
nh
.
ùh
->
tos
,

299 
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
id
),

300 
foff
 & 
IP_OFFSET
,

301 (*
pskb
)->
nh
.
ùh
->
âl
);

302 i‡(
foff
 & 
IP_DF
)

303 
	`¥ötk
(" DF=1");

304 i‡(
foff
 & 
IP_MF
)

305 
	`¥ötk
(" MF=1");

306 
›ti
 = 0; o±ò< ((*
pskb
)->
nh
.
ùh
->
ihl
 - (
ùhdr
) / 4); opti++)

307 
	`¥ötk
(" O=0x%8.8X", *
›t
++);

308 
	`¥ötk
("\n");

309 
	}
}

324 
	$ù_fw_chk
(
sk_buff
 **
pskb
,

325 
√t_devi˚
 *
rif
, 
__u16
 *
ªdúp‹t
,

326 
ù_fw
 *
chaö
, 
pﬁicy
, 
mode
)

328 
ù_fw
 *
f
;

329 
__u32
 
§c
, 
d°
;

330 
__u16
 
§c_p‹t
=0xFFFF, 
d°_p‹t
=0xFFFF, 
icmp_ty≥
=0xFF;

331 
f_¥t
=0, 
¥t
;

332 
nŸ˝syn
=0, 
nŸ˝ack
=0, 
m©ch
;

333 
off£t
;

334 
™swî
;

335 
toßnd
, 
tosx‹
;

336 
¥Ÿocﬁ
;

358 
off£t
 = 
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
‰ag_off
Ë& 
IP_OFFSET
;

359 
¥Ÿocﬁ
 = (*
pskb
)->
nh
.
ùh
->protocol;

368 i‡(
off£t
 =1 && 
¥Ÿocﬁ
 =
IPPROTO_TCP
)

369  
FW_BLOCK
;

371 i‡(
off£t
!=0 && !(
mode
 & (
IP_FW_MODE_ACCT_IN
|
IP_FW_MODE_ACCT_OUT
)) &&

372 (
¥Ÿocﬁ
 =
IPPROTO_TCP
 ||

373 
¥Ÿocﬁ
 =
IPPROTO_UDP
 ||

374 
¥Ÿocﬁ
 =
IPPROTO_ICMP
))

375  
FW_ACCEPT
;

381 i‡(
¥Ÿocﬁ
 =
IPPROTO_TCP
 &&

382 ((*
pskb
)->
nh
.
ùh
->
ihl
<<2)+16 > 
	`¡ohs
((*pskb)->nh.ùh->
tŸ_Àn
))

383  
FW_BLOCK
;

391 i‡((
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
tŸ_Àn
) <

392 8 + ((*
pskb
)->
nh
.
ùh
->
ihl
 << 2)) &&

393 (
¥Ÿocﬁ
 =
IPPROTO_TCP
 ||ÖrŸocﬁ =
IPPROTO_UDP
))

394  
FW_BLOCK
;

396 
§c
 = (*
pskb
)->
nh
.
ùh
->
ßddr
;

397 
d°
 = (*
pskb
)->
nh
.
ùh
->
daddr
;

407 
	`d¥ötf1
("Packet ");

408 
¥Ÿocﬁ
) {

409 
IPPROTO_TCP
:

410 
	`d¥ötf1
("TCP ");

412 i‡(!
off£t
) {

413 
t˝hdr
 
t˝h
;

415 i‡(
	`skb_c›y_bôs
(*
pskb
,

416 (*
pskb
)->
nh
.
ùh
->
ihl
 * 4,

417 &
t˝h
, (tcph)))

418  
FW_BLOCK
;

420 
§c_p‹t
 = 
	`¡ohs
(
t˝h
.
sour˚
);

421 
d°_p‹t
 = 
	`¡ohs
(
t˝h
.
de°
);

423 if(!
t˝h
.
ack
 && !t˝h.
r°
)

425 
nŸ˝ack
 = 1;

426 if(!
t˝h
.
syn
 || !
nŸ˝ack
)

428 
nŸ˝syn
 = 1;

430 
¥t
 = 
IP_FW_F_TCP
;

432 
IPPROTO_UDP
:

433 
	`d¥ötf1
("UDP ");

435 i‡(!
off£t
) {

436 
udphdr
 
udph
;

438 i‡(
	`skb_c›y_bôs
(*
pskb
,

439 (*
pskb
)->
nh
.
ùh
->
ihl
 * 4,

440 &
udph
, (udph)))

441  
FW_BLOCK
;

443 
§c_p‹t
 = 
	`¡ohs
(
udph
.
sour˚
);

444 
d°_p‹t
 = 
	`¡ohs
(
udph
.
de°
);

446 
¥t
 = 
IP_FW_F_UDP
;

448 
IPPROTO_ICMP
:

450 i‡(!
off£t
) {

451 
icmphdr
 
icmph
;

453 i‡(
	`skb_c›y_bôs
(*
pskb
,

454 (*
pskb
)->
nh
.
ùh
->
ihl
 * 4,

455 &
icmph
, (icmph)))

456  
FW_BLOCK
;

458 
icmp_ty≥
 = (
__u16
Ë
icmph
.
ty≥
;

460 
	`d¥ötf2
("ICMP:%d ", 
icmp_ty≥
);

461 
¥t
 = 
IP_FW_F_ICMP
;

464 
	`d¥ötf2
("p=%d ", 
¥Ÿocﬁ
);

465 
¥t
 = 
IP_FW_F_ALL
;

468 #ifde‡
DEBUG_IP_FIREWALL


469 
	`d¥öt_ù
(
§c
);

471 i‡(
¥Ÿocﬁ
 =
IPPROTO_TCP
 ||ÖrŸocﬁ =
IPPROTO_UDP
)

473 
	`d¥ötf2
(":%d ", 
§c_p‹t
);

474 
	`d¥öt_ù
(
d°
);

475 i‡(
¥Ÿocﬁ
 =
IPPROTO_TCP
 ||ÖrŸocﬁ =
IPPROTO_UDP
)

477 
	`d¥ötf2
(":%d ", 
d°_p‹t
);

478 
	`d¥ötf1
("\n");

481 i‡(
mode
 =
IP_FW_MODE_CHK
)

482 
	`READ_LOCK
(&
ù_fw_lock
);

484 
	`WRITE_LOCK
(&
ù_fw_lock
);

486 
f
 = 
chaö
; f; f = f->
fw_√xt
) {

504 
m©ch
 = 0x00;

506 i‡((
§c
 & 
f
->
fw_smsk
.
s_addr
Ë=f->
fw_§c
.s_addr &&

507 (
d°
 & 
f
->
fw_dmsk
.
s_addr
Ë=f->
fw_d°
.s_addr)

509 
m©ch
 |= 0x01;

511 i‡((
f
->
fw_Êg
 & 
IP_FW_F_BIDIR
) &&

512 (
d°
 & 
f
->
fw_smsk
.
s_addr
Ë=f->
fw_§c
.s_addr &&

513 (
§c
 & 
f
->
fw_dmsk
.
s_addr
Ë=f->
fw_d°
.s_addr)

515 
m©ch
 |= 0x02;

517 i‡(!
m©ch
)

523 i‡(
f
->
fw_vüdev
) {

524 i‡(
rif
 !
f
->
fw_vüdev
)

545 i‡(
f
->
fw_vü
.
s_addr
 && 
rif
) {

546 
ö_iÁddr
 *
iÁ
;

548 i‡(
rif
->
ù_±r
 =
NULL
)

551 
iÁ
 = ((
ö_devi˚
*)(
rif
->
ù_±r
))->
iÁ_li°
;

552 
iÁ
; iÁ = iÁ->
iÁ_√xt
) {

553 i‡(
iÁ
->
iÁ_loˇl
 =
f
->
fw_vü
.
s_addr
)

554 
iÁ_ok
;

558 
iÁ_ok
:;

565 #ifde‡
CONFIG_IP_ACCT


571 i‡(
mode
 & (
IP_FW_MODE_ACCT_IN
|
IP_FW_MODE_ACCT_OUT
) &&

572 ((
mode
 =
IP_FW_MODE_ACCT_IN
 && 
f
->
fw_Êg
&
IP_FW_F_ACCTOUT
) ||

573 (
mode
 =
IP_FW_MODE_ACCT_OUT
 && 
f
->
fw_Êg
&
IP_FW_F_ACCTIN
)))

584 if((
f
->
fw_Êg
&
IP_FW_F_TCPSYN
Ë&& 
nŸ˝syn
)

587 if((
f
->
fw_Êg
&
IP_FW_F_TCPACK
Ë&& 
nŸ˝ack
)

590 
f_¥t
=
f
->
fw_Êg
&
IP_FW_F_KIND
;

591 i‡(
f_¥t
 !
IP_FW_F_ALL
) {

597 i‡(
¥t
 !
f_¥t
)

600 if((
¥t
==
IP_FW_F_ICMP
 &&

601 ! 
	`p‹t_m©ch
(&
f
->
fw_±s
[0], f->
fw_n•
,

602 
icmp_ty≥
,
f
->
fw_Êg
&
IP_FW_F_SRNG
)) ||

603 !(
¥t
==
IP_FW_F_ICMP
 || ((
m©ch
 & 0x01) &&

604 
	`p‹t_m©ch
(&
f
->
fw_±s
[0], f->
fw_n•
, 
§c_p‹t
,

605 
f
->
fw_Êg
&
IP_FW_F_SRNG
) &&

606 
	`p‹t_m©ch
(&
f
->
fw_±s
[f->
fw_n•
], f->
fw_ndp
, 
d°_p‹t
,

607 
f
->
fw_Êg
&
IP_FW_F_DRNG
)Ë|| ((
m©ch
 & 0x02) &&

608 
	`p‹t_m©ch
(&
f
->
fw_±s
[0], f->
fw_n•
, 
d°_p‹t
,

609 
f
->
fw_Êg
&
IP_FW_F_SRNG
) &&

610 
	`p‹t_m©ch
(&
f
->
fw_±s
[f->
fw_n•
], f->
fw_ndp
, 
§c_p‹t
,

611 
f
->
fw_Êg
&
IP_FW_F_DRNG
))))

617 #ifde‡
CONFIG_IP_FIREWALL_VERBOSE


618 i‡(
f
->
fw_Êg
 & 
IP_FW_F_PRN
)

620 
buf
[16];

622 
	`¥öt_∑ckë
(
pskb
, 
§c_p‹t
, 
d°_p‹t
, 
icmp_ty≥
,

623 
	`chaö_«me
(
chaö
, 
mode
),

624 
	`ruÀ_«me
(
f
, 
mode
, 
buf
),

625 
rif
 ?Ñif->
«me
 : "-");

628 i‡(
mode
 !
IP_FW_MODE_CHK
) {

629 
f
->
fw_b˙t
 +
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
tŸ_Àn
);

630 
f
->
fw_p˙t
++;

632 i‡(!(
mode
 & (
IP_FW_MODE_ACCT_IN
|
IP_FW_MODE_ACCT_OUT
)))

636 i‡(!(
mode
 & (
IP_FW_MODE_ACCT_IN
|
IP_FW_MODE_ACCT_OUT
))) {

644 i‡(
f
 !
NULL
) {

645 
pﬁicy
 = 
f
->
fw_Êg
;

646 
toßnd
 = 
f
->
fw_toßnd
;

647 
tosx‹
 = 
f
->
fw_tosx‹
;

649 
toßnd
 = 0xFF;

650 
tosx‹
 = 0x00;

653 i‡(
pﬁicy
 & 
IP_FW_F_ACCEPT
) {

655 
__u8
 
tos
 = (*
pskb
)->
nh
.
ùh
->tos;

657 i‡(((
tos
 & 
toßnd
Ë^ 
tosx‹
) !=Åos) {

658 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
,

659 
	`off£tof
(
ùhdr
, 
tos
)+1))

660 
dr›_ô
;

662 (*
pskb
)->
nh
.
ùh
->
tos
 = (to†& 
toßnd
Ë^ 
tosx‹
;

663 
	`ù_£nd_check
((*
pskb
)->
nh
.
ùh
);

666 #ifde‡
CONFIG_IP_TRANSPARENT_PROXY


667 i‡(
pﬁicy
 & 
IP_FW_F_REDIR
) {

668 i‡(
ªdúp‹t
)

669 i‡((*
ªdúp‹t
 = 
	`ht⁄s
(
f
->
fw_±s
[f->
fw_n•
+f->
fw_ndp
])) == 0) {

674 *
ªdúp‹t
 = 
	`ht⁄s
(
d°_p‹t
);

676 
™swî
 = 
FW_REDIRECT
;

679 #ifde‡
CONFIG_IP_MASQUERADE


680 i‡(
pﬁicy
 & 
IP_FW_F_MASQ
)

681 
™swî
 = 
FW_MASQUERADE
;

684 
™swî
 = 
FW_ACCEPT
;

686 } i‡(
pﬁicy
 & 
IP_FW_F_ICMPRPL
)

687 
™swî
 = 
FW_REJECT
;

689 
dr›_ô
:

690 
™swî
 = 
FW_BLOCK
;

693 #ifde‡
CONFIG_IP_FIREWALL_NETLINK


694 i‡((
pﬁicy
 & 
IP_FW_F_PRN
Ë&& (
™swî
 =
FW_REJECT
 ||ánswî =
FW_BLOCK
))

696 
sk_buff
 *
skb
 = 
	`Æloc_skb
(128,

697 (
mode
 =
IP_FW_MODE_CHK
) ?

698 
GFP_KERNEL
 : 
GFP_ATOMIC
);

699 i‡(
skb
) {

700 
Àn
 = 
	`mö_t
(,

702 
	`¡ohs
((*
pskb
)->
nh
.
ùh
->
tŸ_Àn
));

704 
	`skb_put
(
skb
, 
Àn
);

705 
	`skb_c›y_bôs
(*
pskb
,

706 ((*)(*
pskb
)->
nh
.
ùh
 -

707 (*)(*
pskb
)->
d©a
),

708 
skb
->
d©a
, 
Àn
);

709 i‡(
	`√éök_po°
(
NETLINK_FIREWALL
, 
skb
))

710 
	`k‰ì_skb
(
skb
);

716 
™swî
 = 0;

718 i‡(
mode
 =
IP_FW_MODE_CHK
)

719 
	`READ_UNLOCK
(&
ù_fw_lock
);

721 
	`WRITE_UNLOCK
(&
ù_fw_lock
);

723  
™swî
;

724 
	}
}

727 
	$zîo_fw_chaö
(
ù_fw
 *
chaö±r
)

729 
ù_fw
 *
˘mp
=
chaö±r
;

731 
	`WRITE_LOCK
(&
ù_fw_lock
);

732 
˘mp
)

734 
˘mp
->
fw_p˙t
=0L;

735 
˘mp
->
fw_b˙t
=0L;

736 
˘mp
=˘mp->
fw_√xt
;

738 
	`WRITE_UNLOCK
(&
ù_fw_lock
);

739 
	}
}

741 
	$‰ì_fw_chaö
(
ù_fw
 *vﬁ©ûe* 
chaö±r
)

743 
	`WRITE_LOCK
(&
ù_fw_lock
);

744  *
chaö±r
 !
NULL
 )

746 
ù_fw
 *
·mp
;

747 
·mp
 = *
chaö±r
;

748 *
chaö±r
 = 
·mp
->
fw_√xt
;

749 i‡(
·mp
->
fw_vüdev


750 && 
·mp
->
fw_vüdev
 !(
√t_devi˚
 *)-1)

751 
	`dev_put
(
·mp
->
fw_vüdev
);

752 
	`k‰ì
(
·mp
);

755 
	`moduÀ_put
(
THIS_MODULE
);

757 
	`WRITE_UNLOCK
(&
ù_fw_lock
);

758 
	}
}

762 
	$ö£π_ö_chaö
(
ù_fw
 *vﬁ©ûe* 
chaö±r
, ù_fw *
‰wl
,
Àn
)

764 
ù_fw
 *
·mp
;

767 i‡(!
	`åy_moduÀ_gë
(
THIS_MODULE
))

768  
ENOPROTOOPT
;

770 
·mp
 = 
	`kmÆloc
–(
ù_fw
), 
GFP_KERNEL
 );

771 i‡–
·mp
 =
NULL
 )

773 #ifde‡
DEBUG_IP_FIREWALL


774 
	`¥ötk
("ip_fw_ctl: malloc saidÇo\n");

776 –
ENOMEM
 );

779 
	`mem˝y
(
·mp
, 
‰wl
, 
Àn
);

784 
·mp
->
fw_toßnd
 |= 0x01;

785 
·mp
->
fw_tosx‹
 &= 0xFE;

786 
·mp
->
fw_p˙t
=0L;

787 
·mp
->
fw_b˙t
=0L;

789 
	`WRITE_LOCK
(&
ù_fw_lock
);

791 i‡((
·mp
->
fw_vü«me
)[0]) {

792 i‡(!(
·mp
->
fw_vüdev
 = 
	`dev_gë_by_«me
(·mp->
fw_vü«me
)))

793 
·mp
->
fw_vüdev
 = (
√t_devi˚
 *) -1;

795 
·mp
->
fw_vüdev
 = 
NULL
;

797 
·mp
->
fw_√xt
 = *
chaö±r
;

798 *
chaö±r
=
·mp
;

799 
	`WRITE_UNLOCK
(&
ù_fw_lock
);

801 
	}
}

803 
	$≠≥nd_to_chaö
(
ù_fw
 *vﬁ©ûe* 
chaö±r
, ù_fw *
‰wl
,
Àn
)

805 
ù_fw
 *
·mp
;

806 
ù_fw
 *
chtmp
=
NULL
;

807 
ù_fw
 *vﬁ©ûê
chtmp_¥ev
=
NULL
;

810 i‡(!
	`åy_moduÀ_gë
(
THIS_MODULE
))

811  
ENOPROTOOPT
;

813 
·mp
 = 
	`kmÆloc
–(
ù_fw
), 
GFP_KERNEL
 );

814 i‡–
·mp
 =
NULL
 )

816 #ifde‡
DEBUG_IP_FIREWALL


817 
	`¥ötk
("ip_fw_ctl: malloc saidÇo\n");

819 –
ENOMEM
 );

822 
	`mem˝y
(
·mp
, 
‰wl
, 
Àn
);

827 
·mp
->
fw_toßnd
 |= 0x01;

828 
·mp
->
fw_tosx‹
 &= 0xFE;

829 
·mp
->
fw_p˙t
=0L;

830 
·mp
->
fw_b˙t
=0L;

832 
·mp
->
fw_√xt
 = 
NULL
;

834 
	`WRITE_LOCK
(&
ù_fw_lock
);

836 i‡((
·mp
->
fw_vü«me
)[0]) {

837 i‡(!(
·mp
->
fw_vüdev
 = 
	`dev_gë_by_«me
(·mp->
fw_vü«me
)))

838 
·mp
->
fw_vüdev
 = (
√t_devi˚
 *) -1;

840 
·mp
->
fw_vüdev
 = 
NULL
;

842 
chtmp_¥ev
=
NULL
;

843 
chtmp
=*
chaö±r
;chtmp!=
NULL
;chtmp=chtmp->
fw_√xt
)

844 
chtmp_¥ev
=
chtmp
;

846 i‡(
chtmp_¥ev
)

847 
chtmp_¥ev
->
fw_√xt
=
·mp
;

849 *
chaö±r
=
·mp
;

850 
	`WRITE_UNLOCK
(&
ù_fw_lock
);

852 
	}
}

854 
	$dñ_‰om_chaö
(
ù_fw
 *vﬁ©ûe*
chaö±r
, ù_fw *
‰wl
)

856 
ù_fw
 *
·mp
,*
…mp
;

857 
ç‹t1
,
ç‹t2
,
tm≤um
;

858 
m©ches
,
was_found
;

860 
	`WRITE_LOCK
(&
ù_fw_lock
);

862 
·mp
=*
chaö±r
;

864 i‡–
·mp
 =
NULL
 )

866 #ifde‡
DEBUG_IP_FIREWALL


867 
	`¥ötk
("ip_fw_ctl: chain isÉmpty\n");

869 
	`WRITE_UNLOCK
(&
ù_fw_lock
);

870 –
EINVAL
 );

873 
…mp
=
NULL
;

874 
was_found
=0;

876  !
was_found
 && 
·mp
 !
NULL
 )

878 
m©ches
=1;

879 i‡(
·mp
->
fw_§c
.
s_addr
!=
‰wl
->fw_src.s_addr

880 || 
·mp
->
fw_d°
.
s_addr
!=
‰wl
->fw_dst.s_addr

881 || 
·mp
->
fw_smsk
.
s_addr
!=
‰wl
->fw_smsk.s_addr

882 || 
·mp
->
fw_dmsk
.
s_addr
!=
‰wl
->fw_dmsk.s_addr

883 || 
·mp
->
fw_vü
.
s_addr
!=
‰wl
->fw_via.s_addr

884 || 
·mp
->
fw_Êg
!=
‰wl
->fw_flg)

885 
m©ches
=0;

887 
ç‹t1
=
·mp
->
fw_n•
+·mp->
fw_ndp
;

888 
ç‹t2
=
‰wl
->
fw_n•
+‰wl->
fw_ndp
;

889 i‡(
ç‹t1
!=
ç‹t2
)

890 
m©ches
=0;

891 i‡(
ç‹t1
!=0)

893 
tm≤um
=0;tm≤um < 
ç‹t1
 &&Åm≤um < 
IP_FW_MAX_PORTS
;tmpnum++)

894 i‡(
·mp
->
fw_±s
[
tm≤um
]!=
‰wl
->fw_pts[tmpnum])

895 
m©ches
=0;

897 i‡(
	`°∫cmp
(
·mp
->
fw_vü«me
, 
‰wl
->fw_vü«me, 
IFNAMSIZ
))

898 
m©ches
=0;

899 if(
m©ches
)

901 
was_found
=1;

902 i‡(
·mp
->
fw_vüdev


903 && 
·mp
->
fw_vüdev
 !(
√t_devi˚
 *)-1)

904 
	`dev_put
(
·mp
->
fw_vüdev
);

905 i‡(
…mp
)

907 
…mp
->
fw_√xt
=
·mp
->fw_next;

908 
	`k‰ì
(
·mp
);

909 
·mp
=
…mp
->
fw_√xt
;

913 *
chaö±r
=
·mp
->
fw_√xt
;

914 
	`k‰ì
(
·mp
);

915 
·mp
=*
chaö±r
;

920 
…mp
 = 
·mp
;

921 
·mp
 = ftmp->
fw_√xt
;

924 
	`WRITE_UNLOCK
(&
ù_fw_lock
);

925 i‡(
was_found
) {

928 
	`moduÀ_put
(
THIS_MODULE
);

931 (
EINVAL
);

932 
	}
}

936 
ù_fw
 *
	$check_ùfw_°ru˘
(
ù_fw
 *
‰wl
, 
Àn
)

939 i‡–
Àn
 !(
ù_fw
) )

941 #ifde‡
DEBUG_IP_FIREWALL


942 
	`¥ötk
("ù_fw_˘l:Üí=%d, w™à%d\n",
Àn
, (
ù_fw
));

944 (
NULL
);

947 i‡–(
‰wl
->
fw_Êg
 & ~
IP_FW_F_MASK
) != 0 )

949 #ifde‡
DEBUG_IP_FIREWALL


950 
	`¥ötk
("ip_fw_ctl: undefined flag bits set (flags=%x)\n",

951 
‰wl
->
fw_Êg
);

953 (
NULL
);

956 #i‚de‡
CONFIG_IP_TRANSPARENT_PROXY


957 i‡(
‰wl
->
fw_Êg
 & 
IP_FW_F_REDIR
) {

958 #ifde‡
DEBUG_IP_FIREWALL


959 
	`¥ötk
("ip_fw_ctl: unsupported flag IP_FW_F_REDIR\n");

961 (
NULL
);

965 #i‚de‡
CONFIG_IP_MASQUERADE


966 i‡(
‰wl
->
fw_Êg
 & 
IP_FW_F_MASQ
) {

967 #ifde‡
DEBUG_IP_FIREWALL


968 
	`¥ötk
("ip_fw_ctl: unsupported flag IP_FW_F_MASQ\n");

970 (
NULL
);

974 i‡–(
‰wl
->
fw_Êg
 & 
IP_FW_F_SRNG
Ë&& frwl->
fw_n•
 < 2 )

976 #ifde‡
DEBUG_IP_FIREWALL


977 
	`¥ötk
("ip_fw_ctl: srcÑange set but fw_nsp=%d\n",

978 
‰wl
->
fw_n•
);

980 (
NULL
);

983 i‡–(
‰wl
->
fw_Êg
 & 
IP_FW_F_DRNG
Ë&& frwl->
fw_ndp
 < 2 )

985 #ifde‡
DEBUG_IP_FIREWALL


986 
	`¥ötk
("ip_fw_ctl: dstÑange set but fw_ndp=%d\n",

987 
‰wl
->
fw_ndp
);

989 (
NULL
);

992 i‡–
‰wl
->
fw_n•
 + frwl->
fw_ndp
 > (‰wl->
fw_Êg
 & 
IP_FW_F_REDIR
 ? 
IP_FW_MAX_PORTS
 - 1 : IP_FW_MAX_PORTS) )

994 #ifde‡
DEBUG_IP_FIREWALL


995 
	`¥ötk
("ip_fw_ctl:Åoo manyÖorts (%d+%d)\n",

996 
‰wl
->
fw_n•
,‰wl->
fw_ndp
);

998 (
NULL
);

1001  
‰wl
;

1002 
	}
}

1007 #ifde‡
CONFIG_IP_ACCT


1009 
	$ù_ac˘_˘l
(
°age
, *
m
, 
Àn
)

1011 i‡–
°age
 =
IP_ACCT_FLUSH
 )

1013 
	`‰ì_fw_chaö
(&
ù_ac˘_chaö
);

1016 i‡–
°age
 =
IP_ACCT_ZERO
 )

1018 
	`zîo_fw_chaö
(
ù_ac˘_chaö
);

1021 i‡–
°age
 =
IP_ACCT_INSERT
 || sègê=
IP_ACCT_APPEND
 ||

1022 
°age
 =
IP_ACCT_DELETE
 )

1024 
ù_fw
 *
‰wl
;

1026 i‡(!(
‰wl
=
	`check_ùfw_°ru˘
(
m
,
Àn
)))

1027  (
EINVAL
);

1029 
°age
)

1031 
IP_ACCT_INSERT
:

1032 –
	`ö£π_ö_chaö
(&
ù_ac˘_chaö
,
‰wl
,
Àn
));

1033 
IP_ACCT_APPEND
:

1034 –
	`≠≥nd_to_chaö
(&
ù_ac˘_chaö
,
‰wl
,
Àn
));

1035 
IP_ACCT_DELETE
:

1036 –
	`dñ_‰om_chaö
(&
ù_ac˘_chaö
,
‰wl
));

1041 #ifde‡
DEBUG_IP_FIREWALL


1042 
	`¥ötk
("ù_ac˘_˘l: unknow¿ªque° %d\n",
°age
);

1044 (
EINVAL
);

1047 #ifde‡
DEBUG_IP_FIREWALL


1048 
	`¥ötk
("ù_ac˘_˘l: unknow¿ªque° %d\n",
°age
);

1050 (
EINVAL
);

1051 
	}
}

1054 #ifde‡
CONFIG_IP_FIREWALL


1055 
	$ù_fw_˘l
(
°age
, *
m
, 
Àn
)

1057 
cmd
, 
fwty≥
;

1059 
cmd
 = 
°age
 & 
IP_FW_COMMAND
;

1060 
fwty≥
 = (
°age
 & 
IP_FW_TYPE
Ë>> 
IP_FW_SHIFT
;

1062 i‡–
cmd
 =
IP_FW_FLUSH
 )

1064 
	`‰ì_fw_chaö
(
chaös
[
fwty≥
]);

1068 i‡–
cmd
 =
IP_FW_ZERO
 )

1070 
	`zîo_fw_chaö
(*
chaös
[
fwty≥
]);

1074 i‡–
cmd
 =
IP_FW_POLICY
 )

1076 *
tmp_pﬁicy_±r
;

1077 
tmp_pﬁicy_±r
=(*)
m
;

1078 *
pﬁicõs
[
fwty≥
] = *
tmp_pﬁicy_±r
;

1082 i‡–
cmd
 =
IP_FW_CHECK
 )

1084 
sk_buff
 *
tmp_skb
;

1085 
√t_devi˚
 *
vüdev
;

1086 
ù_fwpkt
 *
ùfwp
;

1087 
ùhdr
 *
ù
;

1088 
hdæí
, 
ªt
;

1090 
hdæí
 = (
ù_fwpkt
) -

1091 (
ö_addr
) -

1092 
IFNAMSIZ
;

1094 i‡–
Àn
 !(
ù_fwpkt
) )

1096 #ifde‡
DEBUG_IP_FIREWALL


1097 
	`¥ötk
("ip_fw_ctl:Üength=%d,Éxpected %d\n",

1098 
Àn
, (
ù_fwpkt
));

1100 –
EINVAL
 );

1103 
ùfwp
 = (
ù_fwpkt
 *)
m
;

1104 
ù
 = &(
ùfwp
->
fwp_ùh
);

1106 i‡–!(
vüdev
 = 
	`dev_gë_by_«me
(
ùfwp
->
fwp_vü«me
)) ) {

1107 #ifde‡
DEBUG_IP_FIREWALL


1108 
	`¥ötk
("ù_fw_˘l: invÆid devi˚ \"%s\"\n", 
ùfwp
->
fwp_vü«me
);

1110 (
EINVAL
);

1111 } i‡–
ù
->
ihl
 !(
ùhdr
) / ()) {

1112 #ifde‡
DEBUG_IP_FIREWALL


1113 
	`¥ötk
("ù_fw_˘l: ip->ihl=%d, w™à%d\n",
ù
->
ihl
,

1114 (
ùhdr
)/());

1116 
	`dev_put
(
vüdev
);

1117 (
EINVAL
);

1123 i‡(
	`¡ohs
(
ù
->
tŸ_Àn
Ë> 
hdæí
)

1124 
ù
->
tŸ_Àn
 = 
	`ht⁄s
(
hdæí
);

1126 i‡((
tmp_skb
 = 
	`Æloc_skb
(
hdæí
, 
GFP_ATOMIC
)Ë=
NULL
) {

1127 #ifde‡
DEBUG_IP_FIREWALL


1128 
	`¥ötk
("ip_fw_ctl:Åmp_skbálloc failure\n");

1130 
	`dev_put
(
vüdev
);

1131 (
EFAULT
);

1133 
	`skb_ª£rve
(
tmp_skb
, 
hdæí
);

1134 
	`skb_push
(
tmp_skb
, 
hdæí
);

1135 
	`mem˝y
(
tmp_skb
->
d©a
, 
ù
, 
hdæí
);

1137 
ªt
 = 
	`ù_fw_chk
(&
tmp_skb
, 
vüdev
, 
NULL
, *
chaös
[
fwty≥
],

1138 *
pﬁicõs
[
fwty≥
], 
IP_FW_MODE_CHK
);

1140 
	`k‰ì_skb
(
tmp_skb
);

1141 
	`dev_put
(
vüdev
);

1143 
ªt
) {

1144 
FW_ACCEPT
:

1146 
FW_REDIRECT
:

1147 (
ECONNABORTED
);

1148 
FW_MASQUERADE
:

1149 (
ECONNRESET
);

1150 
FW_REJECT
:

1151 (
ECONNREFUSED
);

1153 (
ETIMEDOUT
);

1157 i‡–
cmd
 =
IP_FW_MASQ_TIMEOUTS
 )

1158  
	`ù_fw_masq_timeouts
(
m
, 
Àn
);

1165 i‡–
cmd
 =
IP_FW_INSERT
 || cmd =
IP_FW_APPEND
 || cmd =
IP_FW_DELETE
 )

1167 
ù_fw
 *
‰wl
;

1168 
fwty≥
;

1170 
‰wl
=
	`check_ùfw_°ru˘
(
m
,
Àn
);

1171 i‡(
‰wl
==
NULL
)

1172  (
EINVAL
);

1173 
fwty≥
 = (
°age
 & 
IP_FW_TYPE
Ë>> 
IP_FW_SHIFT
;

1175 
cmd
)

1177 
IP_FW_INSERT
:

1178 (
	`ö£π_ö_chaö
(
chaös
[
fwty≥
],
‰wl
,
Àn
));

1179 
IP_FW_APPEND
:

1180 (
	`≠≥nd_to_chaö
(
chaös
[
fwty≥
],
‰wl
,
Àn
));

1181 
IP_FW_DELETE
:

1182 (
	`dñ_‰om_chaö
(
chaös
[
fwty≥
],
‰wl
));

1187 #ifde‡
DEBUG_IP_FIREWALL


1188 
	`¥ötk
("ù_fw_˘l: unknow¿ªque° %d\n",
°age
);

1190 (
EINVAL
);

1194 #ifde‡
DEBUG_IP_FIREWALL


1195 
	`¥ötk
("ù_fw_˘l: unknow¿ªque° %d\n",
°age
);

1197 (
ENOPROTOOPT
);

1198 
	}
}

1201 #i‡
deföed
(
CONFIG_IP_FIREWALL
Ë|| deföed(
CONFIG_IP_ACCT
)

1202 
	$ù_chaö_¥ocöfo
(
°age
, *
buf„r
, **
°¨t
,

1203 
off_t
 
off£t
, 
Àngth
)

1205 
off_t
 
pos
=0, 
begö
=0;

1206 
ù_fw
 *
i
;

1207 
Àn
, 
p
;

1208 
œ°_Àn
 = 0;

1211 
°age
)

1213 #ifde‡
CONFIG_IP_FIREWALL


1214 
IP_FW_IN
:

1215 
i
 = 
ù_fw_ö_chaö
;

1216 
Àn
=
	`•rötf
(
buf„r
, "IP firewall inputÑules, default %d\n",

1217 
ù_fw_ö_pﬁicy
);

1219 
IP_FW_OUT
:

1220 
i
 = 
ù_fw_out_chaö
;

1221 
Àn
=
	`•rötf
(
buf„r
, "IP firewall outputÑules, default %d\n",

1222 
ù_fw_out_pﬁicy
);

1224 
IP_FW_FWD
:

1225 
i
 = 
ù_fw_fwd_chaö
;

1226 
Àn
=
	`•rötf
(
buf„r
, "IP firewall forwardÑules, default %d\n",

1227 
ù_fw_fwd_pﬁicy
);

1230 #ifde‡
CONFIG_IP_ACCT


1231 
IP_FW_ACCT
:

1232 
i
 = 
ù_ac˘_chaö
;

1233 
Àn
=
	`•rötf
(
buf„r
,"IPáccountingÑules\n");

1238 
i
 = 
NULL
;

1239 
Àn
=0;

1243 
	`READ_LOCK
(&
ù_fw_lock
);

1245 
i
!=
NULL
)

1247 
Àn
+=
	`•rötf
(
buf„r
+len,"%08X/%08X->%08X/%08X %.16s %08X %X ",

1248 
	`¡ohl
(
i
->
fw_§c
.
s_addr
),¡ohl(i->
fw_smsk
.s_addr),

1249 
	`¡ohl
(
i
->
fw_d°
.
s_addr
),¡ohl(i->
fw_dmsk
.s_addr),

1250 (
i
->
fw_vü«me
)[0] ? i->fw_vianame : "-",

1251 
	`¡ohl
(
i
->
fw_vü
.
s_addr
), i->
fw_Êg
);

1254 
Àn
+=
	`•rötf
(
buf„r
+len,"%u %u %-20lu %-20lu",

1255 
i
->
fw_n•
,i->
fw_ndp
, i->
fw_p˙t
,i->
fw_b˙t
);

1256 
p
 = 0;Ö < 
IP_FW_MAX_PORTS
;Ö++)

1257 
Àn
+=
	`•rötf
(
buf„r
+Àn, " %u", 
i
->
fw_±s
[
p
]);

1258 
Àn
+=
	`•rötf
(
buf„r
+Àn, " A%02X X%02X", 
i
->
fw_toßnd
, i->
fw_tosx‹
);

1259 
buf„r
[
Àn
++]='\n';

1260 
buf„r
[
Àn
]='\0';

1261 
pos
=
begö
+
Àn
;

1262 if(
pos
<
off£t
)

1264 
Àn
=0;

1265 
begö
=
pos
;

1267 if(
pos
>
off£t
+
Àngth
)

1269 
Àn
 = 
œ°_Àn
;

1272 
œ°_Àn
 = 
Àn
;

1273 
i
=i->
fw_√xt
;

1275 
	`READ_UNLOCK
(&
ù_fw_lock
);

1276 *
°¨t
=
buf„r
+(
off£t
-
begö
);

1277 
Àn
-=(
off£t
-
begö
);

1278 if(
Àn
>
Àngth
)

1279 
Àn
=
Àngth
;

1280  
Àn
;

1281 
	}
}

1284 #ifde‡
CONFIG_IP_ACCT


1285 
	$ù_ac˘_¥ocöfo
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
,

1286 
Àngth
)

1288  
	`ù_chaö_¥ocöfo
(
IP_FW_ACCT
, 
buf„r
,
°¨t
, 
off£t
,
Àngth
);

1289 
	}
}

1292 #ifde‡
CONFIG_IP_FIREWALL


1293 
	$ù_fw_ö_¥ocöfo
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
,

1294 
Àngth
)

1296  
	`ù_chaö_¥ocöfo
(
IP_FW_IN
, 
buf„r
,
°¨t
,
off£t
,
Àngth
);

1297 
	}
}

1299 
	$ù_fw_out_¥ocöfo
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
,

1300 
Àngth
)

1302  
	`ù_chaö_¥ocöfo
(
IP_FW_OUT
, 
buf„r
,
°¨t
,
off£t
,
Àngth
);

1303 
	}
}

1305 
	$ù_fw_fwd_¥ocöfo
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
,

1306 
Àngth
)

1308  
	`ù_chaö_¥ocöfo
(
IP_FW_FWD
, 
buf„r
,
°¨t
,
off£t
,
Àngth
);

1309 
	}
}

1313 #ifde‡
CONFIG_IP_FIREWALL


1318 
	$ùfw_öput_check
(
fúewÆl_›s
 *
this
, 
pf
,

1319 
√t_devi˚
 *
dev
, *
¨g
,

1320 
sk_buff
 **
pskb
)

1322  
	`ù_fw_chk
(
pskb
, 
dev
, 
¨g
, 
ù_fw_ö_chaö
, 
ù_fw_ö_pﬁicy
,

1323 
IP_FW_MODE_FW
);

1324 
	}
}

1326 
	$ùfw_ouçut_check
(
fúewÆl_›s
 *
this
, 
pf
,

1327 
√t_devi˚
 *
dev
, *
¨g
,

1328 
sk_buff
 **
pskb
)

1330  
	`ù_fw_chk
(
pskb
, 
dev
, 
¨g
, 
ù_fw_out_chaö
, 
ù_fw_out_pﬁicy
,

1331 
IP_FW_MODE_FW
);

1332 
	}
}

1334 
	$ùfw_f‹w¨d_check
(
fúewÆl_›s
 *
this
, 
pf
,

1335 
√t_devi˚
 *
dev
, *
¨g
,

1336 
sk_buff
 **
pskb
)

1338  
	`ù_fw_chk
(
pskb
, 
dev
, 
¨g
, 
ù_fw_fwd_chaö
, 
ù_fw_fwd_pﬁicy
,

1339 
IP_FW_MODE_FW
);

1340 
	}
}

1342 #ifde‡
CONFIG_IP_ACCT


1343 
	$ùfw_ac˘_ö
(
fúewÆl_›s
 *
this
, 
pf
, 
√t_devi˚
 *
dev
,

1344 *
¨g
, 
sk_buff
 **
pskb
)

1346  
	`ù_fw_chk
(
pskb
,
dev
,
NULL
,
ù_ac˘_chaö
,0,
IP_FW_MODE_ACCT_IN
);

1347 
	}
}

1349 
	$ùfw_ac˘_out
(
fúewÆl_›s
 *
this
, 
pf
, 
√t_devi˚
 *
dev
,

1350 *
¨g
, 
sk_buff
 **
pskb
)

1352  
	`ù_fw_chk
(
pskb
,
dev
,
NULL
,
ù_ac˘_chaö
,0,
IP_FW_MODE_ACCT_OUT
);

1353 
	}
}

1356 
fúewÆl_›s
 
ùfw_›s
 = {

1357 .
fw_f‹w¨d
 = 
ùfw_f‹w¨d_check
,

1358 .
fw_öput
 = 
ùfw_öput_check
,

1359 .
fw_ouçut
 = 
ùfw_ouçut_check
,

1360 #ifde‡
CONFIG_IP_ACCT


1361 .
fw_ac˘_ö
 = 
ùfw_ac˘_ö
,

1362 .
fw_ac˘_out
 = 
ùfw_ac˘_out
,

1368 #i‡
deföed
(
CONFIG_IP_ACCT
Ë|| deföed(
CONFIG_IP_FIREWALL
)

1370 
	$ùfw_devi˚_evít
(
nŸifõr_block
 *
this
, 
evít
, *
±r
)

1372 
√t_devi˚
 *
dev
=
±r
;

1373 *
dev«me
 = 
dev
->
«me
;

1374 
ù_fw
 *
fw
;

1375 
chn
;

1377 
	`WRITE_LOCK
(&
ù_fw_lock
);

1379 i‡(
evít
 =
NETDEV_UP
) {

1380 
chn
 = 0; ch¿< 
IP_FW_CHAINS
; chn++)

1381 
fw
 = *
chaös
[
chn
]; fw; fw = fw->
fw_√xt
)

1382 i‡((
fw
->
fw_vü«me
)[0] && !
	`°∫cmp
(
dev«me
,

1383 
fw
->
fw_vü«me
, 
IFNAMSIZ
)) {

1384 
	`dev_hﬁd
(
dev
);

1385 
fw
->
fw_vüdev
 = 
dev
;

1387 } i‡(
evít
 =
NETDEV_DOWN
) {

1388 
chn
 = 0; ch¿< 
IP_FW_CHAINS
; chn++)

1389 
fw
 = *
chaös
[
chn
]; fw; fw = fw->
fw_√xt
)

1391 i‡((
fw
->
fw_vü«me
)[0] && !
	`°∫cmp
(
dev«me
,

1392 
fw
->
fw_vü«me
, 
IFNAMSIZ
)){

1393 i‡(
fw
->
fw_vüdev


1394 && 
fw
->
fw_vüdev
 !(
√t_devi˚
 *)-1)

1395 
	`dev_put
(
fw
->
fw_vüdev
);

1396 
fw
->
fw_vüdev
 = (
√t_devi˚
*)-1;

1400 
	`WRITE_UNLOCK
(&
ù_fw_lock
);

1401  
NOTIFY_DONE
;

1402 
	}
}

1404 
nŸifõr_block
 
	gùfw_dev_nŸifõr
 = {

1405 .
nŸifõr_ˇŒ
 = 
ùfw_devi˚_evít
,

1410 
	$ùfw_öô_‹_˛ónup
(
öô
)

1412 
ªt
 = 0;

1414 i‡(!
öô
)

1415 
˛ónup
;

1417 
ªt
 = 
	`ªgi°î_fúewÆl
(
PF_INET
, &
ùfw_›s
);

1418 i‡(
ªt
 < 0)

1419 
˛ónup_nŸhög
;

1421 #ifde‡
CONFIG_IP_ACCT


1422 
	`¥oc_√t_¸óã
("ù_ac˘", 
S_IFREG
 | 
S_IRUGO
 | 
S_IWUSR
, 
ù_ac˘_¥ocöfo
);

1424 
	`¥oc_√t_¸óã
("ù_öput", 
S_IFREG
 | 
S_IRUGO
 | 
S_IWUSR
, 
ù_fw_ö_¥ocöfo
);

1425 
	`¥oc_√t_¸óã
("ù_ouçut", 
S_IFREG
 | 
S_IRUGO
 | 
S_IWUSR
, 
ù_fw_out_¥ocöfo
);

1426 
	`¥oc_√t_¸óã
("ù_f‹w¨d", 
S_IFREG
 | 
S_IRUGO
 | 
S_IWUSR
, 
ù_fw_fwd_¥ocöfo
);

1429 
	`ªgi°î_√tdevi˚_nŸifõr
(&
ùfw_dev_nŸifõr
);

1431 #ifde‡
CONFIG_IP_FIREWALL_NETLINK


1432 
ùfwsk
 = 
	`√éök_kî√l_¸óã
(
NETLINK_FIREWALL
, 
NULL
);

1434  
ªt
;

1436 
˛ónup
:

1437 #ifde‡
CONFIG_IP_FIREWALL_NETLINK


1438 
	`sock_ªÀa£
(
ùfwsk
->
sk_sockë
);

1440 
	`uƒegi°î_√tdevi˚_nŸifõr
(&
ùfw_dev_nŸifõr
);

1442 #ifde‡
CONFIG_IP_ACCT


1443 
	`¥oc_√t_ªmove
("ip_acct");

1445 
	`¥oc_√t_ªmove
("ip_input");

1446 
	`¥oc_√t_ªmove
("ip_output");

1447 
	`¥oc_√t_ªmove
("ip_forward");

1449 
	`‰ì_fw_chaö
(
chaös
[
IP_FW_FWD
]);

1450 
	`‰ì_fw_chaö
(
chaös
[
IP_FW_IN
]);

1451 
	`‰ì_fw_chaö
(
chaös
[
IP_FW_OUT
]);

1452 
	`‰ì_fw_chaö
(
chaös
[
IP_FW_ACCT
]);

1454 
	`uƒegi°î_fúewÆl
(
PF_INET
, &
ùfw_›s
);

1456 
˛ónup_nŸhög
:

1457  
ªt
;

1458 
	}
}

	@ipt_CLASSIFY.c

13 
	~<löux/moduÀ.h
>

14 
	~<löux/skbuff.h
>

15 
	~<löux/ù.h
>

16 
	~<√t/checksum.h
>

18 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

19 
	~<löux/√tfûãr_ùv4/ùt_CLASSIFY.h
>

21 
MODULE_AUTHOR
("Patrick McHardy <kaber@trash.net>");

22 
MODULE_LICENSE
("GPL");

23 
MODULE_DESCRIPTION
("iptables qdisc classificationÅarget module");

26 
	$èrgë
(
sk_buff
 **
pskb
,

27 c⁄° 
√t_devi˚
 *
ö
,

28 c⁄° 
√t_devi˚
 *
out
,

29 
hooknum
,

30 c⁄° *
èrgöfo
,

31 *
u£röfo
)

33 c⁄° 
ùt_˛assify_èrgë_öfo
 *
˛öfo
 = 
èrgöfo
;

35 if((*
pskb
)->
¥i‹ôy
 !
˛öfo
->priority) {

36 (*
pskb
)->
¥i‹ôy
 = 
˛öfo
->priority;

37 (*
pskb
)->
nfˇche
 |
NFC_ALTERED
;

40  
IPT_CONTINUE
;

41 
	}
}

44 
	$checkíåy
(c⁄° *
èbÀ«me
,

45 c⁄° 
ùt_íåy
 *
e
,

46 *
èrgöfo
,

47 
èrgöfosize
,

48 
hook_mask
)

50 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((
ùt_˛assify_èrgë_öfo
))){

51 
	`¥ötk
(
KERN_ERR
 "CLASSIFY: invalid size (%u != %Zu).\n",

52 
èrgöfosize
,

53 
	`IPT_ALIGN
((
ùt_˛assify_èrgë_öfo
)));

57 i‡(
hook_mask
 & ~((1 << 
NF_IP_LOCAL_OUT
Ë| (1 << 
NF_IP_FORWARD
) |

58 (1 << 
NF_IP_POST_ROUTING
))) {

59 
	`¥ötk
(
KERN_ERR
 "CLASSIFY: only valid in LOCAL_OUT, FORWARD "

64 i‡(
	`°rcmp
(
èbÀ«me
, "mangle") != 0) {

65 
	`¥ötk
(
KERN_ERR
 "CLASSIFY: can only be called from "

67 
èbÀ«me
);

72 
	}
}

74 
ùt_èrgë
 
	gùt_˛assify_ªg
 = {

75 .
«me
 = "CLASSIFY",

76 .
	gèrgë
 = 
èrgë
,

77 .
	gcheckíåy
 = 
checkíåy
,

78 .
	gme
 = 
THIS_MODULE
,

81 
__öô
 
	$öô
()

83  
	`ùt_ªgi°î_èrgë
(&
ùt_˛assify_ªg
);

84 
	}
}

86 
__exô
 
	$föi
()

88 
	`ùt_uƒegi°î_èrgë
(&
ùt_˛assify_ªg
);

89 
	}
}

91 
moduÀ_öô
(
öô
);

92 
moduÀ_exô
(
föi
);

	@ipt_DSCP.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/skbuff.h
>

17 
	~<löux/ù.h
>

18 
	~<√t/checksum.h
>

20 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

21 
	~<löux/√tfûãr_ùv4/ùt_DSCP.h
>

23 
MODULE_AUTHOR
("Harald Welte <laforge@netfilter.org>");

24 
MODULE_DESCRIPTION
("iptables DSCP modification module");

25 
MODULE_LICENSE
("GPL");

28 
	$èrgë
(
sk_buff
 **
pskb
,

29 c⁄° 
√t_devi˚
 *
ö
,

30 c⁄° 
√t_devi˚
 *
out
,

31 
hooknum
,

32 c⁄° *
èrgöfo
,

33 *
u£röfo
)

35 c⁄° 
ùt_DSCP_öfo
 *
döfo
 = 
èrgöfo
;

36 
u_öt8_t
 
sh_ds˝
 = ((
döfo
->
ds˝
 << 
IPT_DSCP_SHIFT
Ë& 
IPT_DSCP_MASK
);

39 i‡(((*
pskb
)->
nh
.
ùh
->
tos
 & 
IPT_DSCP_MASK
Ë!
sh_ds˝
) {

40 
u_öt16_t
 
diffs
[2];

42 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, (
ùhdr
)))

43  
NF_DROP
;

45 
diffs
[0] = 
	`ht⁄s
((*
pskb
)->
nh
.
ùh
->
tos
) ^ 0xFFFF;

46 (*
pskb
)->
nh
.
ùh
->
tos
 = ((*pskb)->nh.ùh->to†& ~
IPT_DSCP_MASK
)

47 | 
sh_ds˝
;

48 
diffs
[1] = 
	`ht⁄s
((*
pskb
)->
nh
.
ùh
->
tos
);

49 (*
pskb
)->
nh
.
ùh
->
check


50 
	`csum_fﬁd
(
	`csum_∑πül
((*)
diffs
,

51 (
diffs
),

52 (*
pskb
)->
nh
.
ùh
->
check


54 (*
pskb
)->
nfˇche
 |
NFC_ALTERED
;

56  
IPT_CONTINUE
;

57 
	}
}

60 
	$checkíåy
(c⁄° *
èbÀ«me
,

61 c⁄° 
ùt_íåy
 *
e
,

62 *
èrgöfo
,

63 
èrgöfosize
,

64 
hook_mask
)

66 c⁄° 
u_öt8_t
 
ds˝
 = ((
ùt_DSCP_öfo
 *)
èrgöfo
)->dscp;

68 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((
ùt_DSCP_öfo
))) {

69 
	`¥ötk
(
KERN_WARNING
 "DSCP:Åarginfosize %u != %Zu\n",

70 
èrgöfosize
,

71 
	`IPT_ALIGN
((
ùt_DSCP_öfo
)));

75 i‡(
	`°rcmp
(
èbÀ«me
, "mangle") != 0) {

76 
	`¥ötk
(
KERN_WARNING
 "DSCP: c™ o∆y bêˇŒed from \"m™gÀ\"ÅabÀ,ÇŸ \"%s\"\n", 
èbÀ«me
);

80 i‡((
ds˝
 > 
IPT_DSCP_MAX
)) {

81 
	`¥ötk
(
KERN_WARNING
 "DSCP: ds˝ %x ouào‡ønge\n", 
ds˝
);

86 
	}
}

88 
ùt_èrgë
 
	gùt_ds˝_ªg
 = {

89 .
«me
 = "DSCP",

90 .
	gèrgë
 = 
èrgë
,

91 .
	gcheckíåy
 = 
checkíåy
,

92 .
	gme
 = 
THIS_MODULE
,

95 
__öô
 
	$öô
()

97  
	`ùt_ªgi°î_èrgë
(&
ùt_ds˝_ªg
);

98 
	}
}

100 
__exô
 
	$föi
()

102 
	`ùt_uƒegi°î_èrgë
(&
ùt_ds˝_ªg
);

103 
	}
}

105 
moduÀ_öô
(
öô
);

106 
moduÀ_exô
(
föi
);

	@ipt_ECN.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/skbuff.h
>

14 
	~<löux/ù.h
>

15 
	~<löux/t˝.h
>

16 
	~<√t/checksum.h
>

18 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

19 
	~<löux/√tfûãr_ùv4/ùt_ECN.h
>

21 
MODULE_LICENSE
("GPL");

22 
MODULE_AUTHOR
("Harald Welte <laforge@netfilter.org>");

23 
MODULE_DESCRIPTION
("iptables ECN modification module");

27 
ölöe
 

28 
	$£t_e˘_ù
(
sk_buff
 **
pskb
, c⁄° 
ùt_ECN_öfo
 *
eöfo
)

30 i‡(((*
pskb
)->
nh
.
ùh
->
tos
 & 
IPT_ECN_IP_MASK
)

31 !(
eöfo
->
ù_e˘
 & 
IPT_ECN_IP_MASK
)) {

32 
u_öt16_t
 
diffs
[2];

34 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, (
ùhdr
)))

37 
diffs
[0] = 
	`ht⁄s
((*
pskb
)->
nh
.
ùh
->
tos
) ^ 0xFFFF;

38 (*
pskb
)->
nh
.
ùh
->
tos
 &~
IPT_ECN_IP_MASK
;

39 (*
pskb
)->
nh
.
ùh
->
tos
 |(
eöfo
->
ù_e˘
 & 
IPT_ECN_IP_MASK
);

40 
diffs
[1] = 
	`ht⁄s
((*
pskb
)->
nh
.
ùh
->
tos
);

41 (*
pskb
)->
nh
.
ùh
->
check


42 
	`csum_fﬁd
(
	`csum_∑πül
((*)
diffs
,

43 (
diffs
),

44 (*
pskb
)->
nh
.
ùh
->
check


46 (*
pskb
)->
nfˇche
 |
NFC_ALTERED
;

49 
	}
}

52 
ölöe
 

53 
	$£t_e˘_t˝
(
sk_buff
 **
pskb
, c⁄° 
ùt_ECN_öfo
 *
eöfo
, 
öw¨d
)

55 
t˝hdr
 
t˝h
;

56 
u_öt16_t
 
diffs
[2];

59 i‡(
	`skb_c›y_bôs
(*
pskb
, (*pskb)->
nh
.
ùh
->
ihl
*4, &
t˝h
, (tcph))

63 
diffs
[0] = ((
u_öt16_t
 *)&
t˝h
)[6];

64 i‡(
eöfo
->
›î©i⁄
 & 
IPT_ECN_OP_SET_ECE
)

65 
t˝h
.
e˚
 = 
eöfo
->
¥Ÿo
.
t˝
.ece;

67 i‡(
eöfo
->
›î©i⁄
 & 
IPT_ECN_OP_SET_CWR
)

68 
t˝h
.
cwr
 = 
eöfo
->
¥Ÿo
.
t˝
.cwr;

69 
diffs
[1] = ((
u_öt16_t
 *)&
t˝h
)[6];

72 i‡(
diffs
[0] != diffs[1]) {

73 
diffs
[0] = diffs[0] ^ 0xFFFF;

74 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
,

75 (*
pskb
)->
nh
.
ùh
->
ihl
*4+(
t˝h
)))

77 i‡((*
pskb
)->
ù_summed
 !
CHECKSUM_HW
)

78 
t˝h
.
check
 = 
	`csum_fﬁd
(
	`csum_∑πül
((*)
diffs
,

79 (
diffs
),

80 
t˝h
.
check
^0xFFFF));

81 
	`mem˝y
((*
pskb
)->
d©a
 + (*pskb)->
nh
.
ùh
->
ihl
*4,

82 &
t˝h
, (tcph));

83 i‡((*
pskb
)->
ù_summed
 =
CHECKSUM_HW
)

84 i‡(
	`skb_checksum_hñp
(
pskb
, 
öw¨d
))

86 (*
pskb
)->
nfˇche
 |
NFC_ALTERED
;

89 
	}
}

92 
	$èrgë
(
sk_buff
 **
pskb
,

93 c⁄° 
√t_devi˚
 *
ö
,

94 c⁄° 
√t_devi˚
 *
out
,

95 
hooknum
,

96 c⁄° *
èrgöfo
,

97 *
u£röfo
)

99 c⁄° 
ùt_ECN_öfo
 *
eöfo
 = 
èrgöfo
;

101 i‡(
eöfo
->
›î©i⁄
 & 
IPT_ECN_OP_SET_IP
)

102 i‡(!
	`£t_e˘_ù
(
pskb
, 
eöfo
))

103  
NF_DROP
;

105 i‡(
eöfo
->
›î©i⁄
 & (
IPT_ECN_OP_SET_ECE
 | 
IPT_ECN_OP_SET_CWR
)

106 && (*
pskb
)->
nh
.
ùh
->
¥Ÿocﬁ
 =
IPPROTO_TCP
)

107 i‡(!
	`£t_e˘_t˝
(
pskb
, 
eöfo
, (
out
 =
NULL
)))

108  
NF_DROP
;

110  
IPT_CONTINUE
;

111 
	}
}

114 
	$checkíåy
(c⁄° *
èbÀ«me
,

115 c⁄° 
ùt_íåy
 *
e
,

116 *
èrgöfo
,

117 
èrgöfosize
,

118 
hook_mask
)

120 c⁄° 
ùt_ECN_öfo
 *
eöfo
 = (ùt_ECN_öfÿ*)
èrgöfo
;

122 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((
ùt_ECN_öfo
))) {

123 
	`¥ötk
(
KERN_WARNING
 "ECN:Åarginfosize %u != %Zu\n",

124 
èrgöfosize
,

125 
	`IPT_ALIGN
((
ùt_ECN_öfo
)));

129 i‡(
	`°rcmp
(
èbÀ«me
, "mangle") != 0) {

130 
	`¥ötk
(
KERN_WARNING
 "ECN: c™ o∆y bêˇŒed from \"m™gÀ\"ÅabÀ,ÇŸ \"%s\"\n", 
èbÀ«me
);

134 i‡(
eöfo
->
›î©i⁄
 & 
IPT_ECN_OP_MASK
) {

135 
	`¥ötk
(
KERN_WARNING
 "ECN: unsupported ECN operation %x\n",

136 
eöfo
->
›î©i⁄
);

139 i‡(
eöfo
->
ù_e˘
 & ~
IPT_ECN_IP_MASK
) {

140 
	`¥ötk
(
KERN_WARNING
 "ECN:Çew ECT codepoint %x out of mask\n",

141 
eöfo
->
ù_e˘
);

145 i‡((
eöfo
->
›î©i⁄
 & (
IPT_ECN_OP_SET_ECE
|
IPT_ECN_OP_SET_CWR
))

146 && 
e
->
ù
.
¥Ÿo
 !
IPPROTO_TCP
) {

147 
	`¥ötk
(
KERN_WARNING
 "ECN: cannot use TCP operations oná "

153 
	}
}

155 
ùt_èrgë
 
	gùt_e˙_ªg
 = {

156 .
«me
 = "ECN",

157 .
	gèrgë
 = 
èrgë
,

158 .
	gcheckíåy
 = 
checkíåy
,

159 .
	gme
 = 
THIS_MODULE
,

162 
__öô
 
	$öô
()

164  
	`ùt_ªgi°î_èrgë
(&
ùt_e˙_ªg
);

165 
	}
}

167 
__exô
 
	$föi
()

169 
	`ùt_uƒegi°î_èrgë
(&
ùt_e˙_ªg
);

170 
	}
}

172 
moduÀ_öô
(
öô
);

173 
moduÀ_exô
(
föi
);

	@ipt_FTOS.c

14 
	~<löux/moduÀ.h
>

15 
	~<löux/skbuff.h
>

16 
	~<löux/ù.h
>

17 
	~<√t/checksum.h
>

19 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

20 
	~<löux/√tfûãr_ùv4/ùt_FTOS.h
>

23 
	$èrgë
(
sk_buff
 **
pskb
,

24 
hooknum
,

25 c⁄° 
√t_devi˚
 *
ö
,

26 c⁄° 
√t_devi˚
 *
out
,

27 c⁄° *
èrgöfo
,

28 *
u£röfo
)

30 
ùhdr
 *
ùh
 = (*
pskb
)->
nh
.iph;

31 c⁄° 
ùt_FTOS_öfo
 *
·osöfo
 = 
èrgöfo
;

33 i‡((
ùh
->
tos
 & 
IPTOS_TOS_MASK
Ë!
·osöfo
->
·os
) {

34 
u_öt16_t
 
diffs
[2];

38 i‡(
	`skb_˛⁄ed
(*
pskb
Ë&& !(*pskb)->
sk
) {

39 
sk_buff
 *
nskb
 = 
	`skb_c›y
(*
pskb
, 
GFP_ATOMIC
);

40 i‡(!
nskb
)

41  
NF_DROP
;

42 
	`k‰ì_skb
(*
pskb
);

43 *
pskb
 = 
nskb
;

44 
ùh
 = (*
pskb
)->
nh
.iph;

47 
diffs
[0] = 
	`ht⁄s
(
ùh
->
tos
) ^ 0xFFFF;

48 
ùh
->
tos
 = 
·osöfo
->
·os
;

49 
diffs
[1] = 
	`ht⁄s
(
ùh
->
tos
);

50 
ùh
->
check
 = 
	`csum_fﬁd
(
	`csum_∑πül
((*)
diffs
,

51 (
diffs
),

52 
ùh
->
check
^0xFFFF));

53 (*
pskb
)->
nfˇche
 |
NFC_ALTERED
;

55  
IPT_CONTINUE
;

56 
	}
}

59 
	$checkíåy
(c⁄° *
èbÀ«me
,

60 c⁄° 
ùt_íåy
 *
e
,

61 *
èrgöfo
,

62 
èrgöfosize
,

63 
hook_mask
)

65 c⁄° 
u_öt8_t
 
·os
 = ((
ùt_FTOS_öfo
 *)
èrgöfo
)->ftos;

67 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((
ùt_FTOS_öfo
))) {

68 
	`¥ötk
(
KERN_WARNING
 "FTOS:Åarginfosize %u != %Zu\n",

69 
èrgöfosize
,

70 
	`IPT_ALIGN
((
ùt_FTOS_öfo
)));

74 i‡(
	`°rcmp
(
èbÀ«me
, "mangle") != 0) {

75 
	`¥ötk
(
KERN_WARNING
 "FTOS: c™ o∆y bêˇŒed from \"m™gÀ\"ÅabÀ,ÇŸ \"%s\"\n", 
èbÀ«me
);

80 
	}
}

82 
ùt_èrgë
 
	gùt_·os_ªg


83 { { 
NULL
, NULL }, "FTOS", 
èrgë
, 
checkíåy
, NULL, 
THIS_MODULE
 };

85 
__öô
 
	$öô
()

87 i‡(
	`ùt_ªgi°î_èrgë
(&
ùt_·os_ªg
))

88  -
EINVAL
;

91 
	}
}

93 
__exô
 
	$föi
()

95 
	`ùt_uƒegi°î_èrgë
(&
ùt_·os_ªg
);

96 
	}
}

98 
moduÀ_öô
(
öô
);

99 
moduÀ_exô
(
föi
);

100 
MODULE_LICENSE
("GPL");

	@ipt_LOG.c

13 
	~<löux/moduÀ.h
>

14 
	~<löux/•ölock.h
>

15 
	~<löux/skbuff.h
>

16 
	~<löux/ù.h
>

17 
	~<√t/icmp.h
>

18 
	~<√t/udp.h
>

19 
	~<√t/t˝.h
>

20 
	~<√t/rouã.h
>

22 
	~<löux/√tfûãr.h
>

23 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

24 
	~<löux/√tfûãr_ùv4/ùt_LOG.h
>

26 
MODULE_LICENSE
("GPL");

27 
MODULE_AUTHOR
("Netfilter Core Team <coreteam@netfilter.org>");

28 
MODULE_DESCRIPTION
("iptables syslogÜogging module");

30 
	gnÊog
 = 1;

31 
MODULE_PARM
(
nÊog
, "i");

32 
MODULE_PARM_DESC
(
nÊog
, "registerás internalÇetfilterÜogging module");

35 
	#DEBUGP
 
¥ötk


	)

37 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

41 
•ölock_t
 
	glog_lock
 = 
SPIN_LOCK_UNLOCKED
;

44 
	$dump_∑ckë
(c⁄° 
ùt_log_öfo
 *
öfo
,

45 c⁄° 
sk_buff
 *
skb
,

46 
ùhoff
)

48 
ùhdr
 
ùh
;

50 i‡(
	`skb_c›y_bôs
(
skb
, 
ùhoff
, &
ùh
, (iph)) < 0) {

51 
	`¥ötk
("TRUNCATED");

58 
	`¥ötk
("SRC=%u.%u.%u.%u DST=%u.%u.%u.%u ",

59 
	`NIPQUAD
(
ùh
.
ßddr
), NIPQUAD(ùh.
daddr
));

62 
	`¥ötk
("LEN=%u TOS=0x%02X PREC=0x%02X TTL=%u ID=%u ",

63 
	`¡ohs
(
ùh
.
tŸ_Àn
), iph.
tos
 & 
IPTOS_TOS_MASK
,

64 
ùh
.
tos
 & 
IPTOS_PREC_MASK
, iph.
âl
, 
	`¡ohs
(ùh.
id
));

67 i‡(
	`¡ohs
(
ùh
.
‰ag_off
Ë& 
IP_CE
)

68 
	`¥ötk
("CE ");

69 i‡(
	`¡ohs
(
ùh
.
‰ag_off
Ë& 
IP_DF
)

70 
	`¥ötk
("DF ");

71 i‡(
	`¡ohs
(
ùh
.
‰ag_off
Ë& 
IP_MF
)

72 
	`¥ötk
("MF ");

75 i‡(
	`¡ohs
(
ùh
.
‰ag_off
Ë& 
IP_OFFSET
)

76 
	`¥ötk
("FRAG:%u ", 
	`¡ohs
(
ùh
.
‰ag_off
Ë& 
IP_OFFSET
);

78 i‡((
öfo
->
logÊags
 & 
IPT_LOG_IPOPT
)

79 && 
ùh
.
ihl
 * 4 > (
ùhdr
)) {

80 
›t
[4 * 15 - (
ùhdr
)];

81 
i
, 
›tsize
;

83 
›tsize
 = 
ùh
.
ihl
 * 4 - (
ùhdr
);

84 i‡(
	`skb_c›y_bôs
(
skb
, 
ùhoff
+(
ùh
), 
›t
, 
›tsize
) < 0) {

85 
	`¥ötk
("TRUNCATED");

90 
	`¥ötk
("OPT (");

91 
i
 = 0; i < 
›tsize
; i++)

92 
	`¥ötk
("%02X", 
›t
[
i
]);

93 
	`¥ötk
(") ");

96 
ùh
.
¥Ÿocﬁ
) {

97 
IPPROTO_TCP
: {

98 
t˝hdr
 
t˝h
;

101 
	`¥ötk
("PROTO=TCP ");

103 i‡(
	`¡ohs
(
ùh
.
‰ag_off
Ë& 
IP_OFFSET
)

107 i‡(
	`skb_c›y_bôs
(
skb
, 
ùhoff
+
ùh
.
ihl
*4, &
t˝h
, (tcph))

109 
	`¥ötk
("INCOMPLETE [%u bytes] ",

110 
skb
->
Àn
 - 
ùhoff
 - 
ùh
.
ihl
*4);

115 
	`¥ötk
("SPT=%u DPT=%u ",

116 
	`¡ohs
(
t˝h
.
sour˚
),Çtohs—˝h.
de°
));

118 i‡(
öfo
->
logÊags
 & 
IPT_LOG_TCPSEQ
)

119 
	`¥ötk
("SEQ=%u ACK=%u ",

120 
	`¡ohl
(
t˝h
.
£q
),Çtohl—˝h.
ack_£q
));

122 
	`¥ötk
("WINDOW=%u ", 
	`¡ohs
(
t˝h
.
wödow
));

124 
	`¥ötk
("RES=0x%02x ", (
u8
)(
	`¡ohl
(
	`t˝_Êag_w‹d
(&
t˝h
Ë& 
TCP_RESERVED_BITS
) >> 22));

126 i‡(
t˝h
.
cwr
)

127 
	`¥ötk
("CWR ");

128 i‡(
t˝h
.
e˚
)

129 
	`¥ötk
("ECE ");

130 i‡(
t˝h
.
urg
)

131 
	`¥ötk
("URG ");

132 i‡(
t˝h
.
ack
)

133 
	`¥ötk
("ACK ");

134 i‡(
t˝h
.
psh
)

135 
	`¥ötk
("PSH ");

136 i‡(
t˝h
.
r°
)

137 
	`¥ötk
("RST ");

138 i‡(
t˝h
.
syn
)

139 
	`¥ötk
("SYN ");

140 i‡(
t˝h
.
fö
)

141 
	`¥ötk
("FIN ");

143 
	`¥ötk
("URGP=%u ", 
	`¡ohs
(
t˝h
.
urg_±r
));

145 i‡((
öfo
->
logÊags
 & 
IPT_LOG_TCPOPT
)

146 && 
t˝h
.
doff
 * 4 > (
t˝hdr
)) {

147 
›t
[4 * 15 - (
t˝hdr
)];

148 
i
, 
›tsize
;

150 
›tsize
 = 
t˝h
.
doff
 * 4 - (
t˝hdr
);

151 i‡(
	`skb_c›y_bôs
(
skb
, 
ùhoff
+
ùh
.
ihl
*4 + (
t˝h
),

152 
›t
, 
›tsize
) < 0) {

153 
	`¥ötk
("TRUNCATED");

158 
	`¥ötk
("OPT (");

159 
i
 = 0; i < 
›tsize
; i++)

160 
	`¥ötk
("%02X", 
›t
[
i
]);

161 
	`¥ötk
(") ");

165 
IPPROTO_UDP
: {

166 
udphdr
 
udph
;

169 
	`¥ötk
("PROTO=UDP ");

171 i‡(
	`¡ohs
(
ùh
.
‰ag_off
Ë& 
IP_OFFSET
)

175 i‡(
	`skb_c›y_bôs
(
skb
, 
ùhoff
+
ùh
.
ihl
*4, &
udph
, (udph))

177 
	`¥ötk
("INCOMPLETE [%u bytes] ",

178 
skb
->
Àn
 - 
ùhoff
 - 
ùh
.
ihl
*4);

183 
	`¥ötk
("SPT=%u DPT=%u LEN=%u ",

184 
	`¡ohs
(
udph
.
sour˚
),Çtohs(udph.
de°
),

185 
	`¡ohs
(
udph
.
Àn
));

188 
IPPROTO_ICMP
: {

189 
icmphdr
 
icmph
;

190 
size_t
 
ªquúed_Àn
[
NR_ICMP_TYPES
+1]

191 { [
ICMP_ECHOREPLY
] = 4,

192 [
ICMP_DEST_UNREACH
]

193 8 + (
ùhdr
) + 8,

194 [
ICMP_SOURCE_QUENCH
]

195 8 + (
ùhdr
) + 8,

196 [
ICMP_REDIRECT
]

197 8 + (
ùhdr
) + 8,

198 [
ICMP_ECHO
] = 4,

199 [
ICMP_TIME_EXCEEDED
]

200 8 + (
ùhdr
) + 8,

201 [
ICMP_PARAMETERPROB
]

202 8 + (
ùhdr
) + 8,

203 [
ICMP_TIMESTAMP
] = 20,

204 [
ICMP_TIMESTAMPREPLY
] = 20,

205 [
ICMP_ADDRESS
] = 12,

206 [
ICMP_ADDRESSREPLY
] = 12 };

209 
	`¥ötk
("PROTO=ICMP ");

211 i‡(
	`¡ohs
(
ùh
.
‰ag_off
Ë& 
IP_OFFSET
)

215 i‡(
	`skb_c›y_bôs
(
skb
, 
ùhoff
+
ùh
.
ihl
*4, &
icmph
, (icmph))

217 
	`¥ötk
("INCOMPLETE [%u bytes] ",

218 
skb
->
Àn
 - 
ùhoff
 - 
ùh
.
ihl
*4);

223 
	`¥ötk
("TYPE=%u CODE=%u ", 
icmph
.
ty≥
, icmph.
code
);

226 i‡(
icmph
.
ty≥
 <
NR_ICMP_TYPES


227 && 
ªquúed_Àn
[
icmph
.
ty≥
]

228 && 
skb
->
Àn
-
ùhoff
-
ùh
.
ihl
*4 < 
ªquúed_Àn
[
icmph
.
ty≥
]) {

229 
	`¥ötk
("INCOMPLETE [%u bytes] ",

230 
skb
->
Àn
 - 
ùhoff
 - 
ùh
.
ihl
*4);

234 
icmph
.
ty≥
) {

235 
ICMP_ECHOREPLY
:

236 
ICMP_ECHO
:

238 
	`¥ötk
("ID=%u SEQ=%u ",

239 
	`¡ohs
(
icmph
.
un
.
echo
.
id
),

240 
	`¡ohs
(
icmph
.
un
.
echo
.
£quí˚
));

243 
ICMP_PARAMETERPROB
:

245 
	`¥ötk
("PARAMETER=%u ",

246 
	`¡ohl
(
icmph
.
un
.
g©eway
) >> 24);

248 
ICMP_REDIRECT
:

250 
	`¥ötk
("GATEWAY=%u.%u.%u.%u ",

251 
	`NIPQUAD
(
icmph
.
un
.
g©eway
));

253 
ICMP_DEST_UNREACH
:

254 
ICMP_SOURCE_QUENCH
:

255 
ICMP_TIME_EXCEEDED
:

257 i‡(!
ùhoff
) {

258 
	`¥ötk
("[");

259 
	`dump_∑ckë
(
öfo
, 
skb
,

260 
ùhoff
 + 
ùh
.
ihl
*4+(
icmph
));

261 
	`¥ötk
("] ");

265 i‡(
icmph
.
ty≥
 =
ICMP_DEST_UNREACH


266 && 
icmph
.
code
 =
ICMP_FRAG_NEEDED
)

267 
	`¥ötk
("MTU=%u ", 
	`¡ohs
(
icmph
.
un
.
‰ag
.
mtu
));

272 
IPPROTO_AH
: {

273 
ù_auth_hdr
 
ah
;

275 i‡(
	`¡ohs
(
ùh
.
‰ag_off
Ë& 
IP_OFFSET
)

279 
	`¥ötk
("PROTO=AH ");

282 i‡(
	`skb_c›y_bôs
(
skb
, 
ùhoff
+
ùh
.
ihl
*4, &
ah
, (ah)) < 0) {

283 
	`¥ötk
("INCOMPLETE [%u bytes] ",

284 
skb
->
Àn
 - 
ùhoff
 - 
ùh
.
ihl
*4);

289 
	`¥ötk
("SPI=0x%x ", 
	`¡ohl
(
ah
.
•i
));

292 
IPPROTO_ESP
: {

293 
ù_e•_hdr
 
e•h
;

296 
	`¥ötk
("PROTO=ESP ");

298 i‡(
	`¡ohs
(
ùh
.
‰ag_off
Ë& 
IP_OFFSET
)

302 i‡(
	`skb_c›y_bôs
(
skb
, 
ùhoff
+
ùh
.
ihl
*4, &
e•h
, (esph))

304 
	`¥ötk
("INCOMPLETE [%u bytes] ",

305 
skb
->
Àn
 - 
ùhoff
 - 
ùh
.
ihl
*4);

310 
	`¥ötk
("SPI=0x%x ", 
	`¡ohl
(
e•h
.
•i
));

315 
	`¥ötk
("PROTO=%u ", 
ùh
.
¥Ÿocﬁ
);

330 
	}
}

333 
	$ùt_log_∑ckë
(
hooknum
,

334 c⁄° 
sk_buff
 *
skb
,

335 c⁄° 
√t_devi˚
 *
ö
,

336 c⁄° 
√t_devi˚
 *
out
,

337 c⁄° 
ùt_log_öfo
 *
logöfo
,

338 c⁄° *
Àvñ_°rög
,

339 c⁄° *
¥efix
)

341 
	`•ö_lock_bh
(&
log_lock
);

342 
	`¥ötk
(
Àvñ_°rög
);

343 
	`¥ötk
("%sIN=%s OUT=%s ",

344 
¥efix
 =
NULL
 ? 
logöfo
->prefix :Örefix,

345 
ö
 ? in->
«me
 : "",

346 
out
 ? out->
«me
 : "");

347 #ifde‡
CONFIG_BRIDGE_NETFILTER


348 i‡(
skb
->
nf_bridge
) {

349 
√t_devi˚
 *
physödev
 = 
skb
->
nf_bridge
->physindev;

350 
√t_devi˚
 *
physoutdev
 = 
skb
->
nf_bridge
->physoutdev;

352 i‡(
physödev
 && 
ö
 !=Öhysindev)

353 
	`¥ötk
("PHYSIN=%†", 
physödev
->
«me
);

354 i‡(
physoutdev
 && 
out
 !=Öhysoutdev)

355 
	`¥ötk
("PHYSOUT=%†", 
physoutdev
->
«me
);

359 i‡(
ö
 && !
out
) {

361 
	`¥ötk
("MAC=");

362 i‡(
skb
->
dev
 && skb->dev->
h¨d_hódî_Àn


363 && 
skb
->
mac
.
øw
 !(*)skb->
nh
.
ùh
) {

364 
i
;

365 *
p
 = 
skb
->
mac
.
øw
;

366 
i
 = 0; i < 
skb
->
dev
->
h¨d_hódî_Àn
; i++,
p
++)

367 
	`¥ötk
("%02x%c", *
p
,

368 
i
==
skb
->
dev
->
h¨d_hódî_Àn
 - 1

371 
	`¥ötk
(" ");

374 
	`dump_∑ckë
(
logöfo
, 
skb
, 0);

375 
	`¥ötk
("\n");

376 
	`•ö_u∆ock_bh
(&
log_lock
);

377 
	}
}

380 
	$ùt_log_èrgë
(
sk_buff
 **
pskb
,

381 c⁄° 
√t_devi˚
 *
ö
,

382 c⁄° 
√t_devi˚
 *
out
,

383 
hooknum
,

384 c⁄° *
èrgöfo
,

385 *
u£röfo
)

387 c⁄° 
ùt_log_öfo
 *
logöfo
 = 
èrgöfo
;

388 
Àvñ_°rög
[4] = "< >";

390 
Àvñ_°rög
[1] = '0' + (
logöfo
->
Àvñ
 % 8);

391 
	`ùt_log_∑ckë
(
hooknum
, *
pskb
, 
ö
, 
out
, 
logöfo
, 
Àvñ_°rög
, 
NULL
);

393  
IPT_CONTINUE
;

394 
	}
}

397 
	$ùt_log‚
(
hooknum
,

398 c⁄° 
sk_buff
 *
skb
,

399 c⁄° 
√t_devi˚
 *
ö
,

400 c⁄° 
√t_devi˚
 *
out
,

401 c⁄° *
¥efix
)

403 
ùt_log_öfo
 
logöfo
 = {

404 .
Àvñ
 = 0,

405 .
logÊags
 = 
IPT_LOG_MASK
,

406 .
¥efix
 = ""

409 
	`ùt_log_∑ckë
(
hooknum
, 
skb
, 
ö
, 
out
, &
logöfo
, 
KERN_WARNING
, 
¥efix
);

410 
	}
}

412 
	$ùt_log_checkíåy
(c⁄° *
èbÀ«me
,

413 c⁄° 
ùt_íåy
 *
e
,

414 *
èrgöfo
,

415 
èrgöfosize
,

416 
hook_mask
)

418 c⁄° 
ùt_log_öfo
 *
logöfo
 = 
èrgöfo
;

420 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((
ùt_log_öfo
))) {

421 
	`DEBUGP
("LOG:Åarginfosize %u != %u\n",

422 
èrgöfosize
, 
	`IPT_ALIGN
((
ùt_log_öfo
)));

426 i‡(
logöfo
->
Àvñ
 >= 8) {

427 
	`DEBUGP
("LOG:Üevñ %u >8\n", 
logöfo
->
Àvñ
);

431 i‡(
logöfo
->
¥efix
[(loginfo->prefix)-1] != '\0') {

432 
	`DEBUGP
("LOG:ÖrefixÅerm %i\n",

433 
logöfo
->
¥efix
[(loginfo->prefix)-1]);

438 
	}
}

440 
ùt_èrgë
 
	gùt_log_ªg
 = {

441 .
«me
 = "LOG",

442 .
	gèrgë
 = 
ùt_log_èrgë
,

443 .
	gcheckíåy
 = 
ùt_log_checkíåy
,

444 .
	gme
 = 
THIS_MODULE
,

447 
__öô
 
	$öô
()

449 i‡(
	`ùt_ªgi°î_èrgë
(&
ùt_log_ªg
))

450  -
EINVAL
;

451 i‡(
nÊog
)

452 
	`nf_log_ªgi°î
(
PF_INET
, &
ùt_log‚
);

455 
	}
}

457 
__exô
 
	$föi
()

459 i‡(
nÊog
)

460 
	`nf_log_uƒegi°î
(
PF_INET
, &
ùt_log‚
);

461 
	`ùt_uƒegi°î_èrgë
(&
ùt_log_ªg
);

462 
	}
}

464 
moduÀ_öô
(
öô
);

465 
moduÀ_exô
(
föi
);

	@ipt_LOG.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ipt_MARK.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/skbuff.h
>

12 
	~<löux/ù.h
>

13 
	~<√t/checksum.h
>

15 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

16 
	~<löux/√tfûãr_ùv4/ùt_MARK.h
>

18 
MODULE_LICENSE
("GPL");

19 
MODULE_AUTHOR
("Marc Boucher <marc@mbsi.ca>");

20 
MODULE_DESCRIPTION
("iptables MARK modification module");

23 
	$èrgë
(
sk_buff
 **
pskb
,

24 c⁄° 
√t_devi˚
 *
ö
,

25 c⁄° 
√t_devi˚
 *
out
,

26 
hooknum
,

27 c⁄° *
èrgöfo
,

28 *
u£röfo
)

30 c⁄° 
ùt_m¨k_èrgë_öfo
 *
m¨köfo
 = 
èrgöfo
;

32 if((*
pskb
)->
nfm¨k
 !
m¨köfo
->
m¨k
) {

33 (*
pskb
)->
nfm¨k
 = 
m¨köfo
->
m¨k
;

34 (*
pskb
)->
nfˇche
 |
NFC_ALTERED
;

36  
IPT_CONTINUE
;

37 
	}
}

40 
	$checkíåy
(c⁄° *
èbÀ«me
,

41 c⁄° 
ùt_íåy
 *
e
,

42 *
èrgöfo
,

43 
èrgöfosize
,

44 
hook_mask
)

46 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((
ùt_m¨k_èrgë_öfo
))) {

47 
	`¥ötk
(
KERN_WARNING
 "MARK:Åarginfosize %u != %Zu\n",

48 
èrgöfosize
,

49 
	`IPT_ALIGN
((
ùt_m¨k_èrgë_öfo
)));

53 i‡(
	`°rcmp
(
èbÀ«me
, "mangle") != 0) {

54 
	`¥ötk
(
KERN_WARNING
 "MARK: c™ o∆y bêˇŒed from \"m™gÀ\"ÅabÀ,ÇŸ \"%s\"\n", 
èbÀ«me
);

59 
	}
}

61 
ùt_èrgë
 
	gùt_m¨k_ªg
 = {

62 .
«me
 = "MARK",

63 .
	gèrgë
 = 
èrgë
,

64 .
	gcheckíåy
 = 
checkíåy
,

65 .
	gme
 = 
THIS_MODULE
,

68 
__öô
 
	$öô
()

70  
	`ùt_ªgi°î_èrgë
(&
ùt_m¨k_ªg
);

71 
	}
}

73 
__exô
 
	$föi
()

75 
	`ùt_uƒegi°î_èrgë
(&
ùt_m¨k_ªg
);

76 
	}
}

78 
moduÀ_öô
(
öô
);

79 
moduÀ_exô
(
föi
);

	@ipt_MARK.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ipt_MASQUERADE.c

12 
	~<löux/c⁄fig.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/ù.h
>

15 
	~<löux/timî.h
>

16 
	~<löux/moduÀ.h
>

17 
	~<löux/√tfûãr.h
>

18 
	~<√t/¥Ÿocﬁ.h
>

19 
	~<√t/ù.h
>

20 
	~<√t/checksum.h
>

21 
	~<löux/√tfûãr_ùv4.h
>

22 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

23 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

25 
MODULE_LICENSE
("GPL");

26 
MODULE_AUTHOR
("Netfilter Core Team <coreteam@netfilter.org>");

27 
MODULE_DESCRIPTION
("iptables MASQUERADEÅarget module");

30 
	#DEBUGP
 
¥ötk


	)

32 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

36 
DECLARE_RWLOCK
(
masq_lock
);

40 
	$masquîade_check
(c⁄° *
èbÀ«me
,

41 c⁄° 
ùt_íåy
 *
e
,

42 *
èrgöfo
,

43 
èrgöfosize
,

44 
hook_mask
)

46 c⁄° 
ù_«t_mu…i_ønge
 *
mr
 = 
èrgöfo
;

48 i‡(
	`°rcmp
(
èbÀ«me
, "nat") != 0) {

49 
	`DEBUGP
("masquîade_check: badÅabÀ `%s'.\n", 
èbÀ«me
);

52 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((*
mr
))) {

53 
	`DEBUGP
("masquerade_check: size %u != %u.\n",

54 
èrgöfosize
, (*
mr
));

57 i‡(
hook_mask
 & ~(1 << 
NF_IP_POST_ROUTING
)) {

58 
	`DEBUGP
("masquîade_check: bad hook†%x.\n", 
hook_mask
);

61 i‡(
mr
->
ønge
[0].
Êags
 & 
IP_NAT_RANGE_MAP_IPS
) {

62 
	`DEBUGP
("masquerade_check: bad MAP_IPS.\n");

65 i‡(
mr
->
øngesize
 != 1) {

66 
	`DEBUGP
("masquîade_check: badÑ™gesizê%u.\n", 
mr
->
øngesize
);

70 
	}
}

73 
	$masquîade_èrgë
(
sk_buff
 **
pskb
,

74 c⁄° 
√t_devi˚
 *
ö
,

75 c⁄° 
√t_devi˚
 *
out
,

76 
hooknum
,

77 c⁄° *
èrgöfo
,

78 *
u£röfo
)

80 
ù_c⁄¡øck
 *
˘
;

81 
ù_c⁄¡øck_öfo
 
˘öfo
;

82 c⁄° 
ù_«t_mu…i_ønge
 *
mr
;

83 
ù_«t_mu…i_ønge
 
√wønge
;

84 
u_öt32_t
 
√w§c
;

85 
πabÀ
 *
π
;

87 
	`IP_NF_ASSERT
(
hooknum
 =
NF_IP_POST_ROUTING
);

91 i‡((*
pskb
)->
sk
)

92  
NF_ACCEPT
;

94 
˘
 = 
	`ù_c⁄¡øck_gë
(*
pskb
, &
˘öfo
);

95 
	`IP_NF_ASSERT
(
˘
 && (
˘öfo
 =
IP_CT_NEW


96 || 
˘öfo
 =
IP_CT_RELATED
));

98 
mr
 = 
èrgöfo
;

101 
Êowi
 
Ê
 = { .
∆_u
 = { .
ù4_u
 =

102 { .
daddr
 = (*
pskb
)->
nh
.
ùh
->daddr,

103 .
tos
 = (
	`RT_TOS
((*
pskb
)->
nh
.
ùh
->tos) |

104 
RTO_CONN
),

105 #ifde‡
CONFIG_IP_ROUTE_FWMARK


106 .
fwm¨k
 = (*
pskb
)->
nfm¨k


109 i‡(
	`ù_rouã_ouçut_key
(&
π
, &
Ê
) != 0) {

111 i‡(
	`√t_øãlimô
())

112 
	`¥ötk
("MASQUERADE:"

114  
NF_DROP
;

116 i‡(
π
->
u
.
d°
.
dev
 !
out
) {

117 i‡(
	`√t_øãlimô
())

118 
	`¥ötk
("MASQUERADE:"

120 
	`ù_π_put
(
π
);

121  
NF_DROP
;

125 
√w§c
 = 
π
->
π_§c
;

126 
	`DEBUGP
("√w§¯%u.%u.%u.%u\n", 
	`NIPQUAD
(
√w§c
));

127 
	`ù_π_put
(
π
);

129 
	`WRITE_LOCK
(&
masq_lock
);

130 
˘
->
«t
.
masq_ödex
 = 
out
->
ifödex
;

131 
	`WRITE_UNLOCK
(&
masq_lock
);

134 
√wønge
 = ((
ù_«t_mu…i_ønge
)

135 { 1, { { 
mr
->
ønge
[0].
Êags
 | 
IP_NAT_RANGE_MAP_IPS
,

136 
√w§c
,Çewsrc,

137 
mr
->
ønge
[0].
mö
, mr->ønge[0].
max
 } } });

140  
	`ù_«t_£tup_öfo
(
˘
, &
√wønge
, 
hooknum
);

141 
	}
}

143 
ölöe
 

144 
	$devi˚_cmp
(c⁄° 
ù_c⁄¡øck
 *
i
, *
_öa
)

146 
ªt
 = 0;

147 
ö_iÁddr
 *
öa
 = 
_öa
;

149 
	`READ_LOCK
(&
masq_lock
);

152 i‡(
i
->
«t
.
masq_ödex
 =
öa
->
iÁ_dev
->
dev
->
ifödex


153 && 
i
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
 !
öa
->
iÁ_addªss
)

154 
ªt
 = 1;

155 
	`READ_UNLOCK
(&
masq_lock
);

157  
ªt
;

158 
	}
}

160 
	$masq_öë_evít
(
nŸifõr_block
 *
this
,

161 
evít
,

162 *
±r
)

167 i‡(
evít
 =
NETDEV_UP
)

168 
	`ù_˘_£À˘ive_˛ónup
(
devi˚_cmp
, 
±r
);

170  
NOTIFY_DONE
;

171 
	}
}

173 
nŸifõr_block
 
	gmasq_öë_nŸifõr
 = {

174 .
nŸifõr_ˇŒ
 = 
masq_öë_evít
,

177 
ùt_èrgë
 
	gmasquîade
 = {

178 .
«me
 = "MASQUERADE",

179 .
	gèrgë
 = 
masquîade_èrgë
,

180 .
	gcheckíåy
 = 
masquîade_check
,

181 .
	gme
 = 
THIS_MODULE
,

184 
__öô
 
	$öô
()

186 
ªt
;

188 
ªt
 = 
	`ùt_ªgi°î_èrgë
(&
masquîade
);

190 i‡(
ªt
 == 0)

192 
	`ªgi°î_öëaddr_nŸifõr
(&
masq_öë_nŸifõr
);

194  
ªt
;

195 
	}
}

197 
__exô
 
	$föi
()

199 
	`ùt_uƒegi°î_èrgë
(&
masquîade
);

200 
	`uƒegi°î_öëaddr_nŸifõr
(&
masq_öë_nŸifõr
);

201 
	}
}

203 
moduÀ_öô
(
öô
);

204 
moduÀ_exô
(
föi
);

	@ipt_MASQUERADE.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ipt_NETMAP.c

13 
	~<löux/c⁄fig.h
>

14 
	~<löux/ù.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/√tdevi˚.h
>

17 
	~<löux/√tfûãr.h
>

18 
	~<löux/√tfûãr_ùv4.h
>

19 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

21 
	#MODULENAME
 "NETMAP"

	)

22 
MODULE_LICENSE
("GPL");

23 
MODULE_AUTHOR
("Svenning Soerensen <svenning@post5.tele.dk>");

24 
MODULE_DESCRIPTION
("iptables 1:1 NAT mapping of IPÇetworksÅarget");

27 
	#DEBUGP
 
¥ötk


	)

29 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

33 
	$check
(c⁄° *
èbÀ«me
,

34 c⁄° 
ùt_íåy
 *
e
,

35 *
èrgöfo
,

36 
èrgöfosize
,

37 
hook_mask
)

39 c⁄° 
ù_«t_mu…i_ønge
 *
mr
 = 
èrgöfo
;

41 i‡(
	`°rcmp
(
èbÀ«me
, "nat") != 0) {

42 
	`DEBUGP
(
MODULENAME
":check: badÅabÀ `%s'.\n", 
èbÀ«me
);

45 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((*
mr
))) {

46 
	`DEBUGP
(
MODULENAME
":check: sizê%u.\n", 
èrgöfosize
);

49 i‡(
hook_mask
 & ~((1 << 
NF_IP_PRE_ROUTING
Ë| (1 << 
NF_IP_POST_ROUTING
))) {

50 
	`DEBUGP
(
MODULENAME
":check: bad hook†%x.\n", 
hook_mask
);

53 i‡(!(
mr
->
ønge
[0].
Êags
 & 
IP_NAT_RANGE_MAP_IPS
)) {

54 
	`DEBUGP
(
MODULENAME
":check: bad MAP_IPS.\n");

57 i‡(
mr
->
øngesize
 != 1) {

58 
	`DEBUGP
(
MODULENAME
":check: badÑ™gesizê%u.\n", 
mr
->
øngesize
);

62 
	}
}

65 
	$èrgë
(
sk_buff
 **
pskb
,

66 c⁄° 
√t_devi˚
 *
ö
,

67 c⁄° 
√t_devi˚
 *
out
,

68 
hooknum
,

69 c⁄° *
èrgöfo
,

70 *
u£röfo
)

72 
ù_c⁄¡øck
 *
˘
;

73 
ù_c⁄¡øck_öfo
 
˘öfo
;

74 
u_öt32_t
 
√w_ù
, 
√tmask
;

75 c⁄° 
ù_«t_mu…i_ønge
 *
mr
 = 
èrgöfo
;

76 
ù_«t_mu…i_ønge
 
√wønge
;

78 
	`IP_NF_ASSERT
(
hooknum
 =
NF_IP_PRE_ROUTING


79 || 
hooknum
 =
NF_IP_POST_ROUTING
);

80 
˘
 = 
	`ù_c⁄¡øck_gë
(*
pskb
, &
˘öfo
);

82 
√tmask
 = ~(
mr
->
ønge
[0].
mö_ù
 ^ mr->ønge[0].
max_ù
);

84 i‡(
hooknum
 =
NF_IP_PRE_ROUTING
)

85 
√w_ù
 = (*
pskb
)->
nh
.
ùh
->
daddr
 & ~
√tmask
;

87 
√w_ù
 = (*
pskb
)->
nh
.
ùh
->
ßddr
 & ~
√tmask
;

88 
√w_ù
 |
mr
->
ønge
[0].
mö_ù
 & 
√tmask
;

90 
√wønge
 = ((
ù_«t_mu…i_ønge
)

91 { 1, { { 
mr
->
ønge
[0].
Êags
 | 
IP_NAT_RANGE_MAP_IPS
,

92 
√w_ù
,Çew_ip,

93 
mr
->
ønge
[0].
mö
, mr->ønge[0].
max
 } } });

96  
	`ù_«t_£tup_öfo
(
˘
, &
√wønge
, 
hooknum
);

97 
	}
}

99 
ùt_èrgë
 
	gèrgë_moduÀ
 = {

100 .
«me
 = 
MODULENAME
,

101 .
	gèrgë
 = 
èrgë
,

102 .
	gcheckíåy
 = 
check
,

103 .
	gme
 = 
THIS_MODULE


106 
__öô
 
	$öô
()

108  
	`ùt_ªgi°î_èrgë
(&
èrgë_moduÀ
);

109 
	}
}

111 
__exô
 
	$föi
()

113 
	`ùt_uƒegi°î_èrgë
(&
èrgë_moduÀ
);

114 
	}
}

116 
moduÀ_öô
(
öô
);

117 
moduÀ_exô
(
föi
);

	@ipt_NOTRACK.c

4 
	~<löux/moduÀ.h
>

5 
	~<löux/skbuff.h
>

7 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

8 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

11 
	$èrgë
(
sk_buff
 **
pskb
,

12 c⁄° 
√t_devi˚
 *
ö
,

13 c⁄° 
√t_devi˚
 *
out
,

14 
hooknum
,

15 c⁄° *
èrgöfo
,

16 *
u£röfo
)

19 i‡((*
pskb
)->
nf˘
 !
NULL
)

20  
IPT_CONTINUE
;

26 (*
pskb
)->
nf˘
 = &
ù_c⁄¡øck_u¡øcked
.
öfos
[
IP_CT_NEW
];

27 
	`nf_c⁄¡øck_gë
((*
pskb
)->
nf˘
);

29  
IPT_CONTINUE
;

30 
	}
}

33 
	$checkíåy
(c⁄° *
èbÀ«me
,

34 c⁄° 
ùt_íåy
 *
e
,

35 *
èrgöfo
,

36 
èrgöfosize
,

37 
hook_mask
)

39 i‡(
èrgöfosize
 != 0) {

40 
	`¥ötk
(
KERN_WARNING
 "NOTRACK:Åarginfosize %u != 0\n",

41 
èrgöfosize
);

45 i‡(
	`°rcmp
(
èbÀ«me
, "raw") != 0) {

46 
	`¥ötk
(
KERN_WARNING
 "NOTRACK: c™ o∆y bêˇŒed from \"øw\"ÅabÀ,ÇŸ \"%s\"\n", 
èbÀ«me
);

51 
	}
}

53 
ùt_èrgë
 
	gùt_nŸøck_ªg
 = {

54 .
«me
 = "NOTRACK",

55 .
	gèrgë
 = 
èrgë
,

56 .
	gcheckíåy
 = 
checkíåy
,

57 .
	gme
 = 
THIS_MODULE


60 
__öô
 
	$öô
()

62 i‡(
	`ùt_ªgi°î_èrgë
(&
ùt_nŸøck_ªg
))

63  -
EINVAL
;

66 
	}
}

68 
__exô
 
	$föi
()

70 
	`ùt_uƒegi°î_èrgë
(&
ùt_nŸøck_ªg
);

71 
	}
}

73 
moduÀ_öô
(
öô
);

74 
moduÀ_exô
(
föi
);

75 
MODULE_LICENSE
("GPL");

	@ipt_REDIRECT.c

10 
	~<löux/ty≥s.h
>

11 
	~<löux/ù.h
>

12 
	~<löux/timî.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/√tfûãr.h
>

15 
	~<löux/√tdevi˚.h
>

16 
	~<löux/if.h
>

17 
	~<löux/öëdevi˚.h
>

18 
	~<√t/¥Ÿocﬁ.h
>

19 
	~<√t/checksum.h
>

20 
	~<löux/√tfûãr_ùv4.h
>

21 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

23 
MODULE_LICENSE
("GPL");

24 
MODULE_AUTHOR
("Netfilter Core Team <coreteam@netfilter.org>");

25 
MODULE_DESCRIPTION
("iptables REDIRECTÅarget module");

28 
	#DEBUGP
 
¥ötk


	)

30 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

35 
	$ªdúe˘_check
(c⁄° *
èbÀ«me
,

36 c⁄° 
ùt_íåy
 *
e
,

37 *
èrgöfo
,

38 
èrgöfosize
,

39 
hook_mask
)

41 c⁄° 
ù_«t_mu…i_ønge
 *
mr
 = 
èrgöfo
;

43 i‡(
	`°rcmp
(
èbÀ«me
, "nat") != 0) {

44 
	`DEBUGP
("ªdúe˘_check: badÅabÀ `%s'.\n", 
èbÀ
);

47 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((*
mr
))) {

48 
	`DEBUGP
("ªdúe˘_check: sizê%u.\n", 
èrgöfosize
);

51 i‡(
hook_mask
 & ~((1 << 
NF_IP_PRE_ROUTING
Ë| (1 << 
NF_IP_LOCAL_OUT
))) {

52 
	`DEBUGP
("ªdúe˘_check: bad hook†%x.\n", 
hook_mask
);

55 i‡(
mr
->
ønge
[0].
Êags
 & 
IP_NAT_RANGE_MAP_IPS
) {

56 
	`DEBUGP
("redirect_check: bad MAP_IPS.\n");

59 i‡(
mr
->
øngesize
 != 1) {

60 
	`DEBUGP
("ªdúe˘_check: badÑ™gesizê%u.\n", 
mr
->
øngesize
);

64 
	}
}

67 
	$ªdúe˘_èrgë
(
sk_buff
 **
pskb
,

68 c⁄° 
√t_devi˚
 *
ö
,

69 c⁄° 
√t_devi˚
 *
out
,

70 
hooknum
,

71 c⁄° *
èrgöfo
,

72 *
u£röfo
)

74 
ù_c⁄¡øck
 *
˘
;

75 
ù_c⁄¡øck_öfo
 
˘öfo
;

76 
u_öt32_t
 
√wd°
;

77 c⁄° 
ù_«t_mu…i_ønge
 *
mr
 = 
èrgöfo
;

78 
ù_«t_mu…i_ønge
 
√wønge
;

80 
	`IP_NF_ASSERT
(
hooknum
 =
NF_IP_PRE_ROUTING


81 || 
hooknum
 =
NF_IP_LOCAL_OUT
);

83 
˘
 = 
	`ù_c⁄¡øck_gë
(*
pskb
, &
˘öfo
);

84 
	`IP_NF_ASSERT
(
˘
 && (
˘öfo
 =
IP_CT_NEW
 || ctöfÿ=
IP_CT_RELATED
));

87 i‡(
hooknum
 =
NF_IP_LOCAL_OUT
)

88 
√wd°
 = 
	`ht⁄l
(0x7F000001);

90 
ö_devi˚
 *
ödev
;

93 
ödev
 = (
ö_devi˚
 *)(*
pskb
)->
dev
->
ù_±r
;

94 i‡(
ödev
 =
NULL
 || indev->
iÁ_li°
 == NULL)

95  
NF_DROP
;

98 
√wd°
 = 
ödev
->
iÁ_li°
->
iÁ_loˇl
;

102 
√wønge
 = ((
ù_«t_mu…i_ønge
)

103 { 1, { { 
mr
->
ønge
[0].
Êags
 | 
IP_NAT_RANGE_MAP_IPS
,

104 
√wd°
,Çewdst,

105 
mr
->
ønge
[0].
mö
, mr->ønge[0].
max
 } } });

108  
	`ù_«t_£tup_öfo
(
˘
, &
√wønge
, 
hooknum
);

109 
	}
}

111 
ùt_èrgë
 
	gªdúe˘_ªg
 = {

112 .
«me
 = "REDIRECT",

113 .
	gèrgë
 = 
ªdúe˘_èrgë
,

114 .
	gcheckíåy
 = 
ªdúe˘_check
,

115 .
	gme
 = 
THIS_MODULE
,

118 
__öô
 
	$öô
()

120  
	`ùt_ªgi°î_èrgë
(&
ªdúe˘_ªg
);

121 
	}
}

123 
__exô
 
	$föi
()

125 
	`ùt_uƒegi°î_èrgë
(&
ªdúe˘_ªg
);

126 
	}
}

128 
moduÀ_öô
(
öô
);

129 
moduÀ_exô
(
föi
);

	@ipt_REDIRECT.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ipt_REJECT.c

15 
	~<löux/c⁄fig.h
>

16 
	~<löux/moduÀ.h
>

17 
	~<löux/skbuff.h
>

18 
	~<löux/ù.h
>

19 
	~<löux/udp.h
>

20 
	~<löux/icmp.h
>

21 
	~<√t/icmp.h
>

22 
	~<√t/ù.h
>

23 
	~<√t/t˝.h
>

24 
	~<√t/rouã.h
>

25 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

26 
	~<löux/√tfûãr_ùv4/ùt_REJECT.h
>

27 #ifde‡
CONFIG_BRIDGE_NETFILTER


28 
	~<löux/√tfûãr_bridge.h
>

31 
MODULE_LICENSE
("GPL");

32 
MODULE_AUTHOR
("Netfilter Core Team <coreteam@netfilter.org>");

33 
MODULE_DESCRIPTION
("iptables REJECTÅarget module");

36 
	#DEBUGP
 
¥ötk


	)

38 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

44 
	$c⁄√˘i⁄_©èch
(
sk_buff
 *
√w_skb
, 
nf_˘_öfo
 *
nf˘
)

46 (*
©èch
)(
sk_buff
 *, 
nf_˘_öfo
 *);

49 i‡(
nf˘
 && (
©èch
 = 
ù_˘_©èch
Ë!
NULL
) {

50 
	`mb
();

51 
	`©èch
(
√w_skb
, 
nf˘
);

53 
	}
}

55 
ölöe
 
πabÀ
 *
	$rouã_ªvî£
(
sk_buff
 *
skb
, 
hook
)

57 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

58 
d°_íåy
 *
od°
;

59 
Êowi
 
Ê
 = {};

60 
πabÀ
 *
π
;

64 i‡(
hook
 !
NF_IP_FORWARD


65 #ifde‡
CONFIG_BRIDGE_NETFILTER


66 || (
skb
->
nf_bridge
 && skb->nf_bridge->
mask
 & 
BRNF_BRIDGED
)

69 
Ê
.
∆_u
.
ù4_u
.
daddr
 = 
ùh
->
ßddr
;

70 i‡(
hook
 =
NF_IP_LOCAL_IN
)

71 
Ê
.
∆_u
.
ù4_u
.
ßddr
 = 
ùh
->
daddr
;

72 
Ê
.
∆_u
.
ù4_u
.
tos
 = 
	`RT_TOS
(
ùh
->tos);

74 i‡(
	`ù_rouã_ouçut_key
(&
π
, &
Ê
) != 0)

75  
NULL
;

79 
Ê
.
∆_u
.
ù4_u
.
daddr
 = 
ùh
->daddr;

80 i‡(
	`ù_rouã_ouçut_key
(&
π
, &
Ê
) != 0)

81  
NULL
;

83 
od°
 = 
skb
->
d°
;

84 i‡(
	`ù_rouã_öput
(
skb
, 
ùh
->
ßddr
, iph->
daddr
,

85 
	`RT_TOS
(
ùh
->
tos
), 
π
->
u
.
d°
.
dev
) != 0) {

86 
	`d°_ªÀa£
(&
π
->
u
.
d°
);

87  
NULL
;

89 
	`d°_ªÀa£
(&
π
->
u
.
d°
);

90 
π
 = (
πabÀ
 *)
skb
->
d°
;

91 
skb
->
d°
 = 
od°
;

94 i‡(
π
->
u
.
d°
.
îr‹
) {

95 
	`d°_ªÀa£
(&
π
->
u
.
d°
);

96 
π
 = 
NULL
;

99  
π
;

100 
	}
}

103 
	$£nd_ª£t
(
sk_buff
 *
ﬁdskb
, 
hook
)

105 
sk_buff
 *
nskb
;

106 
t˝hdr
 
Ÿ˝h
, *
t˝h
;

107 
πabÀ
 *
π
;

108 
u_öt16_t
 
tmp_p‹t
;

109 
u_öt32_t
 
tmp_addr
;

110 
√eds_ack
;

111 
hh_Àn
;

114 i‡(
ﬁdskb
->
nh
.
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_OFFSET
))

117 i‡(
	`skb_c›y_bôs
(
ﬁdskb
, oldskb->
nh
.
ùh
->
ihl
*4,

118 &
Ÿ˝h
, (otcph)) < 0)

122 i‡(
Ÿ˝h
.
r°
)

126 i‡((
π
 = 
	`rouã_ªvî£
(
ﬁdskb
, 
hook
)Ë=
NULL
)

129 
hh_Àn
 = 
	`LL_RESERVED_SPACE
(
π
->
u
.
d°
.
dev
);

134 
nskb
 = 
	`skb_c›y_ex∑nd
(
ﬁdskb
, 
hh_Àn
, 
	`skb_èûroom
(oldskb),

135 
GFP_ATOMIC
);

136 i‡(!
nskb
) {

137 
	`d°_ªÀa£
(&
π
->
u
.
d°
);

141 
	`d°_ªÀa£
(
nskb
->
d°
);

142 
nskb
->
d°
 = &
π
->
u
.dst;

145 
	`nf_ª£t
(
nskb
);

146 
nskb
->
nfˇche
 = 0;

147 
nskb
->
nfm¨k
 = 0;

148 #ifde‡
CONFIG_BRIDGE_NETFILTER


149 
	`nf_bridge_put
(
nskb
->
nf_bridge
);

150 
nskb
->
nf_bridge
 = 
NULL
;

153 
t˝h
 = (
t˝hdr
 *)((
u_öt32_t
*)
nskb
->
nh
.
ùh
 +Çskb->nh.ùh->
ihl
);

156 
tmp_addr
 = 
nskb
->
nh
.
ùh
->
ßddr
;

157 
nskb
->
nh
.
ùh
->
ßddr
 =Çskb->nh.ùh->
daddr
;

158 
nskb
->
nh
.
ùh
->
daddr
 = 
tmp_addr
;

159 
tmp_p‹t
 = 
t˝h
->
sour˚
;

160 
t˝h
->
sour˚
 =Å˝h->
de°
;

161 
t˝h
->
de°
 = 
tmp_p‹t
;

164 
t˝h
->
doff
 = (
t˝hdr
)/4;

165 
	`skb_åim
(
nskb
,Çskb->
nh
.
ùh
->
ihl
*4 + (
t˝hdr
));

166 
nskb
->
nh
.
ùh
->
tŸ_Àn
 = 
	`ht⁄s
“skb->
Àn
);

168 i‡(
t˝h
->
ack
) {

169 
√eds_ack
 = 0;

170 
t˝h
->
£q
 = 
Ÿ˝h
.
ack_£q
;

171 
t˝h
->
ack_£q
 = 0;

173 
√eds_ack
 = 1;

174 
t˝h
->
ack_£q
 = 
	`ht⁄l
(
	`¡ohl
(
Ÿ˝h
.
£q
Ë+ ot˝h.
syn
 + ot˝h.
fö


175 + 
ﬁdskb
->
Àn
 - oldskb->
nh
.
ùh
->
ihl
*4

176 - (
Ÿ˝h
.
doff
<<2));

177 
t˝h
->
£q
 = 0;

181 ((
u_öt8_t
 *)
t˝h
)[13] = 0;

182 
t˝h
->
r°
 = 1;

183 
t˝h
->
ack
 = 
√eds_ack
;

185 
t˝h
->
wödow
 = 0;

186 
t˝h
->
urg_±r
 = 0;

189 
t˝h
->
check
 = 0;

190 
t˝h
->
check
 = 
	`t˝_v4_check
—˝h, (
t˝hdr
),

191 
nskb
->
nh
.
ùh
->
ßddr
,

192 
nskb
->
nh
.
ùh
->
daddr
,

193 
	`csum_∑πül
((*)
t˝h
,

194 (
t˝hdr
), 0));

197 
nskb
->
nh
.
ùh
->
âl
 = 
MAXTTL
;

199 
nskb
->
nh
.
ùh
->
‰ag_off
 = 
	`ht⁄s
(
IP_DF
);

200 
nskb
->
nh
.
ùh
->
id
 = 0;

203 
nskb
->
nh
.
ùh
->
check
 = 0;

204 
nskb
->
nh
.
ùh
->
check
 = 
	`ù_Á°_csum
((*)nskb->nh.iph,

205 
nskb
->
nh
.
ùh
->
ihl
);

208 i‡(
nskb
->
Àn
 > 
	`d°_pmtu
“skb->
d°
))

209 
‰ì_nskb
;

211 
	`c⁄√˘i⁄_©èch
(
nskb
, 
ﬁdskb
->
nf˘
);

213 
	`NF_HOOK
(
PF_INET
, 
NF_IP_LOCAL_OUT
, 
nskb
, 
NULL
,Çskb->
d°
->
dev
,

214 
ù_föish_ouçut
);

217 
‰ì_nskb
:

218 
	`k‰ì_skb
(
nskb
);

219 
	}
}

221 
	$£nd_uƒóch
(
sk_buff
 *
skb_ö
, 
code
)

223 
ùhdr
 *
ùh
;

224 
udphdr
 *
udph
;

225 
icmphdr
 *
icmph
;

226 
sk_buff
 *
nskb
;

227 
u32
 
ßddr
;

228 
u8
 
tos
;

229 
hh_Àn
, 
Àngth
;

230 
πabÀ
 *
π
 = (πabÀ*)
skb_ö
->
d°
;

231 *
d©a
;

233 i‡(!
π
)

237 i‡(!
	`xæim_Ælow
(&
π
->
u
.
d°
, 1*
HZ
))

240 
ùh
 = 
skb_ö
->
nh
.iph;

243 i‡(
skb_ö
->
pkt_ty≥
!=
PACKET_HOST
)

247 i‡(
π
->
π_Êags
&(
RTCF_BROADCAST
|
RTCF_MULTICAST
))

251 i‡(
ùh
->
‰ag_off
&
	`ht⁄s
(
IP_OFFSET
))

255 i‡(
skb_ö
->
Àn
 < skb_ö->
nh
.
ùh
->
ihl
*4 + 8)

259 i‡(
ùh
->
¥Ÿocﬁ
 =
IPPROTO_UDP


260 && 
skb_ö
->
èû
-(
u8
*)
ùh
 >(
udphdr
)) {

261 
d©Æí
 = 
skb_ö
->
Àn
 - (
ùh
->
ihl
<<2);

262 
udph
 = (
udphdr
 *)((*)
ùh
 + (ùh->
ihl
<<2));

263 i‡(
udph
->
check


264 && 
	`csum_t˝udp_magic
(
ùh
->
ßddr
, iph->
daddr
,

265 
d©Æí
, 
IPPROTO_UDP
,

266 
	`csum_∑πül
((*)
udph
, 
d©Æí
,

272 i‡(
ùh
->
¥Ÿocﬁ
 =
IPPROTO_ICMP


273 && 
skb_ö
->
èû
-(
u8
*)
ùh
 >(
icmphdr
)) {

274 
icmph
 = (
icmphdr
 *)((*)
ùh
 + (ùh->
ihl
<<2));

276 i‡(
	`skb_c›y_bôs
(
skb_ö
, skb_ö->
nh
.
ùh
->
ihl
*4,

277 
icmph
, (*icmph)) < 0)

284 i‡((
icmph
->
ty≥
 < 
ICMP_TIMESTAMP


285 && 
icmph
->
ty≥
 !
ICMP_ECHOREPLY


286 && 
icmph
->
ty≥
 !
ICMP_ECHO
)

287 || 
icmph
->
ty≥
 > 
NR_ICMP_TYPES
)

291 
ßddr
 = 
ùh
->
daddr
;

292 i‡(!(
π
->
π_Êags
 & 
RTCF_LOCAL
))

293 
ßddr
 = 0;

295 
tos
 = (
ùh
->to†& 
IPTOS_TOS_MASK
Ë| 
IPTOS_PREC_INTERNETCONTROL
;

298 
Êowi
 
Ê
 = { .
∆_u
 = { .
ù4_u
 =

299 { .
daddr
 = 
skb_ö
->
nh
.
ùh
->
ßddr
,

300 .
ßddr
 = saddr,

301 .
tos
 = 
	`RT_TOS
(tos) } } };

302 i‡(
	`ù_rouã_ouçut_key
(&
π
, &
Ê
))

306 
Àngth
 = 
skb_ö
->
Àn
 + (
ùhdr
Ë+ (
icmphdr
);

308 i‡(
Àngth
 > 
	`d°_pmtu
(&
π
->
u
.
d°
))

309 
Àngth
 = 
	`d°_pmtu
(&
π
->
u
.
d°
);

310 i‡(
Àngth
 > 576)

311 
Àngth
 = 576;

313 
hh_Àn
 = 
	`LL_RESERVED_SPACE
(
π
->
u
.
d°
.
dev
);

315 
nskb
 = 
	`Æloc_skb
(
hh_Àn
 + 
Àngth
, 
GFP_ATOMIC
);

316 i‡(!
nskb
) {

317 
	`ù_π_put
(
π
);

321 
nskb
->
¥i‹ôy
 = 0;

322 
nskb
->
d°
 = &
π
->
u
.dst;

323 
	`skb_ª£rve
(
nskb
, 
hh_Àn
);

326 
ùh
 = 
nskb
->
nh
.iph

327 (
ùhdr
 *)
	`skb_put
(
nskb
, (iphdr));

328 
ùh
->
vîsi⁄
=4;

329 
ùh
->
ihl
=5;

330 
ùh
->
tos
=tos;

331 
ùh
->
tŸ_Àn
 = 
	`ht⁄s
(
Àngth
);

334 
ùh
->
‰ag_off
 = 0;

336 
ùh
->
âl
 = 
MAXTTL
;

337 
	`ù_£À˘_idít
(
ùh
, &
π
->
u
.
d°
, 
NULL
);

338 
ùh
->
¥Ÿocﬁ
=
IPPROTO_ICMP
;

339 
ùh
->
ßddr
=
π
->
π_§c
;

340 
ùh
->
daddr
=
π
->
π_d°
;

341 
ùh
->
check
=0;

342 
ùh
->
check
 = 
	`ù_Á°_csum
((*)ùh, iph->
ihl
);

345 
icmph
 = 
nskb
->
h
.icmph

346 (
icmphdr
 *)
	`skb_put
(
nskb
, (icmphdr));

347 
icmph
->
ty≥
 = 
ICMP_DEST_UNREACH
;

348 
icmph
->
code
 = code;

349 
icmph
->
un
.
g©eway
 = 0;

350 
icmph
->
checksum
 = 0;

353 
d©a
 = 
	`skb_put
(
nskb
,

354 
Àngth
 - (
ùhdr
Ë- (
icmphdr
));

356 
	`skb_c›y_bôs
(
skb_ö
, 0, 
d©a
,

357 
Àngth
 - (
ùhdr
Ë- (
icmphdr
));

359 
icmph
->
checksum
 = 
	`ù_compuã_csum
((*)icmph,

360 
Àngth
 - (
ùhdr
));

362 
	`c⁄√˘i⁄_©èch
(
nskb
, 
skb_ö
->
nf˘
);

364 
	`NF_HOOK
(
PF_INET
, 
NF_IP_LOCAL_OUT
, 
nskb
, 
NULL
,Çskb->
d°
->
dev
,

365 
ù_föish_ouçut
);

366 
	}
}

368 
	$ªje˘
(
sk_buff
 **
pskb
,

369 c⁄° 
√t_devi˚
 *
ö
,

370 c⁄° 
√t_devi˚
 *
out
,

371 
hooknum
,

372 c⁄° *
èrgöfo
,

373 *
u£röfo
)

375 c⁄° 
ùt_ªje˘_öfo
 *
ªje˘
 = 
èrgöfo
;

379 i‡((*
pskb
)->
nh
.
ùh
->
ihl
<<2 !(
ùhdr
))

380  
NF_DROP
;

385 
ªje˘
->
wôh
) {

386 
IPT_ICMP_NET_UNREACHABLE
:

387 
	`£nd_uƒóch
(*
pskb
, 
ICMP_NET_UNREACH
);

389 
IPT_ICMP_HOST_UNREACHABLE
:

390 
	`£nd_uƒóch
(*
pskb
, 
ICMP_HOST_UNREACH
);

392 
IPT_ICMP_PROT_UNREACHABLE
:

393 
	`£nd_uƒóch
(*
pskb
, 
ICMP_PROT_UNREACH
);

395 
IPT_ICMP_PORT_UNREACHABLE
:

396 
	`£nd_uƒóch
(*
pskb
, 
ICMP_PORT_UNREACH
);

398 
IPT_ICMP_NET_PROHIBITED
:

399 
	`£nd_uƒóch
(*
pskb
, 
ICMP_NET_ANO
);

401 
IPT_ICMP_HOST_PROHIBITED
:

402 
	`£nd_uƒóch
(*
pskb
, 
ICMP_HOST_ANO
);

404 
IPT_ICMP_ADMIN_PROHIBITED
:

405 
	`£nd_uƒóch
(*
pskb
, 
ICMP_PKT_FILTERED
);

407 
IPT_TCP_RESET
:

408 
	`£nd_ª£t
(*
pskb
, 
hooknum
);

409 
IPT_ICMP_ECHOREPLY
:

414  
NF_DROP
;

415 
	}
}

417 
	$check
(c⁄° *
èbÀ«me
,

418 c⁄° 
ùt_íåy
 *
e
,

419 *
èrgöfo
,

420 
èrgöfosize
,

421 
hook_mask
)

423 c⁄° 
ùt_ªje˘_öfo
 *
ªjöfo
 = 
èrgöfo
;

425 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((
ùt_ªje˘_öfo
))) {

426 
	`DEBUGP
("REJECT:Å¨göfosizê%u !0\n", 
èrgöfosize
);

431 i‡(
	`°rcmp
(
èbÀ«me
, "filter") != 0) {

432 
	`DEBUGP
("REJECT: badÅabÀ `%s'.\n", 
èbÀ«me
);

435 i‡((
hook_mask
 & ~((1 << 
NF_IP_LOCAL_IN
)

436 | (1 << 
NF_IP_FORWARD
)

437 | (1 << 
NF_IP_LOCAL_OUT
))) != 0) {

438 
	`DEBUGP
("REJECT: bad hook mask %X\n", 
hook_mask
);

442 i‡(
ªjöfo
->
wôh
 =
IPT_ICMP_ECHOREPLY
) {

443 
	`¥ötk
("REJECT: ECHOREPLYÇoÜonger supported.\n");

445 } i‡(
ªjöfo
->
wôh
 =
IPT_TCP_RESET
) {

447 i‡(
e
->
ù
.
¥Ÿo
 !
IPPROTO_TCP


448 || (
e
->
ù
.
övÊags
 & 
IPT_INV_PROTO
)) {

449 
	`DEBUGP
("REJECT: TCP_RESET invalid forÇon-tcp\n");

455 
	}
}

457 
ùt_èrgë
 
	gùt_ªje˘_ªg
 = {

458 .
«me
 = "REJECT",

459 .
	gèrgë
 = 
ªje˘
,

460 .
	gcheckíåy
 = 
check
,

461 .
	gme
 = 
THIS_MODULE
,

464 
__öô
 
	$öô
()

466  
	`ùt_ªgi°î_èrgë
(&
ùt_ªje˘_ªg
);

467 
	}
}

469 
__exô
 
	$föi
()

471 
	`ùt_uƒegi°î_èrgë
(&
ùt_ªje˘_ªg
);

472 
	}
}

474 
moduÀ_öô
(
öô
);

475 
moduÀ_exô
(
föi
);

	@ipt_SAME.c

26 
	~<löux/ty≥s.h
>

27 
	~<löux/ù.h
>

28 
	~<löux/timî.h
>

29 
	~<löux/moduÀ.h
>

30 
	~<löux/√tfûãr.h
>

31 
	~<löux/√tdevi˚.h
>

32 
	~<löux/if.h
>

33 
	~<löux/öëdevi˚.h
>

34 
	~<√t/¥Ÿocﬁ.h
>

35 
	~<√t/checksum.h
>

36 
	~<löux/√tfûãr_ùv4.h
>

37 
	~<löux/√tfûãr_ùv4/ù_«t_ruÀ.h
>

38 
	~<löux/√tfûãr_ùv4/ùt_SAME.h
>

40 
MODULE_LICENSE
("GPL");

41 
MODULE_AUTHOR
("Martin Josefsson <gandalf@wlug.westbo.se>");

42 
MODULE_DESCRIPTION
("iptables special SNAT module for consistent sourceip");

45 
	#DEBUGP
 
¥ötk


	)

47 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

51 
	$ßme_check
(c⁄° *
èbÀ«me
,

52 c⁄° 
ùt_íåy
 *
e
,

53 *
èrgöfo
,

54 
èrgöfosize
,

55 
hook_mask
)

57 
cou¡
, 
cou¡ess
, 
øngeù
, 
ödex
 = 0;

58 
ùt_ßme_öfo
 *
mr
 = 
èrgöfo
;

60 
mr
->
ùnum
 = 0;

62 i‡(
	`°rcmp
(
èbÀ«me
, "nat") != 0) {

63 
	`DEBUGP
("ßme_check: badÅabÀ `%s'.\n", 
èbÀ«me
);

66 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((*
mr
))) {

67 
	`DEBUGP
("ßme_check: sizê%u.\n", 
èrgöfosize
);

70 i‡(
hook_mask
 & ~(1 << 
NF_IP_PRE_ROUTING
 | 1 << 
NF_IP_POST_ROUTING
)) {

71 
	`DEBUGP
("ßme_check: bad hook†%x.\n", 
hook_mask
);

74 i‡(
mr
->
øngesize
 < 1) {

75 
	`DEBUGP
("same_check:ÇeedátÜeast one destÑange.\n");

78 i‡(
mr
->
øngesize
 > 
IPT_SAME_MAX_RANGE
) {

79 
	`DEBUGP
("same_check:Åoo manyÑanges specified, maximum "

81 
IPT_SAME_MAX_RANGE
);

84 
cou¡
 = 0; cou¡ < 
mr
->
øngesize
; count++) {

85 i‡(
	`¡ohl
(
mr
->
ønge
[
cou¡
].
mö_ù
) >

86 
	`¡ohl
(
mr
->
ønge
[
cou¡
].
max_ù
)) {

87 
	`DEBUGP
("same_check: min_ip isÜargerÅhan max_ip in "

89 
	`NIPQUAD
(
mr
->
ønge
[
cou¡
].
mö_ù
),

90 
	`NIPQUAD
(
mr
->
ønge
[
cou¡
].
max_ù
));

93 i‡(!(
mr
->
ønge
[
cou¡
].
Êags
 & 
IP_NAT_RANGE_MAP_IPS
)) {

94 
	`DEBUGP
("same_check: bad MAP_IPS.\n");

97 
øngeù
 = (
	`¡ohl
(
mr
->
ønge
[
cou¡
].
max_ù
) -

98 
	`¡ohl
(
mr
->
ønge
[
cou¡
].
mö_ù
) + 1);

99 
mr
->
ùnum
 +
øngeù
;

101 
	`DEBUGP
("ßme_check:Ñ™gê%u, i≤um = %u\n", 
cou¡
, 
øngeù
);

103 
	`DEBUGP
("ßme_check:ÅŸÆ i∑ddªs£†%u\n", 
mr
->
ùnum
);

105 
mr
->
ù¨øy
 = 
	`kmÆloc
(((
u_öt32_t
Ë* mr->
ùnum
), 
GFP_KERNEL
);

106 i‡(!
mr
->
ù¨øy
) {

107 
	`DEBUGP
("same_check: Couldn'tállocate %u bytes "

109 ((
u_öt32_t
Ë* 
mr
->
ùnum
), mr->ipnum);

112 
	`DEBUGP
("same_check: Allocated %u bytes for %u ipaddresses.\n",

113 ((
u_öt32_t
Ë* 
mr
->
ùnum
), mr->ipnum);

115 
cou¡
 = 0; cou¡ < 
mr
->
øngesize
; count++) {

116 
cou¡ess
 = 
	`¡ohl
(
mr
->
ønge
[
cou¡
].
mö_ù
);

117 
cou¡ess
 <
	`¡ohl
(
mr
->
ønge
[
cou¡
].
max_ù
);

118 
cou¡ess
++) {

119 
mr
->
ù¨øy
[
ödex
] = 
cou¡ess
;

120 
	`DEBUGP
("same_check: Added ipaddress `%u.%u.%u.%u' "

122 
	`HIPQUAD
(
cou¡ess
), 
ödex
);

123 
ödex
++;

127 
	}
}

130 
	$ßme_de°roy
(*
èrgöfo
,

131 
èrgöfosize
)

133 
ùt_ßme_öfo
 *
mr
 = 
èrgöfo
;

135 
	`k‰ì
(
mr
->
ù¨øy
);

137 
	`DEBUGP
("same_destroy: Deallocated %u bytes for %u ipaddresses.\n",

138 ((
u_öt32_t
Ë* 
mr
->
ùnum
), mr->ipnum);

139 
	}
}

142 
	$ßme_èrgë
(
sk_buff
 **
pskb
,

143 c⁄° 
√t_devi˚
 *
ö
,

144 c⁄° 
√t_devi˚
 *
out
,

145 
hooknum
,

146 c⁄° *
èrgöfo
,

147 *
u£röfo
)

149 
ù_c⁄¡øck
 *
˘
;

150 
ù_c⁄¡øck_öfo
 
˘öfo
;

151 
u_öt32_t
 
tmpù
, 
aödex
, 
√w_ù
;

152 c⁄° 
ùt_ßme_öfo
 *
mr
 = 
èrgöfo
;

153 
ù_«t_mu…i_ønge
 
√wønge
;

154 c⁄° 
ù_c⁄¡øck_tu∂e
 *
t
;

156 
	`IP_NF_ASSERT
(
hooknum
 =
NF_IP_PRE_ROUTING
 ||

157 
hooknum
 =
NF_IP_POST_ROUTING
);

158 
˘
 = 
	`ù_c⁄¡øck_gë
(*
pskb
, &
˘öfo
);

160 
t
 = &
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
;

167 
tmpù
 = 
	`¡ohl
(
t
->
§c
.
ù
);

169 i‡(!(
mr
->
öfo
 & 
IPT_SAME_NODST
))

170 
tmpù
 +
	`¡ohl
(
t
->
d°
.
ù
);

172 
aödex
 = 
tmpù
 % 
mr
->
ùnum
;

174 
√w_ù
 = 
	`ht⁄l
(
mr
->
ù¨øy
[
aödex
]);

176 
	`DEBUGP
("ipt_SAME: src=%u.%u.%u.%u dst=%u.%u.%u.%u, "

178 
	`NIPQUAD
(
t
->
§c
.
ù
), NIPQUAD—->
d°
.ip),

179 
	`NIPQUAD
(
√w_ù
));

182 
√wønge
 = ((
ù_«t_mu…i_ønge
)

183 { 1, { { 
mr
->
ønge
[0].
Êags
 | 
IP_NAT_RANGE_MAP_IPS
,

184 
√w_ù
,Çew_ip,

185 
mr
->
ønge
[0].
mö
, mr->ønge[0].
max
 } } });

188  
	`ù_«t_£tup_öfo
(
˘
, &
√wønge
, 
hooknum
);

189 
	}
}

191 
ùt_èrgë
 
	gßme_ªg
 = {

192 .
«me
 = "SAME",

193 .
	gèrgë
 = 
ßme_èrgë
,

194 .
	gcheckíåy
 = 
ßme_check
,

195 .
	gde°roy
 = 
ßme_de°roy
,

196 .
	gme
 = 
THIS_MODULE
,

199 
__öô
 
	$öô
()

201  
	`ùt_ªgi°î_èrgë
(&
ßme_ªg
);

202 
	}
}

204 
__exô
 
	$föi
()

206 
	`ùt_uƒegi°î_èrgë
(&
ßme_ªg
);

207 
	}
}

209 
moduÀ_öô
(
öô
);

210 
moduÀ_exô
(
föi
);

	@ipt_TCPMSS.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/skbuff.h
>

14 
	~<löux/ù.h
>

15 
	~<√t/t˝.h
>

17 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

18 
	~<löux/√tfûãr_ùv4/ùt_TCPMSS.h
>

20 
MODULE_LICENSE
("GPL");

21 
MODULE_AUTHOR
("Marc Boucher <marc@mbsi.ca>");

22 
MODULE_DESCRIPTION
("iptables TCP MSS modification module");

25 
	#DEBUGP
 
¥ötk


	)

27 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

30 
u_öt16_t


31 
	$chót_check
(
u_öt32_t
 
ﬁdvÆöv
, u_öt32_à
√wvÆ
, 
u_öt16_t
 
ﬁdcheck
)

33 
u_öt32_t
 
diffs
[] = { 
ﬁdvÆöv
, 
√wvÆ
 };

34  
	`csum_fﬁd
(
	`csum_∑πül
((*)
diffs
, (diffs),

35 
ﬁdcheck
^0xFFFF));

36 
	}
}

38 
ölöe
 

39 
	$›éí
(c⁄° 
u_öt8_t
 *
›t
, 
off£t
)

42 i‡(
›t
[
off£t
] <
TCPOPT_NOP
 || opt[offset+1] == 0)  1;

43  
›t
[
off£t
+1];

44 
	}
}

47 
	$ùt_t˝mss_èrgë
(
sk_buff
 **
pskb
,

48 c⁄° 
√t_devi˚
 *
ö
,

49 c⁄° 
√t_devi˚
 *
out
,

50 
hooknum
,

51 c⁄° *
èrgöfo
,

52 *
u£röfo
)

54 c⁄° 
ùt_t˝mss_öfo
 *
t˝mssöfo
 = 
èrgöfo
;

55 
t˝hdr
 *
t˝h
;

56 
ùhdr
 *
ùh
;

57 
u_öt16_t
 
t˝Àn
, 
√wtŸÀn
, 
ﬁdvÆ
, 
√wmss
;

58 
i
;

59 
u_öt8_t
 *
›t
;

61 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, (*pskb)->
Àn
))

62  
NF_DROP
;

64 
ùh
 = (*
pskb
)->
nh
.iph;

65 
t˝Àn
 = (*
pskb
)->
Àn
 - 
ùh
->
ihl
*4;

67 
t˝h
 = (*)
ùh
 + iph->
ihl
*4;

74 i‡(
t˝Àn
 !
t˝h
->
doff
*4) {

75 i‡(
	`√t_øãlimô
())

76 
	`¥ötk
(
KERN_ERR


78 (*
pskb
)->
Àn
);

79  
NF_DROP
;

82 if(
t˝mssöfo
->
mss
 =
IPT_TCPMSS_CLAMP_PMTU
) {

83 if(!(*
pskb
)->
d°
) {

84 i‡(
	`√t_øãlimô
())

85 
	`¥ötk
(
KERN_ERR


87  
NF_DROP
;

90 if(
	`d°_pmtu
((*
pskb
)->
d°
Ë<((
ùhdr
Ë+ (
t˝hdr
))) {

91 i‡(
	`√t_øãlimô
())

92 
	`¥ötk
(
KERN_ERR


93 "ùt_t˝mss_èrgë: unknow¿‹ invÆidÖ©h-MTU (%d)\n", 
	`d°_pmtu
((*
pskb
)->
d°
));

94  
NF_DROP
;

97 
√wmss
 = 
	`d°_pmtu
((*
pskb
)->
d°
Ë- (
ùhdr
Ë- (
t˝hdr
);

99 
√wmss
 = 
t˝mssöfo
->
mss
;

101 
›t
 = (
u_öt8_t
 *)
t˝h
;

102 
i
 = (
t˝hdr
); i < 
t˝h
->
doff
*4; i +
	`›éí
(
›t
, i)){

103 i‡((
›t
[
i
] =
TCPOPT_MSS
) &&

104 ((
t˝h
->
doff
*4 - 
i
Ë>
TCPOLEN_MSS
) &&

105 (
›t
[
i
+1] =
TCPOLEN_MSS
)) {

106 
u_öt16_t
 
ﬁdmss
;

108 
ﬁdmss
 = (
›t
[
i
+2] << 8) | opt[i+3];

110 if((
t˝mssöfo
->
mss
 =
IPT_TCPMSS_CLAMP_PMTU
) &&

111 (
ﬁdmss
 <
√wmss
))

112  
IPT_CONTINUE
;

114 
›t
[
i
+2] = (
√wmss
 & 0xff00) >> 8;

115 
›t
[
i
+3] = (
√wmss
 & 0x00ff);

117 
t˝h
->
check
 = 
	`chót_check
(
	`ht⁄s
(
ﬁdmss
)^0xFFFF,

118 
	`ht⁄s
(
√wmss
),

119 
t˝h
->
check
);

121 
	`DEBUGP
(
KERN_INFO
 "ipt_tcpmss_target: %u.%u.%u.%u:%hu"

124 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
),

125 
	`¡ohs
(
t˝h
->
sour˚
),

126 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
),

127 
	`¡ohs
(
t˝h
->
de°
),

128 
ﬁdmss
, 
√wmss
);

129 
ªtmodifõd
;

136 i‡(
	`skb_èûroom
((*
pskb
)Ë< 
TCPOLEN_MSS
) {

137 
sk_buff
 *
√wskb
;

139 
√wskb
 = 
	`skb_c›y_ex∑nd
(*
pskb
, 
	`skb_hódroom
(*pskb),

140 
TCPOLEN_MSS
, 
GFP_ATOMIC
);

141 i‡(!
√wskb
) {

142 i‡(
	`√t_øãlimô
())

143 
	`¥ötk
(
KERN_ERR
 "ipt_tcpmss_target:"

145  
NF_DROP
;

148 
	`k‰ì_skb
(*
pskb
);

149 *
pskb
 = 
√wskb
;

150 
ùh
 = (*
pskb
)->
nh
.iph;

151 
t˝h
 = (*)
ùh
 + iph->
ihl
*4;

154 
	`skb_put
((*
pskb
), 
TCPOLEN_MSS
);

156 
›t
 = (
u_öt8_t
 *)
t˝h
 + (
t˝hdr
);

157 
	`memmove
(
›t
 + 
TCPOLEN_MSS
, o±, 
t˝Àn
 - (
t˝hdr
));

159 
t˝h
->
check
 = 
	`chót_check
(
	`ht⁄s
(
t˝Àn
) ^ 0xFFFF,

160 
	`ht⁄s
(
t˝Àn
 + 
TCPOLEN_MSS
), 
t˝h
->
check
);

161 
t˝Àn
 +
TCPOLEN_MSS
;

163 
›t
[0] = 
TCPOPT_MSS
;

164 
›t
[1] = 
TCPOLEN_MSS
;

165 
›t
[2] = (
√wmss
 & 0xff00) >> 8;

166 
›t
[3] = (
√wmss
 & 0x00ff);

168 
t˝h
->
check
 = 
	`chót_check
(~0, *((
u_öt32_t
 *)
›t
),Åcph->check);

170 
ﬁdvÆ
 = ((
u_öt16_t
 *)
t˝h
)[6];

171 
t˝h
->
doff
 +
TCPOLEN_MSS
/4;

172 
t˝h
->
check
 = 
	`chót_check
(
ﬁdvÆ
 ^ 0xFFFF,

173 ((
u_öt16_t
 *)
t˝h
)[6],Å˝h->
check
);

175 
√wtŸÀn
 = 
	`ht⁄s
(
	`¡ohs
(
ùh
->
tŸ_Àn
Ë+ 
TCPOLEN_MSS
);

176 
ùh
->
check
 = 
	`chót_check
(ùh->
tŸ_Àn
 ^ 0xFFFF,

177 
√wtŸÀn
, 
ùh
->
check
);

178 
ùh
->
tŸ_Àn
 = 
√wtŸÀn
;

180 
	`DEBUGP
(
KERN_INFO
 "ipt_tcpmss_target: %u.%u.%u.%u:%hu"

182 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
ßddr
),

183 
	`¡ohs
(
t˝h
->
sour˚
),

184 
	`NIPQUAD
((*
pskb
)->
nh
.
ùh
->
daddr
),

185 
	`¡ohs
(
t˝h
->
de°
),

186 
√wmss
);

188 
ªtmodifõd
:

190 
	`BUG_ON
((*
pskb
)->
ù_summed
 =
CHECKSUM_HW
);

192 (*
pskb
)->
nfˇche
 |
NFC_UNKNOWN
 | 
NFC_ALTERED
;

193  
IPT_CONTINUE
;

194 
	}
}

196 
	#TH_SYN
 0x02

	)

198 
ölöe
 
	$föd_syn_m©ch
(c⁄° 
ùt_íåy_m©ch
 *
m
)

200 c⁄° 
ùt_t˝
 *
t˝öfo
 = (c⁄° ùt_t˝ *)
m
->
d©a
;

202 i‡(
	`°rcmp
(
m
->
u
.
kî√l
.
m©ch
->
«me
, "tcp") == 0

203 && (
t˝öfo
->
Êg_cmp
 & 
TH_SYN
)

204 && !(
t˝öfo
->
övÊags
 & 
IPT_TCP_INV_FLAGS
))

208 
	}
}

212 
	$ùt_t˝mss_checkíåy
(c⁄° *
èbÀ«me
,

213 c⁄° 
ùt_íåy
 *
e
,

214 *
èrgöfo
,

215 
èrgöfosize
,

216 
hook_mask
)

218 c⁄° 
ùt_t˝mss_öfo
 *
t˝mssöfo
 = 
èrgöfo
;

220 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((
ùt_t˝mss_öfo
))) {

221 
	`DEBUGP
("ipt_tcpmss_checkentry:Åarginfosize %u != %u\n",

222 
èrgöfosize
, 
	`IPT_ALIGN
((
ùt_t˝mss_öfo
)));

227 if((
t˝mssöfo
->
mss
 =
IPT_TCPMSS_CLAMP_PMTU
) &&

228 ((
hook_mask
 & ~((1 << 
NF_IP_FORWARD
)

229 | (1 << 
NF_IP_LOCAL_OUT
)

230 | (1 << 
NF_IP_POST_ROUTING
))) != 0)) {

231 
	`¥ötk
("TCPMSS:Öath-MTU clamping only supported in FORWARD, OUTPUTánd POSTROUTING hooks\n");

235 i‡(
e
->
ù
.
¥Ÿo
 =
IPPROTO_TCP


236 && !(
e
->
ù
.
övÊags
 & 
IPT_INV_PROTO
)

237 && 
	`IPT_MATCH_ITERATE
(
e
, 
föd_syn_m©ch
))

240 
	`¥ötk
("TCPMSS: Only works on TCP SYNÖackets\n");

242 
	}
}

244 
ùt_èrgë
 
	gùt_t˝mss_ªg
 = {

245 .
«me
 = "TCPMSS",

246 .
	gèrgë
 = 
ùt_t˝mss_èrgë
,

247 .
	gcheckíåy
 = 
ùt_t˝mss_checkíåy
,

248 .
	gme
 = 
THIS_MODULE
,

251 
__öô
 
	$öô
()

253  
	`ùt_ªgi°î_èrgë
(&
ùt_t˝mss_ªg
);

254 
	}
}

256 
__exô
 
	$föi
()

258 
	`ùt_uƒegi°î_èrgë
(&
ùt_t˝mss_ªg
);

259 
	}
}

261 
moduÀ_öô
(
öô
);

262 
moduÀ_exô
(
föi
);

	@ipt_TCPMSS.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ipt_TOS.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/skbuff.h
>

13 
	~<löux/ù.h
>

14 
	~<√t/checksum.h
>

16 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

17 
	~<löux/√tfûãr_ùv4/ùt_TOS.h
>

19 
MODULE_LICENSE
("GPL");

20 
MODULE_AUTHOR
("Netfilter Core Team <coreteam@netfilter.org>");

21 
MODULE_DESCRIPTION
("iptables TOS mangling module");

24 
	$èrgë
(
sk_buff
 **
pskb
,

25 c⁄° 
√t_devi˚
 *
ö
,

26 c⁄° 
√t_devi˚
 *
out
,

27 
hooknum
,

28 c⁄° *
èrgöfo
,

29 *
u£röfo
)

31 c⁄° 
ùt_tos_èrgë_öfo
 *
tosöfo
 = 
èrgöfo
;

33 i‡(((*
pskb
)->
nh
.
ùh
->
tos
 & 
IPTOS_TOS_MASK
Ë!
tosöfo
->tos) {

34 
u_öt16_t
 
diffs
[2];

36 i‡(!
	`skb_ù_make_wrôabÀ
(
pskb
, (
ùhdr
)))

37  
NF_DROP
;

39 
diffs
[0] = 
	`ht⁄s
((*
pskb
)->
nh
.
ùh
->
tos
) ^ 0xFFFF;

40 (*
pskb
)->
nh
.
ùh
->
tos


41 ((*
pskb
)->
nh
.
ùh
->
tos
 & 
IPTOS_PREC_MASK
)

42 | 
tosöfo
->
tos
;

43 
diffs
[1] = 
	`ht⁄s
((*
pskb
)->
nh
.
ùh
->
tos
);

44 (*
pskb
)->
nh
.
ùh
->
check


45 
	`csum_fﬁd
(
	`csum_∑πül
((*)
diffs
,

46 (
diffs
),

47 (*
pskb
)->
nh
.
ùh
->
check


49 (*
pskb
)->
nfˇche
 |
NFC_ALTERED
;

51  
IPT_CONTINUE
;

52 
	}
}

55 
	$checkíåy
(c⁄° *
èbÀ«me
,

56 c⁄° 
ùt_íåy
 *
e
,

57 *
èrgöfo
,

58 
èrgöfosize
,

59 
hook_mask
)

61 c⁄° 
u_öt8_t
 
tos
 = ((
ùt_tos_èrgë_öfo
 *)
èrgöfo
)->tos;

63 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((
ùt_tos_èrgë_öfo
))) {

64 
	`¥ötk
(
KERN_WARNING
 "TOS:Åarginfosize %u != %Zu\n",

65 
èrgöfosize
,

66 
	`IPT_ALIGN
((
ùt_tos_èrgë_öfo
)));

70 i‡(
	`°rcmp
(
èbÀ«me
, "mangle") != 0) {

71 
	`¥ötk
(
KERN_WARNING
 "TOS: c™ o∆y bêˇŒed from \"m™gÀ\"ÅabÀ,ÇŸ \"%s\"\n", 
èbÀ«me
);

75 i‡(
tos
 !
IPTOS_LOWDELAY


76 && 
tos
 !
IPTOS_THROUGHPUT


77 && 
tos
 !
IPTOS_RELIABILITY


78 && 
tos
 !
IPTOS_MINCOST


79 && 
tos
 !
IPTOS_NORMALSVC
) {

80 
	`¥ötk
(
KERN_WARNING
 "TOS: badÅo†vÆuê%#x\n", 
tos
);

85 
	}
}

87 
ùt_èrgë
 
	gùt_tos_ªg
 = {

88 .
«me
 = "TOS",

89 .
	gèrgë
 = 
èrgë
,

90 .
	gcheckíåy
 = 
checkíåy
,

91 .
	gme
 = 
THIS_MODULE
,

94 
__öô
 
	$öô
()

96  
	`ùt_ªgi°î_èrgë
(&
ùt_tos_ªg
);

97 
	}
}

99 
__exô
 
	$föi
()

101 
	`ùt_uƒegi°î_èrgë
(&
ùt_tos_ªg
);

102 
	}
}

104 
moduÀ_öô
(
öô
);

105 
moduÀ_exô
(
föi
);

	@ipt_ULOG.c

43 
	~<löux/moduÀ.h
>

44 
	~<löux/c⁄fig.h
>

45 
	~<löux/•ölock.h
>

46 
	~<löux/sockë.h
>

47 
	~<löux/skbuff.h
>

48 
	~<löux/kî√l.h
>

49 
	~<löux/timî.h
>

50 
	~<löux/√éök.h
>

51 
	~<löux/√tdevi˚.h
>

52 
	~<löux/mm.h
>

53 
	~<löux/√tfûãr.h
>

54 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

55 
	~<löux/√tfûãr_ùv4/ùt_ULOG.h
>

56 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

57 
	~<√t/sock.h
>

58 
	~<löux/bô›s.h
>

60 
MODULE_LICENSE
("GPL");

61 
MODULE_AUTHOR
("Harald Welte <laforge@gnumonks.org>");

62 
MODULE_DESCRIPTION
("iptables userspaceÜogging module");

64 
	#ULOG_NL_EVENT
 111

	)

65 
	#ULOG_MAXNLGROUPS
 32

	)

68 
	#DEBUGP
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
("%s:%s:" format, \

69 
__FILE__
, 
__FUNCTION__
 , ## 
¨gs
)

	)

71 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

74 
	#PRINTR
(
f‹m©
, 
¨gs
...Ëdÿ{ i‡(
	`√t_øãlimô
()Ë
	`¥ötk
(f‹m© , ##árgs); } 0)

	)

76 
	g∆bufsiz
 = 4096;

77 
MODULE_PARM
(
∆bufsiz
, "i");

78 
MODULE_PARM_DESC
(
∆bufsiz
, "netlink buffer size");

80 
	gÊushtimeout
 = 10 * 
HZ
;

81 
MODULE_PARM
(
Êushtimeout
, "i");

82 
MODULE_PARM_DESC
(
Êushtimeout
, "buffer flushÅimeout");

84 
	gnÊog
 = 1;

85 
MODULE_PARM
(
nÊog
, "i");

86 
MODULE_PARM_DESC
(
nÊog
, "registerás internalÇetfilterÜogging module");

91 
	mqÀn
;

92 
∆msghdr
 *
	mœ°∆h
;

93 
sk_buff
 *
	mskb
;

94 
timî_li°
 
	mtimî
;

95 } 
	tulog_buff_t
;

97 
ulog_buff_t
 
	gulog_buf„rs
[
ULOG_MAXNLGROUPS
];

99 
sock
 *
	gnÊog∆
;

100 
size_t
 
	gqÀn
;

101 
DECLARE_LOCK
(
ulog_lock
);

104 
	$ulog_£nd
(
∆grou≤um
)

106 
ulog_buff_t
 *
ub
 = &
ulog_buf„rs
[
∆grou≤um
];

108 i‡(
	`timî_≥ndög
(&
ub
->
timî
)) {

109 
	`DEBUGP
("ipt_ULOG: ulog_send:Åimer wasÖending, deleting\n");

110 
	`dñ_timî
(&
ub
->
timî
);

114 i‡(
ub
->
qÀn
 > 1)

115 
ub
->
œ°∆h
->
∆msg_ty≥
 = 
NLMSG_DONE
;

117 
	`NETLINK_CB
(
ub
->
skb
).
d°_groups
 = (1 << 
∆grou≤um
);

118 
	`DEBUGP
("ipt_ULOG:Åhrowing %dÖacketsÅoÇetlink mask %u\n",

119 
ub
->
qÀn
, 
∆group
);

120 
	`√éök_brﬂdˇ°
(
nÊog∆
, 
ub
->
skb
, 0, (1 << 
∆grou≤um
), 
GFP_ATOMIC
);

122 
ub
->
qÀn
 = 0;

123 
ub
->
skb
 = 
NULL
;

124 
ub
->
œ°∆h
 = 
NULL
;

126 
	}
}

130 
	$ulog_timî
(
d©a
)

132 
	`DEBUGP
("ipt_ULOG:Åimer function called, calling ulog_send\n");

136 
	`LOCK_BH
(&
ulog_lock
);

137 
	`ulog_£nd
(
d©a
);

138 
	`UNLOCK_BH
(&
ulog_lock
);

139 
	}
}

141 
sk_buff
 *
	$ulog_Æloc_skb
(
size
)

143 
sk_buff
 *
skb
;

149 
skb
 = 
	`Æloc_skb
(
∆bufsiz
, 
GFP_ATOMIC
);

150 i‡(!
skb
) {

151 
	`PRINTR
("ipt_ULOG: can'tálloc whole buffer %ub!\n",

152 
∆bufsiz
);

157 
skb
 = 
	`Æloc_skb
(
size
, 
GFP_ATOMIC
);

158 i‡(!
skb
)

159 
	`PRINTR
("ùt_ULOG: c™'àevíáŒoˇã %ub\n", 
size
);

162  
skb
;

163 
	}
}

165 
	$ùt_ulog_∑ckë
(
hooknum
,

166 c⁄° 
sk_buff
 *
skb
,

167 c⁄° 
√t_devi˚
 *
ö
,

168 c⁄° 
√t_devi˚
 *
out
,

169 c⁄° 
ùt_ulog_öfo
 *
logöfo
,

170 c⁄° *
¥efix
)

172 
ulog_buff_t
 *
ub
;

173 
ulog_∑ckë_msg_t
 *
pm
;

174 
size_t
 
size
, 
c›y_Àn
;

175 
∆msghdr
 *
∆h
;

180 
grou≤um
 = 
	`ffs
(
logöfo
->
∆_group
) - 1;

183 i‡((
logöfo
->
c›y_ønge
 == 0) ||

184 (
logöfo
->
c›y_ønge
 > 
skb
->
Àn
)) {

185 
c›y_Àn
 = 
skb
->
Àn
;

187 
c›y_Àn
 = 
logöfo
->
c›y_ønge
;

190 
size
 = 
	`NLMSG_SPACE
((*
pm
Ë+ 
c›y_Àn
);

192 
ub
 = &
ulog_buf„rs
[
grou≤um
];

194 
	`LOCK_BH
(&
ulog_lock
);

196 i‡(!
ub
->
skb
) {

197 i‡(!(
ub
->
skb
 = 
	`ulog_Æloc_skb
(
size
)))

198 
Æloc_Áûuª
;

199 } i‡(
ub
->
qÀn
 >
logöfo
->
qthªshﬁd
 ||

200 
size
 > 
	`skb_èûroom
(
ub
->
skb
)) {

204 
	`ulog_£nd
(
grou≤um
);

206 i‡(!(
ub
->
skb
 = 
	`ulog_Æloc_skb
(
size
)))

207 
Æloc_Áûuª
;

210 
	`DEBUGP
("ùt_ULOG: qÀ¿%d, qthªshﬁd %d\n", 
ub
->
qÀn
,

211 
logöfo
->
qthªshﬁd
);

214 
∆h
 = 
	`NLMSG_PUT
(
ub
->
skb
, 0, ub->
qÀn
, 
ULOG_NL_EVENT
,

215 
size
 - (*
∆h
));

216 
ub
->
qÀn
++;

218 
pm
 = 
	`NLMSG_DATA
(
∆h
);

221 i‡(
skb
->
°amp
.
tv_£c
 == 0)

222 
	`do_gëtimeofday
((
timevÆ
 *)&
skb
->
°amp
);

225 
pm
->
d©a_Àn
 = 
c›y_Àn
;

226 
pm
->
time°amp_£c
 = 
skb
->
°amp
.
tv_£c
;

227 
pm
->
time°amp_u£c
 = 
skb
->
°amp
.
tv_u£c
;

228 
pm
->
m¨k
 = 
skb
->
nfm¨k
;

229 
pm
->
hook
 = 
hooknum
;

230 i‡(
¥efix
 !
NULL
)

231 
	`°∫˝y
(
pm
->
¥efix
,Örefix, (pm->prefix));

232 i‡(
logöfo
->
¥efix
[0] != '\0')

233 
	`°∫˝y
(
pm
->
¥efix
, 
logöfo
->prefix, (pm->prefix));

235 *(
pm
->
¥efix
) = '\0';

237 i‡(
ö
 && in->
h¨d_hódî_Àn
 > 0

238 && 
skb
->
mac
.
øw
 !(*Ëskb->
nh
.
ùh


239 && 
ö
->
h¨d_hódî_Àn
 <
ULOG_MAC_LEN
) {

240 
	`mem˝y
(
pm
->
mac
, 
skb
->mac.
øw
, 
ö
->
h¨d_hódî_Àn
);

241 
pm
->
mac_Àn
 = 
ö
->
h¨d_hódî_Àn
;

243 
pm
->
mac_Àn
 = 0;

245 i‡(
ö
)

246 
	`°∫˝y
(
pm
->
ödev_«me
, 
ö
->
«me
, (pm->indev_name));

248 
pm
->
ödev_«me
[0] = '\0';

250 i‡(
out
)

251 
	`°∫˝y
(
pm
->
outdev_«me
, 
out
->
«me
, (pm->outdev_name));

253 
pm
->
outdev_«me
[0] = '\0';

256 i‡(
	`skb_c›y_bôs
(
skb
, 0, 
pm
->
∑ylﬂd
, 
c›y_Àn
) < 0)

257 
	`BUG
();

260 i‡(
ub
->
qÀn
 > 1) {

261 
ub
->
œ°∆h
->
∆msg_Êags
 |
NLM_F_MULTI
;

265 i‡(
qÀn
 >
logöfo
->
qthªshﬁd
) {

266 i‡(
logöfo
->
qthªshﬁd
 > 1)

267 
∆h
->
∆msg_ty≥
 = 
NLMSG_DONE
;

270 
ub
->
œ°∆h
 = 
∆h
;

273 i‡(!
	`timî_≥ndög
(&
ub
->
timî
)) {

274 
ub
->
timî
.
expúes
 = 
jiffõs
 + 
Êushtimeout
;

275 
	`add_timî
(&
ub
->
timî
);

278 
	`UNLOCK_BH
(&
ulog_lock
);

282 
∆msg_Áûuª
:

283 
	`PRINTR
("ipt_ULOG:Érror during NLMSG_PUT\n");

285 
Æloc_Áûuª
:

286 
	`PRINTR
("ipt_ULOG: Error buildingÇetlink message\n");

288 
	`UNLOCK_BH
(&
ulog_lock
);

289 
	}
}

291 
	$ùt_ulog_èrgë
(
sk_buff
 **
pskb
,

292 c⁄° 
√t_devi˚
 *
ö
,

293 c⁄° 
√t_devi˚
 *
out
,

294 
hooknum
,

295 c⁄° *
èrgöfo
, *
u£röfo
)

297 
ùt_ulog_öfo
 *
logöfo
 = (ùt_ulog_öfÿ*Ë
èrgöfo
;

299 
	`ùt_ulog_∑ckë
(
hooknum
, *
pskb
, 
ö
, 
out
, 
logöfo
, 
NULL
);

301  
IPT_CONTINUE
;

302 
	}
}

304 
	$ùt_log‚
(
hooknum
,

305 c⁄° 
sk_buff
 *
skb
,

306 c⁄° 
√t_devi˚
 *
ö
,

307 c⁄° 
√t_devi˚
 *
out
,

308 c⁄° *
¥efix
)

310 
ùt_ulog_öfo
 
logöfo
 = {

311 .
∆_group
 = 
ULOG_DEFAULT_NLGROUP
,

312 .
c›y_ønge
 = 0,

313 .
qthªshﬁd
 = 
ULOG_DEFAULT_QTHRESHOLD
,

314 .
¥efix
 = ""

317 
	`ùt_ulog_∑ckë
(
hooknum
, 
skb
, 
ö
, 
out
, &
logöfo
, 
¥efix
);

318 
	}
}

320 
	$ùt_ulog_checkíåy
(c⁄° *
èbÀ«me
,

321 c⁄° 
ùt_íåy
 *
e
,

322 *
èrgöfo
,

323 
èrgöfosize
,

324 
hookmask
)

326 
ùt_ulog_öfo
 *
logöfo
 = (ùt_ulog_öfÿ*Ë
èrgöfo
;

328 i‡(
èrgöfosize
 !
	`IPT_ALIGN
((
ùt_ulog_öfo
))) {

329 
	`DEBUGP
("ùt_ULOG:Å¨göfosizê%u !0\n", 
èrgöfosize
);

333 i‡(
logöfo
->
¥efix
[(loginfo->prefix) - 1] != '\0') {

334 
	`DEBUGP
("ipt_ULOG:ÖrefixÅerm %i\n",

335 
logöfo
->
¥efix
[(loginfo->prefix) - 1]);

339 i‡(
logöfo
->
qthªshﬁd
 > 
ULOG_MAX_QLEN
) {

340 
	`DEBUGP
("ipt_ULOG: queueÅhreshold %i > MAX_QLEN\n",

341 
logöfo
->
qthªshﬁd
);

346 
	}
}

348 
ùt_èrgë
 
	gùt_ulog_ªg
 = {

349 .
«me
 = "ULOG",

350 .
	gèrgë
 = 
ùt_ulog_èrgë
,

351 .
	gcheckíåy
 = 
ùt_ulog_checkíåy
,

352 .
	gme
 = 
THIS_MODULE
,

355 
__öô
 
	$öô
()

357 
i
;

359 
	`DEBUGP
("ipt_ULOG: init module\n");

361 i‡(
∆bufsiz
 >= 128*1024) {

362 
	`¥ötk
("Netlink buffer hasÅo be <= 128kB\n");

363  -
EINVAL
;

367 
i
 = 0; i < 
ULOG_MAXNLGROUPS
; i++) {

368 
	`öô_timî
(&
ulog_buf„rs
[
i
].
timî
);

369 
ulog_buf„rs
[
i
].
timî
.
fun˘i⁄
 = 
ulog_timî
;

370 
ulog_buf„rs
[
i
].
timî
.
d©a
 = i;

373 
nÊog∆
 = 
	`√éök_kî√l_¸óã
(
NETLINK_NFLOG
, 
NULL
);

374 i‡(!
nÊog∆
)

375  -
ENOMEM
;

377 i‡(
	`ùt_ªgi°î_èrgë
(&
ùt_ulog_ªg
) != 0) {

378 
	`sock_ªÀa£
(
nÊog∆
->
sk_sockë
);

379  -
EINVAL
;

381 i‡(
nÊog
)

382 
	`nf_log_ªgi°î
(
PF_INET
, &
ùt_log‚
);

385 
	}
}

387 
__exô
 
	$föi
()

389 
ulog_buff_t
 *
ub
;

390 
i
;

392 
	`DEBUGP
("ipt_ULOG: cleanup_module\n");

394 i‡(
nÊog
)

395 
	`nf_log_uƒegi°î
(
PF_INET
, &
ùt_log‚
);

396 
	`ùt_uƒegi°î_èrgë
(&
ùt_ulog_ªg
);

397 
	`sock_ªÀa£
(
nÊog∆
->
sk_sockë
);

400 
i
 = 0; i < 
ULOG_MAXNLGROUPS
; i++) {

401 
ub
 = &
ulog_buf„rs
[
i
];

402 i‡(
	`timî_≥ndög
(&
ub
->
timî
)) {

403 
	`DEBUGP
("timer wasÖending, deleting\n");

404 
	`dñ_timî
(&
ub
->
timî
);

407 i‡(
ub
->
skb
) {

408 
	`k‰ì_skb
(
ub
->
skb
);

409 
ub
->
skb
 = 
NULL
;

413 
	}
}

415 
moduÀ_öô
(
öô
);

416 
moduÀ_exô
(
föi
);

	@ipt_addrtype.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/skbuff.h
>

14 
	~<löux/√tdevi˚.h
>

15 
	~<löux/ù.h
>

16 
	~<√t/rouã.h
>

18 
	~<löux/√tfûãr_ùv4/ùt_addπy≥.h
>

19 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

21 
MODULE_LICENSE
("GPL");

22 
MODULE_AUTHOR
("Patrick McHardy <kaber@trash.net>");

23 
MODULE_DESCRIPTION
("iptablesáddrtype match");

25 
ölöe
 
	$m©ch_ty≥
(
u_öt32_t
 
addr
, 
u_öt16_t
 
mask
)

27  !!(
mask
 & (1 << 
	`öë_addr_ty≥
(
addr
)));

28 
	}
}

30 
	$m©ch
(c⁄° 
sk_buff
 *
skb
, c⁄° 
√t_devi˚
 *
ö
,

31 c⁄° 
√t_devi˚
 *
out
, c⁄° *
m©chöfo
,

32 
off£t
, *
hŸdr›
)

34 c⁄° 
ùt_addπy≥_öfo
 *
öfo
 = 
m©chöfo
;

35 c⁄° 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

36 
ªt
 = 1;

38 i‡(
öfo
->
sour˚
)

39 
ªt
 &
	`m©ch_ty≥
(
ùh
->
ßddr
, 
öfo
->
sour˚
)^öfo->
övît_sour˚
;

40 i‡(
öfo
->
de°
)

41 
ªt
 &
	`m©ch_ty≥
(
ùh
->
daddr
, 
öfo
->
de°
)^öfo->
övît_de°
;

43  
ªt
;

44 
	}
}

46 
	$checkíåy
(c⁄° *
èbÀ«me
, c⁄° 
ùt_ù
 *
ù
,

47 *
m©chöfo
, 
m©chsize
,

48 
hook_mask
)

50 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_addπy≥_öfo
))) {

51 
	`¥ötk
(
KERN_ERR
 "ipt_addrtype: invalid size (%u != %Zu)\n.",

52 
m©chsize
, 
	`IPT_ALIGN
((
ùt_addπy≥_öfo
)));

57 
	}
}

59 
ùt_m©ch
 
	gaddπy≥_m©ch
 = {

60 .
«me
 = "addrtype",

61 .
	gm©ch
 = 
m©ch
,

62 .
	gcheckíåy
 = 
checkíåy
,

63 .
	gme
 = 
THIS_MODULE


66 
__öô
 
	$öô
()

68  
	`ùt_ªgi°î_m©ch
(&
addπy≥_m©ch
);

69 
	}
}

71 
__exô
 
	$föi
()

73 
	`ùt_uƒegi°î_m©ch
(&
addπy≥_m©ch
);

74 
	}
}

76 
moduÀ_öô
(
öô
);

77 
moduÀ_exô
(
föi
);

	@ipt_ah.c

9 
	~<löux/moduÀ.h
>

10 
	~<löux/skbuff.h
>

11 
	~<löux/ù.h
>

13 
	~<löux/√tfûãr_ùv4/ùt_ah.h
>

14 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

16 
MODULE_LICENSE
("GPL");

17 
MODULE_AUTHOR
("Yon Uriarte <yon@astaro.de>");

18 
MODULE_DESCRIPTION
("iptables AH SPI match module");

20 #ifde‡
DEBUG_CONNTRACK


21 
	#du¥ötf
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(f‹m© , ##árgs)

	)

23 
	#du¥ötf
(
f‹m©
, 
¨gs
...)

	)

27 
ölöe
 

28 
	$•i_m©ch
(
u_öt32_t
 
mö
, u_öt32_à
max
, u_öt32_à
•i
, 
övît
)

30 
r
=0;

31 
	`du¥ötf
("ah spi_m©ch:%¯0x%x <0x%x <0x%x",
övît
? '!':' ',

32 
mö
,
•i
,
max
);

33 
r
=(
•i
 >
mö
 && spò<
max
Ë^ 
övît
;

34 
	`du¥ötf
("Ñesu… %s\n",
r
? "PASS" : "FAILED");

35  
r
;

36 
	}
}

39 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

40 c⁄° 
√t_devi˚
 *
ö
,

41 c⁄° 
√t_devi˚
 *
out
,

42 c⁄° *
m©chöfo
,

43 
off£t
,

44 *
hŸdr›
)

46 
ù_auth_hdr
 
ah
;

47 c⁄° 
ùt_ah
 *
ahöfo
 = 
m©chöfo
;

50 i‡(
off£t
)

53 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
ah
, (ah)) < 0) {

56 
	`du¥ötf
("DroppingÉvil AHÅinygram.\n");

57 *
hŸdr›
 = 1;

61  
	`•i_m©ch
(
ahöfo
->
•is
[0],áhinfo->spis[1],

62 
	`¡ohl
(
ah
.
•i
),

63 !!(
ahöfo
->
övÊags
 & 
IPT_AH_INV_SPI
));

64 
	}
}

68 
	$checkíåy
(c⁄° *
èbÀ«me
,

69 c⁄° 
ùt_ù
 *
ù
,

70 *
m©chöfo
,

71 
m©chöfosize
,

72 
hook_mask
)

74 c⁄° 
ùt_ah
 *
ahöfo
 = 
m©chöfo
;

77 i‡(
ù
->
¥Ÿo
 !
IPPROTO_AH
 || (ù->
övÊags
 & 
IPT_INV_PROTO
)) {

78 
	`du¥ötf
("ùt_ah: PrŸocﬁ %u !%u\n", 
ù
->
¥Ÿo
,

79 
IPPROTO_AH
);

82 i‡(
m©chöfosize
 !
	`IPT_ALIGN
((
ùt_ah
))) {

83 
	`du¥ötf
("ipt_ah: matchsize %u != %u\n",

84 
m©chöfosize
, 
	`IPT_ALIGN
((
ùt_ah
)));

87 i‡(
ahöfo
->
övÊags
 & ~
IPT_AH_INV_MASK
) {

88 
	`du¥ötf
("ipt_ah: unknown flags %X\n",

89 
ahöfo
->
övÊags
);

94 
	}
}

96 
ùt_m©ch
 
	gah_m©ch
 = {

97 .
«me
 = "ah",

98 .
	gm©ch
 = &
m©ch
,

99 .
	gcheckíåy
 = &
checkíåy
,

100 .
	gme
 = 
THIS_MODULE
,

103 
__öô
 
	$öô
()

105  
	`ùt_ªgi°î_m©ch
(&
ah_m©ch
);

106 
	}
}

108 
__exô
 
	$˛ónup
()

110 
	`ùt_uƒegi°î_m©ch
(&
ah_m©ch
);

111 
	}
}

113 
moduÀ_öô
(
öô
);

114 
moduÀ_exô
(
˛ónup
);

	@ipt_conntrack.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/skbuff.h
>

13 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

14 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

15 
	~<löux/√tfûãr_ùv4/ùt_c⁄¡øck.h
>

17 
MODULE_LICENSE
("GPL");

18 
MODULE_AUTHOR
("Marc Boucher <marc@mbsi.ca>");

19 
MODULE_DESCRIPTION
("iptables connectionÅracking match module");

22 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

23 c⁄° 
√t_devi˚
 *
ö
,

24 c⁄° 
√t_devi˚
 *
out
,

25 c⁄° *
m©chöfo
,

26 
off£t
,

27 *
hŸdr›
)

29 c⁄° 
ùt_c⁄¡øck_öfo
 *
söfo
 = 
m©chöfo
;

30 
ù_c⁄¡øck
 *
˘
;

31 
ù_c⁄¡øck_öfo
 
˘öfo
;

32 
°©ebô
;

34 
˘
 = 
	`ù_c⁄¡øck_gë
((
sk_buff
 *)
skb
, &
˘öfo
);

36 
	#FWINV
(
boﬁ
,
övÊg
Ë((boﬁË^ !!(
söfo
->
övÊags
 & invÊg))

	)

38 i‡(
skb
->
nf˘
 =&
ù_c⁄¡øck_u¡øcked
.
öfos
[
IP_CT_NEW
])

39 
°©ebô
 = 
IPT_CONNTRACK_STATE_UNTRACKED
;

40 i‡(
˘
)

41 
°©ebô
 = 
	`IPT_CONNTRACK_STATE_BIT
(
˘öfo
);

43 
°©ebô
 = 
IPT_CONNTRACK_STATE_INVALID
;

45 if(
söfo
->
Êags
 & 
IPT_CONNTRACK_STATE
) {

46 i‡(
˘
) {

47 if(
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
 !=

48 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
)

49 
°©ebô
 |
IPT_CONNTRACK_STATE_SNAT
;

51 if(
˘
->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
 !=

52 
˘
->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
)

53 
°©ebô
 |
IPT_CONNTRACK_STATE_DNAT
;

56 i‡(
	`FWINV
((
°©ebô
 & 
söfo
->
°©emask
Ë=0, 
IPT_CONNTRACK_STATE
))

60 if(
söfo
->
Êags
 & 
IPT_CONNTRACK_PROTO
) {

61 i‡(!
˘
 || 
	`FWINV
(˘->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
¥Ÿ⁄um
 !
söfo
->tu∂e[IP_CT_DIR_ORIGINAL].d°.¥Ÿ⁄um, 
IPT_CONNTRACK_PROTO
))

65 if(
söfo
->
Êags
 & 
IPT_CONNTRACK_ORIGSRC
) {

66 i‡(!
˘
 || 
	`FWINV
((˘->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
§c
.
ù
&
söfo
->
sùmsk
[IP_CT_DIR_ORIGINAL].
s_addr
Ë!söfo->tu∂e[IP_CT_DIR_ORIGINAL].§c.ù, 
IPT_CONNTRACK_ORIGSRC
))

70 if(
söfo
->
Êags
 & 
IPT_CONNTRACK_ORIGDST
) {

71 i‡(!
˘
 || 
	`FWINV
((˘->
tu∂ehash
[
IP_CT_DIR_ORIGINAL
].
tu∂e
.
d°
.
ù
&
söfo
->
dùmsk
[IP_CT_DIR_ORIGINAL].
s_addr
Ë!söfo->tu∂e[IP_CT_DIR_ORIGINAL].d°.ù, 
IPT_CONNTRACK_ORIGDST
))

75 if(
söfo
->
Êags
 & 
IPT_CONNTRACK_REPLSRC
) {

76 i‡(!
˘
 || 
	`FWINV
((˘->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
§c
.
ù
&
söfo
->
sùmsk
[IP_CT_DIR_REPLY].
s_addr
Ë!söfo->tu∂e[IP_CT_DIR_REPLY].§c.ù, 
IPT_CONNTRACK_REPLSRC
))

80 if(
söfo
->
Êags
 & 
IPT_CONNTRACK_REPLDST
) {

81 i‡(!
˘
 || 
	`FWINV
((˘->
tu∂ehash
[
IP_CT_DIR_REPLY
].
tu∂e
.
d°
.
ù
&
söfo
->
dùmsk
[IP_CT_DIR_REPLY].
s_addr
Ë!söfo->tu∂e[IP_CT_DIR_REPLY].d°.ù, 
IPT_CONNTRACK_REPLDST
))

85 if(
söfo
->
Êags
 & 
IPT_CONNTRACK_STATUS
) {

86 i‡(!
˘
 || 
	`FWINV
((˘->
°©us
 & 
söfo
->
°©usmask
Ë=0, 
IPT_CONNTRACK_STATUS
))

90 if(
söfo
->
Êags
 & 
IPT_CONNTRACK_EXPIRES
) {

91 
expúes
;

93 if(!
˘
)

96 
expúes
 = 
	`timî_≥ndög
(&
˘
->
timeout
Ë? (˘->timeout.expúe†- 
jiffõs
)/
HZ
 : 0;

98 i‡(
	`FWINV
(!(
expúes
 >
söfo
->
expúes_mö
 &&Éxpúe†<söfo->
expúes_max
), 
IPT_CONNTRACK_EXPIRES
))

103 
	}
}

105 
	$check
(c⁄° *
èbÀ«me
,

106 c⁄° 
ùt_ù
 *
ù
,

107 *
m©chöfo
,

108 
m©chsize
,

109 
hook_mask
)

111 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_c⁄¡øck_öfo
)))

115 
	}
}

117 
ùt_m©ch
 
	gc⁄¡øck_m©ch
 = {

118 .
«me
 = "conntrack",

119 .
	gm©ch
 = &
m©ch
,

120 .
	gcheckíåy
 = &
check
,

121 .
	gme
 = 
THIS_MODULE
,

124 
__öô
 
	$öô
()

126 
	`√ed_ù_c⁄¡øck
();

127  
	`ùt_ªgi°î_m©ch
(&
c⁄¡øck_m©ch
);

128 
	}
}

130 
__exô
 
	$föi
()

132 
	`ùt_uƒegi°î_m©ch
(&
c⁄¡øck_m©ch
);

133 
	}
}

135 
moduÀ_öô
(
öô
);

136 
moduÀ_exô
(
föi
);

	@ipt_dscp.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/skbuff.h
>

15 
	~<löux/√tfûãr_ùv4/ùt_ds˝.h
>

16 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

18 
MODULE_AUTHOR
("Harald Welte <laforge@netfilter.org>");

19 
MODULE_DESCRIPTION
("iptables DSCP matching module");

20 
MODULE_LICENSE
("GPL");

22 
	$m©ch
(c⁄° 
sk_buff
 *
skb
, c⁄° 
√t_devi˚
 *
ö
,

23 c⁄° 
√t_devi˚
 *
out
, c⁄° *
m©chöfo
,

24 
off£t
, *
hŸdr›
)

26 c⁄° 
ùt_ds˝_öfo
 *
öfo
 = 
m©chöfo
;

27 c⁄° 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

29 
u_öt8_t
 
sh_ds˝
 = ((
öfo
->
ds˝
 << 
IPT_DSCP_SHIFT
Ë& 
IPT_DSCP_MASK
);

31  ((
ùh
->
tos
&
IPT_DSCP_MASK
Ë=
sh_ds˝
Ë^ 
öfo
->
övît
;

32 
	}
}

34 
	$checkíåy
(c⁄° *
èbÀ«me
, c⁄° 
ùt_ù
 *
ù
,

35 *
m©chöfo
, 
m©chsize
,

36 
hook_mask
)

38 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_ds˝_öfo
)))

42 
	}
}

44 
ùt_m©ch
 
	gds˝_m©ch
 = {

45 .
«me
 = "dscp",

46 .
	gm©ch
 = &
m©ch
,

47 .
	gcheckíåy
 = &
checkíåy
,

48 .
	gme
 = 
THIS_MODULE
,

51 
__öô
 
	$öô
()

53  
	`ùt_ªgi°î_m©ch
(&
ds˝_m©ch
);

54 
	}
}

56 
__exô
 
	$föi
()

58 
	`ùt_uƒegi°î_m©ch
(&
ds˝_m©ch
);

60 
	}
}

62 
moduÀ_öô
(
öô
);

63 
moduÀ_exô
(
föi
);

	@ipt_ecn.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/skbuff.h
>

14 
	~<löux/t˝.h
>

16 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

17 
	~<löux/√tfûãr_ùv4/ùt_e˙.h
>

19 
MODULE_AUTHOR
("Harald Welte <laforge@netfilter.org>");

20 
MODULE_DESCRIPTION
("iptables ECN matching module");

21 
MODULE_LICENSE
("GPL");

23 
ölöe
 
	$m©ch_ù
(c⁄° 
sk_buff
 *
skb
,

24 c⁄° 
ùt_e˙_öfo
 *
eöfo
)

26  ((
skb
->
nh
.
ùh
->
tos
&
IPT_ECN_IP_MASK
Ë=
eöfo
->
ù_e˘
);

27 
	}
}

29 
ölöe
 
	$m©ch_t˝
(c⁄° 
sk_buff
 *
skb
,

30 c⁄° 
ùt_e˙_öfo
 *
eöfo
,

31 *
hŸdr›
)

33 
t˝hdr
 
t˝h
;

37 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
t˝h
, (tcph)) < 0) {

38 *
hŸdr›
 = 0;

42 i‡(
eöfo
->
›î©i⁄
 & 
IPT_ECN_OP_MATCH_ECE
) {

43 i‡(
eöfo
->
övît
 & 
IPT_ECN_OP_MATCH_ECE
) {

44 i‡(
t˝h
.
e˚
 == 1)

47 i‡(
t˝h
.
e˚
 == 0)

52 i‡(
eöfo
->
›î©i⁄
 & 
IPT_ECN_OP_MATCH_CWR
) {

53 i‡(
eöfo
->
övît
 & 
IPT_ECN_OP_MATCH_CWR
) {

54 i‡(
t˝h
.
cwr
 == 1)

57 i‡(
t˝h
.
cwr
 == 0)

63 
	}
}

65 
	$m©ch
(c⁄° 
sk_buff
 *
skb
, c⁄° 
√t_devi˚
 *
ö
,

66 c⁄° 
√t_devi˚
 *
out
, c⁄° *
m©chöfo
,

67 
off£t
, *
hŸdr›
)

69 c⁄° 
ùt_e˙_öfo
 *
öfo
 = 
m©chöfo
;

71 i‡(
öfo
->
›î©i⁄
 & 
IPT_ECN_OP_MATCH_IP
)

72 i‡(!
	`m©ch_ù
(
skb
, 
öfo
))

75 i‡(
öfo
->
›î©i⁄
 & (
IPT_ECN_OP_MATCH_ECE
|
IPT_ECN_OP_MATCH_CWR
)) {

76 i‡(
skb
->
nh
.
ùh
->
¥Ÿocﬁ
 !
IPPROTO_TCP
)

78 i‡(!
	`m©ch_t˝
(
skb
, 
öfo
, 
hŸdr›
))

83 
	}
}

85 
	$checkíåy
(c⁄° *
èbÀ«me
, c⁄° 
ùt_ù
 *
ù
,

86 *
m©chöfo
, 
m©chsize
,

87 
hook_mask
)

89 c⁄° 
ùt_e˙_öfo
 *
öfo
 = 
m©chöfo
;

91 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_e˙_öfo
)))

94 i‡(
öfo
->
›î©i⁄
 & 
IPT_ECN_OP_MATCH_MASK
)

97 i‡(
öfo
->
övît
 & 
IPT_ECN_OP_MATCH_MASK
)

100 i‡(
öfo
->
›î©i⁄
 & (
IPT_ECN_OP_MATCH_ECE
|
IPT_ECN_OP_MATCH_CWR
)

101 && 
ù
->
¥Ÿo
 !
IPPROTO_TCP
) {

102 
	`¥ötk
(
KERN_WARNING
 "ipt_ecn: can't match TCP bits inÑule for"

108 
	}
}

110 
ùt_m©ch
 
	ge˙_m©ch
 = {

111 .
«me
 = "ecn",

112 .
	gm©ch
 = &
m©ch
,

113 .
	gcheckíåy
 = &
checkíåy
,

114 .
	gme
 = 
THIS_MODULE
,

117 
__öô
 
	$öô
()

119  
	`ùt_ªgi°î_m©ch
(&
e˙_m©ch
);

120 
	}
}

122 
__exô
 
	$föi
()

124 
	`ùt_uƒegi°î_m©ch
(&
e˙_m©ch
);

125 
	}
}

127 
moduÀ_öô
(
öô
);

128 
moduÀ_exô
(
föi
);

	@ipt_esp.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/skbuff.h
>

12 
	~<löux/ù.h
>

14 
	~<löux/√tfûãr_ùv4/ùt_e•.h
>

15 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

17 
MODULE_LICENSE
("GPL");

18 
MODULE_AUTHOR
("Yon Uriarte <yon@astaro.de>");

19 
MODULE_DESCRIPTION
("iptables ESP SPI match module");

21 #ifde‡
DEBUG_CONNTRACK


22 
	#du¥ötf
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(f‹m© , ##árgs)

	)

24 
	#du¥ötf
(
f‹m©
, 
¨gs
...)

	)

28 
ölöe
 

29 
	$•i_m©ch
(
u_öt32_t
 
mö
, u_öt32_à
max
, u_öt32_à
•i
, 
övît
)

31 
r
=0;

32 
	`du¥ötf
("e• spi_m©ch:%¯0x%x <0x%x <0x%x",
övît
? '!':' ',

33 
mö
,
•i
,
max
);

34 
r
=(
•i
 >
mö
 && spò<
max
Ë^ 
övît
;

35 
	`du¥ötf
("Ñesu… %s\n",
r
? "PASS" : "FAILED");

36  
r
;

37 
	}
}

40 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

41 c⁄° 
√t_devi˚
 *
ö
,

42 c⁄° 
√t_devi˚
 *
out
,

43 c⁄° *
m©chöfo
,

44 
off£t
,

45 *
hŸdr›
)

47 
ù_e•_hdr
 
e•
;

48 c⁄° 
ùt_e•
 *
e•öfo
 = 
m©chöfo
;

51 i‡(
off£t
)

54 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
e•
, (esp)) < 0) {

57 
	`du¥ötf
("DroppingÉvil ESPÅinygram.\n");

58 *
hŸdr›
 = 1;

62  
	`•i_m©ch
(
e•öfo
->
•is
[0],Éspinfo->spis[1],

63 
	`¡ohl
(
e•
.
•i
),

64 !!(
e•öfo
->
övÊags
 & 
IPT_ESP_INV_SPI
));

65 
	}
}

69 
	$checkíåy
(c⁄° *
èbÀ«me
,

70 c⁄° 
ùt_ù
 *
ù
,

71 *
m©chöfo
,

72 
m©chöfosize
,

73 
hook_mask
)

75 c⁄° 
ùt_e•
 *
e•öfo
 = 
m©chöfo
;

78 i‡(
ù
->
¥Ÿo
 !
IPPROTO_ESP
 || (ù->
övÊags
 & 
IPT_INV_PROTO
)) {

79 
	`du¥ötf
("ùt_e•: PrŸocﬁ %u !%u\n", 
ù
->
¥Ÿo
,

80 
IPPROTO_ESP
);

83 i‡(
m©chöfosize
 !
	`IPT_ALIGN
((
ùt_e•
))) {

84 
	`du¥ötf
("ipt_esp: matchsize %u != %u\n",

85 
m©chöfosize
, 
	`IPT_ALIGN
((
ùt_e•
)));

88 i‡(
e•öfo
->
övÊags
 & ~
IPT_ESP_INV_MASK
) {

89 
	`du¥ötf
("ipt_esp: unknown flags %X\n",

90 
e•öfo
->
övÊags
);

95 
	}
}

97 
ùt_m©ch
 
	ge•_m©ch
 = {

98 .
«me
 = "esp",

99 .
	gm©ch
 = &
m©ch
,

100 .
	gcheckíåy
 = &
checkíåy
,

101 .
	gme
 = 
THIS_MODULE
,

104 
__öô
 
	$öô
()

106  
	`ùt_ªgi°î_m©ch
(&
e•_m©ch
);

107 
	}
}

109 
__exô
 
	$˛ónup
()

111 
	`ùt_uƒegi°î_m©ch
(&
e•_m©ch
);

112 
	}
}

114 
moduÀ_öô
(
öô
);

115 
moduÀ_exô
(
˛ónup
);

	@ipt_helper.c

13 
	~<löux/moduÀ.h
>

14 
	~<löux/skbuff.h
>

15 
	~<löux/√tfûãr.h
>

16 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

17 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_c‹e.h
>

18 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_hñ≥r.h
>

19 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

20 
	~<löux/√tfûãr_ùv4/ùt_hñ≥r.h
>

22 
MODULE_LICENSE
("GPL");

23 
MODULE_AUTHOR
("Martin Josefsson <gandalf@netfilter.org>");

24 
MODULE_DESCRIPTION
("iptables helper match module");

27 
	#DEBUGP
 
¥ötk


	)

29 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

33 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

34 c⁄° 
√t_devi˚
 *
ö
,

35 c⁄° 
√t_devi˚
 *
out
,

36 c⁄° *
m©chöfo
,

37 
off£t
,

38 *
hŸdr›
)

40 c⁄° 
ùt_hñ≥r_öfo
 *
öfo
 = 
m©chöfo
;

41 
ù_c⁄¡øck_ex≥˘
 *
exp
;

42 
ù_c⁄¡øck
 *
˘
;

43 
ù_c⁄¡øck_öfo
 
˘öfo
;

44 
ªt
 = 
öfo
->
övît
;

46 
˘
 = 
	`ù_c⁄¡øck_gë
((
sk_buff
 *)
skb
, &
˘öfo
);

47 i‡(!
˘
) {

48 
	`DEBUGP
("ipt_helper: Eek! invalid conntrack?\n");

49  
ªt
;

52 i‡(!
˘
->
ma°î
) {

53 
	`DEBUGP
("ùt_hñ≥r: c⁄¡øck %∞ha†nÿma°î\n", 
˘
);

54  
ªt
;

57 
exp
 = 
˘
->
ma°î
;

58 
	`READ_LOCK
(&
ù_c⁄¡øck_lock
);

59 i‡(!
exp
->
ex≥˘™t
) {

60 
	`DEBUGP
("ipt_helper:Éxpectation %p withoutÉxpectant !?!\n",

61 
exp
);

62 
out_u∆ock
;

65 i‡(!
exp
->
ex≥˘™t
->
hñ≥r
) {

66 
	`DEBUGP
("ipt_helper: master ct %p hasÇo helper\n",

67 
exp
->
ex≥˘™t
);

68 
out_u∆ock
;

71 
	`DEBUGP
("master'sÇame = %s , info->name = %s\n",

72 
exp
->
ex≥˘™t
->
hñ≥r
->
«me
, 
öfo
->name);

74 i‡(
öfo
->
«me
[0] == '\0')

75 
ªt
 ^= 1;

77 
ªt
 ^!
	`°∫cmp
(
exp
->
ex≥˘™t
->
hñ≥r
->
«me
, 
öfo
->name,

78 
	`°æí
(
exp
->
ex≥˘™t
->
hñ≥r
->
«me
));

79 
out_u∆ock
:

80 
	`READ_UNLOCK
(&
ù_c⁄¡øck_lock
);

81  
ªt
;

82 
	}
}

84 
	$check
(c⁄° *
èbÀ«me
,

85 c⁄° 
ùt_ù
 *
ù
,

86 *
m©chöfo
,

87 
m©chsize
,

88 
hook_mask
)

90 
ùt_hñ≥r_öfo
 *
öfo
 = 
m©chöfo
;

92 
öfo
->
«me
[29] = '\0';

95 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_hñ≥r_öfo
)))

99 
	}
}

101 
ùt_m©ch
 
	ghñ≥r_m©ch
 = {

102 .
«me
 = "helper",

103 .
	gm©ch
 = &
m©ch
,

104 .
	gcheckíåy
 = &
check
,

105 .
	gme
 = 
THIS_MODULE
,

108 
__öô
 
	$öô
()

110  
	`ùt_ªgi°î_m©ch
(&
hñ≥r_m©ch
);

111 
	}
}

113 
__exô
 
	$föi
()

115 
	`ùt_uƒegi°î_m©ch
(&
hñ≥r_m©ch
);

116 
	}
}

118 
moduÀ_öô
(
öô
);

119 
moduÀ_exô
(
föi
);

	@ipt_iprange.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/skbuff.h
>

12 
	~<löux/ù.h
>

13 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

14 
	~<löux/√tfûãr_ùv4/ùt_ùønge.h
>

16 
MODULE_LICENSE
("GPL");

17 
MODULE_AUTHOR
("Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>");

18 
MODULE_DESCRIPTION
("iptablesárbitrary IPÑange match module");

21 
	#DEBUGP
 
¥ötk


	)

23 
	#DEBUGP
(
f‹m©
, 
¨gs
...)

	)

27 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

28 c⁄° 
√t_devi˚
 *
ö
,

29 c⁄° 
√t_devi˚
 *
out
,

30 c⁄° *
m©chöfo
,

31 
off£t
, *
hŸdr›
)

33 c⁄° 
ùt_ùønge_öfo
 *
öfo
 = 
m©chöfo
;

34 c⁄° 
ùhdr
 *
ùh
 = 
skb
->
nh
.iph;

36 i‡(
öfo
->
Êags
 & 
IPRANGE_SRC
) {

37 i‡(((
	`¡ohl
(
ùh
->
ßddr
Ë<Çtohl(
öfo
->
§c
.
mö_ù
))

38 || (
	`¡ohl
(
ùh
->
ßddr
Ë>Çtohl(
öfo
->
§c
.
max_ù
)))

39 ^ !!(
öfo
->
Êags
 & 
IPRANGE_SRC_INV
)) {

40 
	`DEBUGP
("src IP %u.%u.%u.%u NOT inÑange %s"

42 
	`NIPQUAD
(
ùh
->
ßddr
),

43 
öfo
->
Êags
 & 
IPRANGE_SRC_INV
 ? "(INV) " : "",

44 
	`NIPQUAD
(
öfo
->
§c
.
mö_ù
),

45 
	`NIPQUAD
(
öfo
->
§c
.
max_ù
));

49 i‡(
öfo
->
Êags
 & 
IPRANGE_DST
) {

50 i‡(((
	`¡ohl
(
ùh
->
daddr
Ë<Çtohl(
öfo
->
d°
.
mö_ù
))

51 || (
	`¡ohl
(
ùh
->
daddr
Ë>Çtohl(
öfo
->
d°
.
max_ù
)))

52 ^ !!(
öfo
->
Êags
 & 
IPRANGE_DST_INV
)) {

53 
	`DEBUGP
("dst IP %u.%u.%u.%u NOT inÑange %s"

55 
	`NIPQUAD
(
ùh
->
daddr
),

56 
öfo
->
Êags
 & 
IPRANGE_DST_INV
 ? "(INV) " : "",

57 
	`NIPQUAD
(
öfo
->
d°
.
mö_ù
),

58 
	`NIPQUAD
(
öfo
->
d°
.
max_ù
));

63 
	}
}

65 
	$check
(c⁄° *
èbÀ«me
,

66 c⁄° 
ùt_ù
 *
ù
,

67 *
m©chöfo
,

68 
m©chsize
,

69 
hook_mask
)

72 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_ùønge_öfo
)))

76 
	}
}

78 
ùt_m©ch
 
	gùønge_m©ch
 =

80 .
li°
 = { 
NULL
, NULL },

81 .
	g«me
 = "iprange",

82 .
	gm©ch
 = &
m©ch
,

83 .
	gcheckíåy
 = &
check
,

84 .
	gde°roy
 = 
NULL
,

85 .
	gme
 = 
THIS_MODULE


88 
__öô
 
	$öô
()

90  
	`ùt_ªgi°î_m©ch
(&
ùønge_m©ch
);

91 
	}
}

93 
__exô
 
	$föi
()

95 
	`ùt_uƒegi°î_m©ch
(&
ùønge_m©ch
);

96 
	}
}

98 
moduÀ_öô
(
öô
);

99 
moduÀ_exô
(
föi
);

	@ipt_length.c

9 
	~<löux/moduÀ.h
>

10 
	~<löux/skbuff.h
>

12 
	~<löux/√tfûãr_ùv4/ùt_Àngth.h
>

13 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

15 
MODULE_AUTHOR
("James Morris <jmorris@intercode.com.au>");

16 
MODULE_DESCRIPTION
("IPÅablesÖacketÜength matching module");

17 
MODULE_LICENSE
("GPL");

20 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

21 c⁄° 
√t_devi˚
 *
ö
,

22 c⁄° 
√t_devi˚
 *
out
,

23 c⁄° *
m©chöfo
,

24 
off£t
,

25 *
hŸdr›
)

27 c⁄° 
ùt_Àngth_öfo
 *
öfo
 = 
m©chöfo
;

28 
u_öt16_t
 
pkéí
 = 
	`¡ohs
(
skb
->
nh
.
ùh
->
tŸ_Àn
);

30  (
pkéí
 >
öfo
->
mö
 &&Ökéí <öfo->
max
Ë^ info->
övît
;

31 
	}
}

34 
	$checkíåy
(c⁄° *
èbÀ«me
,

35 c⁄° 
ùt_ù
 *
ù
,

36 *
m©chöfo
,

37 
m©chsize
,

38 
hook_mask
)

40 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_Àngth_öfo
)))

44 
	}
}

46 
ùt_m©ch
 
	gÀngth_m©ch
 = {

47 .
«me
 = "length",

48 .
	gm©ch
 = &
m©ch
,

49 .
	gcheckíåy
 = &
checkíåy
,

50 .
	gme
 = 
THIS_MODULE
,

53 
__öô
 
	$öô
()

55  
	`ùt_ªgi°î_m©ch
(&
Àngth_m©ch
);

56 
	}
}

58 
__exô
 
	$föi
()

60 
	`ùt_uƒegi°î_m©ch
(&
Àngth_m©ch
);

61 
	}
}

63 
moduÀ_öô
(
öô
);

64 
moduÀ_exô
(
föi
);

	@ipt_limit.c

16 
	~<löux/moduÀ.h
>

17 
	~<löux/skbuff.h
>

18 
	~<löux/•ölock.h
>

19 
	~<löux/öãºu±.h
>

21 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

22 
	~<löux/√tfûãr_ùv4/ùt_limô.h
>

24 
MODULE_LICENSE
("GPL");

25 
MODULE_AUTHOR
("Herve Eychenne <rv@wallfire.org>");

26 
MODULE_DESCRIPTION
("iptablesÑateÜimit match");

32 
•ölock_t
 
	glimô_lock
 = 
SPIN_LOCK_UNLOCKED
;

51 
	#MAX_CPJ
 (0xFFFFFFFF / (
HZ
*60*60*24))

	)

56 
	#_POW2_BELOW2
(
x
Ë((x)|((x)>>1))

	)

57 
	#_POW2_BELOW4
(
x
Ë(
	`_POW2_BELOW2
(x)|_POW2_BELOW2((x)>>2))

	)

58 
	#_POW2_BELOW8
(
x
Ë(
	`_POW2_BELOW4
(x)|_POW2_BELOW4((x)>>4))

	)

59 
	#_POW2_BELOW16
(
x
Ë(
	`_POW2_BELOW8
(x)|_POW2_BELOW8((x)>>8))

	)

60 
	#_POW2_BELOW32
(
x
Ë(
	`_POW2_BELOW16
(x)|_POW2_BELOW16((x)>>16))

	)

61 
	#POW2_BELOW32
(
x
Ë((
	`_POW2_BELOW32
(x)>>1Ë+ 1)

	)

63 
	#CREDITS_PER_JIFFY
 
	`POW2_BELOW32
(
MAX_CPJ
)

	)

66 
	$ùt_limô_m©ch
(c⁄° 
sk_buff
 *
skb
,

67 c⁄° 
√t_devi˚
 *
ö
,

68 c⁄° 
√t_devi˚
 *
out
,

69 c⁄° *
m©chöfo
,

70 
off£t
,

71 *
hŸdr›
)

73 
ùt_øãöfo
 *
r
 = ((ùt_øãöfÿ*)
m©chöfo
)->
ma°î
;

74 
now
 = 
jiffõs
;

76 
	`•ö_lock_bh
(&
limô_lock
);

77 
r
->
¸edô
 +(
now
 - 
	`xchg
(&r->
¥ev
,Çow)Ë* 
CREDITS_PER_JIFFY
;

78 i‡(
r
->
¸edô
 >Ñ->
¸edô_ˇp
)

79 
r
->
¸edô
 =Ñ->
¸edô_ˇp
;

81 i‡(
r
->
¸edô
 >r->
co°
) {

83 
r
->
¸edô
 -r->
co°
;

84 
	`•ö_u∆ock_bh
(&
limô_lock
);

88 
	`•ö_u∆ock_bh
(&
limô_lock
);

90 
	}
}

93 
u_öt32_t


94 
	$u£r2¸edôs
(
u_öt32_t
 
u£r
)

97 i‡(
u£r
 > 0xFFFFFFFF / (
HZ
*
CREDITS_PER_JIFFY
))

99  (
u£r
 / 
IPT_LIMIT_SCALE
Ë* 
HZ
 * 
CREDITS_PER_JIFFY
;

101  (
u£r
 * 
HZ
 * 
CREDITS_PER_JIFFY
Ë/ 
IPT_LIMIT_SCALE
;

102 
	}
}

105 
	$ùt_limô_checkíåy
(c⁄° *
èbÀ«me
,

106 c⁄° 
ùt_ù
 *
ù
,

107 *
m©chöfo
,

108 
m©chsize
,

109 
hook_mask
)

111 
ùt_øãöfo
 *
r
 = 
m©chöfo
;

113 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_øãöfo
)))

117 i‡(
r
->
bur°
 == 0

118 || 
	`u£r2¸edôs
(
r
->
avg
 *Ñ->
bur°
) < user2credits(r->avg)) {

119 
	`¥ötk
("Overflow in ipt_limit,ÅryÜower: %u/%u\n",

120 
r
->
avg
,Ñ->
bur°
);

126 
r
->
¥ev
 = 
jiffõs
;

127 
r
->
¸edô
 = 
	`u£r2¸edôs
‘->
avg
 *Ñ->
bur°
);

128 
r
->
¸edô_ˇp
 = 
	`u£r2¸edôs
‘->
avg
 *Ñ->
bur°
);

129 
r
->
co°
 = 
	`u£r2¸edôs
‘->
avg
);

132 
r
->
ma°î
 =Ñ;

135 
	}
}

137 
ùt_m©ch
 
	gùt_limô_ªg
 = {

138 .
«me
 = "limit",

139 .
	gm©ch
 = 
ùt_limô_m©ch
,

140 .
	gcheckíåy
 = 
ùt_limô_checkíåy
,

141 .
	gme
 = 
THIS_MODULE
,

144 
__öô
 
	$öô
()

146 i‡(
	`ùt_ªgi°î_m©ch
(&
ùt_limô_ªg
))

147  -
EINVAL
;

149 
	}
}

151 
__exô
 
	$föi
()

153 
	`ùt_uƒegi°î_m©ch
(&
ùt_limô_ªg
);

154 
	}
}

156 
moduÀ_öô
(
öô
);

157 
moduÀ_exô
(
föi
);

	@ipt_limit.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ipt_mac.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/skbuff.h
>

13 
	~<löux/if_ëhî.h
>

15 
	~<löux/√tfûãr_ùv4/ùt_mac.h
>

16 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

18 
MODULE_LICENSE
("GPL");

19 
MODULE_AUTHOR
("Netfilter Core Team <coreteam@netfilter.org>");

20 
MODULE_DESCRIPTION
("iptables mac matching module");

23 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

24 c⁄° 
√t_devi˚
 *
ö
,

25 c⁄° 
√t_devi˚
 *
out
,

26 c⁄° *
m©chöfo
,

27 
off£t
,

28 *
hŸdr›
)

30 c⁄° 
ùt_mac_öfo
 *
öfo
 = 
m©chöfo
;

33  (
skb
->
mac
.
øw
 >skb->
hód


34 && (
skb
->
mac
.
øw
 + 
ETH_HLEN
Ë<skb->
d©a


36 && ((
	`memcmp
(
skb
->
mac
.
ëhî√t
->
h_sour˚
, 
öfo
->
§ˇddr
, 
ETH_ALEN
)

37 =0Ë^ 
öfo
->
övît
));

38 
	}
}

41 
	$ùt_mac_checkíåy
(c⁄° *
èbÀ«me
,

42 c⁄° 
ùt_ù
 *
ù
,

43 *
m©chöfo
,

44 
m©chsize
,

45 
hook_mask
)

48 i‡(
hook_mask


49 & ~((1 << 
NF_IP_PRE_ROUTING
Ë| (1 << 
NF_IP_LOCAL_IN
)

50 | (1 << 
NF_IP_FORWARD
))) {

51 
	`¥ötk
("ipt_mac: only valid for PRE_ROUTING, LOCAL_IN or FORWARD.\n");

55 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_mac_öfo
)))

59 
	}
}

61 
ùt_m©ch
 
	gmac_m©ch
 = {

62 .
«me
 = "mac",

63 .
	gm©ch
 = &
m©ch
,

64 .
	gcheckíåy
 = &
ùt_mac_checkíåy
,

65 .
	gme
 = 
THIS_MODULE
,

68 
__öô
 
	$öô
()

70  
	`ùt_ªgi°î_m©ch
(&
mac_m©ch
);

71 
	}
}

73 
__exô
 
	$föi
()

75 
	`ùt_uƒegi°î_m©ch
(&
mac_m©ch
);

76 
	}
}

78 
moduÀ_öô
(
öô
);

79 
moduÀ_exô
(
föi
);

	@ipt_mark.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/skbuff.h
>

13 
	~<löux/√tfûãr_ùv4/ùt_m¨k.h
>

14 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

16 
MODULE_LICENSE
("GPL");

17 
MODULE_AUTHOR
("Marc Boucher <marc@mbsi.ca>");

18 
MODULE_DESCRIPTION
("iptables mark matching module");

21 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

22 c⁄° 
√t_devi˚
 *
ö
,

23 c⁄° 
√t_devi˚
 *
out
,

24 c⁄° *
m©chöfo
,

25 
off£t
,

26 *
hŸdr›
)

28 c⁄° 
ùt_m¨k_öfo
 *
öfo
 = 
m©chöfo
;

30  ((
skb
->
nfm¨k
 & 
öfo
->
mask
Ë=öfo->
m¨k
Ë^ info->
övît
;

31 
	}
}

34 
	$checkíåy
(c⁄° *
èbÀ«me
,

35 c⁄° 
ùt_ù
 *
ù
,

36 *
m©chöfo
,

37 
m©chsize
,

38 
hook_mask
)

40 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_m¨k_öfo
)))

44 
	}
}

46 
ùt_m©ch
 
	gm¨k_m©ch
 = {

47 .
«me
 = "mark",

48 .
	gm©ch
 = &
m©ch
,

49 .
	gcheckíåy
 = &
checkíåy
,

50 .
	gme
 = 
THIS_MODULE
,

53 
__öô
 
	$öô
()

55  
	`ùt_ªgi°î_m©ch
(&
m¨k_m©ch
);

56 
	}
}

58 
__exô
 
	$föi
()

60 
	`ùt_uƒegi°î_m©ch
(&
m¨k_m©ch
);

61 
	}
}

63 
moduÀ_öô
(
öô
);

64 
moduÀ_exô
(
föi
);

	@ipt_mark.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ipt_multiport.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/udp.h
>

15 
	~<löux/skbuff.h
>

17 
	~<löux/√tfûãr_ùv4/ùt_mu…ù‹t.h
>

18 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

20 
MODULE_LICENSE
("GPL");

21 
MODULE_AUTHOR
("Netfilter Core Team <coreteam@netfilter.org>");

22 
MODULE_DESCRIPTION
("iptables multipleÖort match module");

25 
	#du¥ötf
(
f‹m©
, 
¨gs
...Ë
	`¥ötk
(f‹m© , ##árgs)

	)

27 
	#du¥ötf
(
f‹m©
, 
¨gs
...)

	)

31 
ölöe
 

32 
	$p‹ts_m©ch
(c⁄° 
u_öt16_t
 *
p‹éi°
, 
ùt_mu…ù‹t_Êags
 
Êags
,

33 
u_öt8_t
 
cou¡
, 
u_öt16_t
 
§c
, u_öt16_à
d°
)

35 
i
;

36 
i
=0; i<
cou¡
; i++) {

37 i‡(
Êags
 !
IPT_MULTIPORT_DESTINATION


38 && 
p‹éi°
[
i
] =
§c
)

41 i‡(
Êags
 !
IPT_MULTIPORT_SOURCE


42 && 
p‹éi°
[
i
] =
d°
)

47 
	}
}

50 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

51 c⁄° 
√t_devi˚
 *
ö
,

52 c⁄° 
√t_devi˚
 *
out
,

53 c⁄° *
m©chöfo
,

54 
off£t
,

55 *
hŸdr›
)

57 
u16
 
p‹ts
[2];

58 c⁄° 
ùt_mu…ù‹t
 *
mu…iöfo
 = 
m©chöfo
;

61 i‡(
off£t
)

66 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, 
p‹ts
, (ports)) < 0) {

69 
	`du¥ötf
("ipt_multiport:"

71 *
hŸdr›
 = 1;

75  
	`p‹ts_m©ch
(
mu…iöfo
->
p‹ts
,

76 
mu…iöfo
->
Êags
, mu…iöfo->
cou¡
,

77 
	`¡ohs
(
p‹ts
[0]),Çtohs(ports[1]));

78 
	}
}

82 
	$checkíåy
(c⁄° *
èbÀ«me
,

83 c⁄° 
ùt_ù
 *
ù
,

84 *
m©chöfo
,

85 
m©chsize
,

86 
hook_mask
)

88 c⁄° 
ùt_mu…ù‹t
 *
mu…iöfo
 = 
m©chöfo
;

90 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_mu…ù‹t
)))

94  (
ù
->
¥Ÿo
 =
IPPROTO_TCP
 || ip->¥Ÿÿ=
IPPROTO_UDP
)

95 && !(
ù
->
övÊags
 & 
IPT_INV_PROTO
)

96 && 
m©chsize
 =
	`IPT_ALIGN
((
ùt_mu…ù‹t
))

97 && (
mu…iöfo
->
Êags
 =
IPT_MULTIPORT_SOURCE


98 || 
mu…iöfo
->
Êags
 =
IPT_MULTIPORT_DESTINATION


99 || 
mu…iöfo
->
Êags
 =
IPT_MULTIPORT_EITHER
)

100 && 
mu…iöfo
->
cou¡
 <
IPT_MULTI_PORTS
;

101 
	}
}

103 
ùt_m©ch
 
	gmu…ù‹t_m©ch
 = {

104 .
«me
 = "multiport",

105 .
	gm©ch
 = &
m©ch
,

106 .
	gcheckíåy
 = &
checkíåy
,

107 .
	gme
 = 
THIS_MODULE
,

110 
__öô
 
	$öô
()

112  
	`ùt_ªgi°î_m©ch
(&
mu…ù‹t_m©ch
);

113 
	}
}

115 
__exô
 
	$föi
()

117 
	`ùt_uƒegi°î_m©ch
(&
mu…ù‹t_m©ch
);

118 
	}
}

120 
moduÀ_öô
(
öô
);

121 
moduÀ_exô
(
föi
);

	@ipt_owner.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/skbuff.h
>

13 
	~<löux/fûe.h
>

14 
	~<√t/sock.h
>

16 
	~<löux/√tfûãr_ùv4/ùt_ow√r.h
>

17 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

19 
MODULE_LICENSE
("GPL");

20 
MODULE_AUTHOR
("Marc Boucher <marc@mbsi.ca>");

21 
MODULE_DESCRIPTION
("iptables owner match");

24 
	$m©ch_comm
(c⁄° 
sk_buff
 *
skb
, c⁄° *
comm
)

26 
èsk_°ru˘
 *
g
, *
p
;

27 
fûes_°ru˘
 *
fûes
;

28 
i
;

30 
	`ªad_lock
(&
èskli°_lock
);

31 
	`do_óch_thªad
(
g
, 
p
) {

32 if(
	`°∫cmp
(
p
->
comm
, comm, (p->comm)))

35 
	`èsk_lock
(
p
);

36 
fûes
 = 
p
->files;

37 if(
fûes
) {

38 
	`•ö_lock
(&
fûes
->
fûe_lock
);

39 
i
=0; i < 
fûes
->
max_fds
; i++) {

40 i‡(
	`fcheck_fûes
(
fûes
, 
i
) ==

41 
skb
->
sk
->
sk_sockë
->
fûe
) {

42 
	`•ö_u∆ock
(&
fûes
->
fûe_lock
);

43 
	`èsk_u∆ock
(
p
);

44 
	`ªad_u∆ock
(&
èskli°_lock
);

48 
	`•ö_u∆ock
(&
fûes
->
fûe_lock
);

50 
	`èsk_u∆ock
(
p
);

51 } 
	`whûe_óch_thªad
(
g
, 
p
);

52 
	`ªad_u∆ock
(&
èskli°_lock
);

54 
	}
}

57 
	$m©ch_pid
(c⁄° 
sk_buff
 *
skb
, 
pid_t
 
pid
)

59 
èsk_°ru˘
 *
p
;

60 
fûes_°ru˘
 *
fûes
;

61 
i
;

63 
	`ªad_lock
(&
èskli°_lock
);

64 
p
 = 
	`föd_èsk_by_pid
(
pid
);

65 i‡(!
p
)

66 
out
;

67 
	`èsk_lock
(
p
);

68 
fûes
 = 
p
->files;

69 if(
fûes
) {

70 
	`•ö_lock
(&
fûes
->
fûe_lock
);

71 
i
=0; i < 
fûes
->
max_fds
; i++) {

72 i‡(
	`fcheck_fûes
(
fûes
, 
i
) ==

73 
skb
->
sk
->
sk_sockë
->
fûe
) {

74 
	`•ö_u∆ock
(&
fûes
->
fûe_lock
);

75 
	`èsk_u∆ock
(
p
);

76 
	`ªad_u∆ock
(&
èskli°_lock
);

80 
	`•ö_u∆ock
(&
fûes
->
fûe_lock
);

82 
	`èsk_u∆ock
(
p
);

83 
out
:

84 
	`ªad_u∆ock
(&
èskli°_lock
);

86 
	}
}

89 
	$m©ch_sid
(c⁄° 
sk_buff
 *
skb
, 
pid_t
 
sid
)

91 
èsk_°ru˘
 *
g
, *
p
;

92 
fûe
 *fûê
skb
->
sk
->
sk_sockë
->file;

93 
i
, 
found
=0;

95 
	`ªad_lock
(&
èskli°_lock
);

96 
	`do_óch_thªad
(
g
, 
p
) {

97 
fûes_°ru˘
 *
fûes
;

98 i‡(
p
->
sig«l
->
£ssi⁄
 !
sid
)

101 
	`èsk_lock
(
p
);

102 
fûes
 = 
p
->files;

103 i‡(
fûes
) {

104 
	`•ö_lock
(&
fûes
->
fûe_lock
);

105 
i
=0; i < 
fûes
->
max_fds
; i++) {

106 i‡(
	`fcheck_fûes
(
fûes
, 
i
Ë=
fûe
) {

107 
found
 = 1;

111 
	`•ö_u∆ock
(&
fûes
->
fûe_lock
);

113 
	`èsk_u∆ock
(
p
);

114 i‡(
found
)

115 
out
;

116 } 
	`whûe_óch_thªad
(
g
, 
p
);

117 
out
:

118 
	`ªad_u∆ock
(&
èskli°_lock
);

120  
found
;

121 
	}
}

124 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

125 c⁄° 
√t_devi˚
 *
ö
,

126 c⁄° 
√t_devi˚
 *
out
,

127 c⁄° *
m©chöfo
,

128 
off£t
,

129 *
hŸdr›
)

131 c⁄° 
ùt_ow√r_öfo
 *
öfo
 = 
m©chöfo
;

133 i‡(!
skb
->
sk
 || !skb->sk->
sk_sockë
 || !skb->sk->sk_sockë->
fûe
)

136 if(
öfo
->
m©ch
 & 
IPT_OWNER_UID
) {

137 i‡((
skb
->
sk
->
sk_sockë
->
fûe
->
f_uid
 !
öfo
->
uid
) ^

138 !!(
öfo
->
övît
 & 
IPT_OWNER_UID
))

142 if(
öfo
->
m©ch
 & 
IPT_OWNER_GID
) {

143 i‡((
skb
->
sk
->
sk_sockë
->
fûe
->
f_gid
 !
öfo
->
gid
) ^

144 !!(
öfo
->
övît
 & 
IPT_OWNER_GID
))

148 if(
öfo
->
m©ch
 & 
IPT_OWNER_PID
) {

149 i‡(!
	`m©ch_pid
(
skb
, 
öfo
->
pid
) ^

150 !!(
öfo
->
övît
 & 
IPT_OWNER_PID
))

154 if(
öfo
->
m©ch
 & 
IPT_OWNER_SID
) {

155 i‡(!
	`m©ch_sid
(
skb
, 
öfo
->
sid
) ^

156 !!(
öfo
->
övît
 & 
IPT_OWNER_SID
))

160 if(
öfo
->
m©ch
 & 
IPT_OWNER_COMM
) {

161 i‡(!
	`m©ch_comm
(
skb
, 
öfo
->
comm
) ^

162 !!(
öfo
->
övît
 & 
IPT_OWNER_COMM
))

167 
	}
}

170 
	$checkíåy
(c⁄° *
èbÀ«me
,

171 c⁄° 
ùt_ù
 *
ù
,

172 *
m©chöfo
,

173 
m©chsize
,

174 
hook_mask
)

176 i‡(
hook_mask


177 & ~((1 << 
NF_IP_LOCAL_OUT
Ë| (1 << 
NF_IP_POST_ROUTING
))) {

178 
	`¥ötk
("ipt_owner: only valid for LOCAL_OUT or POST_ROUTING.\n");

182 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_ow√r_öfo
))) {

183 
	`¥ötk
("M©chsizê%u !%Zu\n", 
m©chsize
,

184 
	`IPT_ALIGN
((
ùt_ow√r_öfo
)));

187 #ifde‡
CONFIG_SMP


189 i‡(((
ùt_ow√r_öfo
 *)
m©chöfo
)->
m©ch


190 & (
IPT_OWNER_PID
|
IPT_OWNER_SID
|
IPT_OWNER_COMM
)) {

191 
	`¥ötk
("ipt_owner:Öid, sidánd command matching is broken "

197 
	}
}

199 
ùt_m©ch
 
	gow√r_m©ch
 = {

200 .
«me
 = "owner",

201 .
	gm©ch
 = &
m©ch
,

202 .
	gcheckíåy
 = &
checkíåy
,

203 .
	gme
 = 
THIS_MODULE
,

206 
__öô
 
	$öô
()

208  
	`ùt_ªgi°î_m©ch
(&
ow√r_m©ch
);

209 
	}
}

211 
__exô
 
	$föi
()

213 
	`ùt_uƒegi°î_m©ch
(&
ow√r_m©ch
);

214 
	}
}

216 
moduÀ_öô
(
öô
);

217 
moduÀ_exô
(
föi
);

	@ipt_physdev.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/skbuff.h
>

13 
	~<löux/√tfûãr_ùv4/ùt_physdev.h
>

14 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

15 
	~<löux/√tfûãr_bridge.h
>

16 
	#MATCH
 1

	)

17 
	#NOMATCH
 0

	)

19 
MODULE_LICENSE
("GPL");

20 
MODULE_AUTHOR
("Bart De Schuymer <bdschuym@pandora.be>");

21 
MODULE_DESCRIPTION
("iptables bridgeÖhysical device match module");

24 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

25 c⁄° 
√t_devi˚
 *
ö
,

26 c⁄° 
√t_devi˚
 *
out
,

27 c⁄° *
m©chöfo
,

28 
off£t
,

29 *
hŸdr›
)

31 
i
;

32 c⁄° 
nuŒdev«me
[
IFNAMSIZ
];

33 c⁄° 
ùt_physdev_öfo
 *
öfo
 = 
m©chöfo
;

34 
ªt
;

35 c⁄° *
ödev
, *
outdev
;

36 
nf_bridge_öfo
 *
nf_bridge
;

41 i‡(!(
nf_bridge
 = 
skb
->nf_bridge)) {

43 i‡((
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_BRIDGED
) &&

44 !(
öfo
->
övît
 & 
IPT_PHYSDEV_OP_BRIDGED
))

45  
NOMATCH
;

46 i‡((
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_ISIN
) &&

47 !(
öfo
->
övît
 & 
IPT_PHYSDEV_OP_ISIN
))

48  
NOMATCH
;

49 i‡((
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_ISOUT
) &&

50 !(
öfo
->
övît
 & 
IPT_PHYSDEV_OP_ISOUT
))

51  
NOMATCH
;

52 i‡((
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_IN
) &&

53 !(
öfo
->
övît
 & 
IPT_PHYSDEV_OP_IN
))

54  
NOMATCH
;

55 i‡((
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_OUT
) &&

56 !(
öfo
->
övît
 & 
IPT_PHYSDEV_OP_OUT
))

57  
NOMATCH
;

58  
MATCH
;

62 i‡((
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_BRIDGED
) &&

63 (!!(
nf_bridge
->
mask
 & 
BRNF_BRIDGED
) ^

64 !(
öfo
->
övît
 & 
IPT_PHYSDEV_OP_BRIDGED
)))

65  
NOMATCH
;

67 i‡((
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_ISIN
 &&

68 (!
nf_bridge
->
physödev
 ^ !!(
öfo
->
övît
 & 
IPT_PHYSDEV_OP_ISIN
))) ||

69 (
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_ISOUT
 &&

70 (!
nf_bridge
->
physoutdev
 ^ !!(
öfo
->
övît
 & 
IPT_PHYSDEV_OP_ISOUT
))))

71  
NOMATCH
;

73 i‡(!(
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_IN
))

74 
m©ch_outdev
;

75 
ödev
 = 
nf_bridge
->
physödev
 ?Çf_bridge->physödev->
«me
 : 
nuŒdev«me
;

76 
i
 = 0, 
ªt
 = 0; i < 
IFNAMSIZ
/(); i++) {

77 
ªt
 |(((c⁄° *)
ödev
)[
i
]

78 ^ ((c⁄° *)
öfo
->
physödev
)[
i
])

79 & ((c⁄° *)
öfo
->
ö_mask
)[
i
];

82 i‡((
ªt
 =0Ë^ !(
öfo
->
övît
 & 
IPT_PHYSDEV_OP_IN
))

83  
NOMATCH
;

85 
m©ch_outdev
:

86 i‡(!(
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_OUT
))

87  
MATCH
;

88 
outdev
 = 
nf_bridge
->
physoutdev
 ?

89 
nf_bridge
->
physoutdev
->
«me
 : 
nuŒdev«me
;

90 
i
 = 0, 
ªt
 = 0; i < 
IFNAMSIZ
/(); i++) {

91 
ªt
 |(((c⁄° *)
outdev
)[
i
]

92 ^ ((c⁄° *)
öfo
->
physoutdev
)[
i
])

93 & ((c⁄° *)
öfo
->
out_mask
)[
i
];

96  (
ªt
 !0Ë^ !(
öfo
->
övît
 & 
IPT_PHYSDEV_OP_OUT
);

97 
	}
}

100 
	$checkíåy
(c⁄° *
èbÀ«me
,

101 c⁄° 
ùt_ù
 *
ù
,

102 *
m©chöfo
,

103 
m©chsize
,

104 
hook_mask
)

106 c⁄° 
ùt_physdev_öfo
 *
öfo
 = 
m©chöfo
;

108 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_physdev_öfo
)))

110 i‡(!(
öfo
->
bômask
 & 
IPT_PHYSDEV_OP_MASK
) ||

111 
öfo
->
bômask
 & ~
IPT_PHYSDEV_OP_MASK
)

114 
	}
}

116 
ùt_m©ch
 
	gphysdev_m©ch
 = {

117 .
«me
 = "physdev",

118 .
	gm©ch
 = &
m©ch
,

119 .
	gcheckíåy
 = &
checkíåy
,

120 .
	gme
 = 
THIS_MODULE
,

123 
__öô
 
	$öô
()

125  
	`ùt_ªgi°î_m©ch
(&
physdev_m©ch
);

126 
	}
}

128 
__exô
 
	$föi
()

130 
	`ùt_uƒegi°î_m©ch
(&
physdev_m©ch
);

131 
	}
}

133 
moduÀ_öô
(
öô
);

134 
moduÀ_exô
(
föi
);

	@ipt_pkttype.c

8 
	~<löux/moduÀ.h
>

9 
	~<löux/skbuff.h
>

10 
	~<löux/if_ëhî.h
>

11 
	~<löux/if_∑ckë.h
>

13 
	~<löux/√tfûãr_ùv4/ùt_pkây≥.h
>

14 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

16 
MODULE_LICENSE
("GPL");

17 
MODULE_AUTHOR
("Michal Ludvig <michal@logix.cz>");

18 
MODULE_DESCRIPTION
("IPÅables matchÅo match onÜinklayerÖacketÅype");

20 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

21 c⁄° 
√t_devi˚
 *
ö
,

22 c⁄° 
√t_devi˚
 *
out
,

23 c⁄° *
m©chöfo
,

24 
off£t
,

25 *
hŸdr›
)

27 c⁄° 
ùt_pkây≥_öfo
 *
öfo
 = 
m©chöfo
;

29  (
skb
->
pkt_ty≥
 =
öfo
->
pkây≥
Ë^ info->
övît
;

30 
	}
}

32 
	$checkíåy
(c⁄° *
èbÀ«me
,

33 c⁄° 
ùt_ù
 *
ù
,

34 *
m©chöfo
,

35 
m©chsize
,

36 
hook_mask
)

46 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_pkây≥_öfo
)))

50 
	}
}

52 
ùt_m©ch
 
	gpkây≥_m©ch
 = {

53 .
«me
 = "pkttype",

54 .
	gm©ch
 = &
m©ch
,

55 .
	gcheckíåy
 = &
checkíåy
,

56 .
	gme
 = 
THIS_MODULE
,

59 
__öô
 
	$öô
()

61  
	`ùt_ªgi°î_m©ch
(&
pkây≥_m©ch
);

62 
	}
}

64 
__exô
 
	$föi
()

66 
	`ùt_uƒegi°î_m©ch
(&
pkây≥_m©ch
);

67 
	}
}

69 
moduÀ_öô
(
öô
);

70 
moduÀ_exô
(
föi
);

	@ipt_realm.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/skbuff.h
>

14 
	~<löux/√tdevi˚.h
>

15 
	~<√t/rouã.h
>

17 
	~<löux/√tfûãr_ùv4/ùt_ªÆm.h
>

18 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

20 
MODULE_AUTHOR
("Sampsa Ranta <sampsa@netsonic.fi>");

21 
MODULE_LICENSE
("GPL");

22 
MODULE_DESCRIPTION
("iptablesÑealm match");

25 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

26 c⁄° 
√t_devi˚
 *
ö
,

27 c⁄° 
√t_devi˚
 *
out
,

28 c⁄° *
m©chöfo
,

29 
off£t
,

30 *
hŸdr›
)

32 c⁄° 
ùt_ªÆm_öfo
 *
öfo
 = 
m©chöfo
;

33 
d°_íåy
 *
d°
 = 
skb
->dst;

35  (
öfo
->
id
 =(
d°
->
t˛assid
 & info->
mask
)Ë^ info->
övît
;

36 
	}
}

38 
	$check
(c⁄° *
èbÀ«me
,

39 c⁄° 
ùt_ù
 *
ù
,

40 *
m©chöfo
,

41 
m©chsize
,

42 
hook_mask
)

44 i‡(
hook_mask


45 & ~((1 << 
NF_IP_POST_ROUTING
Ë| (1 << 
NF_IP_FORWARD
) |

46 (1 << 
NF_IP_LOCAL_OUT
Ë| (1 << 
NF_IP_LOCAL_IN
))) {

47 
	`¥ötk
("ipt_realm: only valid for POST_ROUTING, LOCAL_OUT, "

51 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_ªÆm_öfo
))) {

52 
	`¥ötk
("ipt_realm: invalid matchsize.\n");

56 
	}
}

58 
ùt_m©ch
 
	gªÆm_m©ch
 = {

59 .
«me
 = "realm",

60 .
	gm©ch
 = 
m©ch
,

61 .
	gcheckíåy
 = 
check
,

62 .
	gme
 = 
THIS_MODULE


65 
__öô
 
	$öô
()

67  
	`ùt_ªgi°î_m©ch
(&
ªÆm_m©ch
);

68 
	}
}

70 
__exô
 
	$föi
()

72 
	`ùt_uƒegi°î_m©ch
(&
ªÆm_m©ch
);

73 
	}
}

75 
moduÀ_öô
(
öô
);

76 
moduÀ_exô
(
föi
);

	@ipt_recent.c

9 
	~<löux/moduÀ.h
>

10 
	~<löux/skbuff.h
>

11 
	~<löux/¥oc_fs.h
>

12 
	~<löux/•ölock.h
>

13 
	~<löux/öãºu±.h
>

14 
	~<asm/uac˚ss.h
>

15 
	~<löux/˘y≥.h
>

16 
	~<löux/ù.h
>

17 
	~<löux/vmÆloc.h
>

19 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

20 
	~<löux/√tfûãr_ùv4/ùt_ª˚¡.h
>

22 #unde‡
DEBUG


23 
	#HASH_LOG
 9

	)

26 
	gù_li°_tŸ
 = 100;

27 
	gù_pkt_li°_tŸ
 = 20;

28 
	gù_li°_hash_size
 = 0;

29 
	gù_li°_≥rms
 = 0644;

30 #ifde‡
DEBUG


31 
	gdebug
 = 1;

34 
	gvîsi⁄
[] =

35 
KERN_INFO
 
RECENT_NAME
 " " 
RECENT_VER
 ": Stephen Frost <sfrost@snowman.net>. http://snowman.net/projects/ipt_recent/\n";

37 
MODULE_AUTHOR
("Stephen Frost <sfrost@snowman.net>");

38 
MODULE_DESCRIPTION
("IPÅabÀ†ª˚¡ly sì¿m©chög moduÀ " 
RECENT_VER
);

39 
MODULE_LICENSE
("GPL");

40 
MODULE_PARM
(
ù_li°_tŸ
,"i");

41 
MODULE_PARM
(
ù_pkt_li°_tŸ
,"i");

42 
MODULE_PARM
(
ù_li°_hash_size
,"i");

43 
MODULE_PARM
(
ù_li°_≥rms
,"i");

44 #ifde‡
DEBUG


45 
MODULE_PARM
(
debug
,"i");

46 
MODULE_PARM_DESC
(
debug
,"debuggingÜevel, defaultsÅo 1");

48 
MODULE_PARM_DESC
(
ù_li°_tŸ
,"number of IPsÅoÑememberÖerÜist");

49 
MODULE_PARM_DESC
(
ù_pkt_li°_tŸ
,"number ofÖacketsÖer IPÅoÑemember");

50 
MODULE_PARM_DESC
(
ù_li°_hash_size
,"size of hashÅable usedÅoÜook up IPs");

51 
MODULE_PARM_DESC
(
ù_li°_≥rms
,"permissions on /proc/net/ipt_recent/* files");

54 
	sª˚¡_ù_li°
 {

55 
u_öt32_t
 
	maddr
;

56 
u_öt8_t
 
	mâl
;

57 
	mœ°_£í
;

58 *
	mœ°_pkts
;

59 
u_öt32_t
 
	mﬁde°_pkt
;

60 
u_öt32_t
 
	mhash_íåy
;

61 
u_öt32_t
 
	mtime_pos
;

64 
	stime_öfo_li°
 {

65 
u_öt32_t
 
	mposôi⁄
;

66 
u_öt32_t
 
	mtime
;

70 
	sª˚¡_ù_èbÀs
 {

71 
	m«me
[
IPT_RECENT_NAME_LEN
];

72 
	mcou¡
;

73 
	mtime_pos
;

74 
ª˚¡_ù_li°
 *
	mèbÀ
;

75 
ª˚¡_ù_èbÀs
 *
	m√xt
;

76 
•ölock_t
 
	mli°_lock
;

77 *
	mhash_èbÀ
;

78 
time_öfo_li°
 *
	mtime_öfo
;

79 #ifde‡
CONFIG_PROC_FS


80 
¥oc_dú_íåy
 *
	m°©us_¥oc
;

87 
ª˚¡_ù_èbÀs
 *
	gr_èbÀs
 = 
NULL
;

92 
•ölock_t
 
	gª˚¡_lock
 = 
SPIN_LOCK_UNLOCKED
;

94 #ifde‡
CONFIG_PROC_FS


96 
¥oc_dú_íåy
 *
	g¥oc_√t_ùt_ª˚¡
 = 
NULL
;

101 
m©ch
(c⁄° 
sk_buff
 *
skb
,

102 c⁄° 
√t_devi˚
 *
ö
,

103 c⁄° 
√t_devi˚
 *
out
,

104 c⁄° *
m©chöfo
,

105 
off£t
,

106 *
hŸdr›
);

109 
	$hash_func
(
addr
, 
èbÀ_size
)

111 
ªsu…
 = 0;

112 
vÆue
 = 
addr
;

113 dÿ{ 
ªsu…
 ^
vÆue
; } (vÆuê>>
HASH_LOG
));

115 #ifde‡
DEBUG


116 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": %d = hash_func(%u,%d)\n",

117 
ªsu…
 & (
èbÀ_size
 - 1),

118 
addr
,

119 
èbÀ_size
);

122 (
ªsu…
 & (
èbÀ_size
 - 1));

123 
	}
}

125 #ifde‡
CONFIG_PROC_FS


131 
	$ù_ª˚¡_gë_öfo
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
, *
eof
, *
d©a
)

133 
Àn
 = 0, 
cou¡
, 
œ°_Àn
 = 0, 
pkt_cou¡
;

134 
off_t
 
pos
 = 0;

135 
off_t
 
begö
 = 0;

136 
ª˚¡_ù_èbÀs
 *
cuº_èbÀ
;

138 
cuº_èbÀ
 = (
ª˚¡_ù_èbÀs
*Ë
d©a
;

140 
	`•ö_lock_bh
(&
cuº_èbÀ
->
li°_lock
);

141 
cou¡
 = 0; cou¡ < 
ù_li°_tŸ
; count++) {

142 if(!
cuº_èbÀ
->
èbÀ
[
cou¡
].
addr
) ;

143 
œ°_Àn
 = 
Àn
;

144 
Àn
 +
	`•rötf
(
buf„r
+Àn,"§c=%u.%u.%u.%u ",
	`NIPQUAD
(
cuº_èbÀ
->
èbÀ
[
cou¡
].
addr
));

145 
Àn
 +
	`•rötf
(
buf„r
+Àn,"âl: %u ",
cuº_èbÀ
->
èbÀ
[
cou¡
].
âl
);

146 
Àn
 +
	`•rötf
(
buf„r
+Àn,"œ°_£í: %lu ",
cuº_èbÀ
->
èbÀ
[
cou¡
].
œ°_£í
);

147 
Àn
 +
	`•rötf
(
buf„r
+Àn,"ﬁde°_pkt: %u ",
cuº_èbÀ
->
èbÀ
[
cou¡
].
ﬁde°_pkt
);

148 
Àn
 +
	`•rötf
(
buf„r
+Àn,"œ°_pkts: %lu",
cuº_èbÀ
->
èbÀ
[
cou¡
].
œ°_pkts
[0]);

149 
pkt_cou¡
 = 1;Ökt_cou¡ < 
ù_pkt_li°_tŸ
;Ökt_count++) {

150 if(!
cuº_èbÀ
->
èbÀ
[
cou¡
].
œ°_pkts
[
pkt_cou¡
]) ;

151 
Àn
 +
	`•rötf
(
buf„r
+Àn,", %lu",
cuº_èbÀ
->
èbÀ
[
cou¡
].
œ°_pkts
[
pkt_cou¡
]);

153 
Àn
 +
	`•rötf
(
buf„r
+len,"\n");

154 
pos
 = 
begö
 + 
Àn
;

155 if(
pos
 < 
off£t
Ë{ 
Àn
 = 0; 
begö
 =Öos; }

156 if(
pos
 > 
off£t
 + 
Àngth
Ë{ 
Àn
 = 
œ°_Àn
; ; }

159 *
°¨t
 = 
buf„r
 + (
off£t
 - 
begö
);

160 
Àn
 -(
off£t
 - 
begö
);

161 if(
Àn
 > 
Àngth
)Üen =Üength;

163 
	`•ö_u∆ock_bh
(&
cuº_èbÀ
->
li°_lock
);

164  
Àn
;

165 
	}
}

178 
	$ù_ª˚¡_˘æ
(
fûe
 *fûe, c⁄° 
__u£r
 *
öput
, 
size
, *
d©a
)

180 c⁄° 
u_öt32_t
 
max
[4] = { 0xffffffff, 0xffffff, 0xffff, 0xff };

181 
u_öt32_t
 
vÆ
;

182 
ba£
, 
u£d
 = 0;

183 
c
, *
˝
;

184 
	uüddr
 {

185 
uöt8_t
 
byãs
[4];

186 
uöt32_t
 
w‹d
;

187 } 
ªs
;

188 
uöt8_t
 *
µ
 = 
ªs
.
byãs
;

189 
digô
;

191 
buf„r
[20];

192 
Àn
, 
check_£t
 = 0, 
cou¡
;

193 
u_öt32_t
 
addr
 = 0;

194 
sk_buff
 *
skb
;

195 
ùt_ª˚¡_öfo
 *
öfo
;

196 
ª˚¡_ù_èbÀs
 *
cuº_èbÀ
;

198 
cuº_èbÀ
 = (
ª˚¡_ù_èbÀs
*Ë
d©a
;

200 if(
size
 > 20Ë
Àn
 = 20; len = size;

202 if(
	`c›y_‰om_u£r
(
buf„r
,
öput
,
Àn
)Ë -
EFAULT
;

204 if(
Àn
 < 20Ë
buf„r
[len] = '\0';

206 #ifde‡
DEBUG


207 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": ip_ª˚¡_˘æÜí: %d, i≈ut: `%.20s'\n",
Àn
,
buf„r
);

210 
˝
 = 
buf„r
;

211 
	`is•a˚
(*
˝
)Ë{ cp++; 
u£d
++; if(u£d >
Àn
-5)  used; }

214 if(!
	`memcmp
(
˝
,"clear",5)) {

215 
u£d
 += 5;

216 
	`•ö_lock_bh
(&
cuº_èbÀ
->
li°_lock
);

217 
cuº_èbÀ
->
time_pos
 = 0;

218 
cou¡
 = 0; cou¡ < 
ù_li°_hash_size
; count++) {

219 
cuº_èbÀ
->
hash_èbÀ
[
cou¡
] = -1;

221 
cou¡
 = 0; cou¡ < 
ù_li°_tŸ
; count++) {

222 
cuº_èbÀ
->
èbÀ
[
cou¡
].
œ°_£í
 = 0;

223 
cuº_èbÀ
->
èbÀ
[
cou¡
].
addr
 = 0;

224 
cuº_èbÀ
->
èbÀ
[
cou¡
].
âl
 = 0;

225 
	`mem£t
(
cuº_èbÀ
->
èbÀ
[
cou¡
].
œ°_pkts
,0,
ù_pkt_li°_tŸ
*(
u_öt32_t
));

226 
cuº_èbÀ
->
èbÀ
[
cou¡
].
ﬁde°_pkt
 = 0;

227 
cuº_èbÀ
->
èbÀ
[
cou¡
].
time_pos
 = 0;

228 
cuº_èbÀ
->
time_öfo
[
cou¡
].
posôi⁄
 = count;

229 
cuº_èbÀ
->
time_öfo
[
cou¡
].
time
 = 0;

231 
	`•ö_u∆ock_bh
(&
cuº_èbÀ
->
li°_lock
);

232  
u£d
;

235 
check_£t
 = 
IPT_RECENT_SET
;

236 *
˝
) {

237 '+': 
check_£t
 = 
IPT_RECENT_SET
; 
˝
++; 
u£d
++; ;

238 '-': 
check_£t
 = 
IPT_RECENT_REMOVE
; 
˝
++; 
u£d
++; ;

239 : if(!
	`isdigô
(*
˝
)Ë (
u£d
+1); ;

242 #ifde‡
DEBUG


243 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": ip_ª˚¡_˘æ cp: `%c', check_£t: %d\n",*
˝
,
check_£t
);

250 
ªs
.
w‹d
 = 0;

252 
c
 = *
˝
;

254 if(!
	`isdigô
(
c
)Ë 
u£d
;

255 
vÆ
 = 0; 
ba£
 = 10; 
digô
 = 0;

256 if(
c
 == '0') {

257 
c
 = *++
˝
;

258 if(
c
 ='x' || c ='X'Ë
ba£
 = 16, c = *++
˝
;

259 { 
ba£
 = 8; 
digô
 = 1; }

262 if(
	`ißscii
(
c
Ë&& 
	`isdigô
(c)) {

263 if(
ba£
 =8 && (
c
 ='8' || c ='0')Ë 
u£d
;

264 
vÆ
 = (vÆ * 
ba£
Ë+ (
c
 - '0');

265 
c
 = *++
˝
;

266 
digô
 = 1;

267 } if(
ba£
 =16 && 
	`ißscii
(
c
Ë&& 
	`isxdigô
(c)) {

268 
vÆ
 = (vÆ << 4Ë| (
c
 + 10 - (
	`i¶owî
(c) ? 'a' : 'A'));

269 
c
 = *++
˝
;

270 
digô
 = 1;

273 if(
c
 == '.') {

274 if(
µ
 > 
ªs
.
byãs
 + 2 || 
vÆ
 > 0xffË 
u£d
;

275 *
µ
++ = 
vÆ
;

276 
c
 = *++
˝
;

279 
u£d
 = 
˝
 - 
buf„r
;

280 if(
c
 !'\0' && (!
	`ißscii
(cË|| !
	`is•a˚
(c))Ë 
u£d
;

281 if(
c
 ='\n'Ë
u£d
++;

282 if(!
digô
Ë 
u£d
;

284 if(
vÆ
 > 
max
[
µ
 - 
ªs
.
byãs
]Ë 
u£d
;

285 
addr
 = 
ªs
.
w‹d
 | 
	`ht⁄l
(
vÆ
);

287 if(!
addr
 && 
check_£t
 =
IPT_RECENT_SET
Ë 
u£d
;

289 #ifde‡
DEBUG


290 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": ip_ª˚¡_˘æ c: %c,áddr: %u u£d: %d\n",
c
,
addr
,
u£d
);

294 
öfo
 = 
	`kmÆloc
((
ùt_ª˚¡_öfo
),
GFP_KERNEL
);

295 if(!
öfo
Ë{  -
ENOMEM
; }

296 
öfo
->
£c⁄ds
 = 0;

297 
öfo
->
hô_cou¡
 = 0;

298 
öfo
->
check_£t
 = check_set;

299 
öfo
->
övît
 = 0;

300 
öfo
->
side
 = 
IPT_RECENT_SOURCE
;

301 
	`°∫˝y
(
öfo
->
«me
,
cuº_èbÀ
->«me,
IPT_RECENT_NAME_LEN
);

302 
öfo
->
«me
[
IPT_RECENT_NAME_LEN
-1] = '\0';

304 
skb
 = 
	`kmÆloc
((
sk_buff
),
GFP_KERNEL
);

305 i‡(!
skb
) {

306 
u£d
 = -
ENOMEM
;

307 
out_‰ì_öfo
;

309 
skb
->
nh
.
ùh
 = 
	`kmÆloc
((
ùhdr
),
GFP_KERNEL
);

310 i‡(!
skb
->
nh
.
ùh
) {

311 
u£d
 = -
ENOMEM
;

312 
out_‰ì_skb
;

315 
skb
->
nh
.
ùh
->
ßddr
 = 
addr
;

316 
skb
->
nh
.
ùh
->
daddr
 = 0;

318 
skb
->
nh
.
ùh
->
âl
 = 0;

319 
	`m©ch
(
skb
,
NULL
,NULL,
öfo
,0,NULL);

321 
	`k‰ì
(
skb
->
nh
.
ùh
);

322 
out_‰ì_skb
:

323 
	`k‰ì
(
skb
);

324 
out_‰ì_öfo
:

325 
	`k‰ì
(
öfo
);

327 #ifde‡
DEBUG


328 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": Lóvög ip_ª˚¡_˘æáddr: %u u£d: %d\n",
addr
,
u£d
);

330  
u£d
;

331 
	}
}

354 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

355 c⁄° 
√t_devi˚
 *
ö
,

356 c⁄° 
√t_devi˚
 *
out
,

357 c⁄° *
m©chöfo
,

358 
off£t
,

359 *
hŸdr›
)

361 
pkt_cou¡
, 
hôs_found
, 
™s
;

362 
now
;

363 c⁄° 
ùt_ª˚¡_öfo
 *
öfo
 = 
m©chöfo
;

364 
u_öt32_t
 
addr
 = 0, 
time_ãmp
;

365 
u_öt8_t
 
âl
 = 
skb
->
nh
.
ùh
->ttl;

366 *
hash_èbÀ
;

367 
‹ig_hash_ªsu…
, 
hash_ªsu…
, 
ãmp
, 
loˇti⁄
 = 0, 
time_loc
, 
íd_cﬁlisi⁄_chaö
 = -1;

368 
time_öfo_li°
 *
time_öfo
;

369 
ª˚¡_ù_èbÀs
 *
cuº_èbÀ
;

370 
ª˚¡_ù_èbÀs
 *
œ°_èbÀ
;

371 
ª˚¡_ù_li°
 *
r_li°
;

373 #ifde‡
DEBUG


374 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": match() called\n");

378 
™s
 = 
öfo
->
övît
;

380 #ifde‡
DEBUG


381 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": m©ch():Çamê'%s'\n",
öfo
->
«me
);

386 if(
out
Ë
âl
++;

389 
	`•ö_lock_bh
(&
ª˚¡_lock
);

390 
cuº_èbÀ
 = 
r_èbÀs
;

391  (
œ°_èbÀ
 = 
cuº_èbÀ
Ë&& 
	`°∫cmp
(
öfo
->
«me
,cuº_èbÀ->«me,
IPT_RECENT_NAME_LEN
Ë&& (cuº_èbÀ = cuº_èbÀ->
√xt
) );

393 #ifde‡
DEBUG


394 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": m©ch():ÅabÀ found('%s')\n",
öfo
->
«me
);

397 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

400 if(!
cuº_èbÀ
Ë{  
™s
; }

403 
	`•ö_lock_bh
(&
cuº_èbÀ
->
li°_lock
);

405 
r_li°
 = 
cuº_èbÀ
->
èbÀ
;

406 if(
öfo
->
side
 =
IPT_RECENT_DEST
Ë
addr
 = 
skb
->
nh
.
ùh
->
daddr
; add∏skb->nh.ùh->
ßddr
;

408 if(!
addr
) {

409 #ifde‡
DEBUG


410 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": m©ch(Ëaddªs†(%uËövÆid,Üóvög.\n",
addr
);

412 
	`•ö_u∆ock_bh
(&
cuº_èbÀ
->
li°_lock
);

413  
™s
;

416 #ifde‡
DEBUG


417 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": m©ch(): checkögÅabÀ,áddr: %u,Åé: %u, orig_âl: %u\n",
addr
,
âl
,
skb
->
nh
.
ùh
->ttl);

421 
now
 = 
jiffõs
;

422 
hash_èbÀ
 = 
cuº_èbÀ
->hash_table;

423 
time_öfo
 = 
cuº_èbÀ
->time_info;

425 
‹ig_hash_ªsu…
 = 
hash_ªsu…
 = 
	`hash_func
(
addr
,
ù_li°_hash_size
);

431 if(
öfo
->
check_£t
 & 
IPT_RECENT_TTL
) {

432 
hash_èbÀ
[
hash_ªsu…
] !-1 && !(
r_li°
[hash_èbÀ[hash_ªsu…]].
addr
 ==áddr &&

433 (!
r_li°
[
hash_èbÀ
[
hash_ªsu…
]].
âl
 ||Ñ_list[hash_table[hash_result]].ttl ==Åtl))) {

435 
hash_ªsu…
 = (hash_ªsu… + 1Ë% 
ù_li°_hash_size
;

438 
hash_èbÀ
[
hash_ªsu…
] !-1 && 
r_li°
[hash_èbÀ[hash_ªsu…]].
addr
 !=áddr) {

440 
hash_ªsu…
 = (hash_ªsu… + 1Ë% 
ù_li°_hash_size
;

444 if(
hash_èbÀ
[
hash_ªsu…
] =-1 && !(
öfo
->
check_£t
 & 
IPT_RECENT_SET
)) {

446 
	`•ö_u∆ock_bh
(&
cuº_èbÀ
->
li°_lock
);

447  
™s
;

451 if(
‹ig_hash_ªsu…
 !
hash_ªsu…
 && !(
öfo
->
check_£t
 & 
IPT_RECENT_REMOVE
)) {

452 #ifde‡
DEBUG


453 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": match(): Collision in hashÅable. (or: %d,hr: %d,oa: %u,ha: %u)\n",

454 
‹ig_hash_ªsu…
,

455 
hash_ªsu…
,

456 
r_li°
[
hash_èbÀ
[
‹ig_hash_ªsu…
]].
addr
,

457 
addr
);

463 #ifde‡
DEBUG


464 if(
debug
) {

465 
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": m©ch(): Cﬁlisi⁄; hash_èbÀ[‹ig_hash_ªsu…] = %d\n",
hash_èbÀ
[
‹ig_hash_ªsu…
]);

466 
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": match(): Collision;Ñ_list[hash_table[orig_hash_result]].hash_entry = %d\n",

467 
r_li°
[
hash_èbÀ
[
‹ig_hash_ªsu…
]].
hash_íåy
);

471 
r_li°
[
hash_èbÀ
[
‹ig_hash_ªsu…
]].
hash_íåy
 = 
hash_ªsu…
;

474 
ãmp
 = 
hash_èbÀ
[
‹ig_hash_ªsu…
];

475 #ifde‡
DEBUG


476 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": m©ch(): Cﬁlisi⁄; hash_èbÀ[hash_ªsu…] = %d\n",
hash_èbÀ
[
hash_ªsu…
]);

478 
hash_èbÀ
[
‹ig_hash_ªsu…
] = hash_èbÀ[
hash_ªsu…
];

479 
hash_èbÀ
[
hash_ªsu…
] = 
ãmp
;

480 
ãmp
 = 
hash_ªsu…
;

481 
hash_ªsu…
 = 
‹ig_hash_ªsu…
;

482 
‹ig_hash_ªsu…
 = 
ãmp
;

483 
time_öfo
[
r_li°
[
hash_èbÀ
[
‹ig_hash_ªsu…
]].
time_pos
].
posôi⁄
 = hash_table[orig_hash_result];

484 if(
hash_èbÀ
[
hash_ªsu…
] != -1) {

485 
r_li°
[
hash_èbÀ
[
hash_ªsu…
]].
hash_íåy
 = hash_result;

486 
time_öfo
[
r_li°
[
hash_èbÀ
[
hash_ªsu…
]].
time_pos
].
posôi⁄
 = hash_table[hash_result];

489 #ifde‡
DEBUG


490 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": match(): Collision handled.\n");

494 if(
hash_èbÀ
[
hash_ªsu…
] == -1) {

495 #ifde‡
DEBUG


496 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": match(): NewÅableÉntry. (hr: %d,ha: %u)\n",

497 
hash_ªsu…
, 
addr
);

501 
loˇti⁄
 = 
time_öfo
[
cuº_èbÀ
->
time_pos
].
posôi⁄
;

502 
hash_èbÀ
[
r_li°
[
loˇti⁄
].
hash_íåy
] = -1;

503 
hash_èbÀ
[
hash_ªsu…
] = 
loˇti⁄
;

504 
	`mem£t
(
r_li°
[
loˇti⁄
].
œ°_pkts
,0,
ù_pkt_li°_tŸ
*(
u_öt32_t
));

505 
r_li°
[
loˇti⁄
].
time_pos
 = 
cuº_èbÀ
->time_pos;

506 
r_li°
[
loˇti⁄
].
addr
 =áddr;

507 
r_li°
[
loˇti⁄
].
âl
 =Åtl;

508 
r_li°
[
loˇti⁄
].
œ°_£í
 = 
now
;

509 
r_li°
[
loˇti⁄
].
ﬁde°_pkt
 = 1;

510 
r_li°
[
loˇti⁄
].
œ°_pkts
[0] = 
now
;

511 
r_li°
[
loˇti⁄
].
hash_íåy
 = 
hash_ªsu…
;

512 
time_öfo
[
cuº_èbÀ
->
time_pos
].
time
 = 
r_li°
[
loˇti⁄
].
œ°_£í
;

513 
cuº_èbÀ
->
time_pos
 = (cuº_èbÀ->time_po†+ 1Ë% 
ù_li°_tŸ
;

515 
™s
 = !
öfo
->
övît
;

517 #ifde‡
DEBUG


518 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": match(): ExistingÅableÉntry. (hr: %d,ha: %u)\n",

519 
hash_ªsu…
,

520 
addr
);

524 
loˇti⁄
 = 
hash_èbÀ
[
hash_ªsu…
];

527 if(
öfo
->
check_£t
 & 
IPT_RECENT_CHECK
 || info->check_£à& 
IPT_RECENT_UPDATE
) {

528 if(!
öfo
->
£c⁄ds
 && !öfo->
hô_cou¡
Ë
™s
 = !öfo->
övît
; ans = info->invert;

529 if(
öfo
->
£c⁄ds
 && !öfo->
hô_cou¡
) {

530 if(
	`time_bef‹e_eq
(
now
,
r_li°
[
loˇti⁄
].
œ°_£í
+
öfo
->
£c⁄ds
*
HZ
)Ë
™s
 = !öfo->
övît
; ans = info->invert;

532 if(
öfo
->
£c⁄ds
 && info->
hô_cou¡
) {

533 
pkt_cou¡
 = 0, 
hôs_found
 = 0;Ökt_cou¡ < 
ù_pkt_li°_tŸ
;Ökt_count++) {

534 if(
	`time_bef‹e_eq
(
now
,
r_li°
[
loˇti⁄
].
œ°_pkts
[
pkt_cou¡
]+
öfo
->
£c⁄ds
*
HZ
)Ë
hôs_found
++;

536 if(
hôs_found
 >
öfo
->
hô_cou¡
Ë
™s
 = !öfo->
övît
; ans = info->invert;

538 if(
öfo
->
hô_cou¡
 && !öfo->
£c⁄ds
) {

539 
pkt_cou¡
 = 0, 
hôs_found
 = 0;Ökt_cou¡ < 
ù_pkt_li°_tŸ
;Ökt_count++) {

540 if(
r_li°
[
loˇti⁄
].
œ°_pkts
[
pkt_cou¡
] == 0) ;

541 
hôs_found
++;

543 if(
hôs_found
 >
öfo
->
hô_cou¡
Ë
™s
 = !öfo->
övît
; ans = info->invert;

546 #ifde‡
DEBUG


547 if(
debug
) {

548 if(
™s
)

549 
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": m©ch(): m©cháddr: %u\n",
addr
);

551 
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": m©ch():Çÿm©cháddr: %u\n",
addr
);

557 if((
öfo
->
check_£t
 & 
IPT_RECENT_SET
 && (
™s
 = !öfo->
övît
)Ë|| (öfo->check_£à& 
IPT_RECENT_UPDATE
 &&áns)) {

558 #ifde‡
DEBUG


559 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": match(): SET or UPDATE; updatingÅime info.\n");

562 
time_loc
 = 
r_li°
[
loˇti⁄
].
time_pos
;

563 
time_öfo
[
time_loc
].
time
 = 
now
;

564 
time_öfo
[
time_loc
].
posôi⁄
 = 
loˇti⁄
;

565 (
time_öfo
[(
time_loc
+1Ë% 
ù_li°_tŸ
].
time
 <Åime_öfo[time_loc].timeË&& (—ime_loc+1Ë% ip_li°_tŸË!
cuº_èbÀ
->
time_pos
) {

566 
time_ãmp
 = 
time_öfo
[
time_loc
].
time
;

567 
time_öfo
[
time_loc
].
time
 =Åime_öfo[—ime_loc+1)%
ù_li°_tŸ
].time;

568 
time_öfo
[(
time_loc
+1)%
ù_li°_tŸ
].
time
 = 
time_ãmp
;

569 
time_ãmp
 = 
time_öfo
[
time_loc
].
posôi⁄
;

570 
time_öfo
[
time_loc
].
posôi⁄
 =Åime_öfo[—ime_loc+1)%
ù_li°_tŸ
].position;

571 
time_öfo
[(
time_loc
+1)%
ù_li°_tŸ
].
posôi⁄
 = 
time_ãmp
;

572 
r_li°
[
time_öfo
[
time_loc
].
posôi⁄
].
time_pos
 =Åime_loc;

573 
r_li°
[
time_öfo
[(
time_loc
+1)%
ù_li°_tŸ
].
posôi⁄
].
time_pos
 = (time_loc+1)%ip_list_tot;

574 
time_loc
 = (time_loc+1Ë% 
ù_li°_tŸ
;

576 
r_li°
[
loˇti⁄
].
time_pos
 = 
time_loc
;

577 
r_li°
[
loˇti⁄
].
âl
 =Åtl;

578 
r_li°
[
loˇti⁄
].
œ°_pkts
[r_li°[loˇti⁄].
ﬁde°_pkt
] = 
now
;

579 
r_li°
[
loˇti⁄
].
ﬁde°_pkt
 = ++r_li°[loˇti⁄].ﬁde°_pkà% 
ù_pkt_li°_tŸ
;

580 
r_li°
[
loˇti⁄
].
œ°_£í
 = 
now
;

583 if(
öfo
->
check_£t
 & 
IPT_RECENT_REMOVE
) {

584 #ifde‡
DEBUG


585 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": m©ch(): REMOVE; cÀ¨ögÉ¡ry (‹: %d, hr: %d).\n",
‹ig_hash_ªsu…
,
hash_ªsu…
);

588 
hash_èbÀ
[(
‹ig_hash_ªsu…
+1Ë% 
ù_li°_hash_size
] != -1) {

589 
‹ig_hash_ªsu…
++;

590 if(
	`hash_func
(
r_li°
[
hash_èbÀ
[
‹ig_hash_ªsu…
]].
addr
,
ù_li°_hash_size
Ë=
hash_ªsu…
) {

592 #ifde‡
DEBUG


593 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": match(): REMOVE; found collision chain.\n");

595 
íd_cﬁlisi⁄_chaö
 = 
‹ig_hash_ªsu…
;

598 if(
íd_cﬁlisi⁄_chaö
 != -1) {

599 #ifde‡
DEBUG


600 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": match(): REMOVE;Öart of collision chain, movingÅoÉnd.\n");

604 
r_li°
[
hash_èbÀ
[
íd_cﬁlisi⁄_chaö
]].
hash_íåy
 = 
hash_ªsu…
;

605 
ãmp
 = 
hash_èbÀ
[
íd_cﬁlisi⁄_chaö
];

606 
hash_èbÀ
[
íd_cﬁlisi⁄_chaö
] = hash_èbÀ[
hash_ªsu…
];

607 
hash_èbÀ
[
hash_ªsu…
] = 
ãmp
;

608 
time_öfo
[
r_li°
[
hash_èbÀ
[
hash_ªsu…
]].
time_pos
].
posôi⁄
 = hash_table[hash_result];

609 
hash_ªsu…
 = 
íd_cﬁlisi⁄_chaö
;

610 
r_li°
[
hash_èbÀ
[
hash_ªsu…
]].
hash_íåy
 = hash_result;

611 
time_öfo
[
r_li°
[
hash_èbÀ
[
hash_ªsu…
]].
time_pos
].
posôi⁄
 = hash_table[hash_result];

613 
loˇti⁄
 = 
hash_èbÀ
[
hash_ªsu…
];

614 
hash_èbÀ
[
r_li°
[
loˇti⁄
].
hash_íåy
] = -1;

615 
time_loc
 = 
r_li°
[
loˇti⁄
].
time_pos
;

616 
time_öfo
[
time_loc
].
time
 = 0;

617 
time_öfo
[
time_loc
].
posôi⁄
 = 
loˇti⁄
;

618 (
time_öfo
[(
time_loc
+1Ë% 
ù_li°_tŸ
].
time
 <Åime_öfo[time_loc].timeË&& (—ime_loc+1Ë% ip_li°_tŸË!
cuº_èbÀ
->
time_pos
) {

619 
time_ãmp
 = 
time_öfo
[
time_loc
].
time
;

620 
time_öfo
[
time_loc
].
time
 =Åime_öfo[—ime_loc+1)%
ù_li°_tŸ
].time;

621 
time_öfo
[(
time_loc
+1)%
ù_li°_tŸ
].
time
 = 
time_ãmp
;

622 
time_ãmp
 = 
time_öfo
[
time_loc
].
posôi⁄
;

623 
time_öfo
[
time_loc
].
posôi⁄
 =Åime_öfo[—ime_loc+1)%
ù_li°_tŸ
].position;

624 
time_öfo
[(
time_loc
+1)%
ù_li°_tŸ
].
posôi⁄
 = 
time_ãmp
;

625 
r_li°
[
time_öfo
[
time_loc
].
posôi⁄
].
time_pos
 =Åime_loc;

626 
r_li°
[
time_öfo
[(
time_loc
+1)%
ù_li°_tŸ
].
posôi⁄
].
time_pos
 = (time_loc+1)%ip_list_tot;

627 
time_loc
 = (time_loc+1Ë% 
ù_li°_tŸ
;

629 
r_li°
[
loˇti⁄
].
time_pos
 = 
time_loc
;

630 
r_li°
[
loˇti⁄
].
œ°_£í
 = 0;

631 
r_li°
[
loˇti⁄
].
addr
 = 0;

632 
r_li°
[
loˇti⁄
].
âl
 = 0;

633 
	`mem£t
(
r_li°
[
loˇti⁄
].
œ°_pkts
,0,
ù_pkt_li°_tŸ
*(
u_öt32_t
));

634 
r_li°
[
loˇti⁄
].
ﬁde°_pkt
 = 0;

635 
™s
 = !
öfo
->
övît
;

637 
	`•ö_u∆ock_bh
(&
cuº_èbÀ
->
li°_lock
);

638  
™s
;

641 
	`•ö_u∆ock_bh
(&
cuº_èbÀ
->
li°_lock
);

642 #ifde‡
DEBUG


643 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": match()Üeft.\n");

645  
™s
;

646 
	}
}

654 
	$checkíåy
(c⁄° *
èbÀ«me
,

655 c⁄° 
ùt_ù
 *
ù
,

656 *
m©chöfo
,

657 
m©chsize
,

658 
hook_mask
)

660 
Êag
 = 0, 
c
;

661 *
hﬁd
;

662 c⁄° 
ùt_ª˚¡_öfo
 *
öfo
 = 
m©chöfo
;

663 
ª˚¡_ù_èbÀs
 *
cuº_èbÀ
, *
föd_èbÀ
, *
œ°_èbÀ
;

665 #ifde‡
DEBUG


666 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry()Éntered.\n");

669 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_ª˚¡_öfo
)))  0;

672 if(
öfo
->
check_£t
 & 
IPT_RECENT_SET
Ë{ 
Êag
++; if(öfo->
£c⁄ds
 || info->
hô_cou¡
)  0; }

673 if(
öfo
->
check_£t
 & 
IPT_RECENT_REMOVE
Ë{ 
Êag
++; if(öfo->
£c⁄ds
 || info->
hô_cou¡
)  0; }

674 if(
öfo
->
check_£t
 & 
IPT_RECENT_CHECK
Ë
Êag
++;

675 if(
öfo
->
check_£t
 & 
IPT_RECENT_UPDATE
Ë
Êag
++;

678 if(
Êag
 != 1)  0;

681 if(!
öfo
->
«me
 || !info->name[0])  0;

685 
	`•ö_lock_bh
(&
ª˚¡_lock
);

689 
föd_èbÀ
 = 
r_èbÀs
;

690  (
œ°_èbÀ
 = 
föd_èbÀ
Ë&& 
	`°∫cmp
(
öfo
->
«me
,föd_èbÀ->«me,
IPT_RECENT_NAME_LEN
Ë&& (föd_èbÀ = föd_èbÀ->
√xt
) );

693 if(
föd_èbÀ
) {

694 #ifde‡
DEBUG


695 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkíåy:ÅabÀ found (%s), in¸emítög cou¡.\n",
öfo
->
«me
);

697 
föd_èbÀ
->
cou¡
++;

698 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

702 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

707 #ifde‡
DEBUG


708 if(
debug
) {

709 
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkíåy:ÇÿèbÀ found (%s)\n",
öfo
->
«me
);

710 
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkíåy: AŒoˇti⁄g %d f‹Üök-li°É¡ry.\n",(
ª˚¡_ù_èbÀs
));

714 
cuº_èbÀ
 = 
	`vmÆloc
((
ª˚¡_ù_èbÀs
));

715 if(
cuº_èbÀ
 =
NULL
Ë -
ENOMEM
;

717 
cuº_èbÀ
->
li°_lock
 = 
SPIN_LOCK_UNLOCKED
;

718 
cuº_èbÀ
->
√xt
 = 
NULL
;

719 
cuº_èbÀ
->
cou¡
 = 1;

720 
cuº_èbÀ
->
time_pos
 = 0;

721 
	`°∫˝y
(
cuº_èbÀ
->
«me
,
öfo
->«me,
IPT_RECENT_NAME_LEN
);

722 
cuº_èbÀ
->
«me
[
IPT_RECENT_NAME_LEN
-1] = '\0';

725 #ifde‡
DEBUG


726 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry: Allocating %d forÅable (%s).\n",

727 (
ª˚¡_ù_li°
)*
ù_li°_tŸ
,

728 
öfo
->
«me
);

731 
cuº_èbÀ
->
èbÀ
 = 
	`vmÆloc
((
ª˚¡_ù_li°
)*
ù_li°_tŸ
);

732 if(
cuº_èbÀ
->
èbÀ
 =
NULL
Ë{ 
	`v‰ì
(cuº_èbÀ);  -
ENOMEM
; }

733 
	`mem£t
(
cuº_èbÀ
->
èbÀ
,0,(
ª˚¡_ù_li°
)*
ù_li°_tŸ
);

734 #ifde‡
DEBUG


735 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry: Allocating %d forÖkt_list.\n",

736 (
u_öt32_t
)*
ù_pkt_li°_tŸ
*
ù_li°_tŸ
);

739 
hﬁd
 = 
	`vmÆloc
((
u_öt32_t
)*
ù_pkt_li°_tŸ
*
ù_li°_tŸ
);

740 #ifde‡
DEBUG


741 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry: AfterÖkt_listállocation.\n");

743 if(
hﬁd
 =
NULL
) {

744 
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry: unableÅoállocate forÖkt_list.\n");

745 
	`v‰ì
(
cuº_èbÀ
->
èbÀ
);

746 
	`v‰ì
(
cuº_èbÀ
);

747  -
ENOMEM
;

749 
c
 = 0; c < 
ù_li°_tŸ
; c++) {

750 
cuº_èbÀ
->
èbÀ
[
c
].
œ°_pkts
 = 
hﬁd
 + c*
ù_pkt_li°_tŸ
;

754 #ifde‡
DEBUG


755 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry: Allocating %d for hash_table.\n",

756 ()*
ù_li°_hash_size
);

759 
cuº_èbÀ
->
hash_èbÀ
 = 
	`vmÆloc
(()*
ù_li°_hash_size
);

760 if(!
cuº_èbÀ
->
hash_èbÀ
) {

761 
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry: unableÅoállocate for hash_table.\n");

762 
	`v‰ì
(
hﬁd
);

763 
	`v‰ì
(
cuº_èbÀ
->
èbÀ
);

764 
	`v‰ì
(
cuº_èbÀ
);

765  -
ENOMEM
;

768 
c
 = 0; c < 
ù_li°_hash_size
; c++) {

769 
cuº_èbÀ
->
hash_èbÀ
[
c
] = -1;

773 #ifde‡
DEBUG


774 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry: Allocating %d forÅime_info.\n",

775 (
time_öfo_li°
)*
ù_li°_tŸ
);

778 
cuº_èbÀ
->
time_öfo
 = 
	`vmÆloc
((
time_öfo_li°
)*
ù_li°_tŸ
);

779 if(!
cuº_èbÀ
->
time_öfo
) {

780 
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry: unableÅoállocate forÅime_info.\n");

781 
	`v‰ì
(
cuº_èbÀ
->
hash_èbÀ
);

782 
	`v‰ì
(
hﬁd
);

783 
	`v‰ì
(
cuº_èbÀ
->
èbÀ
);

784 
	`v‰ì
(
cuº_èbÀ
);

785  -
ENOMEM
;

787 
c
 = 0; c < 
ù_li°_tŸ
; c++) {

788 
cuº_èbÀ
->
time_öfo
[
c
].
posôi⁄
 = c;

789 
cuº_èbÀ
->
time_öfo
[
c
].
time
 = 0;

793 
	`•ö_lock_bh
(&
ª˚¡_lock
);

794 
föd_èbÀ
 = 
r_èbÀs
;

795  (
œ°_èbÀ
 = 
föd_èbÀ
Ë&& 
	`°∫cmp
(
öfo
->
«me
,föd_èbÀ->«me,
IPT_RECENT_NAME_LEN
Ë&& (föd_èbÀ = föd_èbÀ->
√xt
) );

798 if(
föd_èbÀ
) {

799 
föd_èbÀ
->
cou¡
++;

800 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

801 #ifde‡
DEBUG


802 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkíåy:ÅabÀ found (%s), cª©ed by othîÖro˚ss.\n",
öfo
->
«me
);

804 
	`v‰ì
(
cuº_èbÀ
->
time_öfo
);

805 
	`v‰ì
(
cuº_èbÀ
->
hash_èbÀ
);

806 
	`v‰ì
(
hﬁd
);

807 
	`v‰ì
(
cuº_èbÀ
->
èbÀ
);

808 
	`v‰ì
(
cuº_èbÀ
);

811 if(!
œ°_èbÀ
Ë
r_èbÀs
 = 
cuº_èbÀ
; œ°_èbÀ->
√xt
 = curr_table;

813 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

815 #ifde‡
CONFIG_PROC_FS


817 
cuº_èbÀ
->
°©us_¥oc
 = 
	`¸óã_¥oc_íåy
(cuº_èbÀ->
«me
, 
ù_li°_≥rms
, 
¥oc_√t_ùt_ª˚¡
);

818 i‡(!
cuº_èbÀ
->
°©us_¥oc
) {

819 
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry: unableÅoállocate for /procÉntry.\n");

821 
	`•ö_lock_bh
(&
ª˚¡_lock
);

822 
œ°_èbÀ
 = 
NULL
;

823 
cuº_èbÀ
 = 
r_èbÀs
;

824 if(!
cuº_èbÀ
) {

825 #ifde‡
DEBUG


826 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry() create_proc failed,ÇoÅables.\n");

828 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

829  -
ENOMEM
;

831  
	`°∫cmp
(
öfo
->
«me
,
cuº_èbÀ
->«me,
IPT_RECENT_NAME_LEN
Ë&& (
œ°_èbÀ
 = cuº_èbÀË&& (cuº_èbÀ = cuº_èbÀ->
√xt
) );

832 if(!
cuº_èbÀ
) {

833 #ifde‡
DEBUG


834 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry() create_proc failed,Åableálready destroyed.\n");

836 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

837  -
ENOMEM
;

839 if(
œ°_èbÀ
Ëœ°_èbÀ->
√xt
 = 
cuº_èbÀ
->√xt; 
r_èbÀs
 = curr_table->next;

840 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

841 
	`v‰ì
(
cuº_èbÀ
->
time_öfo
);

842 
	`v‰ì
(
cuº_èbÀ
->
hash_èbÀ
);

843 
	`v‰ì
(
hﬁd
);

844 
	`v‰ì
(
cuº_èbÀ
->
èbÀ
);

845 
	`v‰ì
(
cuº_èbÀ
);

846  -
ENOMEM
;

849 
cuº_èbÀ
->
°©us_¥oc
->
ow√r
 = 
THIS_MODULE
;

850 
cuº_èbÀ
->
°©us_¥oc
->
d©a
 = curr_table;

851 
	`wmb
();

852 
cuº_èbÀ
->
°©us_¥oc
->
ªad_¥oc
 = 
ù_ª˚¡_gë_öfo
;

853 
cuº_èbÀ
->
°©us_¥oc
->
wrôe_¥oc
 = 
ù_ª˚¡_˘æ
;

856 #ifde‡
DEBUG


857 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": checkentry()Üeft.\n");

861 
	}
}

870 
	$de°roy
(*
m©chöfo
, 
m©chsize
)

872 c⁄° 
ùt_ª˚¡_öfo
 *
öfo
 = 
m©chöfo
;

873 
ª˚¡_ù_èbÀs
 *
cuº_èbÀ
, *
œ°_èbÀ
;

875 #ifde‡
DEBUG


876 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": destroy()Éntered.\n");

879 if(
m©chsize
 !
	`IPT_ALIGN
((
ùt_ª˚¡_öfo
))) ;

882 
	`•ö_lock_bh
(&
ª˚¡_lock
);

886 
œ°_èbÀ
 = 
NULL
;

887 
cuº_èbÀ
 = 
r_èbÀs
;

888 if(!
cuº_èbÀ
) {

889 #ifde‡
DEBUG


890 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": destroy() NoÅables found,Üeaving.\n");

892 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

895  
	`°∫cmp
(
öfo
->
«me
,
cuº_èbÀ
->«me,
IPT_RECENT_NAME_LEN
Ë&& (
œ°_èbÀ
 = cuº_èbÀË&& (cuº_èbÀ = cuº_èbÀ->
√xt
) );

898 if(!
cuº_èbÀ
) {

899 #ifde‡
DEBUG


900 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": destroy()ÅableÇot found,Üeaving.\n");

902 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

906 
cuº_èbÀ
->
cou¡
--;

909 if(
cuº_èbÀ
->
cou¡
) {

910 #ifde‡
DEBUG


911 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": destroy()Åable found,Çon-zero count,Üeaving.\n");

913 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

917 #ifde‡
DEBUG


918 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": destroy()Åable found, zero count,Ñemoving.\n");

922 if(
œ°_èbÀ
Ëœ°_èbÀ->
√xt
 = 
cuº_èbÀ
->√xt; 
r_èbÀs
 = curr_table->next;

924 
	`•ö_u∆ock_bh
(&
ª˚¡_lock
);

928 
	`•ö_lock_bh
(&
cuº_èbÀ
->
li°_lock
);

929 
	`•ö_u∆ock_bh
(&
cuº_èbÀ
->
li°_lock
);

931 #ifde‡
CONFIG_PROC_FS


932 if(
cuº_èbÀ
->
°©us_¥oc
Ë
	`ªmove_¥oc_íåy
(cuº_èbÀ->
«me
,
¥oc_√t_ùt_ª˚¡
);

934 
	`v‰ì
(
cuº_èbÀ
->
èbÀ
[0].
œ°_pkts
);

935 
	`v‰ì
(
cuº_èbÀ
->
èbÀ
);

936 
	`v‰ì
(
cuº_èbÀ
->
hash_èbÀ
);

937 
	`v‰ì
(
cuº_èbÀ
->
time_öfo
);

938 
	`v‰ì
(
cuº_èbÀ
);

940 #ifde‡
DEBUG


941 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": destroy()Üeft.\n");

945 
	}
}

950 
ùt_m©ch
 
	gª˚¡_m©ch
 = {

951 .
«me
 = "recent",

952 .
	gm©ch
 = &
m©ch
,

953 .
	gcheckíåy
 = &
checkíåy
,

954 .
	gde°roy
 = &
de°roy
,

955 .
	gme
 = 
THIS_MODULE


959 
__öô
 
	$öô
()

961 
cou¡
;

963 
	`¥ötk
(
vîsi⁄
);

964 #ifde‡
CONFIG_PROC_FS


965 
¥oc_√t_ùt_ª˚¡
 = 
	`¥oc_mkdú
("ùt_ª˚¡",
¥oc_√t
);

966 if(!
¥oc_√t_ùt_ª˚¡
Ë -
ENOMEM
;

969 if(
ù_li°_hash_size
 && ip_li°_hash_sizê<
ù_li°_tŸ
) {

970 
	`¥ötk
(
KERN_WARNING
 
RECENT_NAME
 ": ip_list_hash_sizeÅoo small,ÑesettingÅo default.\n");

971 
ù_li°_hash_size
 = 0;

974 if(!
ù_li°_hash_size
) {

975 
ù_li°_hash_size
 = 
ù_li°_tŸ
*3;

976 
cou¡
 = 2*2;

977 
ù_li°_hash_size
 > 
cou¡
) count = count*2;

978 
ù_li°_hash_size
 = 
cou¡
;

981 #ifde‡
DEBUG


982 if(
debug
Ë
	`¥ötk
(
KERN_INFO
 
RECENT_NAME
 ": ip_li°_hash_size: %d\n",
ù_li°_hash_size
);

985  
	`ùt_ªgi°î_m©ch
(&
ª˚¡_m©ch
);

986 
	}
}

989 
__exô
 
	$föi
()

991 
	`ùt_uƒegi°î_m©ch
(&
ª˚¡_m©ch
);

993 
	`ªmove_¥oc_íåy
("ùt_ª˚¡",
¥oc_√t
);

994 
	}
}

997 
moduÀ_öô
(
öô
);

998 
moduÀ_exô
(
föi
);

	@ipt_state.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/skbuff.h
>

13 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

14 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

15 
	~<löux/√tfûãr_ùv4/ùt_°©e.h
>

17 
MODULE_LICENSE
("GPL");

18 
MODULE_AUTHOR
("Rusty Russell <rusty@rustcorp.com.au>");

19 
MODULE_DESCRIPTION
("iptables connectionÅracking state match module");

22 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

23 c⁄° 
√t_devi˚
 *
ö
,

24 c⁄° 
√t_devi˚
 *
out
,

25 c⁄° *
m©chöfo
,

26 
off£t
,

27 *
hŸdr›
)

29 c⁄° 
ùt_°©e_öfo
 *
söfo
 = 
m©chöfo
;

30 
ù_c⁄¡øck_öfo
 
˘öfo
;

31 
°©ebô
;

33 i‡(
skb
->
nf˘
 =&
ù_c⁄¡øck_u¡øcked
.
öfos
[
IP_CT_NEW
])

34 
°©ebô
 = 
IPT_STATE_UNTRACKED
;

35 i‡(!
	`ù_c⁄¡øck_gë
((
sk_buff
 *)
skb
, &
˘öfo
))

36 
°©ebô
 = 
IPT_STATE_INVALID
;

38 
°©ebô
 = 
	`IPT_STATE_BIT
(
˘öfo
);

40  (
söfo
->
°©emask
 & 
°©ebô
);

41 
	}
}

43 
	$check
(c⁄° *
èbÀ«me
,

44 c⁄° 
ùt_ù
 *
ù
,

45 *
m©chöfo
,

46 
m©chsize
,

47 
hook_mask
)

49 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_°©e_öfo
)))

53 
	}
}

55 
ùt_m©ch
 
	g°©e_m©ch
 = {

56 .
«me
 = "state",

57 .
	gm©ch
 = &
m©ch
,

58 .
	gcheckíåy
 = &
check
,

59 .
	gme
 = 
THIS_MODULE
,

62 
__öô
 
	$öô
()

64 
	`√ed_ù_c⁄¡øck
();

65  
	`ùt_ªgi°î_m©ch
(&
°©e_m©ch
);

66 
	}
}

68 
__exô
 
	$föi
()

70 
	`ùt_uƒegi°î_m©ch
(&
°©e_m©ch
);

71 
	}
}

73 
moduÀ_öô
(
öô
);

74 
moduÀ_exô
(
föi
);

	@ipt_state.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ipt_tcpmss.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/skbuff.h
>

12 
	~<√t/t˝.h
>

14 
	~<löux/√tfûãr_ùv4/ùt_t˝mss.h
>

15 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

17 
	#TH_SYN
 0x02

	)

19 
MODULE_LICENSE
("GPL");

20 
MODULE_AUTHOR
("Marc Boucher <marc@mbsi.ca>");

21 
MODULE_DESCRIPTION
("iptables TCP MSS match module");

24 
ölöe
 

25 
	$mss›ti⁄_m©ch
(
u_öt16_t
 
mö
, u_öt16_à
max
,

26 c⁄° 
sk_buff
 *
skb
,

27 
övît
,

28 *
hŸdr›
)

30 
t˝hdr
 
t˝h
;

32 
u8
 
›t
[15 * 4 - (
t˝h
)];

33 
i
, 
›éí
;

36 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4, &
t˝h
, (tcph)) < 0)

37 
dr›ô
;

40 i‡(
t˝h
.
doff
*4 < (tcph))

41 
dr›ô
;

43 
›éí
 = 
t˝h
.
doff
*4 - (tcph);

45 i‡(
	`skb_c›y_bôs
(
skb
, skb->
nh
.
ùh
->
ihl
*4+(
t˝h
), 
›t
, 
›éí
)<0)

46 
dr›ô
;

48 
i
 = 0; i < 
›éí
; ) {

49 i‡(
›t
[
i
] =
TCPOPT_MSS


50 && (
›éí
 - 
i
Ë>
TCPOLEN_MSS


51 && 
›t
[
i
+1] =
TCPOLEN_MSS
) {

52 
u_öt16_t
 
mssvÆ
;

54 
mssvÆ
 = (
›t
[
i
+2] << 8) | opt[i+3];

56  (
mssvÆ
 >
mö
 && mssvÆ <
max
Ë^ 
övît
;

58 i‡(
›t
[
i
] < 2) i++;

59 
i
 +
›t
[i+1]?:1;

61  
övît
;

63 
dr›ô
:

64 *
hŸdr›
 = 1;

66 
	}
}

69 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

70 c⁄° 
√t_devi˚
 *
ö
,

71 c⁄° 
√t_devi˚
 *
out
,

72 c⁄° *
m©chöfo
,

73 
off£t
,

74 *
hŸdr›
)

76 c⁄° 
ùt_t˝mss_m©ch_öfo
 *
öfo
 = 
m©chöfo
;

78  
	`mss›ti⁄_m©ch
(
öfo
->
mss_mö
, info->
mss_max
, 
skb
,

79 
öfo
->
övît
, 
hŸdr›
);

80 
	}
}

82 
ölöe
 
	$föd_syn_m©ch
(c⁄° 
ùt_íåy_m©ch
 *
m
)

84 c⁄° 
ùt_t˝
 *
t˝öfo
 = (c⁄° ùt_t˝ *)
m
->
d©a
;

86 i‡(
	`°rcmp
(
m
->
u
.
kî√l
.
m©ch
->
«me
, "tcp") == 0

87 && (
t˝öfo
->
Êg_cmp
 & 
TH_SYN
)

88 && !(
t˝öfo
->
övÊags
 & 
IPT_TCP_INV_FLAGS
))

92 
	}
}

95 
	$checkíåy
(c⁄° *
èbÀ«me
,

96 c⁄° 
ùt_ù
 *
ù
,

97 *
m©chöfo
,

98 
m©chsize
,

99 
hook_mask
)

101 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_t˝mss_m©ch_öfo
)))

105 i‡(
ù
->
¥Ÿo
 !
IPPROTO_TCP
 || (ù->
övÊags
 & 
IPT_INV_PROTO
)) {

106 
	`¥ötk
("tcpmss: Only works on TCPÖackets\n");

111 
	}
}

113 
ùt_m©ch
 
	gt˝mss_m©ch
 = {

114 .
«me
 = "tcpmss",

115 .
	gm©ch
 = &
m©ch
,

116 .
	gcheckíåy
 = &
checkíåy
,

117 .
	gme
 = 
THIS_MODULE
,

120 
__öô
 
	$öô
()

122  
	`ùt_ªgi°î_m©ch
(&
t˝mss_m©ch
);

123 
	}
}

125 
__exô
 
	$föi
()

127 
	`ùt_uƒegi°î_m©ch
(&
t˝mss_m©ch
);

128 
	}
}

130 
moduÀ_öô
(
öô
);

131 
moduÀ_exô
(
föi
);

	@ipt_tos.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/skbuff.h
>

14 
	~<löux/√tfûãr_ùv4/ùt_tos.h
>

15 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

17 
MODULE_LICENSE
("GPL");

18 
MODULE_DESCRIPTION
("iptables TOS match module");

21 
	$m©ch
(c⁄° 
sk_buff
 *
skb
,

22 c⁄° 
√t_devi˚
 *
ö
,

23 c⁄° 
√t_devi˚
 *
out
,

24 c⁄° *
m©chöfo
,

25 
off£t
,

26 *
hŸdr›
)

28 c⁄° 
ùt_tos_öfo
 *
öfo
 = 
m©chöfo
;

30  (
skb
->
nh
.
ùh
->
tos
 =
öfo
->tosË^ info->
övît
;

31 
	}
}

34 
	$checkíåy
(c⁄° *
èbÀ«me
,

35 c⁄° 
ùt_ù
 *
ù
,

36 *
m©chöfo
,

37 
m©chsize
,

38 
hook_mask
)

40 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_tos_öfo
)))

44 
	}
}

46 
ùt_m©ch
 
	gtos_m©ch
 = {

47 .
«me
 = "tos",

48 .
	gm©ch
 = &
m©ch
,

49 .
	gcheckíåy
 = &
checkíåy
,

50 .
	gme
 = 
THIS_MODULE
,

53 
__öô
 
	$öô
()

55  
	`ùt_ªgi°î_m©ch
(&
tos_m©ch
);

56 
	}
}

58 
__exô
 
	$föi
()

60 
	`ùt_uƒegi°î_m©ch
(&
tos_m©ch
);

61 
	}
}

63 
moduÀ_öô
(
öô
);

64 
moduÀ_exô
(
föi
);

	@ipt_ttl.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/skbuff.h
>

15 
	~<löux/√tfûãr_ùv4/ùt_âl.h
>

16 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

18 
MODULE_AUTHOR
("Harald Welte <laforge@netfilter.org>");

19 
MODULE_DESCRIPTION
("IPÅables TTL matching module");

20 
MODULE_LICENSE
("GPL");

22 
	$m©ch
(c⁄° 
sk_buff
 *
skb
, c⁄° 
√t_devi˚
 *
ö
,

23 c⁄° 
√t_devi˚
 *
out
, c⁄° *
m©chöfo
,

24 
off£t
, *
hŸdr›
)

26 c⁄° 
ùt_âl_öfo
 *
öfo
 = 
m©chöfo
;

28 
öfo
->
mode
) {

29 
IPT_TTL_EQ
:

30  (
skb
->
nh
.
ùh
->
âl
 =
öfo
->ttl);

32 
IPT_TTL_NE
:

33  (!(
skb
->
nh
.
ùh
->
âl
 =
öfo
->ttl));

35 
IPT_TTL_LT
:

36  (
skb
->
nh
.
ùh
->
âl
 < 
öfo
->ttl);

38 
IPT_TTL_GT
:

39  (
skb
->
nh
.
ùh
->
âl
 > 
öfo
->ttl);

42 
	`¥ötk
(
KERN_WARNING
 "ipt_ttl: unknown mode %d\n",

43 
öfo
->
mode
);

48 
	}
}

50 
	$checkíåy
(c⁄° *
èbÀ«me
, c⁄° 
ùt_ù
 *
ù
,

51 *
m©chöfo
, 
m©chsize
,

52 
hook_mask
)

54 i‡(
m©chsize
 !
	`IPT_ALIGN
((
ùt_âl_öfo
)))

58 
	}
}

60 
ùt_m©ch
 
	gâl_m©ch
 = {

61 .
«me
 = "ttl",

62 .
	gm©ch
 = &
m©ch
,

63 .
	gcheckíåy
 = &
checkíåy
,

64 .
	gme
 = 
THIS_MODULE
,

67 
__öô
 
	$öô
()

69  
	`ùt_ªgi°î_m©ch
(&
âl_m©ch
);

70 
	}
}

72 
__exô
 
	$föi
()

74 
	`ùt_uƒegi°î_m©ch
(&
âl_m©ch
);

76 
	}
}

78 
moduÀ_öô
(
öô
);

79 
moduÀ_exô
(
föi
);

	@iptable_filter.c

13 
	~<löux/moduÀ.h
>

14 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

16 
MODULE_LICENSE
("GPL");

17 
MODULE_AUTHOR
("Netfilter Core Team <coreteam@netfilter.org>");

18 
MODULE_DESCRIPTION
("iptables filterÅable");

20 
	#FILTER_VALID_HOOKS
 ((1 << 
NF_IP_LOCAL_IN
Ë| (1 << 
NF_IP_FORWARD
Ë| (1 << 
NF_IP_LOCAL_OUT
))

	)

23 
	sùt_°™d¨d


25 
ùt_íåy
 
	míåy
;

26 
ùt_°™d¨d_èrgë
 
	mèrgë
;

29 
	sùt_îr‹_èrgë


31 
ùt_íåy_èrgë
 
	mèrgë
;

32 
	mîr‹«me
[
IPT_FUNCTION_MAXNAMELEN
];

35 
	sùt_îr‹


37 
ùt_íåy
 
	míåy
;

38 
ùt_îr‹_èrgë
 
	mèrgë
;

43 
ùt_ª∂a˚
 
	mª∂
;

44 
ùt_°™d¨d
 
	míåõs
[3];

45 
ùt_îr‹
 
	mãrm
;

46 } 
öôül_èbÀ
 
	g__öôd©a


47 { { "fûãr", 
FILTER_VALID_HOOKS
, 4,

48 (
ùt_°™d¨d
Ë* 3 + (
ùt_îr‹
),

49 { [
NF_IP_LOCAL_IN
] = 0,

50 [
NF_IP_FORWARD
] = (
ùt_°™d¨d
),

51 [
NF_IP_LOCAL_OUT
] = (
ùt_°™d¨d
) * 2 },

52 { [
NF_IP_LOCAL_IN
] = 0,

53 [
NF_IP_FORWARD
] = (
ùt_°™d¨d
),

54 [
NF_IP_LOCAL_OUT
] = (
ùt_°™d¨d
) * 2 },

55 0, 
	gNULL
, { } },

60 (
	gùt_íåy
),

61 (
	gùt_°™d¨d
),

63 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

64 -
	gNF_ACCEPT
 - 1 } },

68 (
	gùt_íåy
),

69 (
	gùt_°™d¨d
),

71 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

72 -
	gNF_ACCEPT
 - 1 } },

76 (
	gùt_íåy
),

77 (
	gùt_°™d¨d
),

79 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

80 -
	gNF_ACCEPT
 - 1 } }

85 (
	gùt_íåy
),

86 (
	gùt_îr‹
),

88 { { { { 
IPT_ALIGN
((
ùt_îr‹_èrgë
)), 
	gIPT_ERROR_TARGET
 } },

95 
ùt_èbÀ
 
	g∑ckë_fûãr
 = {

96 .
«me
 = "filter",

97 .
	gèbÀ
 = &
öôül_èbÀ
.
ª∂
,

98 .
	gvÆid_hooks
 = 
FILTER_VALID_HOOKS
,

99 .
	glock
 = 
RW_LOCK_UNLOCKED
,

100 .
	gme
 = 
THIS_MODULE


105 
ùt_hook
(
hook
,

106 
sk_buff
 **
pskb
,

107 c⁄° 
√t_devi˚
 *
ö
,

108 c⁄° 
√t_devi˚
 *
out
,

109 (*
ok‚
)(
sk_buff
 *))

111  
	`ùt_do_èbÀ
(
pskb
, 
hook
, 
ö
, 
out
, &
∑ckë_fûãr
, 
NULL
);

112 
	}
}

115 
ùt_loˇl_out_hook
(
hook
,

116 
sk_buff
 **
pskb
,

117 c⁄° 
√t_devi˚
 *
ö
,

118 c⁄° 
√t_devi˚
 *
out
,

119 (*
ok‚
)(
sk_buff
 *))

122 i‡((*
pskb
)->
Àn
 < (
ùhdr
)

123 || (*
pskb
)->
nh
.
ùh
->
ihl
 * 4 < (
ùhdr
)) {

124 i‡(
	`√t_øãlimô
())

125 
	`¥ötk
("ipt_hook: happy cracking.\n");

126  
NF_ACCEPT
;

129  
	`ùt_do_èbÀ
(
pskb
, 
hook
, 
ö
, 
out
, &
∑ckë_fûãr
, 
NULL
);

130 
	}
}

132 
nf_hook_›s
 
	gùt_›s
[] = {

134 .
hook
 = 
ùt_hook
,

135 .
	gow√r
 = 
THIS_MODULE
,

136 .
	gpf
 = 
PF_INET
,

137 .
	ghooknum
 = 
NF_IP_LOCAL_IN
,

138 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

141 .
	ghook
 = 
ùt_hook
,

142 .
	gow√r
 = 
THIS_MODULE
,

143 .
	gpf
 = 
PF_INET
,

144 .
	ghooknum
 = 
NF_IP_FORWARD
,

145 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

148 .
	ghook
 = 
ùt_loˇl_out_hook
,

149 .
	gow√r
 = 
THIS_MODULE
,

150 .
	gpf
 = 
PF_INET
,

151 .
	ghooknum
 = 
NF_IP_LOCAL_OUT
,

152 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

157 
	gf‹w¨d
 = 
NF_ACCEPT
;

158 
MODULE_PARM
(
f‹w¨d
, "i");

160 
__öô
 
	$öô
()

162 
ªt
;

164 i‡(
f‹w¨d
 < 0 || f‹w¨d > 
NF_MAX_VERDICT
) {

165 
	`¥ötk
("iptables forward must be 0 or 1\n");

166  -
EINVAL
;

170 
öôül_èbÀ
.
íåõs
[1].
èrgë
.
vîdi˘
 = -
f‹w¨d
 - 1;

173 
ªt
 = 
	`ùt_ªgi°î_èbÀ
(&
∑ckë_fûãr
);

174 i‡(
ªt
 < 0)

175  
ªt
;

178 
ªt
 = 
	`nf_ªgi°î_hook
(&
ùt_›s
[0]);

179 i‡(
ªt
 < 0)

180 
˛ónup_èbÀ
;

182 
ªt
 = 
	`nf_ªgi°î_hook
(&
ùt_›s
[1]);

183 i‡(
ªt
 < 0)

184 
˛ónup_hook0
;

186 
ªt
 = 
	`nf_ªgi°î_hook
(&
ùt_›s
[2]);

187 i‡(
ªt
 < 0)

188 
˛ónup_hook1
;

190  
ªt
;

192 
˛ónup_hook1
:

193 
	`nf_uƒegi°î_hook
(&
ùt_›s
[1]);

194 
˛ónup_hook0
:

195 
	`nf_uƒegi°î_hook
(&
ùt_›s
[0]);

196 
˛ónup_èbÀ
:

197 
	`ùt_uƒegi°î_èbÀ
(&
∑ckë_fûãr
);

199  
ªt
;

200 
	}
}

202 
__exô
 
	$föi
()

204 
i
;

206 
i
 = 0; i < (
ùt_›s
)/(
nf_hook_›s
); i++)

207 
	`nf_uƒegi°î_hook
(&
ùt_›s
[
i
]);

209 
	`ùt_uƒegi°î_èbÀ
(&
∑ckë_fûãr
);

210 
	}
}

212 
moduÀ_öô
(
öô
);

213 
moduÀ_exô
(
föi
);

	@iptable_filter.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@iptable_mangle.c

13 
	~<löux/c⁄fig.h
>

14 
	~<löux/moduÀ.h
>

15 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

16 
	~<löux/√tdevi˚.h
>

17 
	~<löux/skbuff.h
>

18 
	~<√t/sock.h
>

19 
	~<√t/rouã.h
>

20 
	~<löux/ù.h
>

22 
MODULE_LICENSE
("GPL");

23 
MODULE_AUTHOR
("Netfilter Core Team <coreteam@netfilter.org>");

24 
MODULE_DESCRIPTION
("iptables mangleÅable");

26 
	#MANGLE_VALID_HOOKS
 ((1 << 
NF_IP_PRE_ROUTING
) | \

27 (1 << 
NF_IP_LOCAL_IN
) | \

28 (1 << 
NF_IP_FORWARD
) | \

29 (1 << 
NF_IP_LOCAL_OUT
) | \

30 (1 << 
NF_IP_POST_ROUTING
))

	)

33 
	sùt_°™d¨d


35 
ùt_íåy
 
	míåy
;

36 
ùt_°™d¨d_èrgë
 
	mèrgë
;

39 
	sùt_îr‹_èrgë


41 
ùt_íåy_èrgë
 
	mèrgë
;

42 
	mîr‹«me
[
IPT_FUNCTION_MAXNAMELEN
];

45 
	sùt_îr‹


47 
ùt_íåy
 
	míåy
;

48 
ùt_îr‹_èrgë
 
	mèrgë
;

54 
ùt_ª∂a˚
 
	mª∂
;

55 
ùt_°™d¨d
 
	míåõs
[5];

56 
ùt_îr‹
 
	mãrm
;

57 } 
öôül_èbÀ
 
	g__öôd©a


58 { { "m™gÀ", 
MANGLE_VALID_HOOKS
, 6,

59 (
ùt_°™d¨d
Ë* 5 + (
ùt_îr‹
),

60 { [
NF_IP_PRE_ROUTING
] = 0,

61 [
NF_IP_LOCAL_IN
] = (
ùt_°™d¨d
),

62 [
NF_IP_FORWARD
] = (
ùt_°™d¨d
) * 2,

63 [
NF_IP_LOCAL_OUT
] = (
ùt_°™d¨d
) * 3,

64 [
NF_IP_POST_ROUTING
] = (
ùt_°™d¨d
) * 4 },

65 { [
NF_IP_PRE_ROUTING
] = 0,

66 [
NF_IP_LOCAL_IN
] = (
ùt_°™d¨d
),

67 [
NF_IP_FORWARD
] = (
ùt_°™d¨d
) * 2,

68 [
NF_IP_LOCAL_OUT
] = (
ùt_°™d¨d
) * 3,

69 [
NF_IP_POST_ROUTING
] = (
ùt_°™d¨d
) * 4 },

70 0, 
	gNULL
, { } },

75 (
	gùt_íåy
),

76 (
	gùt_°™d¨d
),

78 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

79 -
	gNF_ACCEPT
 - 1 } },

83 (
	gùt_íåy
),

84 (
	gùt_°™d¨d
),

86 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

87 -
	gNF_ACCEPT
 - 1 } },

91 (
	gùt_íåy
),

92 (
	gùt_°™d¨d
),

94 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

95 -
	gNF_ACCEPT
 - 1 } },

99 (
	gùt_íåy
),

100 (
	gùt_°™d¨d
),

102 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

103 -
	gNF_ACCEPT
 - 1 } },

107 (
	gùt_íåy
),

108 (
	gùt_°™d¨d
),

110 { { { { 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)), "" } }, { } },

111 -
	gNF_ACCEPT
 - 1 } },

116 (
	gùt_íåy
),

117 (
	gùt_îr‹
),

119 { { { { 
IPT_ALIGN
((
ùt_îr‹_èrgë
)), 
	gIPT_ERROR_TARGET
 } },

126 
ùt_èbÀ
 
	g∑ckë_m™gÀr
 = {

127 .
«me
 = "mangle",

128 .
	gèbÀ
 = &
öôül_èbÀ
.
ª∂
,

129 .
	gvÆid_hooks
 = 
MANGLE_VALID_HOOKS
,

130 .
	glock
 = 
RW_LOCK_UNLOCKED
,

131 .
	gme
 = 
THIS_MODULE
,

136 
ùt_rouã_hook
(
hook
,

137 
sk_buff
 **
pskb
,

138 c⁄° 
√t_devi˚
 *
ö
,

139 c⁄° 
√t_devi˚
 *
out
,

140 (*
ok‚
)(
sk_buff
 *))

142  
	`ùt_do_èbÀ
(
pskb
, 
hook
, 
ö
, 
out
, &
∑ckë_m™gÀr
, 
NULL
);

143 
	}
}

146 
ùt_loˇl_hook
(
hook
,

147 
sk_buff
 **
pskb
,

148 c⁄° 
√t_devi˚
 *
ö
,

149 c⁄° 
√t_devi˚
 *
out
,

150 (*
ok‚
)(
sk_buff
 *))

152 
ªt
;

153 
u_öt8_t
 
tos
;

154 
u_öt32_t
 
ßddr
, 
daddr
;

155 
nfm¨k
;

158 i‡((*
pskb
)->
Àn
 < (
ùhdr
)

159 || (*
pskb
)->
nh
.
ùh
->
ihl
 * 4 < (
ùhdr
)) {

160 i‡(
	`√t_øãlimô
())

161 
	`¥ötk
("ipt_hook: happy cracking.\n");

162  
NF_ACCEPT
;

166 
nfm¨k
 = (*
pskb
)->nfmark;

167 
ßddr
 = (*
pskb
)->
nh
.
ùh
->saddr;

168 
daddr
 = (*
pskb
)->
nh
.
ùh
->daddr;

169 
tos
 = (*
pskb
)->
nh
.
ùh
->tos;

171 
ªt
 = 
	`ùt_do_èbÀ
(
pskb
, 
hook
, 
ö
, 
out
, &
∑ckë_m™gÀr
, 
NULL
);

173 i‡(
ªt
 !
NF_DROP
 &&Ñë !
NF_STOLEN
 &&Ñë !
NF_QUEUE


174 && ((*
pskb
)->
nh
.
ùh
->
ßddr
 != saddr

175 || (*
pskb
)->
nh
.
ùh
->
daddr
 != daddr

176 #ifde‡
CONFIG_IP_ROUTE_FWMARK


177 || (*
pskb
)->
nfm¨k
 !=Çfmark

179 || (*
pskb
)->
nh
.
ùh
->
tos
 !=Åos))

180  
	`ù_rouã_me_h¨dî
(
pskb
Ë=0 ? 
ªt
 : 
NF_DROP
;

182  
ªt
;

183 
	}
}

185 
nf_hook_›s
 
	gùt_›s
[] = {

187 .
hook
 = 
ùt_rouã_hook
,

188 .
	gow√r
 = 
THIS_MODULE
,

189 .
	gpf
 = 
PF_INET
,

190 .
	ghooknum
 = 
NF_IP_PRE_ROUTING
,

191 .
	g¥i‹ôy
 = 
NF_IP_PRI_MANGLE
,

194 .
	ghook
 = 
ùt_rouã_hook
,

195 .
	gow√r
 = 
THIS_MODULE
,

196 .
	gpf
 = 
PF_INET
,

197 .
	ghooknum
 = 
NF_IP_LOCAL_IN
,

198 .
	g¥i‹ôy
 = 
NF_IP_PRI_MANGLE
,

201 .
	ghook
 = 
ùt_rouã_hook
,

202 .
	gow√r
 = 
THIS_MODULE
,

203 .
	gpf
 = 
PF_INET
,

204 .
	ghooknum
 = 
NF_IP_FORWARD
,

205 .
	g¥i‹ôy
 = 
NF_IP_PRI_MANGLE
,

208 .
	ghook
 = 
ùt_loˇl_hook
,

209 .
	gow√r
 = 
THIS_MODULE
,

210 .
	gpf
 = 
PF_INET
,

211 .
	ghooknum
 = 
NF_IP_LOCAL_OUT
,

212 .
	g¥i‹ôy
 = 
NF_IP_PRI_MANGLE
,

215 .
	ghook
 = 
ùt_rouã_hook
,

216 .
	gow√r
 = 
THIS_MODULE
,

217 .
	gpf
 = 
PF_INET
,

218 .
	ghooknum
 = 
NF_IP_POST_ROUTING
,

219 .
	g¥i‹ôy
 = 
NF_IP_PRI_MANGLE
,

223 
__öô
 
	$öô
()

225 
ªt
;

228 
ªt
 = 
	`ùt_ªgi°î_èbÀ
(&
∑ckë_m™gÀr
);

229 i‡(
ªt
 < 0)

230  
ªt
;

233 
ªt
 = 
	`nf_ªgi°î_hook
(&
ùt_›s
[0]);

234 i‡(
ªt
 < 0)

235 
˛ónup_èbÀ
;

237 
ªt
 = 
	`nf_ªgi°î_hook
(&
ùt_›s
[1]);

238 i‡(
ªt
 < 0)

239 
˛ónup_hook0
;

241 
ªt
 = 
	`nf_ªgi°î_hook
(&
ùt_›s
[2]);

242 i‡(
ªt
 < 0)

243 
˛ónup_hook1
;

245 
ªt
 = 
	`nf_ªgi°î_hook
(&
ùt_›s
[3]);

246 i‡(
ªt
 < 0)

247 
˛ónup_hook2
;

249 
ªt
 = 
	`nf_ªgi°î_hook
(&
ùt_›s
[4]);

250 i‡(
ªt
 < 0)

251 
˛ónup_hook3
;

253  
ªt
;

255 
˛ónup_hook3
:

256 
	`nf_uƒegi°î_hook
(&
ùt_›s
[3]);

257 
˛ónup_hook2
:

258 
	`nf_uƒegi°î_hook
(&
ùt_›s
[2]);

259 
˛ónup_hook1
:

260 
	`nf_uƒegi°î_hook
(&
ùt_›s
[1]);

261 
˛ónup_hook0
:

262 
	`nf_uƒegi°î_hook
(&
ùt_›s
[0]);

263 
˛ónup_èbÀ
:

264 
	`ùt_uƒegi°î_èbÀ
(&
∑ckë_m™gÀr
);

266  
ªt
;

267 
	}
}

269 
__exô
 
	$föi
()

271 
i
;

273 
i
 = 0; i < (
ùt_›s
)/(
nf_hook_›s
); i++)

274 
	`nf_uƒegi°î_hook
(&
ùt_›s
[
i
]);

276 
	`ùt_uƒegi°î_èbÀ
(&
∑ckë_m™gÀr
);

277 
	}
}

279 
moduÀ_öô
(
öô
);

280 
moduÀ_exô
(
föi
);

	@iptable_mangle.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@iptable_nat.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@iptable_raw.c

6 
	~<löux/moduÀ.h
>

7 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

9 
	#RAW_VALID_HOOKS
 ((1 << 
NF_IP_PRE_ROUTING
Ë| (1 << 
NF_IP_LOCAL_OUT
))

	)

12 
	sùt_°™d¨d


14 
ùt_íåy
 
	míåy
;

15 
ùt_°™d¨d_èrgë
 
	mèrgë
;

18 
	sùt_îr‹_èrgë


20 
ùt_íåy_èrgë
 
	mèrgë
;

21 
	mîr‹«me
[
IPT_FUNCTION_MAXNAMELEN
];

24 
	sùt_îr‹


26 
ùt_íåy
 
	míåy
;

27 
ùt_îr‹_èrgë
 
	mèrgë
;

32 
ùt_ª∂a˚
 
	mª∂
;

33 
ùt_°™d¨d
 
	míåõs
[2];

34 
ùt_îr‹
 
	mãrm
;

35 } 
öôül_èbÀ
 
	g__öôd©a
 = {

36 .
ª∂
 = {

37 .
«me
 = "raw",

38 .
	gvÆid_hooks
 = 
RAW_VALID_HOOKS
,

39 .
	gnum_íåõs
 = 3,

40 .
	gsize
 = (
ùt_°™d¨d
Ë* 2 + (
ùt_îr‹
),

41 .
	ghook_íåy
 = {

42 [
NF_IP_PRE_ROUTING
] = 0,

43 [
NF_IP_LOCAL_OUT
] = (
ùt_°™d¨d
) },

44 .
	gundîÊow
 = {

45 [
NF_IP_PRE_ROUTING
] = 0,

46 [
NF_IP_LOCAL_OUT
] = (
ùt_°™d¨d
) },

48 .
	gíåõs
 = {

51 .
íåy
 = {

52 .
èrgë_off£t
 = (
ùt_íåy
),

53 .
	g√xt_off£t
 = (
ùt_°™d¨d
),

55 .
	gèrgë
 = {

56 .
èrgë
 = {

57 .
u
 = {

58 .
èrgë_size
 = 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)),

61 .
	gvîdi˘
 = -
NF_ACCEPT
 - 1,

67 .
	gíåy
 = {

68 .
èrgë_off£t
 = (
ùt_íåy
),

69 .
	g√xt_off£t
 = (
ùt_°™d¨d
),

71 .
	gèrgë
 = {

72 .
èrgë
 = {

73 .
u
 = {

74 .
èrgë_size
 = 
IPT_ALIGN
((
ùt_°™d¨d_èrgë
)),

77 .
	gvîdi˘
 = -
NF_ACCEPT
 - 1,

82 .
	gãrm
 = {

83 .
íåy
 = {

84 .
èrgë_off£t
 = (
ùt_íåy
),

85 .
	g√xt_off£t
 = (
ùt_îr‹
),

87 .
	gèrgë
 = {

88 .
èrgë
 = {

89 .
u
 = {

90 .
u£r
 = {

91 .
èrgë_size
 = 
IPT_ALIGN
((
ùt_îr‹_èrgë
)),

92 .
	g«me
 = 
IPT_ERROR_TARGET
,

96 .
	gîr‹«me
 = "ERROR",

101 
ùt_èbÀ
 
	g∑ckë_øw
 = {

102 .
«me
 = "raw",

103 .
	gèbÀ
 = &
öôül_èbÀ
.
ª∂
,

104 .
	gvÆid_hooks
 = 
RAW_VALID_HOOKS
,

105 .
	glock
 = 
RW_LOCK_UNLOCKED
,

106 .
	gme
 = 
THIS_MODULE


111 
ùt_hook
(
hook
,

112 
sk_buff
 **
pskb
,

113 c⁄° 
√t_devi˚
 *
ö
,

114 c⁄° 
√t_devi˚
 *
out
,

115 (*
ok‚
)(
sk_buff
 *))

117  
	`ùt_do_èbÀ
(
pskb
, 
hook
, 
ö
, 
out
, &
∑ckë_øw
, 
NULL
);

118 
	}
}

121 
nf_hook_›s
 
	gùt_›s
[] = {

123 .
hook
 = 
ùt_hook
,

124 .
	gpf
 = 
PF_INET
,

125 .
	ghooknum
 = 
NF_IP_PRE_ROUTING
,

126 .
	g¥i‹ôy
 = 
NF_IP_PRI_RAW


129 .
	ghook
 = 
ùt_hook
,

130 .
	gpf
 = 
PF_INET
,

131 .
	ghooknum
 = 
NF_IP_LOCAL_OUT
,

132 .
	g¥i‹ôy
 = 
NF_IP_PRI_RAW


136 
__öô
 
	$öô
()

138 
ªt
;

141 
ªt
 = 
	`ùt_ªgi°î_èbÀ
(&
∑ckë_øw
);

142 i‡(
ªt
 < 0)

143  
ªt
;

146 
ªt
 = 
	`nf_ªgi°î_hook
(&
ùt_›s
[0]);

147 i‡(
ªt
 < 0)

148 
˛ónup_èbÀ
;

150 
ªt
 = 
	`nf_ªgi°î_hook
(&
ùt_›s
[1]);

151 i‡(
ªt
 < 0)

152 
˛ónup_hook0
;

154  
ªt
;

156 
˛ónup_hook0
:

157 
	`nf_uƒegi°î_hook
(&
ùt_›s
[0]);

158 
˛ónup_èbÀ
:

159 
	`ùt_uƒegi°î_èbÀ
(&
∑ckë_øw
);

161  
ªt
;

162 
	}
}

164 
__exô
 
	$föi
()

166 
i
;

168 
i
 = 0; i < (
ùt_›s
)/(
nf_hook_›s
); i++)

169 
	`nf_uƒegi°î_hook
(&
ùt_›s
[
i
]);

171 
	`ùt_uƒegi°î_èbÀ
(&
∑ckë_øw
);

172 
	}
}

174 
moduÀ_öô
(
öô
);

175 
moduÀ_exô
(
föi
);

176 
MODULE_LICENSE
("GPL");

	@/usr/include/asm/semaphore.h

1 #i‚de‡
_I386_SEMAPHORE_H


2 
	#_I386_SEMAPHORE_H


	)

4 
	~<löux/lökage.h
>

	@/usr/include/asm/system.h

1 #i‚de‡
__ASM_SYSTEM_H


2 
	#__ASM_SYSTEM_H


	)

4 
	~<löux/c⁄fig.h
>

5 
	~<löux/kî√l.h
>

6 
	~<asm/£gmít.h
>

7 
	~<löux/bô›s.h
>

10 
	#wbövd
() \

11 
__asm__
 
	`__vﬁ©ûe__
 ("wbövd": : :"mem‹y");

	)

13 
ölöe
 
	$gë_limô
(
£gmít
)

15 
__limô
;

16 
	`__asm__
("lsll %1,%0"

17 :"Ù" (
__limô
):"r" (
£gmít
));

18  
__limô
+1;

19 
	}
}

21 
	#n›
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("n›")

	)

23 
	#xchg
(
±r
,
v
Ë((
	`__ty≥of__
(*’å)))
	`__xchg
(()(v),’å),(*’å))))

	)

25 
	#ès
(
±r
Ë(
	`xchg
(’å),1))

	)

27 
	s__xchg_dummy
 { 
	ma
[100]; };

28 
	#__xg
(
x
Ë((
__xchg_dummy
 *)(x))

	)

40 
ölöe
 
	$__£t_64bô
 (* 
±r
,

41 
low
, 
high
)

43 
__asm__
 
	`__vﬁ©ûe__
 (

50 : "D"(
±r
),

51 "b"(
low
),

52 "c"(
high
)

54 
	}
}

56 
ölöe
 
	$__£t_64bô_c⁄°™t
 (*
±r
,

57 
vÆue
)

59 
	`__£t_64bô
(
±r
,()(
vÆue
), ()((value)>>32ULL));

60 
	}
}

61 
	#Œ_low
(
x
Ë*(((*)&(x))+0)

	)

62 
	#Œ_high
(
x
Ë*(((*)&(x))+1)

	)

64 
ölöe
 
	$__£t_64bô_v¨
 (*
±r
,

65 
vÆue
)

67 
	`__£t_64bô
(
±r
,
	`Œ_low
(
vÆue
), 
	`Œ_high
(value));

68 
	}
}

70 
	#£t_64bô
(
±r
,
vÆue
) \

71 (
	`__buûtö_c⁄°™t_p
(
vÆue
) ? \

72 
	`__£t_64bô_c⁄°™t
(
±r
, 
vÆue
) : \

73 
	`__£t_64bô_v¨
(
±r
, 
vÆue
Ë)

	)

75 
	#_£t_64bô
(
±r
,
vÆue
) \

76 (
	`__buûtö_c⁄°™t_p
(
vÆue
) ? \

77 
	`__£t_64bô
(
±r
, ()(
vÆue
), ()((value)>>32ULL) ) : \

78 
	`__£t_64bô
(
±r
, 
	`Œ_low
(
vÆue
), 
	`Œ_high
(vÆue)Ë)

	)

85 
ölöe
 
	$__xchg
(
x
, vﬁ©ûê* 
±r
, 
size
)

87 
size
) {

89 
__asm__
 
	`__vﬁ©ûe__
("xchgb %b0,%1"

90 :"=q" (
x
)

91 :"m" (*
	`__xg
(
±r
)), "0" (
x
)

95 
__asm__
 
	`__vﬁ©ûe__
("xchgw %w0,%1"

96 :"Ù" (
x
)

97 :"m" (*
	`__xg
(
±r
)), "0" (
x
)

101 
__asm__
 
	`__vﬁ©ûe__
("xchgl %0,%1"

102 :"Ù" (
x
)

103 :"m" (*
	`__xg
(
±r
)), "0" (
x
)

107  
x
;

108 
	}
}

116 #ifde‡
CONFIG_X86_CMPXCHG


117 
	#__HAVE_ARCH_CMPXCHG
 1

	)

119 
ölöe
 
	$__cmpxchg
(vﬁ©ûê*
±r
, 
ﬁd
,

120 
√w
, 
size
)

122 
¥ev
;

123 
size
) {

125 
__asm__
 
	`__vﬁ©ûe__
(
LOCK_PREFIX
 "cmpxchgb %b1,%2"

126 : "˜"(
¥ev
)

127 : "q"(
√w
), "m"(*
	`__xg
(
±r
)), "0"(
ﬁd
)

129  
¥ev
;

131 
__asm__
 
	`__vﬁ©ûe__
(
LOCK_PREFIX
 "cmpxchgw %w1,%2"

132 : "˜"(
¥ev
)

133 : "q"(
√w
), "m"(*
	`__xg
(
±r
)), "0"(
ﬁd
)

135  
¥ev
;

137 
__asm__
 
	`__vﬁ©ûe__
(
LOCK_PREFIX
 "cmpxchgl %1,%2"

138 : "˜"(
¥ev
)

139 : "q"(
√w
), "m"(*
	`__xg
(
±r
)), "0"(
ﬁd
)

141  
¥ev
;

143  
ﬁd
;

144 
	}
}

146 
	#cmpxchg
(
±r
,
o
,
n
)\

147 ((
	`__ty≥of__
(*(
±r
)))
	`__cmpxchg
(’å),()(
o
),\

148 ()(
n
),(*(
±r
))))

	)

172 
	#mb
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("lock;ádd»$0,0(%%e•)": : :"mem‹y")

	)

173 
	#rmb
(Ë
	`mb
()

	)

175 #ifde‡
CONFIG_X86_OOSTORE


176 
	#wmb
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("lock;ádd»$0,0(%%e•)": : :"mem‹y")

	)

178 
	#wmb
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("": : :"mem‹y")

	)

181 #ifde‡
CONFIG_SMP


182 
	#smp_mb
(Ë
	`mb
()

	)

183 
	#smp_rmb
(Ë
	`rmb
()

	)

184 
	#smp_wmb
(Ë
	`wmb
()

	)

186 
	#smp_mb
(Ë
	`b¨rõr
()

	)

187 
	#smp_rmb
(Ë
	`b¨rõr
()

	)

188 
	#smp_wmb
(Ë
	`b¨rõr
()

	)

191 
	#£t_mb
(
v¨
, 
vÆue
Ëdÿ{ 
	`xchg
(&v¨, vÆue); } 0)

	)

192 
	#£t_wmb
(
v¨
, 
vÆue
Ëdÿ{ v¨ = vÆue; 
	`wmb
(); } 0)

	)

195 
	#__ßve_Êags
(
x
Ë
__asm__
 
	`__vﬁ©ûe__
("pushÊ ;Ö›»%0":"=g" (x): )

	)

196 
	#__ª°‹e_Êags
(
x
Ë
__asm__
 
	`__vﬁ©ûe__
("push»%0 ;Ö›Ê": :"g" (x):"mem‹y", "cc")

	)

197 
	#__˛i
(Ë
__asm__
 
	`__vﬁ©ûe__
("˛i": : :"mem‹y")

	)

198 
	#__°i
(Ë
__asm__
 
	`__vﬁ©ûe__
("°i": : :"mem‹y")

	)

200 
	#ß„_hÆt
(Ë
__asm__
 
	`__vﬁ©ûe__
("°i; h…": : :"mem‹y")

	)

203 
	#loˇl_úq_ßve
(
x
Ë
__asm__
 
	`__vﬁ©ûe__
("pushÊ ;Ö›»%0 ; cli":"=g" (x): :"mem‹y")

	)

204 
	#loˇl_úq_ª°‹e
(
x
Ë
	`__ª°‹e_Êags
(x)

	)

205 
	#loˇl_úq_dißbÀ
(Ë
	`__˛i
()

	)

206 
	#loˇl_úq_íabÀ
(Ë
	`__°i
()

	)

208 #ifde‡
CONFIG_SMP


210 
__globÆ_˛i
();

211 
__globÆ_°i
();

212 
__globÆ_ßve_Êags
();

213 
__globÆ_ª°‹e_Êags
();

214 
	#˛i
(Ë
	`__globÆ_˛i
()

	)

215 
	#°i
(Ë
	`__globÆ_°i
()

	)

216 
	#ßve_Êags
(
x
Ë((x)=
	`__globÆ_ßve_Êags
())

	)

217 
	#ª°‹e_Êags
(
x
Ë
	`__globÆ_ª°‹e_Êags
(x)

	)

221 
	#˛i
(Ë
	`__˛i
()

	)

222 
	#°i
(Ë
	`__°i
()

	)

223 
	#ßve_Êags
(
x
Ë
	`__ßve_Êags
(x)

	)

224 
	#ª°‹e_Êags
(
x
Ë
	`__ª°‹e_Êags
(x)

	)

231 
	#HAVE_DISABLE_HLT


	)

232 
dißbÀ_h…
();

233 
íabÀ_h…
();

	@/usr/include/linux/bitops.h

1 #i‚de‡
_LINUX_BITOPS_H


2 
	#_LINUX_BITOPS_H


	)

11 
ölöe
 
	$gíîic_ffs
(
x
)

13 
r
 = 1;

15 i‡(!
x
)

17 i‡(!(
x
 & 0xffff)) {

18 
x
 >>= 16;

19 
r
 += 16;

21 i‡(!(
x
 & 0xff)) {

22 
x
 >>= 8;

23 
r
 += 8;

25 i‡(!(
x
 & 0xf)) {

26 
x
 >>= 4;

27 
r
 += 4;

29 i‡(!(
x
 & 3)) {

30 
x
 >>= 2;

31 
r
 += 2;

33 i‡(!(
x
 & 1)) {

34 
x
 >>= 1;

35 
r
 += 1;

37  
r
;

38 
	}
}

45 
ölöe
 
	$gíîic_hweight32
(
w
)

47 
ªs
 = (
w
 & 0x55555555) + ((w >> 1) & 0x55555555);

48 
ªs
 = (res & 0x33333333) + ((res >> 2) & 0x33333333);

49 
ªs
 = (res & 0x0F0F0F0F) + ((res >> 4) & 0x0F0F0F0F);

50 
ªs
 = (res & 0x00FF00FF) + ((res >> 8) & 0x00FF00FF);

51  (
ªs
 & 0x0000FFFF) + ((res >> 16) & 0x0000FFFF);

52 
	}
}

54 
ölöe
 
	$gíîic_hweight16
(
w
)

56 
ªs
 = (
w
 & 0x5555) + ((w >> 1) & 0x5555);

57 
ªs
 = (res & 0x3333) + ((res >> 2) & 0x3333);

58 
ªs
 = (res & 0x0F0F) + ((res >> 4) & 0x0F0F);

59  (
ªs
 & 0x00FF) + ((res >> 8) & 0x00FF);

60 
	}
}

62 
ölöe
 
	$gíîic_hweight8
(
w
)

64 
ªs
 = (
w
 & 0x55) + ((w >> 1) & 0x55);

65 
ªs
 = (res & 0x33) + ((res >> 2) & 0x33);

66  (
ªs
 & 0x0F) + ((res >> 4) & 0x0F);

67 
	}
}

69 
	~<asm/bô›s.h
>

	@/usr/include/linux/cache.h

1 #i‚de‡
__LINUX_CACHE_H


2 
	#__LINUX_CACHE_H


	)

4 
	~<löux/c⁄fig.h
>

5 
	~<asm/ˇche.h
>

7 #i‚de‡
L1_CACHE_ALIGN


8 
	#L1_CACHE_ALIGN
(
x
Ë(((x)+(
L1_CACHE_BYTES
-1))&~(L1_CACHE_BYTES-1))

	)

11 #i‚de‡
SMP_CACHE_BYTES


12 
	#SMP_CACHE_BYTES
 
L1_CACHE_BYTES


	)

15 #i‚de‡
____ˇchñöe_Æig√d


16 
	#____ˇchñöe_Æig√d
 
	`__©åibuã__
((
	`__Æig√d__
(
SMP_CACHE_BYTES
)))

	)

19 #i‚de‡
____ˇchñöe_Æig√d_ö_smp


20 #ifde‡
CONFIG_SMP


21 
	#____ˇchñöe_Æig√d_ö_smp
 
____ˇchñöe_Æig√d


	)

23 
	#____ˇchñöe_Æig√d_ö_smp


	)

27 #i‚de‡
__ˇchñöe_Æig√d


28 #ifde‡
MODULE


29 
	#__ˇchñöe_Æig√d
 
____ˇchñöe_Æig√d


	)

31 
	#__ˇchñöe_Æig√d
 \

32 
	`__©åibuã__
((
	`__Æig√d__
(
SMP_CACHE_BYTES
), \

33 
	`__£˘i⁄__
(".d©a.ˇchñöe_Æig√d")))

	)

	@/usr/include/linux/compiler.h

1 #i‚de‡
__LINUX_COMPILER_H


2 
	#__LINUX_COMPILER_H


	)

9 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 < 96

10 
	#__buûtö_ex≥˘
(
x
, 
ex≥˘ed_vÆue
Ë(x)

	)

13 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
((x),1)

	)

14 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x),0)

	)

	@/usr/include/linux/config.h

1 #i‚de‡
_LINUX_CONFIG_H


2 
	#_LINUX_CONFIG_H


	)

	@/usr/include/linux/ctype.h

1 #i‚de‡
_LINUX_CTYPE_H


2 
	#_LINUX_CTYPE_H


	)

9 
	#_U
 0x01

	)

10 
	#_L
 0x02

	)

11 
	#_D
 0x04

	)

12 
	#_C
 0x08

	)

13 
	#_P
 0x10

	)

14 
	#_S
 0x20

	)

15 
	#_X
 0x40

	)

16 
	#_SP
 0x80

	)

18 
_˘y≥
[];

20 
	#__ismask
(
x
Ë(
_˘y≥
[()()(x)])

	)

22 
	#iß um
(
c
Ë((
	`__ismask
(c)&(
_U
|
_L
|
_D
)Ë!0)

	)

23 
	#ißÕha
(
c
Ë((
	`__ismask
(c)&(
_U
|
_L
)Ë!0)

	)

24 
	#is˙ål
(
c
Ë((
	`__ismask
(c)&(
_C
)Ë!0)

	)

25 
	#isdigô
(
c
Ë((
	`__ismask
(c)&(
_D
)Ë!0)

	)

26 
	#isgøph
(
c
Ë((
	`__ismask
(c)&(
_P
|
_U
|
_L
|
_D
)Ë!0)

	)

27 
	#i¶owî
(
c
Ë((
	`__ismask
(c)&(
_L
)Ë!0)

	)

28 
	#i•röt
(
c
Ë((
	`__ismask
(c)&(
_P
|
_U
|
_L
|
_D
|
_SP
)Ë!0)

	)

29 
	#i•un˘
(
c
Ë((
	`__ismask
(c)&(
_P
)Ë!0)

	)

30 
	#is•a˚
(
c
Ë((
	`__ismask
(c)&(
_S
)Ë!0)

	)

31 
	#isuµî
(
c
Ë((
	`__ismask
(c)&(
_U
)Ë!0)

	)

32 
	#isxdigô
(
c
Ë((
	`__ismask
(c)&(
_D
|
_X
)Ë!0)

	)

34 
	#ißscii
(
c
Ë((()(c))<=0x7f)

	)

35 
	#tﬂscii
(
c
Ë((()(c))&0x7f)

	)

37 
ölöe
 
	$__tﬁowî
(
c
)

39 i‡(
	`isuµî
(
c
))

40 
c
 -= 'A'-'a';

41  
c
;

42 
	}
}

44 
ölöe
 
	$__touµî
(
c
)

46 i‡(
	`i¶owî
(
c
))

47 
c
 -= 'a'-'A';

48  
c
;

49 
	}
}

51 
	#tﬁowî
(
c
Ë
	`__tﬁowî
(c)

	)

52 
	#touµî
(
c
Ë
	`__touµî
(c)

	)

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/file.h

5 #i‚de‡
__LINUX_FILE_H


6 
	#__LINUX_FILE_H


	)

8 
FASTCALL
(
Âut
(
fûe
 *));

9 
fûe
 * 
FASTCALL
(
fgë
(
fd
));

11 
ölöe
 
	$gë_˛o£_⁄_exec
(
fd
)

13 
fûes_°ru˘
 *
fûes
 = 
cuºít
->files;

14 
ªs
;

15 
	`ªad_lock
(&
fûes
->
fûe_lock
);

16 
ªs
 = 
	`FD_ISSET
(
fd
, 
fûes
->
˛o£_⁄_exec
);

17 
	`ªad_u∆ock
(&
fûes
->
fûe_lock
);

18  
ªs
;

19 
	}
}

21 
ölöe
 
	$£t_˛o£_⁄_exec
(
fd
, 
Êag
)

23 
fûes_°ru˘
 *
fûes
 = 
cuºít
->files;

24 
	`wrôe_lock
(&
fûes
->
fûe_lock
);

25 i‡(
Êag
)

26 
	`FD_SET
(
fd
, 
fûes
->
˛o£_⁄_exec
);

28 
	`FD_CLR
(
fd
, 
fûes
->
˛o£_⁄_exec
);

29 
	`wrôe_u∆ock
(&
fûes
->
fûe_lock
);

30 
	}
}

32 
ölöe
 
fûe
 * 
	$fcheck_fûes
(
fûes_°ru˘
 *
fûes
, 
fd
)

34 
fûe
 * fûê
NULL
;

36 i‡(
fd
 < 
fûes
->
max_fds
)

37 
fûe
 = 
fûes
->
fd
[fd];

38  
fûe
;

39 
	}
}

44 
ölöe
 
fûe
 * 
	$fcheck
(
fd
)

46 
fûe
 * fûê
NULL
;

47 
fûes_°ru˘
 *
fûes
 = 
cuºít
->files;

49 i‡(
fd
 < 
fûes
->
max_fds
)

50 
fûe
 = 
fûes
->
fd
[fd];

51  
fûe
;

52 
	}
}

54 
put_fûp
(
fûe
 *);

56 
gë_unu£d_fd
();

58 
ölöe
 
	$__put_unu£d_fd
(
fûes_°ru˘
 *
fûes
, 
fd
)

60 
	`FD_CLR
(
fd
, 
fûes
->
›í_fds
);

61 i‡(
fd
 < 
fûes
->
√xt_fd
)

62 
fûes
->
√xt_fd
 = 
fd
;

63 
	}
}

65 
ölöe
 
	$put_unu£d_fd
(
fd
)

67 
fûes_°ru˘
 *
fûes
 = 
cuºít
->files;

69 
	`wrôe_lock
(&
fûes
->
fûe_lock
);

70 
	`__put_unu£d_fd
(
fûes
, 
fd
);

71 
	`wrôe_u∆ock
(&
fûes
->
fûe_lock
);

72 
	}
}

87 
ölöe
 
	$fd_ö°Æl
(
fd
, 
fûe
 * file)

89 
fûes_°ru˘
 *
fûes
 = 
cuºít
->files;

91 
	`wrôe_lock
(&
fûes
->
fûe_lock
);

92 i‡(
fûes
->
fd
[fd])

93 
	`BUG
();

94 
fûes
->
fd
[fd] = 
fûe
;

95 
	`wrôe_u∆ock
(&
fûes
->
fûe_lock
);

96 
	}
}

98 
put_fûes_°ru˘
(
fûes_°ru˘
 *
fs
);

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/c⁄fig.h
>

10 
	~<löux/lökage.h
>

11 
	~<löux/limôs.h
>

12 
	~<löux/waô.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/vfs.h
>

15 
	~<löux/√t.h
>

16 
	~<löux/kdev_t.h
>

17 
	~<löux/io˘l.h
>

18 
	~<löux/li°.h
>

19 
	~<löux/dˇche.h
>

20 
	~<löux/°©.h
>

21 
	~<löux/ˇche.h
>

22 
	~<löux/°ddef.h
>

23 
	~<löux/°rög.h
>

26 
	gpﬁl_èbÀ_°ru˘
;

40 #unde‡
NR_OPEN


41 
	#NR_OPEN
 (1024*1024Ë

	)

42 
	#INR_OPEN
 1024

	)

44 
	#BLOCK_SIZE_BITS
 10

	)

45 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

48 
	sfûes_°©_°ru˘
 {

49 
	mƒ_fûes
;

50 
	mƒ_‰ì_fûes
;

51 
	mmax_fûes
;

53 
fûes_°©_°ru˘
 
fûes_°©
;

55 
	söodes_°©_t
 {

56 
	mƒ_öodes
;

57 
	mƒ_unu£d
;

58 
	mdummy
[5];

60 
öodes_°©_t
 
öodes_°©
;

62 
Àa£s_íabÀ
, 
dú_nŸify_íabÀ
, 
Àa£_bªak_time
;

64 
	#NR_FILE
 8192

	)

65 
	#NR_RESERVED_FILES
 10

	)

66 
	#NR_SUPER
 256

	)

68 
	#MAY_EXEC
 1

	)

69 
	#MAY_WRITE
 2

	)

70 
	#MAY_READ
 4

	)

72 
	#FMODE_READ
 1

	)

73 
	#FMODE_WRITE
 2

	)

75 
	#READ
 0

	)

76 
	#WRITE
 1

	)

77 
	#READA
 2

	)

78 
	#SPECIAL
 4

	)

80 
	#SEL_IN
 1

	)

81 
	#SEL_OUT
 2

	)

82 
	#SEL_EX
 4

	)

85 
	#FS_REQUIRES_DEV
 1

	)

86 
	#FS_NO_DCACHE
 2

	)

87 
	#FS_NO_PRELIM
 4

	)

90 
	#FS_SINGLE
 8

	)

91 
	#FS_NOMOUNT
 16

	)

92 
	#FS_LITTER
 32

	)

93 
	#FS_ODD_RENAME
 32768

	)

99 
	#MS_RDONLY
 1

	)

100 
	#MS_NOSUID
 2

	)

101 
	#MS_NODEV
 4

	)

102 
	#MS_NOEXEC
 8

	)

103 
	#MS_SYNCHRONOUS
 16

	)

104 
	#MS_REMOUNT
 32

	)

105 
	#MS_MANDLOCK
 64

	)

106 
	#MS_NOATIME
 1024

	)

107 
	#MS_NODIRATIME
 2048

	)

108 
	#MS_BIND
 4096

	)

109 
	#MS_NOUSER
 (1<<31)

	)

114 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_NOATIME
|\

115 
MS_NODIRATIME
)

	)

120 
	#MS_MGC_VAL
 0xC0ED0000

	)

121 
	#MS_MGC_MSK
 0xffff0000

	)

125 
	#S_SYNC
 1

	)

126 
	#S_NOATIME
 2

	)

127 
	#S_QUOTA
 4

	)

128 
	#S_APPEND
 8

	)

129 
	#S_IMMUTABLE
 16

	)

130 
	#S_DEAD
 32

	)

131 
	#S_NOQUOTA
 64

	)

146 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

148 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

149 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
Ë|| ((öode)->
i_Êags
 & 
S_SYNC
))

	)

150 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

152 
	#IS_QUOTAINIT
(
öode
Ë((öode)->
i_Êags
 & 
S_QUOTA
)

	)

153 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

154 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

155 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

156 
	#IS_NOATIME
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_NOATIME
Ë|| ((öode)->
i_Êags
 & 
S_NOATIME
))

	)

157 
	#IS_NODIRATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_NODIRATIME
)

	)

159 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

164 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

165 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

166 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

167 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

168 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

169 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

170 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

171 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

172 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

173 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

174 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

175 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

177 
	#BLKPG
 
	`_IO
(0x12,105)

	)

178 
	#BLKELVGET
 
	`_IOR
(0x12,106,(
blkñv_io˘l_¨g_t
))

	)

179 
	#BLKELVSET
 
	`_IOW
(0x12,107,(
blkñv_io˘l_¨g_t
))

	)

183 
	#BLKGETLASTSECT
 
	`_IO
(0x12,108Ë

	)

184 
	#BLKSETLASTSECT
 
	`_IO
(0x12,109Ë

	)

186 
	#BLKBSZGET
 
	`_IOR
(0x12,112,())

	)

187 
	#BLKBSZSET
 
	`_IOW
(0x12,113,())

	)

189 
	#BMAP_IOCTL
 1

	)

190 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

191 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

	@/usr/include/linux/icmp.h

17 #i‚de‡
_LINUX_ICMP_H


18 
	#_LINUX_ICMP_H


	)

20 
	#ICMP_ECHOREPLY
 0

	)

21 
	#ICMP_DEST_UNREACH
 3

	)

22 
	#ICMP_SOURCE_QUENCH
 4

	)

23 
	#ICMP_REDIRECT
 5

	)

24 
	#ICMP_ECHO
 8

	)

25 
	#ICMP_TIME_EXCEEDED
 11

	)

26 
	#ICMP_PARAMETERPROB
 12

	)

27 
	#ICMP_TIMESTAMP
 13

	)

28 
	#ICMP_TIMESTAMPREPLY
 14

	)

29 
	#ICMP_INFO_REQUEST
 15

	)

30 
	#ICMP_INFO_REPLY
 16

	)

31 
	#ICMP_ADDRESS
 17

	)

32 
	#ICMP_ADDRESSREPLY
 18

	)

33 
	#NR_ICMP_TYPES
 18

	)

37 
	#ICMP_NET_UNREACH
 0

	)

38 
	#ICMP_HOST_UNREACH
 1

	)

39 
	#ICMP_PROT_UNREACH
 2

	)

40 
	#ICMP_PORT_UNREACH
 3

	)

41 
	#ICMP_FRAG_NEEDED
 4

	)

42 
	#ICMP_SR_FAILED
 5

	)

43 
	#ICMP_NET_UNKNOWN
 6

	)

44 
	#ICMP_HOST_UNKNOWN
 7

	)

45 
	#ICMP_HOST_ISOLATED
 8

	)

46 
	#ICMP_NET_ANO
 9

	)

47 
	#ICMP_HOST_ANO
 10

	)

48 
	#ICMP_NET_UNR_TOS
 11

	)

49 
	#ICMP_HOST_UNR_TOS
 12

	)

50 
	#ICMP_PKT_FILTERED
 13

	)

51 
	#ICMP_PREC_VIOLATION
 14

	)

52 
	#ICMP_PREC_CUTOFF
 15

	)

53 
	#NR_ICMP_UNREACH
 15

	)

56 
	#ICMP_REDIR_NET
 0

	)

57 
	#ICMP_REDIR_HOST
 1

	)

58 
	#ICMP_REDIR_NETTOS
 2

	)

59 
	#ICMP_REDIR_HOSTTOS
 3

	)

62 
	#ICMP_EXC_TTL
 0

	)

63 
	#ICMP_EXC_FRAGTIME
 1

	)

66 
	sicmphdr
 {

67 
__u8
 
	mty≥
;

68 
__u8
 
	mcode
;

69 
__u16
 
	mchecksum
;

72 
__u16
 
	mid
;

73 
__u16
 
	m£quí˚
;

74 } 
	mecho
;

75 
__u32
 
	mg©eway
;

77 
__u16
 
	m__unu£d
;

78 
__u16
 
	mmtu
;

79 } 
	m‰ag
;

80 } 
	mun
;

87 
	#ICMP_FILTER
 1

	)

89 
	sicmp_fûãr
 {

90 
__u32
 
	md©a
;

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFF_UP
 0x1

	)

27 
	#IFF_BROADCAST
 0x2

	)

28 
	#IFF_DEBUG
 0x4

	)

29 
	#IFF_LOOPBACK
 0x8

	)

30 
	#IFF_POINTOPOINT
 0x10

	)

31 
	#IFF_NOTRAILERS
 0x20

	)

32 
	#IFF_RUNNING
 0x40

	)

33 
	#IFF_NOARP
 0x80

	)

34 
	#IFF_PROMISC
 0x100

	)

35 
	#IFF_ALLMULTI
 0x200

	)

37 
	#IFF_MASTER
 0x400

	)

38 
	#IFF_SLAVE
 0x800

	)

40 
	#IFF_MULTICAST
 0x1000

	)

42 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
)

	)

44 
	#IFF_PORTSEL
 0x2000

	)

45 
	#IFF_AUTOMEDIA
 0x4000

	)

46 
	#IFF_DYNAMIC
 0x8000

	)

58 
	sifm≠


60 
	mmem_°¨t
;

61 
	mmem_íd
;

62 
	mba£_addr
;

63 
	múq
;

64 
	mdma
;

65 
	mp‹t
;

76 
	si‰eq


78 
	#IFHWADDRLEN
 6

	)

79 
	#IFNAMSIZ
 16

	)

82 
	mi‰n_«me
[
IFNAMSIZ
];

83 } 
	mi‰_i‰n
;

86 
sockaddr
 
	mi‰u_addr
;

87 
sockaddr
 
	mi‰u_d°addr
;

88 
sockaddr
 
	mi‰u_brﬂdaddr
;

89 
sockaddr
 
	mi‰u_√tmask
;

90 
sockaddr
 
	mi‰u_hwaddr
;

91 
	mi‰u_Êags
;

92 
	mi‰u_ivÆue
;

93 
	mi‰u_mtu
;

94 
ifm≠
 
	mi‰u_m≠
;

95 
	mi‰u_¶ave
[
IFNAMSIZ
];

96 
	mi‰u_√w«me
[
IFNAMSIZ
];

97 * 
	mi‰u_d©a
;

98 } 
	mi‰_i‰u
;

101 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

102 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

103 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

104 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

105 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

106 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

107 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

108 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

109 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

110 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

111 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

112 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

113 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

114 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

115 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

116 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

125 
	sifc⁄f


127 
	mifc_Àn
;

130 * 
	mifcu_buf
;

131 
i‰eq
 *
	mifcu_ªq
;

132 } 
	mifc_ifcu
;

134 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

135 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

26 
	~<löux/√tdevi˚.h
>

29 
	#ARPHRD_NETROM
 0

	)

30 
	#ARPHRD_ETHER
 1

	)

31 
	#ARPHRD_EETHER
 2

	)

32 
	#ARPHRD_AX25
 3

	)

33 
	#ARPHRD_PRONET
 4

	)

34 
	#ARPHRD_CHAOS
 5

	)

35 
	#ARPHRD_IEEE802
 6

	)

36 
	#ARPHRD_ARCNET
 7

	)

37 
	#ARPHRD_APPLETLK
 8

	)

38 
	#ARPHRD_DLCI
 15

	)

39 
	#ARPHRD_ATM
 19

	)

40 
	#ARPHRD_METRICOM
 23

	)

41 
	#ARPHRD_IEEE1394
 24

	)

44 
	#ARPHRD_SLIP
 256

	)

45 
	#ARPHRD_CSLIP
 257

	)

46 
	#ARPHRD_SLIP6
 258

	)

47 
	#ARPHRD_CSLIP6
 259

	)

48 
	#ARPHRD_RSRVD
 260

	)

49 
	#ARPHRD_ADAPT
 264

	)

50 
	#ARPHRD_ROSE
 270

	)

51 
	#ARPHRD_X25
 271

	)

52 
	#ARPHRD_HWX25
 272

	)

53 
	#ARPHRD_PPP
 512

	)

54 
	#ARPHRD_CISCO
 513

	)

55 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

56 
	#ARPHRD_LAPB
 516

	)

57 
	#ARPHRD_DDCMP
 517

	)

58 
	#ARPHRD_RAWHDLC
 518

	)

60 
	#ARPHRD_TUNNEL
 768

	)

61 
	#ARPHRD_TUNNEL6
 769

	)

62 
	#ARPHRD_FRAD
 770

	)

63 
	#ARPHRD_SKIP
 771

	)

64 
	#ARPHRD_LOOPBACK
 772

	)

65 
	#ARPHRD_LOCALTLK
 773

	)

66 
	#ARPHRD_FDDI
 774

	)

67 
	#ARPHRD_BIF
 775

	)

68 
	#ARPHRD_SIT
 776

	)

69 
	#ARPHRD_IPDDP
 777

	)

70 
	#ARPHRD_IPGRE
 778

	)

71 
	#ARPHRD_PIMREG
 779

	)

72 
	#ARPHRD_HIPPI
 780

	)

73 
	#ARPHRD_ASH
 781

	)

74 
	#ARPHRD_ECONET
 782

	)

75 
	#ARPHRD_IRDA
 783

	)

77 
	#ARPHRD_FCPP
 784

	)

78 
	#ARPHRD_FCAL
 785

	)

79 
	#ARPHRD_FCPL
 786

	)

80 
	#ARPHRD_FCFABRIC
 787

	)

82 
	#ARPHRD_IEEE802_TR
 800

	)

83 
	#ARPHRD_IEEE80211
 801

	)

85 
	#ARPHRD_VOID
 0xFFFF

	)

88 
	#ARPOP_REQUEST
 1

	)

89 
	#ARPOP_REPLY
 2

	)

90 
	#ARPOP_RREQUEST
 3

	)

91 
	#ARPOP_RREPLY
 4

	)

92 
	#ARPOP_InREQUEST
 8

	)

93 
	#ARPOP_InREPLY
 9

	)

94 
	#ARPOP_NAK
 10

	)

98 
	s¨¥eq
 {

99 
sockaddr
 
	m¨p_∑
;

100 
sockaddr
 
	m¨p_ha
;

101 
	m¨p_Êags
;

102 
sockaddr
 
	m¨p_√tmask
;

103 
	m¨p_dev
[16];

106 
	s¨¥eq_ﬁd
 {

107 
sockaddr
 
	m¨p_∑
;

108 
sockaddr
 
	m¨p_ha
;

109 
	m¨p_Êags
;

110 
sockaddr
 
	m¨p_√tmask
;

114 
	#ATF_COM
 0x02

	)

115 
	#ATF_PERM
 0x04

	)

116 
	#ATF_PUBL
 0x08

	)

117 
	#ATF_USETRAILERS
 0x10

	)

118 
	#ATF_NETMASK
 0x20

	)

120 
	#ATF_DONTPUB
 0x40

	)

126 
	s¨phdr


128 
	m¨_hrd
;

129 
	m¨_¥o
;

130 
	m¨_h 
;

131 
	m¨_∂n
;

132 
	m¨_›
;

138 
	m¨_sha
[
ETH_ALEN
];

139 
	m¨_sù
[4];

140 
	m¨_tha
[
ETH_ALEN
];

141 
	m¨_tù
[4];

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

29 
	#ETH_ALEN
 6

	)

30 
	#ETH_HLEN
 14

	)

31 
	#ETH_ZLEN
 60

	)

32 
	#ETH_DATA_LEN
 1500

	)

33 
	#ETH_FRAME_LEN
 1514

	)

39 
	#ETH_P_LOOP
 0x0060

	)

40 
	#ETH_P_PUP
 0x0200

	)

41 
	#ETH_P_PUPAT
 0x0201

	)

42 
	#ETH_P_IP
 0x0800

	)

43 
	#ETH_P_X25
 0x0805

	)

44 
	#ETH_P_ARP
 0x0806

	)

45 
	#ETH_P_BPQ
 0x08FF

	)

46 
	#ETH_P_IEEEPUP
 0x0a00

	)

47 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

48 
	#ETH_P_DEC
 0x6000

	)

49 
	#ETH_P_DNA_DL
 0x6001

	)

50 
	#ETH_P_DNA_RC
 0x6002

	)

51 
	#ETH_P_DNA_RT
 0x6003

	)

52 
	#ETH_P_LAT
 0x6004

	)

53 
	#ETH_P_DIAG
 0x6005

	)

54 
	#ETH_P_CUST
 0x6006

	)

55 
	#ETH_P_SCA
 0x6007

	)

56 
	#ETH_P_RARP
 0x8035

	)

57 
	#ETH_P_ATALK
 0x809B

	)

58 
	#ETH_P_AARP
 0x80F3

	)

59 
	#ETH_P_IPX
 0x8137

	)

60 
	#ETH_P_IPV6
 0x86DD

	)

61 
	#ETH_P_PPP_DISC
 0x8863

	)

62 
	#ETH_P_PPP_SES
 0x8864

	)

63 
	#ETH_P_ATMMPOA
 0x884¯

	)

64 
	#ETH_P_ATMFATE
 0x8884

	)

72 
	#ETH_P_802_3
 0x0001

	)

73 
	#ETH_P_AX25
 0x0002

	)

74 
	#ETH_P_ALL
 0x0003

	)

75 
	#ETH_P_802_2
 0x0004

	)

76 
	#ETH_P_SNAP
 0x0005

	)

77 
	#ETH_P_DDCMP
 0x0006

	)

78 
	#ETH_P_WAN_PPP
 0x0007

	)

79 
	#ETH_P_PPP_MP
 0x0008

	)

80 
	#ETH_P_LOCALTALK
 0x0009

	)

81 
	#ETH_P_PPPTALK
 0x0010

	)

82 
	#ETH_P_TR_802_2
 0x0011

	)

83 
	#ETH_P_MOBITEX
 0x0015

	)

84 
	#ETH_P_CONTROL
 0x0016

	)

85 
	#ETH_P_IRDA
 0x0017

	)

86 
	#ETH_P_ECONET
 0x0018

	)

92 
	sëhhdr


94 
	mh_de°
[
ETH_ALEN
];

95 
	mh_sour˚
[
ETH_ALEN
];

96 
	mh_¥Ÿo
;

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	ssockaddr_pkt


6 
	m•kt_Ámûy
;

7 
	m•kt_devi˚
[14];

8 
	m•kt_¥Ÿocﬁ
;

11 
	ssockaddr_Œ


13 
	m¶l_Ámûy
;

14 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

30 
	#PACKET_LOOPBACK
 5

	)

31 
	#PACKET_FASTROUTE
 6

	)

35 
	#PACKET_ADD_MEMBERSHIP
 1

	)

36 
	#PACKET_DROP_MEMBERSHIP
 2

	)

37 
	#PACKET_RECV_OUTPUT
 3

	)

39 
	#PACKET_RX_RING
 5

	)

40 
	#PACKET_STATISTICS
 6

	)

41 
	#PACKET_COPY_THRESH
 7

	)

43 
	sçackë_°©s


45 
	mç_∑ckës
;

46 
	mç_dr›s
;

49 
	sçackë_hdr


51 
	mç_°©us
;

52 
	#TP_STATUS_KERNEL
 0

	)

53 
	#TP_STATUS_USER
 1

	)

54 
	#TP_STATUS_COPY
 2

	)

55 
	#TP_STATUS_LOSING
 4

	)

56 
	#TP_STATUS_CSUMNOTREADY
 8

	)

57 
	mç_Àn
;

58 
	mç_¢≠Àn
;

59 
	mç_mac
;

60 
	mç_√t
;

61 
	mç_£c
;

62 
	mç_u£c
;

65 
	#TPACKET_ALIGNMENT
 16

	)

66 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

67 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

82 
	sçackë_ªq


84 
	mç_block_size
;

85 
	mç_block_ƒ
;

86 
	mç_‰ame_size
;

87 
	mç_‰ame_ƒ
;

90 
	s∑ckë_mªq


92 
	mmr_ifödex
;

93 
	mmr_ty≥
;

94 
	mmr_Æí
;

95 
	mmr_addªss
[8];

98 
	#PACKET_MR_MULTICAST
 0

	)

99 
	#PACKET_MR_PROMISC
 1

	)

100 
	#PACKET_MR_ALLMULTI
 2

	)

	@/usr/include/linux/in.h

18 #i‚de‡
_LINUX_IN_H


19 
	#_LINUX_IN_H


	)

21 
	~<löux/ty≥s.h
>

25 
	mIPPROTO_IP
 = 0,

26 
	mIPPROTO_ICMP
 = 1,

27 
	mIPPROTO_IGMP
 = 2,

28 
	mIPPROTO_IPIP
 = 4,

29 
	mIPPROTO_TCP
 = 6,

30 
	mIPPROTO_EGP
 = 8,

31 
	mIPPROTO_PUP
 = 12,

32 
	mIPPROTO_UDP
 = 17,

33 
	mIPPROTO_IDP
 = 22,

34 
	mIPPROTO_RSVP
 = 46,

35 
	mIPPROTO_GRE
 = 47,

37 
	mIPPROTO_IPV6
 = 41,

39 
	mIPPROTO_PIM
 = 103,

41 
	mIPPROTO_ESP
 = 50,

42 
	mIPPROTO_AH
 = 51,

43 
	mIPPROTO_COMP
 = 108,

45 
	mIPPROTO_RAW
 = 255,

46 
	mIPPROTO_MAX


51 
	sö_addr
 {

52 
__u32
 
	ms_addr
;

55 
	#IP_TOS
 1

	)

56 
	#IP_TTL
 2

	)

57 
	#IP_HDRINCL
 3

	)

58 
	#IP_OPTIONS
 4

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_RECVOPTS
 6

	)

61 
	#IP_RETOPTS
 7

	)

62 
	#IP_PKTINFO
 8

	)

63 
	#IP_PKTOPTIONS
 9

	)

64 
	#IP_MTU_DISCOVER
 10

	)

65 
	#IP_RECVERR
 11

	)

66 
	#IP_RECVTTL
 12

	)

67 
	#IP_RECVTOS
 13

	)

68 
	#IP_MTU
 14

	)

69 
	#IP_FREEBIND
 15

	)

72 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

75 
	#IP_PMTUDISC_DONT
 0

	)

76 
	#IP_PMTUDISC_WANT
 1

	)

77 
	#IP_PMTUDISC_DO
 2

	)

79 
	#IP_MULTICAST_IF
 32

	)

80 
	#IP_MULTICAST_TTL
 33

	)

81 
	#IP_MULTICAST_LOOP
 34

	)

82 
	#IP_ADD_MEMBERSHIP
 35

	)

83 
	#IP_DROP_MEMBERSHIP
 36

	)

86 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

87 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

91 
	sù_mªq


93 
ö_addr
 
	mimr_mu…üddr
;

94 
ö_addr
 
	mimr_öãrÁ˚
;

97 
	sù_mªqn


99 
ö_addr
 
	mimr_mu…üddr
;

100 
ö_addr
 
	mimr_addªss
;

101 
	mimr_ifödex
;

104 
	sö_pktöfo


106 
	mùi_ifödex
;

107 
ö_addr
 
	mùi_•ec_d°
;

108 
ö_addr
 
	mùi_addr
;

112 
	#__SOCK_SIZE__
 16

	)

113 
	ssockaddr_ö
 {

114 
ß_Ámûy_t
 
	msö_Ámûy
;

115 
	msö_p‹t
;

116 
ö_addr
 
	msö_addr
;

119 
	m__∑d
[
__SOCK_SIZE__
 - () -

120 (Ë- (
ö_addr
)];

122 
	#sö_zîo
 
__∑d


	)

130 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

131 
	#IN_CLASSA_NET
 0xff000000

	)

132 
	#IN_CLASSA_NSHIFT
 24

	)

133 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

134 
	#IN_CLASSA_MAX
 128

	)

136 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

137 
	#IN_CLASSB_NET
 0xffff0000

	)

138 
	#IN_CLASSB_NSHIFT
 16

	)

139 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

140 
	#IN_CLASSB_MAX
 65536

	)

142 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

143 
	#IN_CLASSC_NET
 0xffffff00

	)

144 
	#IN_CLASSC_NSHIFT
 8

	)

145 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

147 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

148 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

149 
	#IN_MULTICAST_NET
 0xF0000000

	)

151 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

152 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

155 
	#INADDR_ANY
 ((Ë0x00000000)

	)

158 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

161 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

164 
	#IN_LOOPBACKNET
 127

	)

167 
	#INADDR_LOOPBACK
 0x7f000001

	)

168 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

171 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

172 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

173 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

174 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

	@/usr/include/linux/inet.h

42 #i‚de‡
_LINUX_INET_H


43 
	#_LINUX_INET_H


	)

	@/usr/include/linux/inetdevice.h

1 #i‚de‡
_LINUX_INETDEVICE_H


2 
	#_LINUX_INETDEVICE_H


	)

5 
__ölöe__
 
__u32
 
	$öë_make_mask
(
logmask
)

7 i‡(
logmask
)

8  
	`ht⁄l
(~((1<<(32-
logmask
))-1));

10 
	}
}

12 
__ölöe__
 
	$öë_mask_Àn
(
__u32
 
mask
)

14 i‡(!(
mask
 = 
	`¡ohl
(mask)))

16  32 - 
	`ffz
(~
mask
);

17 
	}
}

	@/usr/include/linux/init.h

1 #i‚de‡
_LINUX_INIT_H


2 
	#_LINUX_INIT_H


	)

4 
	~<löux/c⁄fig.h
>

41 #i‚de‡
MODULE


43 #i‚de‡
__ASSEMBLY__


48 (*
	töôˇŒ_t
)();

49 (*
	texôˇŒ_t
)();

51 
öôˇŒ_t
 
__öôˇŒ_°¨t
, 
__öôˇŒ_íd
;

53 
	#__öôˇŒ
(
‚
) \

54 
öôˇŒ_t
 
__öôˇŒ_
##
‚
 
__öô_ˇŒ
 = 
	)
fn

55 
	#__exôˇŒ
(
‚
) \

56 
exôˇŒ_t
 
__exôˇŒ_
##
‚
 
__exô_ˇŒ
 = 
	)
fn

61 
	skî√l_∑øm
 {

62 c⁄° *
°r
;

63 (*
£tup_func
)(*);

66 
kî√l_∑øm
 
__£tup_°¨t
, 
__£tup_íd
;

68 
	#__£tup
(
°r
, 
‚
) \

69 
__£tup_°r_
##
‚
[] 
__öôd©a
 = 
°r
; \

70 
kî√l_∑øm
 
__£tup_
##
‚
 
	`__©åibuã__
((
unu£d
)Ë
__öô£tup
 = { 
__£tup_°r_
##‚, f¿
	}

	)
}

78 
	#__öô
 
	`__©åibuã__
 ((
	`__£˘i⁄__
 (".ãxt.öô")))

	)

79 
	#__exô
 
	`__©åibuã__
 ((
unu£d
, 
	`__£˘i⁄__
(".ãxt.exô")))

	)

80 
	#__öôd©a
 
	`__©åibuã__
 ((
	`__£˘i⁄__
 (".d©a.öô")))

	)

81 
	#__exôd©a
 
	`__©åibuã__
 ((
unu£d
, 
	`__£˘i⁄__
 (".d©a.exô")))

	)

82 
	#__öô£tup
 
	`__©åibuã__
 ((
unu£d
,
	`__£˘i⁄__
 (".£tup.öô")))

	)

83 
	#__öô_ˇŒ
 
	`__©åibuã__
 ((
unu£d
,
	`__£˘i⁄__
 (".öôˇŒ.öô")))

	)

84 
	#__exô_ˇŒ
 
	`__©åibuã__
 ((
unu£d
,
	`__£˘i⁄__
 (".exôˇŒ.exô")))

	)

87 
	#__INIT
 .
£˘i⁄
 ".ãxt.öô","ax"

	)

88 
	#__FINIT
 .
¥evious


	)

89 
	#__INITDATA
 .
£˘i⁄
 ".d©a.öô","aw"

	)

101 
	#moduÀ_öô
(
x
Ë
	`__öôˇŒ
(x);

	)

112 
	#moduÀ_exô
(
x
Ë
	`__exôˇŒ
(x);

	)

116 
	#__öô


	)

117 
	#__exô


	)

118 
	#__öôd©a


	)

119 
	#__exôd©a


	)

120 
	#__öôˇŒ
(
‚
)

	)

122 
	#__INIT


	)

123 
	#__FINIT


	)

124 
	#__INITDATA


	)

131 (*
	t__öô_moduÀ_func_t
)();

132 (*
	t__˛ónup_moduÀ_func_t
)();

133 
	#moduÀ_öô
(
x
) \

134 
	`öô_moduÀ
(Ë
	`__©åibuã__
((
	`Æüs
(#x))); \

135 
ölöe
 
__öô_moduÀ_func_t
 
	`__öô_moduÀ_ölöe
() \

136 {  
x
; 
	}

	)
}

137 
	#moduÀ_exô
(
x
) \

138 
	`˛ónup_moduÀ
(Ë
	`__©åibuã__
((
	`Æüs
(#x))); \

139 
ölöe
 
__˛ónup_moduÀ_func_t
 
	`__˛ónup_moduÀ_ölöe
() \

140 {  
x
; }

	)

142 
	#__£tup
(
°r
,
func
Ë

	)

146 #ifde‡
CONFIG_HOTPLUG


147 
	#__devöô


	)

148 
	#__devöôd©a


	)

149 
	#__devexô


	)

150 
	#__devexôd©a


	)

152 
	#__devöô
 
__öô


	)

153 
	#__devöôd©a
 
__öôd©a


	)

154 
	#__devexô
 
__exô


	)

155 
	#__devexôd©a
 
__exôd©a


	)

	@/usr/include/linux/interrupt.h

2 #i‚de‡
_LINUX_INTERRUPT_H


3 
	#_LINUX_INTERRUPT_H


	)

5 
	~<löux/c⁄fig.h
>

6 
	~<löux/kî√l.h
>

7 
	~<löux/smp.h
>

8 
	~<löux/ˇche.h
>

10 
	~<asm/bô›s.h
>

11 
	~<asm/±ø˚.h
>

13 
	súqa˘i⁄
 {

14 (*
	mh™dÀr
)(, *, 
	m±_ªgs
 *);

15 
	mÊags
;

16 
	mmask
;

17 c⁄° *
	m«me
;

18 *
	mdev_id
;

19 
úqa˘i⁄
 *
	m√xt
;

27 
	mTIMER_BH
 = 0,

28 
	mTQUEUE_BH
,

29 
	mDIGI_BH
,

30 
	mSERIAL_BH
,

31 
	mRISCOM8_BH
,

32 
	mSPECIALIX_BH
,

33 
	mAURORA_BH
,

34 
	mESP_BH
,

35 
	mSCSI_BH
,

36 
	mIMMEDIATE_BH
,

37 
	mCYCLADES_BH
,

38 
	mCM206_BH
,

39 
	mJS_BH
,

40 
	mMACSERIAL_BH
,

41 
	mISICOM_BH


44 
	~<asm/h¨dúq.h
>

45 
	~<asm/so·úq.h
>

57 
	mHI_SOFTIRQ
=0,

58 
	mNET_TX_SOFTIRQ
,

59 
	mNET_RX_SOFTIRQ
,

60 
	mTASKLET_SOFTIRQ


67 
	sso·úq_a˘i⁄


69 (*
	ma˘i⁄
)(
	mso·úq_a˘i⁄
 *);

70 *
	md©a
;

73 
asmlökage
 
do_so·úq
();

74 
›í_so·úq
(
ƒ
, (*
a˘i⁄
)(
so·úq_a˘i⁄
*), *
d©a
);

75 
	`so·úq_öô
();

76 
	#__˝u_øi£_so·úq
(
˝u
, 
ƒ
Ëdÿ{ 
	`so·úq_≥ndög
(˝uË|1UL << (ƒ); 
	}
} 0)

	)

77 
FASTCALL
(
˝u_øi£_so·úq
(
˝u
, 
ƒ
));

78 
FASTCALL
(
øi£_so·úq
(
ƒ
));

102 
	sèskÀt_°ru˘


104 
èskÀt_°ru˘
 *
	m√xt
;

105 
	m°©e
;

106 
©omic_t
 
	mcou¡
;

107 (*
	mfunc
)();

108 
	md©a
;

111 
	#DECLARE_TASKLET
(
«me
, 
func
, 
d©a
) \

112 
èskÀt_°ru˘
 
«me
 = { 
NULL
, 0, 
	`ATOMIC_INIT
(0), 
func
, 
d©a
 }

	)

114 
	#DECLARE_TASKLET_DISABLED
(
«me
, 
func
, 
d©a
) \

115 
èskÀt_°ru˘
 
«me
 = { 
NULL
, 0, 
	`ATOMIC_INIT
(1), 
func
, 
d©a
 }

	)

120 
	mTASKLET_STATE_SCHED
,

121 
	mTASKLET_STATE_RUN


124 
	sèskÀt_hód


126 
èskÀt_°ru˘
 *
	mli°
;

127 } 
__©åibuã__
 ((
__Æig√d__
(
SMP_CACHE_BYTES
)));

129 
èskÀt_hód
 
èskÀt_vec
[
NR_CPUS
];

130 
èskÀt_hód
 
èskÀt_hi_vec
[
NR_CPUS
];

132 #ifde‡
CONFIG_SMP


133 
ölöe
 
	$èskÀt_åylock
(
èskÀt_°ru˘
 *
t
)

135  !
	`ã°_™d_£t_bô
(
TASKLET_STATE_RUN
, &(
t
)->
°©e
);

136 
	}
}

138 
ölöe
 
	$èskÀt_u∆ock
(
èskÀt_°ru˘
 *
t
)

140 
	`smp_mb__bef‹e_˛ór_bô
();

141 
	`˛ór_bô
(
TASKLET_STATE_RUN
, &(
t
)->
°©e
);

142 
	}
}

144 
ölöe
 
	$èskÀt_u∆ock_waô
(
èskÀt_°ru˘
 *
t
)

146 
	`ã°_bô
(
TASKLET_STATE_RUN
, &(
t
)->
°©e
)Ë{ 
	`b¨rõr
(); }

147 
	}
}

149 
	#èskÀt_åylock
(
t
Ë1

	)

150 
	#èskÀt_u∆ock_waô
(
t
Ëdÿ{ } 0)

	)

151 
	#èskÀt_u∆ock
(
t
Ëdÿ{ } 0)

	)

154 
FASTCALL
(
__èskÀt_scheduÀ
(
èskÀt_°ru˘
 *
t
));

156 
ölöe
 
	$èskÀt_scheduÀ
(
èskÀt_°ru˘
 *
t
)

158 i‡(!
	`ã°_™d_£t_bô
(
TASKLET_STATE_SCHED
, &
t
->
°©e
))

159 
	`__èskÀt_scheduÀ
(
t
);

160 
	}
}

162 
FASTCALL
(
__èskÀt_hi_scheduÀ
(
èskÀt_°ru˘
 *
t
));

164 
ölöe
 
	$èskÀt_hi_scheduÀ
(
èskÀt_°ru˘
 *
t
)

166 i‡(!
	`ã°_™d_£t_bô
(
TASKLET_STATE_SCHED
, &
t
->
°©e
))

167 
	`__èskÀt_hi_scheduÀ
(
t
);

168 
	}
}

171 
ölöe
 
	$èskÀt_dißbÀ_nosync
(
èskÀt_°ru˘
 *
t
)

173 
	`©omic_öc
(&
t
->
cou¡
);

174 
	`smp_mb__a·î_©omic_öc
();

175 
	}
}

177 
ölöe
 
	$èskÀt_dißbÀ
(
èskÀt_°ru˘
 *
t
)

179 
	`èskÀt_dißbÀ_nosync
(
t
);

180 
	`èskÀt_u∆ock_waô
(
t
);

181 
	`smp_mb
();

182 
	}
}

184 
ölöe
 
	$èskÀt_íabÀ
(
èskÀt_°ru˘
 *
t
)

186 
	`smp_mb__bef‹e_©omic_dec
();

187 
	`©omic_dec
(&
t
->
cou¡
);

188 
	}
}

190 
ölöe
 
	$èskÀt_hi_íabÀ
(
èskÀt_°ru˘
 *
t
)

192 
	`smp_mb__bef‹e_©omic_dec
();

193 
	`©omic_dec
(&
t
->
cou¡
);

194 
	}
}

196 
èskÀt_kûl
(
èskÀt_°ru˘
 *
t
);

197 
èskÀt_öô
(
èskÀt_°ru˘
 *
t
,

198 (*
func
)(), 
d©a
);

200 #ifde‡
CONFIG_SMP


202 
	#SMP_TIMER_NAME
(
«me
Ë«me##
__thr


	)

204 
	#SMP_TIMER_DEFINE
(
«me
, 
èsk
) \

205 
	`DECLARE_TASKLET
(
èsk
, 
«me
##
__thr
, 0); \

206 
	`«me
 (
dummy
) \

208 
	`èskÀt_scheduÀ
(&(
èsk
)); \

209 
	}

	)
}

213 
	#SMP_TIMER_NAME
(
«me
Ë
	)
name

214 
	#SMP_TIMER_DEFINE
(
«me
, 
èsk
)

	)

221 
èskÀt_°ru˘
 
bh_èsk_vec
[];

224 
•ölock_t
 
globÆ_bh_lock
;

226 
ölöe
 
	$m¨k_bh
(
ƒ
)

228 
	`èskÀt_hi_scheduÀ
(
bh_èsk_vec
+
ƒ
);

229 
	}
}

231 
öô_bh
(
ƒ
, (*
routöe
)());

232 
	`ªmove_bh
(
ƒ
);

262 
	`¥obe_úq_⁄
();

263 
	`¥obe_úq_off
();

264 
	`¥obe_úq_mask
();

	@/usr/include/linux/ip.h

17 #i‚de‡
_LINUX_IP_H


18 
	#_LINUX_IP_H


	)

19 
	~<ídün.h
>

20 
	~<byãsw≠.h
>

24 
	#IPTOS_TOS_MASK
 0x1E

	)

25 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

26 
	#IPTOS_LOWDELAY
 0x10

	)

27 
	#IPTOS_THROUGHPUT
 0x08

	)

28 
	#IPTOS_RELIABILITY
 0x04

	)

29 
	#IPTOS_MINCOST
 0x02

	)

31 
	#IPTOS_PREC_MASK
 0xE0

	)

32 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

33 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

34 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

35 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

36 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

37 
	#IPTOS_PREC_FLASH
 0x60

	)

38 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

39 
	#IPTOS_PREC_PRIORITY
 0x20

	)

40 
	#IPTOS_PREC_ROUTINE
 0x00

	)

44 
	#IPOPT_COPY
 0x80

	)

45 
	#IPOPT_CLASS_MASK
 0x60

	)

46 
	#IPOPT_NUMBER_MASK
 0x1f

	)

48 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

49 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

50 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

52 
	#IPOPT_CONTROL
 0x00

	)

53 
	#IPOPT_RESERVED1
 0x20

	)

54 
	#IPOPT_MEASUREMENT
 0x40

	)

55 
	#IPOPT_RESERVED2
 0x60

	)

57 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

58 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

59 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

60 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

62 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

63 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

64 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

65 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

67 
	#IPVERSION
 4

	)

68 
	#MAXTTL
 255

	)

69 
	#IPDEFTTL
 64

	)

79 
	#IPOPT_OPTVAL
 0

	)

80 
	#IPOPT_OLEN
 1

	)

81 
	#IPOPT_OFFSET
 2

	)

82 
	#IPOPT_MINOFF
 4

	)

83 
	#MAX_IPOPTLEN
 40

	)

84 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

85 
	#IPOPT_EOL
 
IPOPT_END


	)

86 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

88 
	#IPOPT_TS_TSONLY
 0

	)

89 
	#IPOPT_TS_TSANDADDR
 1

	)

90 
	#IPOPT_TS_PRESPEC
 3

	)

93 
	sùhdr
 {

94 #i‡
deföed
(
__LITTLE_ENDIAN
)

95 
__u8
 
	mihl
:4,

96 
	mvîsi⁄
:4;

97 #ñi‡
deföed
 (
__BIG_ENDIAN
)

98 
__u8
 
	mvîsi⁄
:4,

99 
	mihl
:4;

101 
__u8
 
	mtos
;

102 
__u16
 
	mtŸ_Àn
;

103 
__u16
 
	mid
;

104 
__u16
 
	m‰ag_off
;

105 
__u8
 
	mâl
;

106 
__u8
 
	m¥Ÿocﬁ
;

107 
__u16
 
	mcheck
;

108 
__u32
 
	mßddr
;

109 
__u32
 
	mdaddr
;

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

9 
	#SI_LOAD_SHIFT
 16

	)

10 
	ssysöfo
 {

11 
	mu±ime
;

12 
	mlﬂds
[3];

13 
	mtŸÆøm
;

14 
	m‰ìøm
;

15 
	msh¨edøm
;

16 
	mbuf„ºam
;

17 
	mtŸÆsw≠
;

18 
	m‰ìsw≠
;

19 
	m¥ocs
;

20 
	m∑d
;

21 
	mtŸÆhigh
;

22 
	m‰ìhigh
;

23 
	mmem_unô
;

24 
	m_f
[20-2*()-()];

	@/usr/include/linux/kmod.h

1 #i‚de‡
__LINUX_KMOD_H__


2 
	#__LINUX_KMOD_H__


	)

22 
	~<löux/c⁄fig.h
>

23 
	~<löux/î∫o.h
>

25 #ifde‡
CONFIG_KMOD


26 
ªque°_moduÀ
(c⁄° * 
«me
);

28 
ölöe
 
	$ªque°_moduÀ
(c⁄° * 
«me
Ë{  -
ENOSYS
; 
	}
}

31 
exec_u£rmodehñ≥r
(*
¥ogøm_∑th
, *
¨gv
[], *
ívp
[]);

32 
ˇŒ_u£rmodehñ≥r
(*
∑th
, *
¨gv
[], *
ívp
[]);

34 #ifde‡
CONFIG_HOTPLUG


35 
hŸ∂ug_∑th
 [];

37 
dev_¥obe_lock
();

38 
dev_¥obe_u∆ock
();

	@/usr/include/linux/list.h

1 #i‚de‡
_LINUX_LIST_H


2 
	#_LINUX_LIST_H


	)

4 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
_LVM_H_INCLUDE
)

6 
	~<löux/¥e„tch.h
>

18 
	sli°_hód
 {

19 
li°_hód
 *
	m√xt
, *
	m¥ev
;

22 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

24 
	#LIST_HEAD
(
«me
) \

25 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

27 
	#INIT_LIST_HEAD
(
±r
) do { \

28 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

29 } 0)

	)

37 
__ölöe__
 
	$__li°_add
(
li°_hód
 * 
√w
,

38 
li°_hód
 * 
¥ev
,

39 
li°_hód
 * 
√xt
)

41 
√xt
->
¥ev
 = 
√w
;

42 
√w
->
√xt
 =Çext;

43 
√w
->
¥ev
 =Örev;

44 
¥ev
->
√xt
 = 
√w
;

45 
	}
}

55 
__ölöe__
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

57 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

58 
	}
}

68 
__ölöe__
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

70 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

71 
	}
}

80 
__ölöe__
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
,

81 
li°_hód
 * 
√xt
)

83 
√xt
->
¥ev
 =Örev;

84 
¥ev
->
√xt
 =Çext;

85 
	}
}

92 
__ölöe__
 
	$li°_dñ
(
li°_hód
 *
íåy
)

94 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

95 
íåy
->
√xt
 =É¡ry->
¥ev
 = 0;

96 
	}
}

102 
__ölöe__
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

104 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

105 
	`INIT_LIST_HEAD
(
íåy
);

106 
	}
}

112 
__ölöe__
 
	$li°_em±y
(
li°_hód
 *
hód
)

114  
hód
->
√xt
 == head;

115 
	}
}

122 
__ölöe__
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

124 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

126 i‡(
fú°
 !
li°
) {

127 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

128 
li°_hód
 *
©
 = 
hód
->
√xt
;

130 
fú°
->
¥ev
 = 
hód
;

131 
hód
->
√xt
 = 
fú°
;

133 
œ°
->
√xt
 = 
©
;

134 
©
->
¥ev
 = 
œ°
;

136 
	}
}

144 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

145 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

152 
	#li°_f‹_óch
(
pos
, 
hód
) \

153 
pos
 = (
hód
)->
√xt
, 
	`¥e„tch
(pos->next);Öos != (head); \

154 
pos
 =Öos->
√xt
, 
	`¥e„tch
’os->√xt))

	)

162 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

163 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

164 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

	@/usr/include/linux/mm.h

1 #i‚de‡
_LINUX_MM_H


2 
	#_LINUX_MM_H


	)

4 
	~<löux/sched.h
>

5 
	~<löux/î∫o.h
>

	@/usr/include/linux/module.h

7 #i‚de‡
_LINUX_MODULE_H


8 
	#_LINUX_MODULE_H


	)

10 
	~<löux/c⁄fig.h
>

11 
	~<löux/li°.h
>

13 #ifde‡
__GENKSYMS__


14 
	#_£t_vî
(
sym
Ë
	)
sym

15 #unde‡
MODVERSIONS


16 
	#MODVERSIONS


	)

18 #i‡!
deföed
(
MODVERSIONS
Ë&& deföed(
EXPORT_SYMTAB
)

19 
	#_£t_vî
(
sym
Ë
	)
sym

20 
	~<löux/modvîsi⁄s.h
>

26 
	gex˚±i⁄_èbÀ_íåy
;

29 
	skî√l_sym


31 
	mvÆue
;

32 
	m«me
[60];

35 
	smoduÀ_symbﬁ


37 
	mvÆue
;

38 c⁄° *
	m«me
;

41 
	smoduÀ_ªf


43 
moduÀ
 *
	mdï
;

44 
moduÀ
 *
	mªf
;

45 
moduÀ_ªf
 *
	m√xt_ªf
;

49 
	gmoduÀ_≥rsi°
;

51 
	smoduÀ


53 
	msize_of_°ru˘
;

54 
moduÀ
 *
	m√xt
;

55 c⁄° *
	m«me
;

56 
	msize
;

60 
	m∑d
;

61 } 
	muc
;

63 
	mÊags
;

65 
	mnsyms
;

66 
	mndïs
;

68 
moduÀ_symbﬁ
 *
	msyms
;

69 
moduÀ_ªf
 *
	mdïs
;

70 
moduÀ_ªf
 *
	mªfs
;

71 (*
	möô
)();

72 (*
	m˛ónup
)();

73 c⁄° 
ex˚±i⁄_èbÀ_íåy
 *
	mex_èbÀ_°¨t
;

74 c⁄° 
ex˚±i⁄_èbÀ_íåy
 *
	mex_èbÀ_íd
;

75 #ifde‡
__Æpha__


76 
	mgp
;

81 c⁄° 
moduÀ_≥rsi°
 *
	m≥rsi°_°¨t
;

82 c⁄° 
moduÀ_≥rsi°
 *
	m≥rsi°_íd
;

83 (*
	mˇn_u∆ﬂd
)();

84 
	mrunsize
;

85 c⁄° *
	mkÆlsyms_°¨t
;

86 c⁄° *
	mkÆlsyms_íd
;

87 c⁄° *
	m¨chd©a_°¨t
;

88 c⁄° *
	m¨chd©a_íd
;

89 c⁄° *
	mkî√l_d©a
;

92 
	smoduÀ_öfo


94 
	maddr
;

95 
	msize
;

96 
	mÊags
;

97 
	mu£cou¡
;

102 
	#MOD_UNINITIALIZED
 0

	)

103 
	#MOD_RUNNING
 1

	)

104 
	#MOD_DELETED
 2

	)

105 
	#MOD_AUTOCLEAN
 4

	)

106 
	#MOD_VISITED
 8

	)

107 
	#MOD_USED_ONCE
 16

	)

108 
	#MOD_JUST_FREED
 32

	)

109 
	#MOD_INITIALIZING
 64

	)

113 
	#QM_MODULES
 1

	)

114 
	#QM_DEPS
 2

	)

115 
	#QM_REFS
 3

	)

116 
	#QM_SYMBOLS
 4

	)

117 
	#QM_INFO
 5

	)

120 
	#MOD_CAN_QUERY
(
mod
Ë(((mod)->
Êags
 & (
MOD_RUNNING
 | 
MOD_INITIALIZING
)Ë&& !((mod)->Êag†& 
MOD_DELETED
))

	)

126 
	#mod_membî_¥e£¡
(
mod
,
membî
) \

127 (()(&((
moduÀ
 *)0L)->
membî
 + 1) \

128 <(
mod
)->
size_of_°ru˘
)

	)

134 
	#mod_¨chd©a_membî_¥e£¡
(
mod
, 
ty≥
, 
membî
) \

135 ((()(&((
ty≥
 *)0L)->
membî
) + \

136 (((
ty≥
 *)0L)->
membî
)) <= \

137 ((
mod
)->
¨chd©a_íd
 - (mod)->
¨chd©a_°¨t
))

	)

141 
	#mod_bound
(
p
, 
n
, 
m
Ë(()’Ë>(()(mË+ ((m)->
size_of_°ru˘
)) && \

142 ()((
p
)+(
n
)Ë<()(
m
Ë+ (m)->
size
)

	)

146 
	#GET_USE_COUNT
(
moduÀ
Ë(
	`©omic_ªad
(&(moduÀ)->
uc
.
u£cou¡
))

	)

150 
	#__MOD_INC_USE_COUNT
(
mod
) \

151 (
	`©omic_öc
(&(
mod
)->
uc
.
u£cou¡
), (mod)->
Êags
 |
MOD_VISITED
|
MOD_USED_ONCE
)

	)

152 
	#__MOD_DEC_USE_COUNT
(
mod
) \

153 (
	`©omic_dec
(&(
mod
)->
uc
.
u£cou¡
), (mod)->
Êags
 |
MOD_VISITED
)

	)

154 
	#__MOD_IN_USE
(
mod
) \

155 (
	`mod_membî_¥e£¡
((
mod
), 
ˇn_u∆ﬂd
) && (mod)->can_unload \

156 ? (
mod
)->
	`ˇn_u∆ﬂd
(Ë: 
	`©omic_ªad
(&(mod)->
uc
.
u£cou¡
))

	)

160 
	#__MODULE_STRING_1
(
x
Ë#x

	)

161 
	#__MODULE_STRING
(
x
Ë
	`__MODULE_STRING_1
(x)

	)

179 #i‡
deföed
(
MODULE
Ë&& !deföed(
__GENKSYMS__
)

185 
	#MODULE_AUTHOR
(
«me
) \

186 c⁄° 
__moduÀ_auth‹
[] 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

187 "auth‹=" 
«me


	)

189 
	#MODULE_DESCRIPTION
(
desc
) \

190 c⁄° 
__moduÀ_des¸ùti⁄
[] 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

191 "des¸ùti⁄=" 
desc


	)

195 
	#MODULE_SUPPORTED_DEVICE
(
dev
) \

196 c⁄° 
__moduÀ_devi˚
[] 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

197 "devi˚=" 
dev


	)

212 
	#MODULE_PARM
(
v¨
,
ty≥
) \

213 c⁄° 
__moduÀ_∑rm_
##
v¨
[] \

214 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

215 "∑rm_" 
	`__MODULE_STRING
(
v¨
Ë"=" 
ty≥


	)

217 
	#MODULE_PARM_DESC
(
v¨
,
desc
) \

218 c⁄° 
__moduÀ_∑rm_desc_
##
v¨
[] \

219 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

220 "∑rm_desc_" 
	`__MODULE_STRING
(
v¨
Ë"=" 
desc


	)

235 
	#MODULE_GENERIC_TABLE
(
gty≥
,
«me
) \

236 c⁄° 
__moduÀ_
##
gty≥
##
_size
 \

237 
	`__©åibuã__
 ((
unu£d
)Ë(
gty≥
##
_id
); \

238 c⁄° 
gty≥
##
_id
 * 
__moduÀ_
##gty≥##
_èbÀ
 \

239 
	`__©åibuã__
 ((
unu£d
)Ë
«me


	)

240 
	#MODULE_DEVICE_TABLE
(
ty≥
,
«me
) \

241 
	`MODULE_GENERIC_TABLE
(
ty≥
##
_devi˚
,
«me
)

	)

267 
	#MODULE_LICENSE
(
li˚n£
) \

268 c⁄° 
__moduÀ_li˚n£
[] 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

269 "li˚n£=" 
li˚n£


	)

272 
moduÀ
 
__this_moduÀ
;

274 
	#THIS_MODULE
 (&
__this_moduÀ
)

	)

275 
	#MOD_INC_USE_COUNT
 
	`__MOD_INC_USE_COUNT
(
THIS_MODULE
)

	)

276 
	#MOD_DEC_USE_COUNT
 
	`__MOD_DEC_USE_COUNT
(
THIS_MODULE
)

	)

277 
	#MOD_IN_USE
 
	`__MOD_IN_USE
(
THIS_MODULE
)

	)

279 
	~<löux/vîsi⁄.h
>

280 c⁄° 
	g__moduÀ_kî√l_vîsi⁄
[] 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

281 "kî√l_vîsi⁄=" 
UTS_RELEASE
;

282 #ifde‡
MODVERSIONS


283 c⁄° 
	g__moduÀ_usög_checksums
[] 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

289 
	#MODULE_AUTHOR
(
«me
)

	)

290 
	#MODULE_LICENSE
(
li˚n£
)

	)

291 
	#MODULE_DESCRIPTION
(
desc
)

	)

292 
	#MODULE_SUPPORTED_DEVICE
(
«me
)

	)

293 
	#MODULE_PARM
(
v¨
,
ty≥
)

	)

294 
	#MODULE_PARM_DESC
(
v¨
,
desc
)

	)

295 
	#MODULE_GENERIC_TABLE
(
gty≥
,
«me
)

	)

296 
	#MODULE_DEVICE_TABLE
(
ty≥
,
«me
)

	)

298 #i‚de‡
__GENKSYMS__


300 
	#THIS_MODULE
 
NULL


	)

301 
	#MOD_INC_USE_COUNT
 dÿ{ } 0)

	)

302 
	#MOD_DEC_USE_COUNT
 dÿ{ } 0)

	)

303 
	#MOD_IN_USE
 1

	)

305 
moduÀ
 *
moduÀ_li°
;

320 #i‡
deföed
(
__GENKSYMS__
)

324 #ñi‡!
deföed
(
AUTOCONF_INCLUDED
)

326 
	#__EXPORT_SYMBOL
(
sym
,
°r
Ë
îr‹
 
c⁄fig_mu°_be_ö˛uded_bef‹e_moduÀ


	)

327 
	#EXPORT_SYMBOL
(
v¨
Ë
îr‹
 
c⁄fig_mu°_be_ö˛uded_bef‹e_moduÀ


	)

328 
	#EXPORT_SYMBOL_NOVERS
(
v¨
Ë
îr‹
 
c⁄fig_mu°_be_ö˛uded_bef‹e_moduÀ


	)

330 
	#EXPORT_SYMBOL_GPL
(
v¨
Ë
îr‹
 
c⁄fig_mu°_be_ö˛uded_bef‹e_moduÀ


	)

331 #ñi‡!
deföed
(
CONFIG_MODULES
)

333 
	#__EXPORT_SYMBOL
(
sym
,
°r
)

	)

334 
	#EXPORT_SYMBOL
(
v¨
)

	)

335 
	#EXPORT_SYMBOL_NOVERS
(
v¨
)

	)

336 
	#EXPORT_SYMBOL_GPL
(
v¨
)

	)

340 
	#__EXPORT_SYMBOL
(
sym
, 
°r
) \

341 c⁄° 
__k°πab_
##
sym
[] \

342 
	`__©åibuã__
((
	`£˘i⁄
(".k°πab"))Ë
°r
; \

343 c⁄° 
moduÀ_symbﬁ
 
__ksymèb_
##
sym
 \

344 
	`__©åibuã__
((
	`£˘i⁄
("__ksymtab"))) = \

345 { ()&
sym
, 
__k°πab_
##sym }

	)

347 
	#__EXPORT_SYMBOL_GPL
(
sym
, 
°r
) \

348 c⁄° 
__k°πab_
##
sym
[] \

349 
	`__©åibuã__
((
	`£˘i⁄
(".k°πab"))Ë"GPLONLY_" 
°r
; \

350 c⁄° 
moduÀ_symbﬁ
 
__ksymèb_
##
sym
 \

351 
	`__©åibuã__
((
	`£˘i⁄
("__ksymtab"))) = \

352 { ()&
sym
, 
__k°πab_
##sym }

	)

354 #i‡
deföed
(
MODVERSIONS
Ë|| !deföed(
CONFIG_MODVERSIONS
)

355 
	#EXPORT_SYMBOL
(
v¨
Ë
	`__EXPORT_SYMBOL
(v¨, 
	`__MODULE_STRING
(v¨))

	)

356 
	#EXPORT_SYMBOL_GPL
(
v¨
Ë
	`__EXPORT_SYMBOL_GPL
(v¨, 
	`__MODULE_STRING
(v¨))

	)

358 
	#EXPORT_SYMBOL
(
v¨
Ë
	`__EXPORT_SYMBOL
(v¨, 
	`__MODULE_STRING
(
	`__VERSIONED_SYMBOL
(v¨)))

	)

359 
	#EXPORT_SYMBOL_GPL
(
v¨
Ë
	`__EXPORT_SYMBOL_GPL
(v¨, 
	`__MODULE_STRING
(
	`__VERSIONED_SYMBOL
(v¨)))

	)

362 
	#EXPORT_SYMBOL_NOVERS
(
v¨
Ë
	`__EXPORT_SYMBOL
(v¨, 
	`__MODULE_STRING
(v¨))

	)

366 #ifde‡
MODULE


368 
	#EXPORT_NO_SYMBOLS
 
	`__asm__
(".£˘i⁄ __ksymèb\n.¥evious")

	)

370 
	#EXPORT_NO_SYMBOLS


	)

373 #ifde‡
CONFIG_MODULES


374 
	#SET_MODULE_OWNER
(
some_°ru˘
Ëdÿ{ (some_°ru˘)->
ow√r
 = 
THIS_MODULE
; } 0)

	)

376 
	#SET_MODULE_OWNER
(
some_°ru˘
Ëdÿ{ } 0)

	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

32 
	~<asm/ty≥s.h
>

33 
	~<asm/ˇche.h
>

34 
	~<ídün.h
>

35 
	~<byãsw≠.h
>

37 
	gdivît_blk
;

39 
	#HAVE_ALLOC_NETDEV


	)

42 
	#NET_XMIT_SUCCESS
 0

	)

43 
	#NET_XMIT_DROP
 1

	)

44 
	#NET_XMIT_CN
 2

	)

45 
	#NET_XMIT_POLICED
 3

	)

46 
	#NET_XMIT_BYPASS
 4

	)

51 
	#NET_RX_SUCCESS
 0

	)

52 
	#NET_RX_DROP
 1

	)

53 
	#NET_RX_CN_LOW
 2

	)

54 
	#NET_RX_CN_MOD
 3

	)

55 
	#NET_RX_CN_HIGH
 4

	)

56 
	#NET_RX_BAD
 5

	)

58 
	#√t_xmô_î∫o
(
e
Ë(”Ë!
NET_XMIT_CN
 ? -
ENOBUFS
 : 0)

	)

61 
	#MAX_ADDR_LEN
 8

	)

68 #i‡!
deföed
(
CONFIG_AX25
Ë&& !deföed(
CONFIG_AX25_MODULE
Ë&& !deföed(
CONFIG_TR
)

69 
	#LL_MAX_HEADER
 32

	)

71 #i‡
deföed
(
CONFIG_AX25
Ë|| deföed(
CONFIG_AX25_MODULE
)

72 
	#LL_MAX_HEADER
 96

	)

74 
	#LL_MAX_HEADER
 48

	)

78 #i‡!
deföed
(
CONFIG_NET_IPIP
) && \

79 !
deföed
(
CONFIG_IPV6
Ë&& !
	$deföed
(
CONFIG_IPV6_MODULE
)

80 
	#MAX_HEADER
 
LL_MAX_HEADER


	)

82 
	#MAX_HEADER
 (
LL_MAX_HEADER
 + 48)

	)

90 
	s√t_devi˚_°©s


92 
rx_∑ckës
;

93 
tx_∑ckës
;

94 
rx_byãs
;

95 
tx_byãs
;

96 
rx_îr‹s
;

97 
tx_îr‹s
;

98 
rx_dr›≥d
;

99 
tx_dr›≥d
;

100 
mu…iˇ°
;

101 
cﬁlisi⁄s
;

104 
rx_Àngth_îr‹s
;

105 
rx_ovî_îr‹s
;

106 
rx_¸c_îr‹s
;

107 
rx_‰ame_îr‹s
;

108 
rx_fifo_îr‹s
;

109 
rx_mis£d_îr‹s
;

112 
tx_ab‹ãd_îr‹s
;

113 
tx_ˇºõr_îr‹s
;

114 
tx_fifo_îr‹s
;

115 
tx_hóπbót_îr‹s
;

116 
tx_wödow_îr‹s
;

119 
rx_com¥es£d
;

120 
tx_com¥es£d
;

126 
IF_PORT_UNKNOWN
 = 0,

127 
IF_PORT_10BASE2
,

128 
IF_PORT_10BASET
,

129 
IF_PORT_AUI
,

130 
IF_PORT_100BASET
,

131 
IF_PORT_100BASETX
,

132 
IF_PORT_100BASEFX


	@/usr/include/linux/netfilter.h

1 #i‚de‡
__LINUX_NETFILTER_H


2 
	#__LINUX_NETFILTER_H


	)

5 
	#NF_DROP
 0

	)

6 
	#NF_ACCEPT
 1

	)

7 
	#NF_STOLEN
 2

	)

8 
	#NF_QUEUE
 3

	)

9 
	#NF_REPEAT
 4

	)

10 
	#NF_MAX_VERDICT
 
NF_REPEAT


	)

13 
	#NFC_ALTERED
 0x8000

	)

14 
	#NFC_UNKNOWN
 0x4000

	)

	@/usr/include/linux/netfilter_arp/arp_tables.h

9 #i‚de‡
_ARPTABLES_H


10 
	#_ARPTABLES_H


	)

13 
	~<löux/√tfûãr_¨p.h
>

15 
	#ARPT_FUNCTION_MAXNAMELEN
 30

	)

16 
	#ARPT_TABLE_MAXNAMELEN
 32

	)

18 
	#ARPT_DEV_ADDR_LEN_MAX
 16

	)

20 
	s¨±_devaddr_öfo
 {

21 
	maddr
[
ARPT_DEV_ADDR_LEN_MAX
];

22 
	mmask
[
ARPT_DEV_ADDR_LEN_MAX
];

26 
	s¨±_¨p
 {

28 
ö_addr
 
	m§c
, 
	mtgt
;

30 
ö_addr
 
	msmsk
, 
	mtmsk
;

33 
u_öt8_t
 
	m¨h 
, 
	m¨h _mask
;

34 
¨±_devaddr_öfo
 
	m§c_devaddr
;

35 
¨±_devaddr_öfo
 
	mtgt_devaddr
;

38 
u_öt16_t
 
	m¨p›
, 
	m¨p›_mask
;

41 
u_öt16_t
 
	m¨hrd
, 
	m¨hrd_mask
;

42 
u_öt16_t
 
	m¨¥o
, 
	m¨¥o_mask
;

48 
	möiÁ˚
[
IFNAMSIZ
], 
	moutiÁ˚
[IFNAMSIZ];

49 
	möiÁ˚_mask
[
IFNAMSIZ
], 
	moutiÁ˚_mask
[IFNAMSIZ];

52 
u_öt8_t
 
	mÊags
;

54 
u_öt16_t
 
	mövÊags
;

57 
	s¨±_íåy_èrgë


61 
u_öt16_t
 
	mèrgë_size
;

64 
	m«me
[
ARPT_FUNCTION_MAXNAMELEN
];

65 } 
	mu£r
;

67 
u_öt16_t
 
	mèrgë_size
;

70 
¨±_èrgë
 *
	mèrgë
;

71 } 
	mkî√l
;

74 
u_öt16_t
 
	mèrgë_size
;

75 } 
	mu
;

77 
	md©a
[0];

80 
	s¨±_°™d¨d_èrgë


82 
¨±_íåy_èrgë
 
	mèrgë
;

83 
	mvîdi˘
;

86 
	s¨±_cou¡îs


88 
u_öt64_t
 
	mp˙t
, 
	mb˙t
;

94 
	#ARPT_F_MASK
 0x00

	)

97 
	#ARPT_INV_VIA_IN
 0x0001

	)

98 
	#ARPT_INV_VIA_OUT
 0x0002

	)

99 
	#ARPT_INV_SRCIP
 0x0004

	)

100 
	#ARPT_INV_TGTIP
 0x0008

	)

101 
	#ARPT_INV_SRCDEVADDR
 0x0010

	)

102 
	#ARPT_INV_TGTDEVADDR
 0x0020

	)

103 
	#ARPT_INV_ARPOP
 0x0040

	)

104 
	#ARPT_INV_ARPHRD
 0x0080

	)

105 
	#ARPT_INV_ARPPRO
 0x0100

	)

106 
	#ARPT_INV_ARPHLN
 0x0200

	)

107 
	#ARPT_INV_MASK
 0x03FF

	)

112 
	s¨±_íåy


114 
¨±_¨p
 
	m¨p
;

117 
u_öt16_t
 
	mèrgë_off£t
;

119 
u_öt16_t
 
	m√xt_off£t
;

122 
	mcome‰om
;

125 
¨±_cou¡îs
 
	mcou¡îs
;

128 
	mñems
[0];

136 
	#ARPT_BASE_CTL
 96

	)

138 
	#ARPT_SO_SET_REPLACE
 (
ARPT_BASE_CTL
)

	)

139 
	#ARPT_SO_SET_ADD_COUNTERS
 (
ARPT_BASE_CTL
 + 1)

	)

140 
	#ARPT_SO_SET_MAX
 
ARPT_SO_SET_ADD_COUNTERS


	)

142 
	#ARPT_SO_GET_INFO
 (
ARPT_BASE_CTL
)

	)

143 
	#ARPT_SO_GET_ENTRIES
 (
ARPT_BASE_CTL
 + 1)

	)

144 
	#ARPT_SO_GET_MAX
 
ARPT_SO_GET_ENTRIES


	)

147 
	#ARPT_CONTINUE
 0xFFFFFFFF

	)

150 
	#ARPT_RETURN
 (-
NF_MAX_VERDICT
 - 1)

	)

153 
	s¨±_gëöfo


156 
	m«me
[
ARPT_TABLE_MAXNAMELEN
];

160 
	mvÆid_hooks
;

163 
	mhook_íåy
[
NF_ARP_NUMHOOKS
];

166 
	mundîÊow
[
NF_ARP_NUMHOOKS
];

169 
	mnum_íåõs
;

172 
	msize
;

176 
	s¨±_ª∂a˚


179 
	m«me
[
ARPT_TABLE_MAXNAMELEN
];

183 
	mvÆid_hooks
;

186 
	mnum_íåõs
;

189 
	msize
;

192 
	mhook_íåy
[
NF_ARP_NUMHOOKS
];

195 
	mundîÊow
[
NF_ARP_NUMHOOKS
];

199 
	mnum_cou¡îs
;

201 
¨±_cou¡îs
 *
	mcou¡îs
;

204 
¨±_íåy
 
	míåõs
[0];

208 
	s¨±_cou¡îs_öfo


211 
	m«me
[
ARPT_TABLE_MAXNAMELEN
];

213 
	mnum_cou¡îs
;

216 
¨±_cou¡îs
 
	mcou¡îs
[0];

220 
	s¨±_gë_íåõs


223 
	m«me
[
ARPT_TABLE_MAXNAMELEN
];

226 
	msize
;

229 
¨±_íåy
 
	míåyèbÀ
[0];

233 
	#ARPT_STANDARD_TARGET
 ""

	)

235 
	#ARPT_ERROR_TARGET
 "ERROR"

	)

238 
__ölöe__
 
¨±_íåy_èrgë
 *
	$¨±_gë_èrgë
(
¨±_íåy
 *
e
)

240  (*)
e
 +É->
èrgë_off£t
;

241 
	}
}

244 
	#ARPT_ENTRY_ITERATE
(
íåõs
, 
size
, 
‚
, 
¨gs
...) \

246 
__i
; \

247 
__ªt
 = 0; \

248 
¨±_íåy
 *
__íåy
; \

250 
__i
 = 0; __ò< (
size
); __ò+
__íåy
->
√xt_off£t
) { \

251 
__íåy
 = (*)(
íåõs
Ë+ 
__i
; \

253 
__ªt
 = 
	`‚
(
__íåy
 , ## 
¨gs
); \

254 i‡(
__ªt
 != 0) \

257 
__ªt
; \

258 })

	)

	@/usr/include/linux/netfilter_arp/arpt_mangle.h

1 #i‚de‡
_ARPT_MANGLE_H


2 
	#_ARPT_MANGLE_H


	)

3 
	~<löux/√tfûãr_¨p/¨p_èbÀs.h
>

5 
	#ARPT_MANGLE_ADDR_LEN_MAX
 (
ö_addr
)

	)

6 
	s¨±_m™gÀ


8 
	m§c_devaddr
[
ARPT_DEV_ADDR_LEN_MAX
];

9 
	mtgt_devaddr
[
ARPT_DEV_ADDR_LEN_MAX
];

11 
ö_addr
 
	m§c_ù
;

12 } 
	mu_s
;

14 
ö_addr
 
	mtgt_ù
;

15 } 
	mu_t
;

16 
u_öt8_t
 
	mÊags
;

17 
	mèrgë
;

20 
	#ARPT_MANGLE_SDEV
 0x01

	)

21 
	#ARPT_MANGLE_TDEV
 0x02

	)

22 
	#ARPT_MANGLE_SIP
 0x04

	)

23 
	#ARPT_MANGLE_TIP
 0x08

	)

24 
	#ARPT_MANGLE_MASK
 0x0f

	)

	@/usr/include/linux/netfilter_bridge.h

1 #i‚de‡
__LINUX_BRIDGE_NETFILTER_H


2 
	#__LINUX_BRIDGE_NETFILTER_H


	)

7 
	~<löux/c⁄fig.h
>

8 
	~<löux/√tfûãr.h
>

12 
	#NF_BR_PRE_ROUTING
 0

	)

14 
	#NF_BR_LOCAL_IN
 1

	)

16 
	#NF_BR_FORWARD
 2

	)

18 
	#NF_BR_LOCAL_OUT
 3

	)

20 
	#NF_BR_POST_ROUTING
 4

	)

21 
	#NF_BR_NUMHOOKS
 5

	)

	@/usr/include/linux/netfilter_ipv4.h

1 #i‚de‡
__LINUX_IP_NETFILTER_H


2 
	#__LINUX_IP_NETFILTER_H


	)

8 
	~<löux/c⁄fig.h
>

9 
	~<löux/√tfûãr.h
>

13 
	#NFC_IP_SRC
 0x0001

	)

15 
	#NFC_IP_DST
 0x0002

	)

17 
	#NFC_IP_IF_IN
 0x0004

	)

19 
	#NFC_IP_IF_OUT
 0x0008

	)

21 
	#NFC_IP_TOS
 0x0010

	)

23 
	#NFC_IP_PROTO
 0x0020

	)

25 
	#NFC_IP_OPTIONS
 0x0040

	)

27 
	#NFC_IP_FRAG
 0x0080

	)

31 
	#NFC_IP_TCPFLAGS
 0x0100

	)

33 
	#NFC_IP_SRC_PT
 0x0200

	)

35 
	#NFC_IP_DST_PT
 0x0400

	)

37 
	#NFC_IP_PROTO_UNKNOWN
 0x2000

	)

41 
	#NF_IP_PRE_ROUTING
 0

	)

43 
	#NF_IP_LOCAL_IN
 1

	)

45 
	#NF_IP_FORWARD
 2

	)

47 
	#NF_IP_LOCAL_OUT
 3

	)

49 
	#NF_IP_POST_ROUTING
 4

	)

50 
	#NF_IP_NUMHOOKS
 5

	)

52 
	enf_ù_hook_¥i‹ôõs
 {

53 
	mNF_IP_PRI_FIRST
 = 
INT_MIN
,

54 
	mNF_IP_PRI_CONNTRACK
 = -200,

55 
	mNF_IP_PRI_MANGLE
 = -150,

56 
	mNF_IP_PRI_NAT_DST
 = -100,

57 
	mNF_IP_PRI_FILTER
 = 0,

58 
	mNF_IP_PRI_NAT_SRC
 = 100,

59 
	mNF_IP_PRI_LAST
 = 
INT_MAX
,

66 
	#SO_ORIGINAL_DST
 80

	)

	@/usr/include/linux/netfilter_ipv4/compat_firewall.h

5 #i‚de‡
__LINUX_FIREWALL_H


6 
	#__LINUX_FIREWALL_H


	)

12 
	#FW_QUEUE
 0

	)

13 
	#FW_BLOCK
 1

	)

14 
	#FW_ACCEPT
 2

	)

15 
	#FW_REJECT
 (-1)

	)

16 
	#FW_REDIRECT
 3

	)

17 
	#FW_MASQUERADE
 4

	)

18 
	#FW_SKIP
 5

	)

20 
	sfúewÆl_›s


22 
fúewÆl_›s
 *
	m√xt
;

23 (*
	mfw_f‹w¨d
)(
fúewÆl_›s
 *
	mthis
, 
	mpf
,

24 
√t_devi˚
 *
	mdev
, *
	mphdr
, *
	m¨g
,

25 
sk_buff
 **
	mpskb
);

26 (*
	mfw_öput
)(
fúewÆl_›s
 *
	mthis
, 
	mpf
,

27 
√t_devi˚
 *
	mdev
, *
	mphdr
, *
	m¨g
,

28 
sk_buff
 **
	mpskb
);

29 (*
	mfw_ouçut
)(
fúewÆl_›s
 *
	mthis
, 
	mpf
,

30 
√t_devi˚
 *
	mdev
, *
	mphdr
, *
	m¨g
,

31 
sk_buff
 **
	mpskb
);

33 (*
	mfw_ac˘_ö
)(
fúewÆl_›s
 *
	mthis
, 
	mpf
,

34 
√t_devi˚
 *
	mdev
, *
	mphdr
, *
	m¨g
,

35 
sk_buff
 **
	mpskb
);

36 (*
	mfw_ac˘_out
)(
fúewÆl_›s
 *
	mthis
, 
	mpf
,

37 
√t_devi˚
 *
	mdev
, *
	mphdr
, *
	m¨g
,

38 
sk_buff
 **
	mpskb
);

41 
ªgi°î_fúewÆl
(
pf
, 
fúewÆl_›s
 *
fw
);

42 
uƒegi°î_fúewÆl
(
pf
, 
fúewÆl_›s
 *
fw
);

44 
ù_fw_masq_timeouts
(*
u£r
, 
Àn
);

	@/usr/include/linux/netfilter_ipv4/ip_conntrack.h

1 #i‚de‡
_IP_CONNTRACK_H


2 
	#_IP_CONNTRACK_H


	)

7 
	~<löux/c⁄fig.h
>

8 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_tu∂e.h
>

10 
	eù_c⁄¡øck_öfo


13 
	mIP_CT_ESTABLISHED
,

17 
	mIP_CT_RELATED
,

21 
	mIP_CT_NEW
,

24 
	mIP_CT_IS_REPLY
,

27 
	mIP_CT_NUMBER
 = 
IP_CT_IS_REPLY
 * 2 - 1

31 
	eù_c⁄¡øck_°©us
 {

33 
	mIPS_EXPECTED_BIT
 = 0,

34 
	mIPS_EXPECTED
 = (1 << 
IPS_EXPECTED_BIT
),

37 
	mIPS_SEEN_REPLY_BIT
 = 1,

38 
	mIPS_SEEN_REPLY
 = (1 << 
IPS_SEEN_REPLY_BIT
),

41 
	mIPS_ASSURED_BIT
 = 2,

42 
	mIPS_ASSURED
 = (1 << 
IPS_ASSURED_BIT
),

	@/usr/include/linux/netfilter_ipv4/ip_conntrack_amanda.h

1 #i‚de‡
_IP_CONNTRACK_AMANDA_H


2 
	#_IP_CONNTRACK_AMANDA_H


	)

6 
	sc⁄n
 {

7 * 
	mm©ch
;

8 
	mm©chÀn
;

11 
	#NUM_MSGS
 3

	)

14 
	sù_˘_am™da_ex≥˘


16 
u_öt16_t
 
	mp‹t
;

17 
u_öt16_t
 
	moff£t
;

18 
u_öt16_t
 
	mÀn
;

	@/usr/include/linux/netfilter_ipv4/ip_conntrack_core.h

1 #i‚de‡
_IP_CONNTRACK_CORE_H


2 
	#_IP_CONNTRACK_CORE_H


	)

3 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

8 
ù_c⁄¡øck_ö
(
hooknum
,

9 
sk_buff
 **
pskb
,

10 c⁄° 
√t_devi˚
 *
ö
,

11 c⁄° 
√t_devi˚
 *
out
,

12 (*
ok‚
)(
sk_buff
 *));

14 
	`ù_c⁄¡øck_öô
();

15 
	`ù_c⁄¡øck_˛ónup
();

17 
ù_c⁄¡øck_¥Ÿocﬁ
;

18 
ù_c⁄¡øck_¥Ÿocﬁ
 *
	`ù_˘_föd_¥Ÿo
(
u_öt8_t
 
¥Ÿocﬁ
);

20 
ù_c⁄¡øck_¥Ÿocﬁ
 *
	`__ù_˘_föd_¥Ÿo
(
u_öt8_t
 
¥Ÿocﬁ
);

21 
li°_hód
 
¥Ÿocﬁ_li°
;

24 
ù_c⁄¡øck
 *
	`icmp_îr‹_åack
(
sk_buff
 *
skb
,

25 
ù_c⁄¡øck_öfo
 *
˘öfo
,

26 
hooknum
);

27 
	`gë_tu∂e
(c⁄° 
ùhdr
 *
ùh
, 
size_t
 
Àn
,

28 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

29 
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿocﬁ
);

32 
ù_c⁄¡øck_tu∂e_hash
 *

33 
	`ù_c⁄¡øck_föd_gë
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

34 c⁄° 
ù_c⁄¡øck
 *
ign‹ed_c⁄¡øck
);

36 
	`__ù_c⁄¡øck_c⁄fúm
(
nf_˘_öfo
 *
nf˘
);

39 
ölöe
 
	$ù_c⁄¡øck_c⁄fúm
(
sk_buff
 *
skb
)

41 i‡(
skb
->
nf˘


42 && !
	`is_c⁄fúmed
((
ù_c⁄¡øck
 *)
skb
->
nf˘
->
ma°î
))

43  
	`__ù_c⁄¡øck_c⁄fúm
(
skb
->
nf˘
);

44  
NF_ACCEPT
;

45 
	}
}

47 
li°_hód
 *
ù_c⁄¡øck_hash
;

48 
li°_hód
 
ù_c⁄¡øck_ex≥˘_li°
;

49 
DECLARE_RWLOCK_EXTERN
(
ù_c⁄¡øck_lock
);

	@/usr/include/linux/netfilter_ipv4/ip_conntrack_ftp.h

1 #i‚de‡
_IP_CONNTRACK_FTP_H


2 
	#_IP_CONNTRACK_FTP_H


	)

5 #îr‹ 
O∆y
 
ö
 
kî√l
.

7 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

10 
DECLARE_LOCK_EXTERN
(
ù_·p_lock
);

12 
	eù_˘_·p_ty≥


15 
	mIP_CT_FTP_PORT
,

17 
	mIP_CT_FTP_PASV
,

19 
	mIP_CT_FTP_EPRT
,

21 
	mIP_CT_FTP_EPSV
,

26 
	sù_˘_·p


29 
	mis_·p
;

30 
u_öt32_t
 
	m£q
;

32 
u_öt32_t
 
	mÀn
;

33 
ù_˘_·p_ty≥
 
	m·±y≥
;

35 
u_öt16_t
 
	mp‹t
;

37 
u_öt32_t
 
	m£q_a·_∆
[
IP_CT_DIR_MAX
];

39 
	m£q_a·_∆_£t
[
IP_CT_DIR_MAX
];

	@/usr/include/linux/netfilter_ipv4/ip_conntrack_helper.h

2 #i‚de‡
_IP_CONNTRACK_HELPER_H


3 
	#_IP_CONNTRACK_HELPER_H


	)

4 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

6 
	gmoduÀ
;

9 
	#IP_CT_HELPER_F_REUSE_EXPECT
 0x01

	)

11 
	sù_c⁄¡øck_hñ≥r


13 
li°_hód
 
	mli°
;

15 c⁄° *
	m«me
;

16 
	mÊags
;

17 
moduÀ
 *
	mme
;

18 
	mmax_ex≥˘ed
;

20 
	mtimeout
;

23 
ù_c⁄¡øck_tu∂e
 
	mtu∂e
;

24 
ù_c⁄¡øck_tu∂e
 
	mmask
;

28 (*
	mhñp
)(c⁄° 
	mùhdr
 *, 
size_t
 
	mÀn
,

29 
ù_c⁄¡øck
 *
	m˘
,

30 
ù_c⁄¡øck_öfo
 
	mc⁄¡øcköfo
);

33 
ù_c⁄¡øck_hñ≥r_ªgi°î
(
ù_c⁄¡øck_hñ≥r
 *);

34 
ù_c⁄¡øck_hñ≥r_uƒegi°î
(
ù_c⁄¡øck_hñ≥r
 *);

36 
ù_c⁄¡øck_hñ≥r
 *
ù_˘_föd_hñ≥r
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
);

39 
ù_c⁄¡øck_ex≥˘_ªœãd
(
ù_c⁄¡øck
 *
ªœãd_to
,

40 
ù_c⁄¡øck_ex≥˘
 *
exp
);

41 
ù_c⁄¡øck_ch™ge_ex≥˘
(
ù_c⁄¡øck_ex≥˘
 *
ex≥˘
,

42 
ù_c⁄¡øck_tu∂e
 *
√wtu∂e
);

43 
ù_c⁄¡øck_u√x≥˘_ªœãd
(
ù_c⁄¡øck_ex≥˘
 *
exp
);

	@/usr/include/linux/netfilter_ipv4/ip_conntrack_irc.h

14 #i‚de‡
_IP_CONNTRACK_IRC_H


15 
	#_IP_CONNTRACK_IRC_H


	)

17 #îr‹ 
O∆y
 
ö
 
kî√l
.

19 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

21 
	#IP_CONNTR_IRC
 2

	)

23 
	sdc˝rŸo
 {

24 * 
	mm©ch
;

25 
	mm©chÀn
;

29 
DECLARE_LOCK_EXTERN
(
ù_úc_lock
);

33 
	sù_˘_úc


36 
	mis_úc
;

38 
u_öt32_t
 
	m£q
;

40 
u_öt32_t
 
	mÀn
;

42 
u_öt16_t
 
	mp‹t
;

	@/usr/include/linux/netfilter_ipv4/ip_conntrack_protocol.h

2 #i‚de‡
_IP_CONNTRACK_PROTOCOL_H


3 
	#_IP_CONNTRACK_PROTOCOL_H


	)

4 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

6 
	sù_c⁄¡øck_¥Ÿocﬁ


9 
li°_hód
 
	mli°
;

12 
u_öt8_t
 
	m¥Ÿo
;

15 c⁄° *
	m«me
;

18 (*
	mpkt_to_tu∂e
)(c⁄° *
	md©ah
, 
size_t
 
	md©Æí
,

19 
ù_c⁄¡øck_tu∂e
 *
	mtu∂e
);

24 (*
	mövît_tu∂e
)(
ù_c⁄¡øck_tu∂e
 *
	mövî£
,

25 c⁄° 
ù_c⁄¡øck_tu∂e
 *
	m‹ig
);

28 (*
	m¥öt_tu∂e
)(*
	mbuf„r
,

29 c⁄° 
	mù_c⁄¡øck_tu∂e
 *);

32 (*
	m¥öt_c⁄¡øck
)(*
	mbuf„r
,

33 c⁄° 
	mù_c⁄¡øck
 *);

36 (*
	m∑ckë
)(
ù_c⁄¡øck
 *
	mc⁄¡øck
,

37 
ùhdr
 *
	mùh
, 
size_t
 
	mÀn
,

38 
ù_c⁄¡øck_öfo
 
	m˘öfo
);

42 (*
	m√w
)(
ù_c⁄¡øck
 *
	mc⁄¡øck
, 
ùhdr
 *
	mùh
,

43 
size_t
 
	mÀn
);

46 (*
	mde°roy
)(
ù_c⁄¡øck
 *
	mc⁄¡øck
);

49 (*
	mexp_m©ches_pkt
)(
ù_c⁄¡øck_ex≥˘
 *
	mexp
,

50 
sk_buff
 **
	mpskb
);

53 
moduÀ
 *
	mme
;

57 
ù_c⁄¡øck_¥Ÿocﬁ_ªgi°î
(
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿo
);

58 
ù_c⁄¡øck_¥Ÿocﬁ_uƒegi°î
(
ù_c⁄¡øck_¥Ÿocﬁ
 *
¥Ÿo
);

61 
ù_c⁄¡øck_¥Ÿocﬁ
 
ù_c⁄¡øck_¥Ÿocﬁ_t˝
;

62 
ù_c⁄¡øck_¥Ÿocﬁ
 
ù_c⁄¡øck_¥Ÿocﬁ_udp
;

63 
ù_c⁄¡øck_¥Ÿocﬁ
 
ù_c⁄¡øck_¥Ÿocﬁ_icmp
;

64 
ù_c⁄¡øck_¥Ÿocﬁ_t˝_öô
();

	@/usr/include/linux/netfilter_ipv4/ip_conntrack_tftp.h

1 #i‚de‡
_IP_CT_TFTP


2 
	#_IP_CT_TFTP


	)

4 
	#TFTP_PORT
 69

	)

6 
	st·phdr
 {

7 
u_öt16_t
 
	m›code
;

10 
	#TFTP_OPCODE_READ
 1

	)

11 
	#TFTP_OPCODE_WRITE
 2

	)

	@/usr/include/linux/netfilter_ipv4/ip_conntrack_tuple.h

1 #i‚de‡
_IP_CONNTRACK_TUPLE_H


2 
	#_IP_CONNTRACK_TUPLE_H


	)

14 
	uù_c⁄¡øck_m™ù_¥Ÿo


17 
u_öt16_t
 
	mÆl
;

20 
u_öt16_t
 
	mp‹t
;

21 } 
	mt˝
;

23 
u_öt16_t
 
	mp‹t
;

24 } 
	mudp
;

26 
u_öt16_t
 
	mid
;

27 } 
	micmp
;

31 
	sù_c⁄¡øck_m™ù


33 
u_öt32_t
 
	mù
;

34 
ù_c⁄¡øck_m™ù_¥Ÿo
 
	mu
;

38 
	sù_c⁄¡øck_tu∂e


40 
ù_c⁄¡øck_m™ù
 
	m§c
;

44 
u_öt32_t
 
	mù
;

47 
u_öt16_t
 
	mÆl
;

50 
u_öt16_t
 
	mp‹t
;

51 } 
	mt˝
;

53 
u_öt16_t
 
	mp‹t
;

54 } 
	mudp
;

56 
u_öt8_t
 
	mty≥
, 
	mcode
;

57 } 
	micmp
;

58 } 
	mu
;

61 
u_öt16_t
 
	m¥Ÿ⁄um
;

62 } 
	md°
;

65 
	eù_c⁄¡øck_dú


67 
	mIP_CT_DIR_ORIGINAL
,

68 
	mIP_CT_DIR_REPLY
,

69 
	mIP_CT_DIR_MAX


72 
ölöe
 
	$ù_˘_tu∂e_§c_equÆ
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
t1
,

73 c⁄° 
ù_c⁄¡øck_tu∂e
 *
t2
)

75  
t1
->
§c
.
ù
 =
t2
->src.ip

76 && 
t1
->
§c
.
u
.
Æl
 =
t2
->src.u.all;

77 
	}
}

79 
ölöe
 
	$ù_˘_tu∂e_d°_equÆ
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
t1
,

80 c⁄° 
ù_c⁄¡øck_tu∂e
 *
t2
)

82  
t1
->
d°
.
ù
 =
t2
->dst.ip

83 && 
t1
->
d°
.
u
.
Æl
 =
t2
->dst.u.all

84 && 
t1
->
d°
.
¥Ÿ⁄um
 =
t2
->dst.protonum;

85 
	}
}

87 
ölöe
 
	$ù_˘_tu∂e_equÆ
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
t1
,

88 c⁄° 
ù_c⁄¡øck_tu∂e
 *
t2
)

90  
	`ù_˘_tu∂e_§c_equÆ
(
t1
, 
t2
Ë&& 
	`ù_˘_tu∂e_d°_equÆ
(t1,Å2);

91 
	}
}

93 
ölöe
 
	$ù_˘_tu∂e_mask_cmp
(c⁄° 
ù_c⁄¡øck_tu∂e
 *
t
,

94 c⁄° 
ù_c⁄¡øck_tu∂e
 *
tu∂e
,

95 c⁄° 
ù_c⁄¡øck_tu∂e
 *
mask
)

97  !(((
t
->
§c
.
ù
 ^ 
tu∂e
->§c.ùË& 
mask
->src.ip)

98 || ((
t
->
d°
.
ù
 ^ 
tu∂e
->d°.ùË& 
mask
->dst.ip)

99 || ((
t
->
§c
.
u
.
Æl
 ^ 
tu∂e
->§c.u.ÆlË& 
mask
->src.u.all)

100 || ((
t
->
d°
.
u
.
Æl
 ^ 
tu∂e
->d°.u.ÆlË& 
mask
->dst.u.all)

101 || ((
t
->
d°
.
¥Ÿ⁄um
 ^ 
tu∂e
->dst.protonum)

102 & 
mask
->
d°
.
¥Ÿ⁄um
));

103 
	}
}

	@/usr/include/linux/netfilter_ipv4/ip_nat.h

1 #i‚de‡
_IP_NAT_H


2 
	#_IP_NAT_H


	)

3 
	~<löux/√tfûãr_ùv4.h
>

4 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_tu∂e.h
>

6 
	#IP_NAT_MAPPING_TYPE_MAX_NAMELEN
 16

	)

8 
	eù_«t_m™ù_ty≥


10 
	mIP_NAT_MANIP_SRC
,

11 
	mIP_NAT_MANIP_DST


14 #i‚de‡
CONFIG_IP_NF_NAT_LOCAL


16 
	#HOOK2MANIP
(
hooknum
Ë((hooknumË!
NF_IP_POST_ROUTING
)

	)

19 
	#HOOK2MANIP
(
hooknum
Ë((hooknumË!
NF_IP_POST_ROUTING
 && (hooknumË!
NF_IP_LOCAL_IN
)

	)

23 #i‚de‡
SO_ORIGINAL_DST


24 
	#SO_ORIGINAL_DST
 80

	)

27 
	#IP_NAT_RANGE_MAP_IPS
 1

	)

28 
	#IP_NAT_RANGE_PROTO_SPECIFIED
 2

	)

30 
	#IP_NAT_RANGE_FULL
 4

	)

33 
	sù_«t_£q
 {

36 
u_öt32_t
 
	mc‹ª˘i⁄_pos
;

38 
öt32_t
 
	moff£t_bef‹e
, 
	moff£t_a·î
;

42 
	sù_«t_ønge


45 
	mÊags
;

48 
u_öt32_t
 
	mmö_ù
, 
	mmax_ù
;

51 
ù_c⁄¡øck_m™ù_¥Ÿo
 
	mmö
, 
	mmax
;

55 
	sù_«t_mu…i_ønge


57 
	møngesize
;

60 
ù_«t_ønge
 
	mønge
[1];

64 
	#IP_NAT_MAX_MANIPS
 (2*3)

	)

66 
	sù_«t_öfo_m™ù


69 
u_öt8_t
 
	mdúe˘i⁄
;

72 
u_öt8_t
 
	mhooknum
;

75 
u_öt8_t
 
	mm™ùty≥
;

78 
ù_c⁄¡øck_m™ù
 
	mm™ù
;

	@/usr/include/linux/netfilter_ipv4/ip_nat_core.h

1 #i‚de‡
_IP_NAT_CORE_H


2 
	#_IP_NAT_CORE_H


	)

3 
	~<löux/li°.h
>

4 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

8 
ù_«t_öô
();

9 
ù_«t_˛ónup
();

11 
do_bödögs
(
ù_c⁄¡øck
 *
˘
,

12 
ù_c⁄¡øck_öfo
 
c⁄¡øcköfo
,

13 
ù_«t_öfo
 *
öfo
,

14 
hooknum
,

15 
sk_buff
 **
pskb
);

17 
li°_hód
 
¥Ÿos
;

19 
icmp_ª∂y_å™¶©i⁄
(
sk_buff
 *
skb
,

20 
ù_c⁄¡øck
 *
c⁄¡øck
,

21 
hooknum
,

22 
dú
);

24 
ª∂a˚_ö_hashes
(
ù_c⁄¡øck
 *
c⁄¡øck
,

25 
ù_«t_öfo
 *
öfo
);

26 
∂a˚_ö_hashes
(
ù_c⁄¡øck
 *
c⁄¡øck
,

27 
ù_«t_öfo
 *
öfo
);

30 
ù_«t_¥Ÿocﬁ
 
ù_«t_¥Ÿocﬁ_t˝
;

31 
ù_«t_¥Ÿocﬁ
 
ù_«t_¥Ÿocﬁ_udp
;

32 
ù_«t_¥Ÿocﬁ
 
ù_«t_¥Ÿocﬁ_icmp
;

	@/usr/include/linux/netfilter_ipv4/ip_nat_helper.h

1 #i‚de‡
_IP_NAT_HELPER_H


2 
	#_IP_NAT_HELPER_H


	)

5 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

7 
	gsk_buff
;

11 
	#IP_NAT_HELPER_F_ALWAYS
 0x01

	)

13 
	#IP_NAT_HELPER_F_STANDALONE
 0x02

	)

15 
	sù_«t_hñ≥r


17 
li°_hód
 
	mli°
;

19 c⁄° *
	m«me
;

20 
	mÊags
;

21 
moduÀ
 *
	mme
;

24 
ù_c⁄¡øck_tu∂e
 
	mtu∂e
;

25 
ù_c⁄¡øck_tu∂e
 
	mmask
;

28 (*
	mhñp
)(
ù_c⁄¡øck
 *
	m˘
,

29 
ù_c⁄¡øck_ex≥˘
 *
	mexp
,

30 
ù_«t_öfo
 *
	möfo
,

31 
ù_c⁄¡øck_öfo
 
	m˘öfo
,

32 
	mhooknum
,

33 
sk_buff
 **
	mpskb
);

36 (*
	mex≥˘
)(
sk_buff
 **
	mpskb
,

37 
	mhooknum
,

38 
ù_c⁄¡øck
 *
	m˘
,

39 
ù_«t_öfo
 *
	möfo
);

42 
li°_hód
 
hñ≥rs
;

44 
ù_«t_hñ≥r_ªgi°î
(
ù_«t_hñ≥r
 *
me
);

45 
ù_«t_hñ≥r_uƒegi°î
(
ù_«t_hñ≥r
 *
me
);

46 
ù_«t_m™gÀ_t˝_∑ckë
(
sk_buff
 **
skb
,

47 
ù_c⁄¡øck
 *
˘
,

48 
ù_c⁄¡øck_öfo
 
˘öfo
,

49 
m©ch_off£t
,

50 
m©ch_Àn
,

51 *
ªp_buf„r
,

52 
ªp_Àn
);

53 
ù_«t_£q_adju°
(
sk_buff
 *
skb
,

54 
ù_c⁄¡øck
 *
˘
,

55 
ù_c⁄¡øck_öfo
 
˘öfo
);

56 
ù_«t_dñëe_ßck
(
sk_buff
 *
skb
);

	@/usr/include/linux/netfilter_ipv4/ip_nat_protocol.h

2 #i‚de‡
_IP_NAT_PROTOCOL_H


3 
	#_IP_NAT_PROTOCOL_H


	)

4 
	~<löux/öô.h
>

5 
	~<löux/li°.h
>

7 
	gùhdr
;

8 
	gù_«t_ønge
;

10 
	sù_«t_¥Ÿocﬁ


12 
li°_hód
 
	mli°
;

15 c⁄° *
	m«me
;

18 
	m¥Ÿ⁄um
;

22 (*
	mm™ù_pkt
)(
ùhdr
 *
	mùh
, 
size_t
 
	mÀn
,

23 c⁄° 
ù_c⁄¡øck_m™ù
 *
	mm™ù
,

24 
ù_«t_m™ù_ty≥
 
	mm™ùty≥
);

27 (*
	mö_ønge
)(c⁄° 
ù_c⁄¡øck_tu∂e
 *
	mtu∂e
,

28 
ù_«t_m™ù_ty≥
 
	mm™ùty≥
,

29 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
	mmö
,

30 c⁄° 
ù_c⁄¡øck_m™ù_¥Ÿo
 *
	mmax
);

36 (*
	munique_tu∂e
)(
ù_c⁄¡øck_tu∂e
 *
	mtu∂e
,

37 c⁄° 
ù_«t_ønge
 *
	mønge
,

38 
ù_«t_m™ù_ty≥
 
	mm™ùty≥
,

39 c⁄° 
ù_c⁄¡øck
 *
	mc⁄¡øck
);

41 (*
	m¥öt
)(*
	mbuf„r
,

42 c⁄° 
ù_c⁄¡øck_tu∂e
 *
	mm©ch
,

43 c⁄° 
ù_c⁄¡øck_tu∂e
 *
	mmask
);

45 (*
	m¥öt_ønge
)(*
	mbuf„r
,

46 c⁄° 
ù_«t_ønge
 *
	mønge
);

50 
ù_«t_¥Ÿocﬁ_ªgi°î
(
ù_«t_¥Ÿocﬁ
 *
¥Ÿo
);

51 
ù_«t_¥Ÿocﬁ_uƒegi°î
(
ù_«t_¥Ÿocﬁ
 *
¥Ÿo
);

53 
	$öô_¥Ÿocﬁs
(Ë
__öô
;

54 
	`˛ónup_¥Ÿocﬁs
();

55 
ù_«t_¥Ÿocﬁ
 *
	`föd_«t_¥Ÿo
(
u_öt16_t
 
¥Ÿ⁄um
);

	@/usr/include/linux/netfilter_ipv4/ip_nat_rule.h

1 #i‚de‡
_IP_NAT_RULE_H


2 
	#_IP_NAT_RULE_H


	)

3 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

4 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

5 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

	@/usr/include/linux/netfilter_ipv4/ip_queue.h

7 #i‚de‡
_IP_QUEUE_H


8 
	#_IP_QUEUE_H


	)

10 
	~<löux/if.h
>

13 
	sùq_∑ckë_msg
 {

14 
	m∑ckë_id
;

15 
	mm¨k
;

16 
	mtime°amp_£c
;

17 
	mtime°amp_u£c
;

18 
	mhook
;

19 
	mödev_«me
[
IFNAMSIZ
];

20 
	moutdev_«me
[
IFNAMSIZ
];

21 
	mhw_¥Ÿocﬁ
;

22 
	mhw_ty≥
;

23 
	mhw_addæí
;

24 
	mhw_addr
[8];

25 
size_t
 
	md©a_Àn
;

26 
	m∑ylﬂd
[0];

27 } 
	tùq_∑ckë_msg_t
;

30 
	sùq_mode_msg
 {

31 
	mvÆue
;

32 
size_t
 
	mønge
;

33 } 
	tùq_mode_msg_t
;

35 
	sùq_vîdi˘_msg
 {

36 
	mvÆue
;

37 
	mid
;

38 
size_t
 
	md©a_Àn
;

39 
	m∑ylﬂd
[0];

40 } 
	tùq_vîdi˘_msg_t
;

42 
	sùq_≥î_msg
 {

44 
ùq_vîdi˘_msg_t
 
	mvîdi˘
;

45 
ùq_mode_msg_t
 
	mmode
;

46 } 
	mmsg
;

47 } 
	tùq_≥î_msg_t
;

51 
	mIPQ_COPY_NONE
,

52 
	mIPQ_COPY_META
,

53 
	mIPQ_COPY_PACKET


55 
	#IPQ_COPY_MAX
 
IPQ_COPY_PACKET


	)

58 
	#IPQM_BASE
 0x10

	)

59 
	#IPQM_MODE
 (
IPQM_BASE
 + 1Ë

	)

60 
	#IPQM_VERDICT
 (
IPQM_BASE
 + 2Ë

	)

61 
	#IPQM_PACKET
 (
IPQM_BASE
 + 3Ë

	)

62 
	#IPQM_MAX
 (
IPQM_BASE
 + 4)

	)

	@/usr/include/linux/netfilter_ipv4/ip_tables.h

15 #i‚de‡
_IPTABLES_H


16 
	#_IPTABLES_H


	)

18 
	~<löux/√tfûãr_ùv4.h
>

20 
	#IPT_FUNCTION_MAXNAMELEN
 30

	)

21 
	#IPT_TABLE_MAXNAMELEN
 32

	)

24 
	sùt_ù
 {

26 
ö_addr
 
	m§c
, 
	md°
;

28 
ö_addr
 
	msmsk
, 
	mdmsk
;

29 
	möiÁ˚
[
IFNAMSIZ
], 
	moutiÁ˚
[IFNAMSIZ];

30 
	möiÁ˚_mask
[
IFNAMSIZ
], 
	moutiÁ˚_mask
[IFNAMSIZ];

33 
u_öt16_t
 
	m¥Ÿo
;

36 
u_öt8_t
 
	mÊags
;

38 
u_öt8_t
 
	mövÊags
;

41 
	sùt_íåy_m©ch


45 
u_öt16_t
 
	mm©ch_size
;

48 
	m«me
[
IPT_FUNCTION_MAXNAMELEN
];

49 } 
	mu£r
;

51 
u_öt16_t
 
	mm©ch_size
;

54 
ùt_m©ch
 *
	mm©ch
;

55 } 
	mkî√l
;

58 
u_öt16_t
 
	mm©ch_size
;

59 } 
	mu
;

61 
	md©a
[0];

64 
	sùt_íåy_èrgë


68 
u_öt16_t
 
	mèrgë_size
;

71 
	m«me
[
IPT_FUNCTION_MAXNAMELEN
];

72 } 
	mu£r
;

74 
u_öt16_t
 
	mèrgë_size
;

77 
ùt_èrgë
 *
	mèrgë
;

78 } 
	mkî√l
;

81 
u_öt16_t
 
	mèrgë_size
;

82 } 
	mu
;

84 
	md©a
[0];

87 
	sùt_°™d¨d_èrgë


89 
ùt_íåy_èrgë
 
	mèrgë
;

90 
	mvîdi˘
;

93 
	sùt_cou¡îs


95 
u_öt64_t
 
	mp˙t
, 
	mb˙t
;

99 
	#IPT_F_FRAG
 0x01

	)

100 
	#IPT_F_MASK
 0x01

	)

103 
	#IPT_INV_VIA_IN
 0x01

	)

104 
	#IPT_INV_VIA_OUT
 0x02

	)

105 
	#IPT_INV_TOS
 0x04

	)

106 
	#IPT_INV_SRCIP
 0x08

	)

107 
	#IPT_INV_DSTIP
 0x10

	)

108 
	#IPT_INV_FRAG
 0x20

	)

109 
	#IPT_INV_PROTO
 0x40

	)

110 
	#IPT_INV_MASK
 0x7F

	)

115 
	sùt_íåy


117 
ùt_ù
 
	mù
;

120 
	mnfˇche
;

123 
u_öt16_t
 
	mèrgë_off£t
;

125 
u_öt16_t
 
	m√xt_off£t
;

128 
	mcome‰om
;

131 
ùt_cou¡îs
 
	mcou¡îs
;

134 
	mñems
[0];

141 
	#IPT_BASE_CTL
 64

	)

143 
	#IPT_SO_SET_REPLACE
 (
IPT_BASE_CTL
)

	)

144 
	#IPT_SO_SET_ADD_COUNTERS
 (
IPT_BASE_CTL
 + 1)

	)

145 
	#IPT_SO_SET_MAX
 
IPT_SO_SET_ADD_COUNTERS


	)

147 
	#IPT_SO_GET_INFO
 (
IPT_BASE_CTL
)

	)

148 
	#IPT_SO_GET_ENTRIES
 (
IPT_BASE_CTL
 + 1)

	)

149 
	#IPT_SO_GET_MAX
 
IPT_SO_GET_ENTRIES


	)

152 
	#IPT_CONTINUE
 0xFFFFFFFF

	)

155 
	#IPT_RETURN
 (-
NF_MAX_VERDICT
 - 1)

	)

158 
	sùt_t˝


160 
u_öt16_t
 
	m•ts
[2];

161 
u_öt16_t
 
	md±s
[2];

162 
u_öt8_t
 
	m›ti⁄
;

163 
u_öt8_t
 
	mÊg_mask
;

164 
u_öt8_t
 
	mÊg_cmp
;

165 
u_öt8_t
 
	mövÊags
;

169 
	#IPT_TCP_INV_SRCPT
 0x01

	)

170 
	#IPT_TCP_INV_DSTPT
 0x02

	)

171 
	#IPT_TCP_INV_FLAGS
 0x04

	)

172 
	#IPT_TCP_INV_OPTION
 0x08

	)

173 
	#IPT_TCP_INV_MASK
 0x0F

	)

176 
	sùt_udp


178 
u_öt16_t
 
	m•ts
[2];

179 
u_öt16_t
 
	md±s
[2];

180 
u_öt8_t
 
	mövÊags
;

184 
	#IPT_UDP_INV_SRCPT
 0x01

	)

185 
	#IPT_UDP_INV_DSTPT
 0x02

	)

186 
	#IPT_UDP_INV_MASK
 0x03

	)

189 
	sùt_icmp


191 
u_öt8_t
 
	mty≥
;

192 
u_öt8_t
 
	mcode
[2];

193 
u_öt8_t
 
	mövÊags
;

197 
	#IPT_ICMP_INV
 0x01

	)

200 
	sùt_gëöfo


203 
	m«me
[
IPT_TABLE_MAXNAMELEN
];

207 
	mvÆid_hooks
;

210 
	mhook_íåy
[
NF_IP_NUMHOOKS
];

213 
	mundîÊow
[
NF_IP_NUMHOOKS
];

216 
	mnum_íåõs
;

219 
	msize
;

223 
	sùt_ª∂a˚


226 
	m«me
[
IPT_TABLE_MAXNAMELEN
];

230 
	mvÆid_hooks
;

233 
	mnum_íåõs
;

236 
	msize
;

239 
	mhook_íåy
[
NF_IP_NUMHOOKS
];

242 
	mundîÊow
[
NF_IP_NUMHOOKS
];

246 
	mnum_cou¡îs
;

248 
ùt_cou¡îs
 *
	mcou¡îs
;

251 
ùt_íåy
 
	míåõs
[0];

255 
	sùt_cou¡îs_öfo


258 
	m«me
[
IPT_TABLE_MAXNAMELEN
];

260 
	mnum_cou¡îs
;

263 
ùt_cou¡îs
 
	mcou¡îs
[0];

267 
	sùt_gë_íåõs


270 
	m«me
[
IPT_TABLE_MAXNAMELEN
];

273 
	msize
;

276 
ùt_íåy
 
	míåyèbÀ
[0];

280 
	#IPT_STANDARD_TARGET
 ""

	)

282 
	#IPT_ERROR_TARGET
 "ERROR"

	)

285 
__ölöe__
 
ùt_íåy_èrgë
 *

286 
	$ùt_gë_èrgë
(
ùt_íåy
 *
e
)

288  (*)
e
 +É->
èrgë_off£t
;

289 
	}
}

292 
	#IPT_MATCH_ITERATE
(
e
, 
‚
, 
¨gs
...) \

294 
__i
; \

295 
__ªt
 = 0; \

296 
ùt_íåy_m©ch
 *
__m©ch
; \

298 
__i
 = (
ùt_íåy
); \

299 
__i
 < (
e
)->
èrgë_off£t
; \

300 
__i
 +
__m©ch
->
u
.
m©ch_size
) { \

301 
__m©ch
 = (*)(
e
Ë+ 
__i
; \

303 
__ªt
 = 
	`‚
(
__m©ch
 , ## 
¨gs
); \

304 i‡(
__ªt
 != 0) \

307 
__ªt
; \

308 })

	)

311 
	#IPT_ENTRY_ITERATE
(
íåõs
, 
size
, 
‚
, 
¨gs
...) \

313 
__i
; \

314 
__ªt
 = 0; \

315 
ùt_íåy
 *
__íåy
; \

317 
__i
 = 0; __ò< (
size
); __ò+
__íåy
->
√xt_off£t
) { \

318 
__íåy
 = (*)(
íåõs
Ë+ 
__i
; \

320 
__ªt
 = 
	`‚
(
__íåy
 , ## 
¨gs
); \

321 i‡(
__ªt
 != 0) \

324 
__ªt
; \

325 })

	)

	@/usr/include/linux/netfilter_ipv4/ipchains_core.h

22 #i‚de‡
_IP_FWCHAINS_H


23 
	#_IP_FWCHAINS_H


	)

25 
	#IP_FW_MAX_LABEL_LENGTH
 8

	)

26 
	tù_chaöœbñ
[
IP_FW_MAX_LABEL_LENGTH
+1];

28 
	sù_fw


30 
ö_addr
 
	mfw_§c
, 
	mfw_d°
;

31 
ö_addr
 
	mfw_smsk
, 
	mfw_dmsk
;

32 
__u32
 
	mfw_m¨k
;

33 
__u16
 
	mfw_¥Ÿo
;

34 
__u16
 
	mfw_Êg
;

35 
__u16
 
	mfw_övÊg
;

36 
__u16
 
	mfw_•ts
[2];

37 
__u16
 
	mfw_d±s
[2];

38 
__u16
 
	mfw_ªdú±
;

39 
__u16
 
	mfw_ouçutsize
;

41 
	mfw_vü«me
[
IFNAMSIZ
];

42 
__u8
 
	mfw_toßnd
, 
	mfw_tosx‹
;

45 
	sù_fwu£r


47 
ù_fw
 
	mùfw
;

48 
ù_chaöœbñ
 
	mœbñ
;

52 
	#IP_FW_F_PRN
 0x0001

	)

53 
	#IP_FW_F_TCPSYN
 0x0002

	)

54 
	#IP_FW_F_FRAG
 0x0004

	)

55 
	#IP_FW_F_MARKABS
 0x0008

	)

56 
	#IP_FW_F_WILDIF
 0x0010

	)

57 
	#IP_FW_F_NETLINK
 0x0020

	)

58 
	#IP_FW_F_MASK
 0x003F

	)

61 
	#IP_FW_INV_SRCIP
 0x0001

	)

62 
	#IP_FW_INV_DSTIP
 0x0002

	)

63 
	#IP_FW_INV_PROTO
 0x0004

	)

64 
	#IP_FW_INV_SRCPT
 0x0008

	)

65 
	#IP_FW_INV_DSTPT
 0x0010

	)

66 
	#IP_FW_INV_VIA
 0x0020

	)

67 
	#IP_FW_INV_SYN
 0x0040

	)

68 
	#IP_FW_INV_FRAG
 0x0080

	)

75 
	#IP_FW_BASE_CTL
 64

	)

77 
	#IP_FW_APPEND
 (
IP_FW_BASE_CTL
Ë

	)

78 
	#IP_FW_REPLACE
 (
IP_FW_BASE_CTL
+1Ë

	)

79 
	#IP_FW_DELETE_NUM
 (
IP_FW_BASE_CTL
+2Ë

	)

80 
	#IP_FW_DELETE
 (
IP_FW_BASE_CTL
+3Ë

	)

81 
	#IP_FW_INSERT
 (
IP_FW_BASE_CTL
+4Ë

	)

82 
	#IP_FW_FLUSH
 (
IP_FW_BASE_CTL
+5Ë

	)

83 
	#IP_FW_ZERO
 (
IP_FW_BASE_CTL
+6Ë

	)

84 
	#IP_FW_CHECK
 (
IP_FW_BASE_CTL
+7Ë

	)

85 
	#IP_FW_MASQ_TIMEOUTS
 (
IP_FW_BASE_CTL
+8Ë

	)

86 
	#IP_FW_CREATECHAIN
 (
IP_FW_BASE_CTL
+9Ë

	)

87 
	#IP_FW_DELETECHAIN
 (
IP_FW_BASE_CTL
+10Ë

	)

88 
	#IP_FW_POLICY
 (
IP_FW_BASE_CTL
+11Ë

	)

91 
	#IP_FW_MASQ_CTL
 (
IP_FW_BASE_CTL
+12Ë

	)

94 
	#IP_FW_LABEL_FORWARD
 "f‹w¨d"

	)

95 
	#IP_FW_LABEL_INPUT
 "öput"

	)

96 
	#IP_FW_LABEL_OUTPUT
 "ouçut"

	)

99 
	#IP_FW_LABEL_MASQUERADE
 "MASQ"

	)

100 
	#IP_FW_LABEL_REDIRECT
 "REDIRECT"

	)

101 
	#IP_FW_LABEL_ACCEPT
 "ACCEPT"

	)

102 
	#IP_FW_LABEL_BLOCK
 "DENY"

	)

103 
	#IP_FW_LABEL_REJECT
 "REJECT"

	)

104 
	#IP_FW_LABEL_RETURN
 "RETURN"

	)

105 
	#IP_FW_LABEL_QUEUE
 "QUEUE"

	)

108 
	#IP_FW_PROC_CHAINS
 "ù_fwchaös"

	)

109 
	#IP_FW_PROC_CHAIN_NAMES
 "ù_fw«mes"

	)

112 
	sù_fwpkt


114 
ùhdr
 
	mfwp_ùh
;

116 
t˝hdr
 
	mfwp_t˝h
;

117 
udphdr
 
	mfwp_udph
;

118 
icmphdr
 
	mfwp_icmph
;

119 } 
	mfwp_¥Ÿoh
;

120 
ö_addr
 
	mfwp_vü
;

121 
	mfwp_vü«me
[
IFNAMSIZ
];

125 
	sù_fwch™ge


127 
ù_fwu£r
 
	mfwc_ruÀ
;

128 
ù_chaöœbñ
 
	mfwc_œbñ
;

132 
	sù_fwã°


134 
ù_fwpkt
 
	mfwt_∑ckë
;

135 
ù_chaöœbñ
 
	mfwt_œbñ
;

139 
	sù_fwdñnum


141 
__u32
 
	mfwd_ruÀnum
;

142 
ù_chaöœbñ
 
	mfwd_œbñ
;

146 
	sù_fw√w


148 
__u32
 
	mfwn_ruÀnum
;

149 
ù_fwu£r
 
	mfwn_ruÀ
;

150 
ù_chaöœbñ
 
	mfwn_œbñ
;

154 
	sù_fwpﬁicy


156 
ù_chaöœbñ
 
	mfwp_pﬁicy
;

157 
ù_chaöœbñ
 
	mfwp_œbñ
;

163 
ù_fw_masq_timeouts
(*, );

	@/usr/include/linux/netfilter_ipv4/ipfwadm_core.h

1 #i‚de‡
_IPFWADM_CORE_H


2 
	#_IPFWADM_CORE_H


	)

58 
	sù_fw


60 
ù_fw
 *
	mfw_√xt
;

61 
ö_addr
 
	mfw_§c
, 
	mfw_d°
;

62 
ö_addr
 
	mfw_smsk
, 
	mfw_dmsk
;

63 
ö_addr
 
	mfw_vü
;

64 
√t_devi˚
 *
	mfw_vüdev
;

65 
__u16
 
	mfw_Êg
;

66 
__u16
 
	mfw_n•
, 
	mfw_ndp
;

70 
	#IP_FW_MAX_PORTS
 10

	)

71 
__u16
 
	mfw_±s
[
IP_FW_MAX_PORTS
];

72 
	mfw_p˙t
,
	mfw_b˙t
;

73 
__u8
 
	mfw_toßnd
, 
	mfw_tosx‹
;

74 
	mfw_vü«me
[
IFNAMSIZ
];

81 
	#IP_FW_F_ALL
 0x0000

	)

82 
	#IP_FW_F_TCP
 0x0001

	)

83 
	#IP_FW_F_UDP
 0x0002

	)

84 
	#IP_FW_F_ICMP
 0x0003

	)

85 
	#IP_FW_F_KIND
 0x0003

	)

86 
	#IP_FW_F_ACCEPT
 0x0004

	)

89 
	#IP_FW_F_SRNG
 0x0008

	)

93 
	#IP_FW_F_DRNG
 0x0010

	)

98 
	#IP_FW_F_PRN
 0x0020

	)

99 
	#IP_FW_F_BIDIR
 0x0040

	)

100 
	#IP_FW_F_TCPSYN
 0x0080

	)

101 
	#IP_FW_F_ICMPRPL
 0x0100

	)

102 
	#IP_FW_F_MASQ
 0x0200

	)

103 
	#IP_FW_F_TCPACK
 0x0400

	)

104 
	#IP_FW_F_REDIR
 0x0800

	)

105 
	#IP_FW_F_ACCTIN
 0x1000

	)

106 
	#IP_FW_F_ACCTOUT
 0x2000

	)

108 
	#IP_FW_F_MASK
 0x3FFF

	)

116 
	#IP_FW_BASE_CTL
 64

	)

118 
	#IP_FW_COMMAND
 0x00FF

	)

119 
	#IP_FW_TYPE
 0x0300

	)

120 
	#IP_FW_SHIFT
 8

	)

122 
	#IP_FW_FWD
 0

	)

123 
	#IP_FW_IN
 1

	)

124 
	#IP_FW_OUT
 2

	)

125 
	#IP_FW_ACCT
 3

	)

126 
	#IP_FW_CHAINS
 4

	)

127 
	#IP_FW_MASQ
 5

	)

129 
	#IP_FW_INSERT
 (
IP_FW_BASE_CTL
)

	)

130 
	#IP_FW_APPEND
 (
IP_FW_BASE_CTL
+1)

	)

131 
	#IP_FW_DELETE
 (
IP_FW_BASE_CTL
+2)

	)

132 
	#IP_FW_FLUSH
 (
IP_FW_BASE_CTL
+3)

	)

133 
	#IP_FW_ZERO
 (
IP_FW_BASE_CTL
+4)

	)

134 
	#IP_FW_POLICY
 (
IP_FW_BASE_CTL
+5)

	)

135 
	#IP_FW_CHECK
 (
IP_FW_BASE_CTL
+6)

	)

136 
	#IP_FW_MASQ_TIMEOUTS
 (
IP_FW_BASE_CTL
+7)

	)

138 
	#IP_FW_INSERT_FWD
 (
IP_FW_INSERT
 | (
IP_FW_FWD
 << 
IP_FW_SHIFT
))

	)

139 
	#IP_FW_APPEND_FWD
 (
IP_FW_APPEND
 | (
IP_FW_FWD
 << 
IP_FW_SHIFT
))

	)

140 
	#IP_FW_DELETE_FWD
 (
IP_FW_DELETE
 | (
IP_FW_FWD
 << 
IP_FW_SHIFT
))

	)

141 
	#IP_FW_FLUSH_FWD
 (
IP_FW_FLUSH
 | (
IP_FW_FWD
 << 
IP_FW_SHIFT
))

	)

142 
	#IP_FW_ZERO_FWD
 (
IP_FW_ZERO
 | (
IP_FW_FWD
 << 
IP_FW_SHIFT
))

	)

143 
	#IP_FW_POLICY_FWD
 (
IP_FW_POLICY
 | (
IP_FW_FWD
 << 
IP_FW_SHIFT
))

	)

144 
	#IP_FW_CHECK_FWD
 (
IP_FW_CHECK
 | (
IP_FW_FWD
 << 
IP_FW_SHIFT
))

	)

146 
	#IP_FW_INSERT_IN
 (
IP_FW_INSERT
 | (
IP_FW_IN
 << 
IP_FW_SHIFT
))

	)

147 
	#IP_FW_APPEND_IN
 (
IP_FW_APPEND
 | (
IP_FW_IN
 << 
IP_FW_SHIFT
))

	)

148 
	#IP_FW_DELETE_IN
 (
IP_FW_DELETE
 | (
IP_FW_IN
 << 
IP_FW_SHIFT
))

	)

149 
	#IP_FW_FLUSH_IN
 (
IP_FW_FLUSH
 | (
IP_FW_IN
 << 
IP_FW_SHIFT
))

	)

150 
	#IP_FW_ZERO_IN
 (
IP_FW_ZERO
 | (
IP_FW_IN
 << 
IP_FW_SHIFT
))

	)

151 
	#IP_FW_POLICY_IN
 (
IP_FW_POLICY
 | (
IP_FW_IN
 << 
IP_FW_SHIFT
))

	)

152 
	#IP_FW_CHECK_IN
 (
IP_FW_CHECK
 | (
IP_FW_IN
 << 
IP_FW_SHIFT
))

	)

154 
	#IP_FW_INSERT_OUT
 (
IP_FW_INSERT
 | (
IP_FW_OUT
 << 
IP_FW_SHIFT
))

	)

155 
	#IP_FW_APPEND_OUT
 (
IP_FW_APPEND
 | (
IP_FW_OUT
 << 
IP_FW_SHIFT
))

	)

156 
	#IP_FW_DELETE_OUT
 (
IP_FW_DELETE
 | (
IP_FW_OUT
 << 
IP_FW_SHIFT
))

	)

157 
	#IP_FW_FLUSH_OUT
 (
IP_FW_FLUSH
 | (
IP_FW_OUT
 << 
IP_FW_SHIFT
))

	)

158 
	#IP_FW_ZERO_OUT
 (
IP_FW_ZERO
 | (
IP_FW_OUT
 << 
IP_FW_SHIFT
))

	)

159 
	#IP_FW_POLICY_OUT
 (
IP_FW_POLICY
 | (
IP_FW_OUT
 << 
IP_FW_SHIFT
))

	)

160 
	#IP_FW_CHECK_OUT
 (
IP_FW_CHECK
 | (
IP_FW_OUT
 << 
IP_FW_SHIFT
))

	)

162 
	#IP_ACCT_INSERT
 (
IP_FW_INSERT
 | (
IP_FW_ACCT
 << 
IP_FW_SHIFT
))

	)

163 
	#IP_ACCT_APPEND
 (
IP_FW_APPEND
 | (
IP_FW_ACCT
 << 
IP_FW_SHIFT
))

	)

164 
	#IP_ACCT_DELETE
 (
IP_FW_DELETE
 | (
IP_FW_ACCT
 << 
IP_FW_SHIFT
))

	)

165 
	#IP_ACCT_FLUSH
 (
IP_FW_FLUSH
 | (
IP_FW_ACCT
 << 
IP_FW_SHIFT
))

	)

166 
	#IP_ACCT_ZERO
 (
IP_FW_ZERO
 | (
IP_FW_ACCT
 << 
IP_FW_SHIFT
))

	)

168 
	#IP_FW_MASQ_INSERT
 (
IP_FW_INSERT
 | (
IP_FW_MASQ
 << 
IP_FW_SHIFT
))

	)

169 
	#IP_FW_MASQ_ADD
 (
IP_FW_APPEND
 | (
IP_FW_MASQ
 << 
IP_FW_SHIFT
))

	)

170 
	#IP_FW_MASQ_DEL
 (
IP_FW_DELETE
 | (
IP_FW_MASQ
 << 
IP_FW_SHIFT
))

	)

171 
	#IP_FW_MASQ_FLUSH
 (
IP_FW_FLUSH
 | (
IP_FW_MASQ
 << 
IP_FW_SHIFT
))

	)

173 
	#IP_FW_MASQ_INSERT
 (
IP_FW_INSERT
 | (
IP_FW_MASQ
 << 
IP_FW_SHIFT
))

	)

174 
	#IP_FW_MASQ_ADD
 (
IP_FW_APPEND
 | (
IP_FW_MASQ
 << 
IP_FW_SHIFT
))

	)

175 
	#IP_FW_MASQ_DEL
 (
IP_FW_DELETE
 | (
IP_FW_MASQ
 << 
IP_FW_SHIFT
))

	)

176 
	#IP_FW_MASQ_FLUSH
 (
IP_FW_FLUSH
 | (
IP_FW_MASQ
 << 
IP_FW_SHIFT
))

	)

178 
	sù_fwpkt


180 
ùhdr
 
	mfwp_ùh
;

182 
t˝hdr
 
	mfwp_t˝h
;

183 
udphdr
 
	mfwp_udph
;

184 
icmphdr
 
	mfwp_icmph
;

185 } 
	mfwp_¥Ÿoh
;

186 
ö_addr
 
	mfwp_vü
;

187 
	mfwp_vü«me
[
IFNAMSIZ
];

190 
	#IP_FW_MASQCTL_MAX
 256

	)

191 
	#IP_MASQ_MOD_NMAX
 32

	)

193 
	sù_fw_masq˘l


195 
	mm˘l_a˘i⁄
;

198 
	m«me
[
IP_MASQ_MOD_NMAX
];

199 
	md©a
[1];

200 } 
	mmod
;

201 } 
	mu
;

208 
	gù_fw_masq
;

	@/usr/include/linux/netfilter_ipv4/ipt_DSCP.h

11 #i‚de‡
_IPT_DSCP_TARGET_H


12 
	#_IPT_DSCP_TARGET_H


	)

13 
	~<löux/√tfûãr_ùv4/ùt_ds˝.h
>

16 
	sùt_DSCP_öfo
 {

17 
u_öt8_t
 
	mds˝
;

	@/usr/include/linux/netfilter_ipv4/ipt_ECN.h

9 #i‚de‡
_IPT_ECN_TARGET_H


10 
	#_IPT_ECN_TARGET_H


	)

11 
	~<löux/√tfûãr_ùv4/ùt_DSCP.h
>

13 
	#IPT_ECN_IP_MASK
 (~
IPT_DSCP_MASK
)

	)

15 
	#IPT_ECN_OP_SET_IP
 0x01

	)

16 
	#IPT_ECN_OP_SET_ECE
 0x10

	)

17 
	#IPT_ECN_OP_SET_CWR
 0x20

	)

19 
	#IPT_ECN_OP_MASK
 0x˚

	)

21 
	sùt_ECN_öfo
 {

22 
u_öt8_t
 
	m›î©i⁄
;

23 
u_öt8_t
 
	mù_e˘
;

26 
u_öt8_t
 
	me˚
:1, 
	mcwr
:1;

27 } 
	mt˝
;

28 } 
	m¥Ÿo
;

	@/usr/include/linux/netfilter_ipv4/ipt_LOG.h

1 #i‚de‡
_IPT_LOG_H


2 
	#_IPT_LOG_H


	)

4 
	#IPT_LOG_TCPSEQ
 0x01

	)

5 
	#IPT_LOG_TCPOPT
 0x02

	)

6 
	#IPT_LOG_IPOPT
 0x04

	)

7 
	#IPT_LOG_MASK
 0x07

	)

9 
	sùt_log_öfo
 {

10 
	mÀvñ
;

11 
	mlogÊags
;

12 
	m¥efix
[30];

	@/usr/include/linux/netfilter_ipv4/ipt_MARK.h

1 #i‚de‡
_IPT_MARK_H_èrgë


2 
	#_IPT_MARK_H_èrgë


	)

4 
	sùt_m¨k_èrgë_öfo
 {

5 
	mm¨k
;

	@/usr/include/linux/netfilter_ipv4/ipt_REJECT.h

1 #i‚de‡
_IPT_REJECT_H


2 
	#_IPT_REJECT_H


	)

4 
	eùt_ªje˘_wôh
 {

5 
	mIPT_ICMP_NET_UNREACHABLE
,

6 
	mIPT_ICMP_HOST_UNREACHABLE
,

7 
	mIPT_ICMP_PROT_UNREACHABLE
,

8 
	mIPT_ICMP_PORT_UNREACHABLE
,

9 
	mIPT_ICMP_ECHOREPLY
,

10 
	mIPT_ICMP_NET_PROHIBITED
,

11 
	mIPT_ICMP_HOST_PROHIBITED
,

12 
	mIPT_TCP_RESET


15 
	sùt_ªje˘_öfo
 {

16 
ùt_ªje˘_wôh
 
	mwôh
;

	@/usr/include/linux/netfilter_ipv4/ipt_TCPMSS.h

1 #i‚de‡
_IPT_TCPMSS_H


2 
	#_IPT_TCPMSS_H


	)

4 
	sùt_t˝mss_öfo
 {

5 
u_öt16_t
 
	mmss
;

8 
	#IPT_TCPMSS_CLAMP_PMTU
 0xffff

	)

	@/usr/include/linux/netfilter_ipv4/ipt_TOS.h

1 #i‚de‡
_IPT_TOS_H_èrgë


2 
	#_IPT_TOS_H_èrgë


	)

4 #i‚de‡
IPTOS_NORMALSVC


5 
	#IPTOS_NORMALSVC
 0

	)

8 
	sùt_tos_èrgë_öfo
 {

9 
u_öt8_t
 
	mtos
;

	@/usr/include/linux/netfilter_ipv4/ipt_ULOG.h

7 #i‚de‡
_IPT_ULOG_H


8 
	#_IPT_ULOG_H


	)

10 #i‚de‡
NETLINK_NFLOG


11 
	#NETLINK_NFLOG
 5

	)

14 
	#ULOG_MAC_LEN
 80

	)

15 
	#ULOG_PREFIX_LEN
 32

	)

17 
	#ULOG_MAX_QLEN
 50

	)

24 
	sùt_ulog_öfo
 {

25 
	m∆_group
;

26 
size_t
 
	mc›y_ønge
;

27 
size_t
 
	mqthªshﬁd
;

28 
	m¥efix
[
ULOG_PREFIX_LEN
];

32 
	sulog_∑ckë_msg
 {

33 
	mm¨k
;

34 
	mtime°amp_£c
;

35 
	mtime°amp_u£c
;

36 
	mhook
;

37 
	mödev_«me
[
IFNAMSIZ
];

38 
	moutdev_«me
[
IFNAMSIZ
];

39 
size_t
 
	md©a_Àn
;

40 
	m¥efix
[
ULOG_PREFIX_LEN
];

41 
	mmac_Àn
;

42 
	mmac
[
ULOG_MAC_LEN
];

43 
	m∑ylﬂd
[0];

44 } 
	tulog_∑ckë_msg_t
;

	@/usr/include/linux/netfilter_ipv4/ipt_ah.h

1 #i‚de‡
_IPT_AH_H


2 
	#_IPT_AH_H


	)

4 
	sùt_ah


6 
u_öt32_t
 
	m•is
[2];

7 
u_öt8_t
 
	mövÊags
;

13 
	#IPT_AH_INV_SPI
 0x01

	)

14 
	#IPT_AH_INV_MASK
 0x01

	)

	@/usr/include/linux/netfilter_ipv4/ipt_conntrack.h

5 #i‚de‡
_IPT_CONNTRACK_H


6 
	#_IPT_CONNTRACK_H


	)

8 
	#IPT_CONNTRACK_STATE_BIT
(
˘öfo
Ë(1 << ((˘öfo)%
IP_CT_IS_REPLY
+1))

	)

9 
	#IPT_CONNTRACK_STATE_INVALID
 (1 << 0)

	)

11 
	#IPT_CONNTRACK_STATE_SNAT
 (1 << (
IP_CT_NUMBER
 + 1))

	)

12 
	#IPT_CONNTRACK_STATE_DNAT
 (1 << (
IP_CT_NUMBER
 + 2))

	)

15 
	#IPT_CONNTRACK_STATE
 0x01

	)

16 
	#IPT_CONNTRACK_PROTO
 0x02

	)

17 
	#IPT_CONNTRACK_ORIGSRC
 0x04

	)

18 
	#IPT_CONNTRACK_ORIGDST
 0x08

	)

19 
	#IPT_CONNTRACK_REPLSRC
 0x10

	)

20 
	#IPT_CONNTRACK_REPLDST
 0x20

	)

21 
	#IPT_CONNTRACK_STATUS
 0x40

	)

22 
	#IPT_CONNTRACK_EXPIRES
 0x80

	)

24 
	sùt_c⁄¡øck_öfo


26 
	m°©emask
, 
	m°©usmask
;

28 
ù_c⁄¡øck_tu∂e
 
	mtu∂e
[
IP_CT_DIR_MAX
];

29 
ö_addr
 
	msùmsk
[
IP_CT_DIR_MAX
], 
	mdùmsk
[IP_CT_DIR_MAX];

31 
	mexpúes_mö
, 
	mexpúes_max
;

34 
u_öt8_t
 
	mÊags
;

36 
u_öt8_t
 
	mövÊags
;

	@/usr/include/linux/netfilter_ipv4/ipt_dscp.h

10 #i‚de‡
_IPT_DSCP_H


11 
	#_IPT_DSCP_H


	)

13 
	#IPT_DSCP_MASK
 0xf¯

	)

14 
	#IPT_DSCP_SHIFT
 2

	)

15 
	#IPT_DSCP_MAX
 0x3‡

	)

18 
	sùt_ds˝_öfo
 {

19 
u_öt8_t
 
	mds˝
;

20 
u_öt8_t
 
	mövît
;

	@/usr/include/linux/netfilter_ipv4/ipt_ecn.h

9 #i‚de‡
_IPT_ECN_H


10 
	#_IPT_ECN_H


	)

11 
	~<löux/√tfûãr_ùv4/ùt_ds˝.h
>

13 
	#IPT_ECN_IP_MASK
 (~
IPT_DSCP_MASK
)

	)

15 
	#IPT_ECN_OP_MATCH_IP
 0x01

	)

16 
	#IPT_ECN_OP_MATCH_ECE
 0x10

	)

17 
	#IPT_ECN_OP_MATCH_CWR
 0x20

	)

19 
	#IPT_ECN_OP_MATCH_MASK
 0x˚

	)

22 
	sùt_e˙_öfo
 {

23 
u_öt8_t
 
	m›î©i⁄
;

24 
u_öt8_t
 
	mövît
;

25 
u_öt8_t
 
	mù_e˘
;

28 
u_öt8_t
 
	me˘
;

29 } 
	mt˝
;

30 } 
	m¥Ÿo
;

	@/usr/include/linux/netfilter_ipv4/ipt_esp.h

1 #i‚de‡
_IPT_ESP_H


2 
	#_IPT_ESP_H


	)

4 
	sùt_e•


6 
u_öt32_t
 
	m•is
[2];

7 
u_öt8_t
 
	mövÊags
;

13 
	#IPT_ESP_INV_SPI
 0x01

	)

14 
	#IPT_ESP_INV_MASK
 0x01

	)

	@/usr/include/linux/netfilter_ipv4/ipt_helper.h

1 #i‚de‡
_IPT_HELPER_H


2 
	#_IPT_HELPER_H


	)

4 
	sùt_hñ≥r_öfo
 {

5 
	mövît
;

6 
	m«me
[30];

	@/usr/include/linux/netfilter_ipv4/ipt_length.h

1 #i‚de‡
_IPT_LENGTH_H


2 
	#_IPT_LENGTH_H


	)

4 
	sùt_Àngth_öfo
 {

5 
u_öt16_t
 
	mmö
, 
	mmax
;

6 
u_öt8_t
 
	mövît
;

	@/usr/include/linux/netfilter_ipv4/ipt_limit.h

1 #i‚de‡
_IPT_RATE_H


2 
	#_IPT_RATE_H


	)

5 
	#IPT_LIMIT_SCALE
 10000

	)

9 
	sùt_øãöfo
 {

10 
u_öt32_t
 
	mavg
;

11 
u_öt32_t
 
	mbur°
;

14 
	m¥ev
;

15 
u_öt32_t
 
	m¸edô
;

16 
u_öt32_t
 
	m¸edô_ˇp
, 
	mco°
;

19 
ùt_øãöfo
 *
	mma°î
;

	@/usr/include/linux/netfilter_ipv4/ipt_mac.h

1 #i‚de‡
_IPT_MAC_H


2 
	#_IPT_MAC_H


	)

4 
	sùt_mac_öfo
 {

5 
	m§ˇddr
[
ETH_ALEN
];

6 
	mövît
;

	@/usr/include/linux/netfilter_ipv4/ipt_mark.h

1 #i‚de‡
_IPT_MARK_H


2 
	#_IPT_MARK_H


	)

4 
	sùt_m¨k_öfo
 {

5 
	mm¨k
, 
	mmask
;

6 
u_öt8_t
 
	mövît
;

	@/usr/include/linux/netfilter_ipv4/ipt_multiport.h

1 #i‚de‡
_IPT_MULTIPORT_H


2 
	#_IPT_MULTIPORT_H


	)

3 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

5 
	eùt_mu…ù‹t_Êags


7 
	mIPT_MULTIPORT_SOURCE
,

8 
	mIPT_MULTIPORT_DESTINATION
,

9 
	mIPT_MULTIPORT_EITHER


12 
	#IPT_MULTI_PORTS
 15

	)

15 
	sùt_mu…ù‹t


17 
u_öt8_t
 
	mÊags
;

18 
u_öt8_t
 
	mcou¡
;

19 
u_öt16_t
 
	mp‹ts
[
IPT_MULTI_PORTS
];

	@/usr/include/linux/netfilter_ipv4/ipt_owner.h

1 #i‚de‡
_IPT_OWNER_H


2 
	#_IPT_OWNER_H


	)

5 
	#IPT_OWNER_UID
 0x01

	)

6 
	#IPT_OWNER_GID
 0x02

	)

7 
	#IPT_OWNER_PID
 0x04

	)

8 
	#IPT_OWNER_SID
 0x08

	)

9 
	#IPT_OWNER_COMM
 0x10

	)

11 
	sùt_ow√r_öfo
 {

12 
uid_t
 
	muid
;

13 
gid_t
 
	mgid
;

14 
pid_t
 
	mpid
;

15 
pid_t
 
	msid
;

16 
	mcomm
[16];

17 
u_öt8_t
 
	mm©ch
, 
	mövît
;

	@/usr/include/linux/netfilter_ipv4/ipt_pkttype.h

1 #i‚de‡
_IPT_PKTTYPE_H


2 
	#_IPT_PKTTYPE_H


	)

4 
	sùt_pkây≥_öfo
 {

5 
	mpkây≥
;

6 
	mövît
;

	@/usr/include/linux/netfilter_ipv4/ipt_recent.h

1 #i‚de‡
_IPT_RECENT_H


2 
	#_IPT_RECENT_H


	)

4 
	#RECENT_NAME
 "ùt_ª˚¡"

	)

5 
	#RECENT_VER
 "v0.3.1"

	)

7 
	#IPT_RECENT_CHECK
 1

	)

8 
	#IPT_RECENT_SET
 2

	)

9 
	#IPT_RECENT_UPDATE
 4

	)

10 
	#IPT_RECENT_REMOVE
 8

	)

11 
	#IPT_RECENT_TTL
 16

	)

13 
	#IPT_RECENT_SOURCE
 0

	)

14 
	#IPT_RECENT_DEST
 1

	)

16 
	#IPT_RECENT_NAME_LEN
 200

	)

18 
	sùt_ª˚¡_öfo
 {

19 
u_öt32_t
 
	m£c⁄ds
;

20 
u_öt32_t
 
	mhô_cou¡
;

21 
u_öt8_t
 
	mcheck_£t
;

22 
u_öt8_t
 
	mövît
;

23 
	m«me
[
IPT_RECENT_NAME_LEN
];

24 
u_öt8_t
 
	mside
;

	@/usr/include/linux/netfilter_ipv4/ipt_state.h

1 #i‚de‡
_IPT_STATE_H


2 
	#_IPT_STATE_H


	)

4 
	#IPT_STATE_BIT
(
˘öfo
Ë(1 << ((˘öfo)%
IP_CT_IS_REPLY
+1))

	)

5 
	#IPT_STATE_INVALID
 (1 << 0)

	)

7 
	sùt_°©e_öfo


9 
	m°©emask
;

	@/usr/include/linux/netfilter_ipv4/ipt_tcpmss.h

1 #i‚de‡
_IPT_TCPMSS_MATCH_H


2 
	#_IPT_TCPMSS_MATCH_H


	)

4 
	sùt_t˝mss_m©ch_öfo
 {

5 
u_öt16_t
 
	mmss_mö
, 
	mmss_max
;

6 
u_öt8_t
 
	mövît
;

	@/usr/include/linux/netfilter_ipv4/ipt_tos.h

1 #i‚de‡
_IPT_TOS_H


2 
	#_IPT_TOS_H


	)

4 
	sùt_tos_öfo
 {

5 
u_öt8_t
 
	mtos
;

6 
u_öt8_t
 
	mövît
;

9 #i‚de‡
IPTOS_NORMALSVC


10 
	#IPTOS_NORMALSVC
 0

	)

	@/usr/include/linux/netfilter_ipv4/ipt_ttl.h

4 #i‚de‡
_IPT_TTL_H


5 
	#_IPT_TTL_H


	)

8 
	mIPT_TTL_EQ
 = 0,

9 
	mIPT_TTL_NE
,

10 
	mIPT_TTL_LT
,

11 
	mIPT_TTL_GT
,

15 
	sùt_âl_öfo
 {

16 
u_öt8_t
 
	mmode
;

17 
u_öt8_t
 
	mâl
;

	@/usr/include/linux/netfilter_ipv4/listhelp.h

1 #i‚de‡
_LISTHELP_H


2 
	#_LISTHELP_H


	)

3 
	~<löux/c⁄fig.h
>

4 
	~<löux/li°.h
>

5 
	~<löux/√tfûãr_ùv4/lockhñp.h
>

12 
	#LIST_FIND
(
hód
, 
cmp‚
, 
ty≥
, 
¨gs
...) \

14 c⁄° 
li°_hód
 *
__i
 = (
hód
); \

16 
	`ASSERT_READ_LOCK
(
hód
); \

18 
__i
 = __i->
√xt
; \

19 i‡(
__i
 =(
hód
)) { \

20 
__i
 = 
NULL
; \

23 } !
	`cmp‚
((c⁄° 
ty≥
)
__i
 , ## 
¨gs
)); \

24 (
ty≥
)
__i
; \

25 })

	)

27 
	#LIST_FIND_W
(
hód
, 
cmp‚
, 
ty≥
, 
¨gs
...) \

29 c⁄° 
li°_hód
 *
__i
 = (
hód
); \

31 
	`ASSERT_WRITE_LOCK
(
hód
); \

33 
__i
 = __i->
√xt
; \

34 i‡(
__i
 =(
hód
)) { \

35 
__i
 = 
NULL
; \

38 } !
	`cmp‚
((
ty≥
)
__i
 , ## 
¨gs
)); \

39 (
ty≥
)
__i
; \

40 })

	)

42 
ölöe
 

43 
	$__li°_cmp_ßme
(c⁄° *
p1
, c⁄° *
p2
Ë{ Ö1 =p2; 
	}
}

46 
ölöe
 

47 
	$li°_öli°
(
li°_hód
 *
hód
, c⁄° *
íåy
)

49  
	`LIST_FIND
(
hód
, 
__li°_cmp_ßme
, *, 
íåy
Ë!
NULL
;

50 
	}
}

53 #ifde‡
CONFIG_NETFILTER_DEBUG


54 
	#LIST_DELETE
(
hód
, 
ﬁdíåy
) \

56 
	`ASSERT_WRITE_LOCK
(
hód
); \

57 i‡(!
	`li°_öli°
(
hód
, 
ﬁdíåy
)) \

58 
	`¥ötk
("LIST_DELETE: %s:%u `%s'(%p)Çot in %s.\n", \

59 
__FILE__
, 
__LINE__
, #ﬁdíåy, 
ﬁdíåy
, #head); \

60 
	`li°_dñ
((
li°_hód
 *)
ﬁdíåy
); \

61 } 0)

	)

63 
	#LIST_DELETE
(
hód
, 
ﬁdíåy
Ë
	`li°_dñ
((
li°_hód
 *)ﬁdíåy)

	)

67 
ölöe
 

68 
	$li°_≠≥nd
(
li°_hód
 *
hód
, *
√w
)

70 
	`ASSERT_WRITE_LOCK
(
hód
);

71 
	`li°_add
((
√w
), (
hód
)->
¥ev
);

72 
	}
}

75 
ölöe
 

76 
	$li°_¥ïíd
(
li°_hód
 *
hód
, *
√w
)

78 
	`ASSERT_WRITE_LOCK
(
hód
);

79 
	`li°_add
(
√w
, 
hód
);

80 
	}
}

83 
	#LIST_INSERT
(
hód
, 
√w
, 
cmp‚
) \

85 
li°_hód
 *
__i
; \

86 
	`ASSERT_WRITE_LOCK
(
hód
); \

87 
__i
 = (
hód
)->
√xt
; \

88 !
	`cmp‚
((
√w
), (
	`ty≥of
 (√w))
__i
Ë&& __ò!(
hód
); \

89 
__i
 = __i->
√xt
); \

90 
	`li°_add
((
li°_hód
 *)(
√w
), 
__i
->
¥ev
); \

91 } 0)

	)

95 
ölöe
 
	$__li°_cmp_«me
(c⁄° *
i
, c⁄° *
«me
)

97  
	`°rcmp
(
«me
, 
i
+(
li°_hód
)) == 0;

98 
	}
}

101 
ölöe
 

102 
	$li°_«med_ö£π
(
li°_hód
 *
hód
, *
√w
)

104 i‡(
	`LIST_FIND
(
hód
, 
__li°_cmp_«me
, *,

105 
√w
 + (
li°_hód
)))

107 
	`li°_¥ïíd
(
hód
, 
√w
);

109 
	}
}

112 
	#li°_«med_föd
(
hód
, 
«me
) \

113 
	`LIST_FIND
(
hód
, 
__li°_cmp_«me
, *, 
«me
)

	)

	@/usr/include/linux/netfilter_ipv4/lockhelp.h

1 #i‚de‡
_LOCKHELP_H


2 
	#_LOCKHELP_H


	)

3 
	~<löux/c⁄fig.h
>

5 
	~<löux/•ölock.h
>

6 
	~<löux/öãºu±.h
>

7 
	~<löux/smp.h
>

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	#NETLINK_ROUTE
 0

	)

5 
	#NETLINK_SKIP
 1

	)

6 
	#NETLINK_USERSOCK
 2

	)

7 
	#NETLINK_FIREWALL
 3

	)

8 
	#NETLINK_TCPDIAG
 4

	)

9 
	#NETLINK_NFLOG
 5

	)

10 
	#NETLINK_ARPD
 8

	)

11 
	#NETLINK_ROUTE6
 11

	)

12 
	#NETLINK_IP6_FW
 13

	)

13 
	#NETLINK_DNRTMSG
 14

	)

14 
	#NETLINK_TAPBASE
 16

	)

16 
	#MAX_LINKS
 32

	)

18 
	ssockaddr_∆


20 
ß_Ámûy_t
 
	m∆_Ámûy
;

21 
	m∆_∑d
;

22 
__u32
 
	m∆_pid
;

23 
__u32
 
	m∆_groups
;

26 
	s∆msghdr


28 
__u32
 
	m∆msg_Àn
;

29 
__u16
 
	m∆msg_ty≥
;

30 
__u16
 
	m∆msg_Êags
;

31 
__u32
 
	m∆msg_£q
;

32 
__u32
 
	m∆msg_pid
;

37 
	#NLM_F_REQUEST
 1

	)

38 
	#NLM_F_MULTI
 2

	)

39 
	#NLM_F_ACK
 4

	)

40 
	#NLM_F_ECHO
 8

	)

43 
	#NLM_F_ROOT
 0x100

	)

44 
	#NLM_F_MATCH
 0x200

	)

45 
	#NLM_F_ATOMIC
 0x400

	)

46 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

49 
	#NLM_F_REPLACE
 0x100

	)

50 
	#NLM_F_EXCL
 0x200

	)

51 
	#NLM_F_CREATE
 0x400

	)

52 
	#NLM_F_APPEND
 0x800

	)

63 
	#NLMSG_ALIGNTO
 4

	)

64 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

65 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

66 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

67 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

68 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

69 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

70 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË> 0 && (∆h)->
∆msg_Àn
 >(
∆msghdr
) && \

71 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

72 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

74 
	#NLMSG_NOOP
 0x1

	)

75 
	#NLMSG_ERROR
 0x2

	)

76 
	#NLMSG_DONE
 0x3

	)

77 
	#NLMSG_OVERRUN
 0x4

	)

79 
	s∆msgîr


81 
	mîr‹
;

82 
∆msghdr
 
	mmsg
;

85 
	#NET_MAJOR
 36

	)

	@/usr/include/linux/notifier.h

10 #i‚de‡
_LINUX_NOTIFIER_H


11 
	#_LINUX_NOTIFIER_H


	)

12 
	~<löux/î∫o.h
>

14 
	snŸifõr_block


16 (*
	mnŸifõr_ˇŒ
)(
nŸifõr_block
 *
	m£lf
, , *);

17 
nŸifõr_block
 *
	m√xt
;

18 
	m¥i‹ôy
;

	@/usr/include/linux/proc_fs.h

1 #i‚de‡
_LINUX_PROC_FS_H


2 
	#_LINUX_PROC_FS_H


	)

4 
	~<löux/c⁄fig.h
>

5 
	~<löux/¶ab.h
>

14 
	#FIRST_PROCESS_ENTRY
 256

	)

22 
	mPROC_ROOT_INO
 = 1,

27 
	#PROC_DYNAMIC_FIRST
 4096

	)

28 
	#PROC_NDYNAMIC
 4096

	)

30 
	#PROC_SUPER_MAGIC
 0x9Á0

	)

47 (
	tªad_¥oc_t
)(*
	t∑ge
, **
	t°¨t
, 
	toff_t
 
	toff
,

48 
	tcou¡
, *
	teof
, *
	td©a
);

49 (
	twrôe_¥oc_t
)(
	tfûe
 *fûe, c⁄° *
	tbuf„r
,

50 
	tcou¡
, *
	td©a
);

51 (
	tgë_öfo_t
)(*, **, 
	toff_t
, );

53 
	s¥oc_dú_íåy
 {

54 
low_öo
;

55 
«mñí
;

56 c⁄° *
«me
;

57 
mode_t
 
mode
;

58 
∆ök_t
 
∆ök
;

59 
uid_t
 
uid
;

60 
gid_t
 
gid
;

61 
size
;

62 
öode_›î©i⁄s
 * 
¥oc_i›s
;

63 
fûe_›î©i⁄s
 * 
¥oc_f›s
;

64 
gë_öfo_t
 *
gë_öfo
;

65 
moduÀ
 *
ow√r
;

66 
¥oc_dú_íåy
 *
√xt
, *
∑ª¡
, *
subdú
;

67 *
d©a
;

68 
ªad_¥oc_t
 *
ªad_¥oc
;

69 
wrôe_¥oc_t
 *
wrôe_¥oc
;

70 
©omic_t
 
cou¡
;

71 
dñëed
;

72 
kdev_t
 
rdev
;

75 
	#PROC_INODE_PROPER
(
öode
Ë((öode)->
i_öo
 & ~0xffff)

	)

77 #ifde‡
CONFIG_PROC_FS


79 
¥oc_dú_íåy
 
¥oc_roŸ
;

80 
¥oc_dú_íåy
 *
¥oc_roŸ_fs
;

81 
¥oc_dú_íåy
 *
¥oc_√t
;

82 
¥oc_dú_íåy
 *
¥oc_bus
;

83 
¥oc_dú_íåy
 *
¥oc_roŸ_drivî
;

84 
¥oc_dú_íåy
 *
¥oc_roŸ_kc‹e
;

86 
	`¥oc_roŸ_öô
();

87 
	`¥oc_misc_öô
();

89 
díåy
 *
	`¥oc_pid_lookup
(
öode
 *
dú
, dentry * dentry);

90 
	`¥oc_pid_dñëe_öode
(
öode
 *inode);

91 
	`¥oc_pid_ªaddú
(
fûe
 * 
fûp
, * 
dúít
, 
fûldú_t
 
fûldú
);

93 
¥oc_dú_íåy
 *
	`¸óã_¥oc_íåy
(c⁄° *
«me
, 
mode_t
 
mode
,

94 
¥oc_dú_íåy
 *
∑ª¡
);

95 
	`ªmove_¥oc_íåy
(c⁄° *
«me
, 
¥oc_dú_íåy
 *
∑ª¡
);

97 
vfsmou¡
 *
¥oc_m¡
;

98 
su≥r_block
 *
	`¥oc_ªad_su≥r
(super_block *,*,);

99 
öode
 * 
	`¥oc_gë_öode
(
su≥r_block
 *, , 
¥oc_dú_íåy
 *);

101 
	`¥oc_m©ch
(, c⁄° *,
¥oc_dú_íåy
 *);

110 
	`¥oc_ªaddú
(
fûe
 *, *, 
fûldú_t
);

111 
díåy
 *
	`¥oc_lookup
(
öode
 *, dentry *);

113 
fûe_›î©i⁄s
 
¥oc_kc‹e_›î©i⁄s
;

114 
fûe_›î©i⁄s
 
¥oc_kmsg_›î©i⁄s
;

115 
fûe_›î©i⁄s
 
µc_hèb_›î©i⁄s
;

120 
ây_drivî
;

121 
	`¥oc_ây_öô
();

122 
	`¥oc_ây_ªgi°î_drivî
(
ây_drivî
 *
drivî
);

123 
	`¥oc_ây_uƒegi°î_drivî
(
ây_drivî
 *
drivî
);

128 
	`¥oc_devi˚_åì_öô
();

133 
	`¥oc_πas_öô
();

135 
¥oc_dú_íåy
 *
	`¥oc_symlök
(const *,

136 
¥oc_dú_íåy
 *, const *);

137 
¥oc_dú_íåy
 *
	`¥oc_mknod
(c⁄° *,
mode_t
,

138 
¥oc_dú_íåy
 *,
kdev_t
);

139 
¥oc_dú_íåy
 *
	`¥oc_mkdú
(const *,proc_dir_entry *);

141 
ölöe
 
¥oc_dú_íåy
 *
	$¸óã_¥oc_ªad_íåy
(c⁄° *
«me
,

142 
mode_t
 
mode
, 
¥oc_dú_íåy
 *
ba£
,

143 
ªad_¥oc_t
 *
ªad_¥oc
, * 
d©a
)

145 
¥oc_dú_íåy
 *
ªs
=
	`¸óã_¥oc_íåy
(
«me
,
mode
,
ba£
);

146 i‡(
ªs
) {

147 
ªs
->
ªad_¥oc
=read_proc;

148 
ªs
->
d©a
=data;

150  
ªs
;

151 
	}
}

153 
ölöe
 
¥oc_dú_íåy
 *
	$¸óã_¥oc_öfo_íåy
(c⁄° *
«me
,

154 
mode_t
 
mode
, 
¥oc_dú_íåy
 *
ba£
, 
gë_öfo_t
 *
gë_öfo
)

156 
¥oc_dú_íåy
 *
ªs
=
	`¸óã_¥oc_íåy
(
«me
,
mode
,
ba£
);

157 i‡(
ªs
Ëªs->
gë_öfo
=get_info;

158  
ªs
;

159 
	}
}

161 
ölöe
 
¥oc_dú_íåy
 *
	$¥oc_√t_¸óã
(c⁄° *
«me
,

162 
mode_t
 
mode
, 
gë_öfo_t
 *
gë_öfo
)

164  
	`¸óã_¥oc_öfo_íåy
(
«me
,
mode
,
¥oc_√t
,
gë_öfo
);

165 
	}
}

167 
ölöe
 
	$¥oc_√t_ªmove
(c⁄° *
«me
)

169 
	`ªmove_¥oc_íåy
(
«me
,
¥oc_√t
);

170 
	}
}

174 
	#¥oc_roŸ_drivî
 
NULL


	)

176 
ölöe
 
¥oc_dú_íåy
 *
	$¥oc_√t_¸óã
(c⁄° *
«me
, 
mode_t
 
mode
,

177 
gë_öfo_t
 *
gë_öfo
Ë{ 
NULL
;
	}
}

178 
ölöe
 
	$¥oc_√t_ªmove
(c⁄° *
«me
Ë{
	}
}

180 
ölöe
 
¥oc_dú_íåy
 *
	$¸óã_¥oc_íåy
(c⁄° *
«me
,

181 
mode_t
 
mode
, 
¥oc_dú_íåy
 *
∑ª¡
Ë{  
NULL
; 
	}
}

183 
ölöe
 
	$ªmove_¥oc_íåy
(c⁄° *
«me
, 
¥oc_dú_íåy
 *
∑ª¡
Ë{
	}
};

184 
ölöe
 
¥oc_dú_íåy
 *
	$¥oc_symlök
(c⁄° *
«me
,

185 
¥oc_dú_íåy
 *
∑ª¡
,*
de°
Ë{ 
NULL
;
	}
}

186 
ölöe
 
¥oc_dú_íåy
 *
	$¥oc_mknod
(c⁄° *
«me
,
mode_t
 
mode
,

187 
¥oc_dú_íåy
 *
∑ª¡
,
kdev_t
 
rdev
Ë{ 
NULL
;
	}
}

188 
ölöe
 
¥oc_dú_íåy
 *
	$¥oc_mkdú
(c⁄° *
«me
,

189 
¥oc_dú_íåy
 *
∑ª¡
Ë{ 
NULL
;
	}
}

191 
ölöe
 
¥oc_dú_íåy
 *
¸óã_¥oc_ªad_íåy
(c⁄° *
«me
,

192 
mode_t
 
mode
, 
¥oc_dú_íåy
 *
ba£
,

193 (*
ªad_¥oc
)(*, **, 
off_t
, , *, *),

194 * 
d©a
Ë{  
NULL
; 
	}
}

195 
ölöe
 
¥oc_dú_íåy
 *
	$¸óã_¥oc_öfo_íåy
(c⁄° *
«me
,

196 
mode_t
 
mode
, 
¥oc_dú_íåy
 *
ba£
, 
gë_öfo_t
 *
gë_öfo
)

197 {  
NULL
; 
	}
}

199 
ölöe
 
	$¥oc_ây_ªgi°î_drivî
(
ây_drivî
 *
drivî
Ë{
	}
};

200 
ölöe
 
	$¥oc_ây_uƒegi°î_drivî
(
ây_drivî
 *
drivî
Ë{
	}
};

202 
¥oc_dú_íåy
 
¥oc_roŸ
;

203 
¥oc_dú_íåy
 
¥oc_roŸ_drivî
;

	@/usr/include/linux/random.h

7 #i‚de‡
_LINUX_RANDOM_H


8 
	#_LINUX_RANDOM_H


	)

10 
	~<löux/io˘l.h
>

15 
	#RNDGETENTCNT
 
	`_IOR
–'R', 0x00, )

	)

18 
	#RNDADDTOENTCNT
 
	`_IOW
–'R', 0x01, )

	)

21 
	#RNDGETPOOL
 
	`_IOR
–'R', 0x02, [2] )

	)

27 
	#RNDADDENTROPY
 
	`_IOW
–'R', 0x03, [2] )

	)

30 
	#RNDZAPENTCNT
 
	`_IO
–'R', 0x04 )

	)

33 
	#RNDCLEARPOOL
 
	`_IO
–'R', 0x06 )

	)

35 
	sønd_poﬁ_öfo
 {

36 
	míå›y_cou¡
;

37 
	mbuf_size
;

38 
__u32
 
	mbuf
[0];

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

4 
	~<asm/∑øm.h
>

6 
evít
;

8 
	~<löux/c⁄fig.h
>

9 
	~<löux/böfmts.h
>

10 
	~<löux/thªads.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/ty≥s.h
>

13 
	~<löux/times.h
>

14 
	~<löux/timex.h
>

16 
	~<asm/sy°em.h
>

17 
	~<asm/£m≠h‹e.h
>

18 
	~<asm/∑ge.h
>

19 
	~<asm/±ø˚.h
>

20 
	~<asm/mmu.h
>

22 
	~<löux/smp.h
>

23 
	~<löux/ây.h
>

24 
	~<löux/£m.h
>

25 
	~<löux/sig«l.h
>

26 
	~<löux/£cuªbôs.h
>

27 
	~<löux/fs_°ru˘.h
>

29 
	gexec_domaö
;

34 
	#CSIGNAL
 0x000000f‡

	)

35 
	#CLONE_VM
 0x00000100

	)

36 
	#CLONE_FS
 0x00000200

	)

37 
	#CLONE_FILES
 0x00000400

	)

38 
	#CLONE_SIGHAND
 0x00000800

	)

39 
	#CLONE_PID
 0x00001000

	)

40 
	#CLONE_PTRACE
 0x00002000

	)

41 
	#CLONE_VFORK
 0x00004000

	)

42 
	#CLONE_PARENT
 0x00008000

	)

43 
	#CLONE_THREAD
 0x00010000

	)

45 
	#CLONE_SIGNAL
 (
CLONE_SIGHAND
 | 
CLONE_THREAD
)

	)

57 
avírun
[];

59 
	#FSHIFT
 11

	)

60 
	#FIXED_1
 (1<<
FSHIFT
Ë

	)

61 
	#LOAD_FREQ
 (5*
HZ
Ë

	)

62 
	#EXP_1
 1884

	)

63 
	#EXP_5
 2014

	)

64 
	#EXP_15
 2037

	)

66 
	#CALC_LOAD
(
lﬂd
,
exp
,
n
) \

67 
lﬂd
 *
exp
; \

68 
lﬂd
 +
n
*(
FIXED_1
-
exp
); \

69 
lﬂd
 >>
FSHIFT
;

	)

71 
	#CT_TO_SECS
(
x
Ë((xË/ 
HZ
)

	)

72 
	#CT_TO_USECS
(
x
Ë(((xË% 
HZ
Ë* 1000000/HZ)

	)

74 
ƒ_ru¬ög
, 
ƒ_thªads
;

75 
œ°_pid
;

77 
	~<löux/fs.h
>

78 
	~<löux/time.h
>

79 
	~<löux/∑øm.h
>

80 
	~<löux/ªsour˚.h
>

81 
	~<löux/timî.h
>

83 
	~<asm/¥o˚ss‹.h
>

85 
	#TASK_RUNNING
 0

	)

86 
	#TASK_INTERRUPTIBLE
 1

	)

87 
	#TASK_UNINTERRUPTIBLE
 2

	)

88 
	#TASK_ZOMBIE
 4

	)

89 
	#TASK_STOPPED
 8

	)

91 
	#__£t_èsk_°©e
(
tsk
, 
°©e_vÆue
) \

92 dÿ{ (
tsk
)->
°©e
 = (
°©e_vÆue
); } 0)

	)

93 #ifde‡
CONFIG_SMP


94 
	#£t_èsk_°©e
(
tsk
, 
°©e_vÆue
) \

95 
	`£t_mb
((
tsk
)->
°©e
, (
°©e_vÆue
))

	)

97 
	#£t_èsk_°©e
(
tsk
, 
°©e_vÆue
) \

98 
	`__£t_èsk_°©e
((
tsk
), (
°©e_vÆue
))

	)

101 
	#__£t_cuºít_°©e
(
°©e_vÆue
) \

102 dÿ{ 
cuºít
->
°©e
 = (
°©e_vÆue
); } 0)

	)

103 #ifde‡
CONFIG_SMP


104 
	#£t_cuºít_°©e
(
°©e_vÆue
) \

105 
	`£t_mb
(
cuºít
->
°©e
, (
°©e_vÆue
))

	)

107 
	#£t_cuºít_°©e
(
°©e_vÆue
) \

108 
	`__£t_cuºít_°©e
(
°©e_vÆue
)

	)

114 
	#SCHED_OTHER
 0

	)

115 
	#SCHED_FIFO
 1

	)

116 
	#SCHED_RR
 2

	)

122 
	#SCHED_YIELD
 0x10

	)

124 
	ssched_∑øm
 {

125 
	msched_¥i‹ôy
;

128 
	gcom∂ëi⁄
;

	@/usr/include/linux/skbuff.h

14 #i‚de‡
_LINUX_SKBUFF_H


15 
	#_LINUX_SKBUFF_H


	)

17 
	~<löux/c⁄fig.h
>

18 
	~<löux/kî√l.h
>

19 
	~<löux/sched.h
>

20 
	~<löux/time.h
>

21 
	~<löux/ˇche.h
>

23 
	~<asm/ty≥s.h
>

24 
	~<löux/•ölock.h
>

25 
	~<löux/mm.h
>

26 
	~<löux/highmem.h
>

28 
	#HAVE_ALLOC_SKB


	)

29 
	#HAVE_ALIGNABLE_SKB


	)

30 
	#SLAB_SKB


	)

32 
	#CHECKSUM_NONE
 0

	)

33 
	#CHECKSUM_HW
 1

	)

34 
	#CHECKSUM_UNNECESSARY
 2

	)

36 
	#SKB_DATA_ALIGN
(
X
Ë(((XË+ (
SMP_CACHE_BYTES
-1)Ë& ~(SMP_CACHE_BYTES-1))

	)

37 
	#SKB_MAX_HEAD
(
X
Ë((
PAGE_SIZE
 - (XË- (
skb_sh¨ed_öfo
))&~(
SMP_CACHE_BYTES
-1))

	)

77 #ifde‡
__i386__


78 
	#NET_CALLER
(
¨g
Ë(*(((**)&¨g)-1))

	)

80 
	#NET_CALLER
(
¨g
Ë
	`__buûtö_ªtu∫_addªss
(0)

	)

83 #ifde‡
CONFIG_NETFILTER


84 
	snf_c⁄¡øck
 {

85 
©omic_t
 
	mu£
;

86 (*
	mde°roy
)(
	mnf_c⁄¡øck
 *);

89 
	snf_˘_öfo
 {

90 
nf_c⁄¡øck
 *
	mma°î
;

94 
	ssk_buff_hód
 {

96 
sk_buff
 * 
	m√xt
;

97 
sk_buff
 * 
	m¥ev
;

99 
__u32
 
	mqÀn
;

100 
•ölock_t
 
	mlock
;

103 
	gsk_buff
;

105 
	#MAX_SKB_FRAGS
 6

	)

107 
skb_‰ag_°ru˘
 
	tskb_‰ag_t
;

109 
	sskb_‰ag_°ru˘


111 
∑ge
 *
	m∑ge
;

112 
__u16
 
	m∑ge_off£t
;

113 
__u16
 
	msize
;

119 
	sskb_sh¨ed_öfo
 {

120 
©omic_t
 
	md©¨ef
;

121 
	mƒ_‰ags
;

122 
sk_buff
 *
	m‰ag_li°
;

123 
skb_‰ag_t
 
	m‰ags
[
MAX_SKB_FRAGS
];

126 
	ssk_buff
 {

128 
sk_buff
 * 
	m√xt
;

129 
sk_buff
 * 
	m¥ev
;

131 
sk_buff_hód
 * 
	mli°
;

132 
sock
 *
	msk
;

133 
timevÆ
 
	m°amp
;

134 
√t_devi˚
 *
	mdev
;

139 
t˝hdr
 *
	mth
;

140 
udphdr
 *
	muh
;

141 
icmphdr
 *
	micmph
;

142 
igmphdr
 *
	migmph
;

143 
ùhdr
 *
	mùùh
;

144 
•xhdr
 *
	m•xh
;

145 *
	møw
;

146 } 
	mh
;

151 
ùhdr
 *
	mùh
;

152 
ùv6hdr
 *
	mùv6h
;

153 
¨phdr
 *
	m¨ph
;

154 
ùxhdr
 *
	mùxh
;

155 *
	møw
;

156 } 
	mnh
;

161 
ëhhdr
 *
	mëhî√t
;

162 *
	møw
;

163 } 
	mmac
;

165 
d°_íåy
 *
	md°
;

173 
	mcb
[48];

175 
	mÀn
;

176 
	md©a_Àn
;

177 
	mcsum
;

178 
	m__unu£d
,

179 
	m˛⁄ed
,

180 
	mpkt_ty≥
,

181 
	mù_summed
;

182 
__u32
 
	m¥i‹ôy
;

183 
©omic_t
 
	mu£rs
;

184 
	m¥Ÿocﬁ
;

185 
	m£curôy
;

186 
	måuesize
;

188 *
	mhód
;

189 *
	md©a
;

190 *
	mèû
;

191 *
	míd
;

193 (*
	mde°ru˘‹
)(
	msk_buff
 *);

194 #ifde‡
CONFIG_NETFILTER


196 
	mnfm¨k
;

198 
__u32
 
	mnfˇche
;

200 
nf_˘_öfo
 *
	mnf˘
;

201 #ifde‡
CONFIG_NETFILTER_DEBUG


202 
	mnf_debug
;

206 #i‡
deföed
(
CONFIG_HIPPI
)

208 
__u32
 
	mifõld
;

209 } 
	m¥iv©e
;

212 #ifde‡
CONFIG_NET_SCHED


213 
__u32
 
	mtc_ödex
;

217 
	#SK_WMEM_MAX
 65535

	)

218 
	#SK_RMEM_MAX
 65535

	)

	@/usr/include/linux/slab.h

7 #if !
deföed
(
_LINUX_SLAB_H
)

8 
	#_LINUX_SLAB_H


	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

4 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

6 
	~<asm/sockë.h
>

7 
	~<löux/sockios.h
>

8 
	~<löux/uio.h
>

9 
	~<löux/ty≥s.h
>

11 
	tß_Ámûy_t
;

17 
	ssockaddr
 {

18 
ß_Ámûy_t
 
	mß_Ámûy
;

19 
	mß_d©a
[14];

22 
	slögî
 {

23 
	ml_⁄off
;

24 
	ml_lögî
;

33 
	smsghdr
 {

34 * 
	mmsg_«me
;

35 
	mmsg_«mñí
;

36 
iovec
 * 
	mmsg_iov
;

37 
__kî√l_size_t
 
	mmsg_iovÀn
;

38 * 
	mmsg_c⁄åﬁ
;

39 
__kî√l_size_t
 
	mmsg_c⁄åﬁÀn
;

40 
	mmsg_Êags
;

49 
	scmsghdr
 {

50 
__kî√l_size_t
 
	mcmsg_Àn
;

51 
	mcmsg_Àvñ
;

52 
	mcmsg_ty≥
;

60 
	#__CMSG_NXTHDR
(
˘l
, 
Àn
, 
cmsg
Ë
	`__cmsg_nxthdr
((˘l),÷í),(cmsg))

	)

61 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`cmsg_nxthdr
((mhdr), (cmsg))

	)

63 
	#CMSG_ALIGN
(
Àn
Ë–(÷í)+()-1Ë& ~(()-1Ë)

	)

65 
	#CMSG_DATA
(
cmsg
Ë((*)((*)(cmsgË+ 
	`CMSG_ALIGN
((
cmsghdr
))))

	)

66 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
((
cmsghdr
)Ë+ CMSG_ALIGN÷í))

	)

67 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
((
cmsghdr
)Ë+ (Àn))

	)

69 
	#__CMSG_FIRSTHDR
(
˘l
,
Àn
Ë(÷íË>(
cmsghdr
) ? \

70 (
cmsghdr
 *)(
˘l
) : \

71 (
cmsghdr
 *)
NULL
)

	)

72 
	#CMSG_FIRSTHDR
(
msg
Ë
	`__CMSG_FIRSTHDR
((msg)->
msg_c⁄åﬁ
, (msg)->
msg_c⁄åﬁÀn
)

	)

78 #i‡ 
deföed
(
__GNUC__
)

79 
	#__KINLINE
 
__ölöe__


	)

80 #ñi‡
deföed
(
__˝lu•lus
)

81 
	#__KINLINE
 
ölöe


	)

97 
__KINLINE
 
cmsghdr
 * 
	$__cmsg_nxthdr
(*
__˘l
, 
__kî√l_size_t
 
__size
,

98 
cmsghdr
 *
__cmsg
)

100 
cmsghdr
 * 
__±r
;

102 
__±r
 = (
cmsghdr
*)(((*Ë
__cmsg
Ë+ 
	`CMSG_ALIGN
(__cmsg->
cmsg_Àn
));

103 i‡(()((*)(
__±r
+1Ë- (*Ë
__˘l
Ë> 
__size
)

104  (
cmsghdr
 *)0;

106  
__±r
;

107 
	}
}

109 
__KINLINE
 
cmsghdr
 * 
	$cmsg_nxthdr
 (
msghdr
 *
__msg
, 
cmsghdr
 *
__cmsg
)

111  
	`__cmsg_nxthdr
(
__msg
->
msg_c⁄åﬁ
, __msg->
msg_c⁄åﬁÀn
, 
__cmsg
);

112 
	}
}

116 
	#SCM_RIGHTS
 0x01

	)

117 
	#SCM_CREDENTIALS
 0x02

	)

118 
	#SCM_CONNECT
 0x03

	)

120 
	su¸ed
 {

121 
__u32
 
	mpid
;

122 
__u32
 
	muid
;

123 
__u32
 
	mgid
;

127 
	#AF_UNSPEC
 0

	)

128 
	#AF_UNIX
 1

	)

129 
	#AF_LOCAL
 1

	)

130 
	#AF_INET
 2

	)

131 
	#AF_AX25
 3

	)

132 
	#AF_IPX
 4

	)

133 
	#AF_APPLETALK
 5

	)

134 
	#AF_NETROM
 6

	)

135 
	#AF_BRIDGE
 7

	)

136 
	#AF_ATMPVC
 8

	)

137 
	#AF_X25
 9

	)

138 
	#AF_INET6
 10

	)

139 
	#AF_ROSE
 11

	)

140 
	#AF_DEC√t
 12

	)

141 
	#AF_NETBEUI
 13

	)

142 
	#AF_SECURITY
 14

	)

143 
	#AF_KEY
 15

	)

144 
	#AF_NETLINK
 16

	)

145 
	#AF_ROUTE
 
AF_NETLINK


	)

146 
	#AF_PACKET
 17

	)

147 
	#AF_ASH
 18

	)

148 
	#AF_ECONET
 19

	)

149 
	#AF_ATMSVC
 20

	)

150 
	#AF_SNA
 22

	)

151 
	#AF_IRDA
 23

	)

152 
	#AF_PPPOX
 24

	)

153 
	#AF_WANPIPE
 25

	)

154 
	#AF_BLUETOOTH
 31

	)

155 
	#AF_MAX
 32

	)

158 
	#PF_UNSPEC
 
AF_UNSPEC


	)

159 
	#PF_UNIX
 
AF_UNIX


	)

160 
	#PF_LOCAL
 
AF_LOCAL


	)

161 
	#PF_INET
 
AF_INET


	)

162 
	#PF_AX25
 
AF_AX25


	)

163 
	#PF_IPX
 
AF_IPX


	)

164 
	#PF_APPLETALK
 
AF_APPLETALK


	)

165 
	#PF_NETROM
 
AF_NETROM


	)

166 
	#PF_BRIDGE
 
AF_BRIDGE


	)

167 
	#PF_ATMPVC
 
AF_ATMPVC


	)

168 
	#PF_X25
 
AF_X25


	)

169 
	#PF_INET6
 
AF_INET6


	)

170 
	#PF_ROSE
 
AF_ROSE


	)

171 
	#PF_DEC√t
 
AF_DEC√t


	)

172 
	#PF_NETBEUI
 
AF_NETBEUI


	)

173 
	#PF_SECURITY
 
AF_SECURITY


	)

174 
	#PF_KEY
 
AF_KEY


	)

175 
	#PF_NETLINK
 
AF_NETLINK


	)

176 
	#PF_ROUTE
 
AF_ROUTE


	)

177 
	#PF_PACKET
 
AF_PACKET


	)

178 
	#PF_ASH
 
AF_ASH


	)

179 
	#PF_ECONET
 
AF_ECONET


	)

180 
	#PF_ATMSVC
 
AF_ATMSVC


	)

181 
	#PF_SNA
 
AF_SNA


	)

182 
	#PF_IRDA
 
AF_IRDA


	)

183 
	#PF_PPPOX
 
AF_PPPOX


	)

184 
	#PF_WANPIPE
 
AF_WANPIPE


	)

185 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

186 
	#PF_MAX
 
AF_MAX


	)

189 
	#SOMAXCONN
 128

	)

195 
	#MSG_OOB
 1

	)

196 
	#MSG_PEEK
 2

	)

197 
	#MSG_DONTROUTE
 4

	)

198 
	#MSG_TRYHARD
 4

	)

199 
	#MSG_CTRUNC
 8

	)

200 
	#MSG_PROBE
 0x10

	)

201 
	#MSG_TRUNC
 0x20

	)

202 
	#MSG_DONTWAIT
 0x40

	)

203 
	#MSG_EOR
 0x80

	)

204 
	#MSG_WAITALL
 0x100

	)

205 
	#MSG_FIN
 0x200

	)

206 
	#MSG_SYN
 0x400

	)

207 
	#MSG_CONFIRM
 0x800

	)

208 
	#MSG_RST
 0x1000

	)

209 
	#MSG_ERRQUEUE
 0x2000

	)

210 
	#MSG_NOSIGNAL
 0x4000

	)

211 
	#MSG_MORE
 0x8000

	)

213 
	#MSG_EOF
 
MSG_FIN


	)

217 
	#SOL_IP
 0

	)

219 
	#SOL_TCP
 6

	)

220 
	#SOL_UDP
 17

	)

221 
	#SOL_IPV6
 41

	)

222 
	#SOL_ICMPV6
 58

	)

223 
	#SOL_RAW
 255

	)

224 
	#SOL_IPX
 256

	)

225 
	#SOL_AX25
 257

	)

226 
	#SOL_ATALK
 258

	)

227 
	#SOL_NETROM
 259

	)

228 
	#SOL_ROSE
 260

	)

229 
	#SOL_DECNET
 261

	)

230 
	#SOL_X25
 262

	)

231 
	#SOL_PACKET
 263

	)

232 
	#SOL_ATM
 264

	)

233 
	#SOL_AAL
 265

	)

234 
	#SOL_IRDA
 266

	)

237 
	#IPX_TYPE
 1

	)

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

75 
	#SIOCGIFDIVERT
 0x8944

	)

76 
	#SIOCSIFDIVERT
 0x8945

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

86 
	#SIOCDARP
 0x8953

	)

87 
	#SIOCGARP
 0x8954

	)

88 
	#SIOCSARP
 0x8955

	)

91 
	#SIOCDRARP
 0x8960

	)

92 
	#SIOCGRARP
 0x8961

	)

93 
	#SIOCSRARP
 0x8962

	)

97 
	#SIOCGIFMAP
 0x8970

	)

98 
	#SIOCSIFMAP
 0x8971

	)

102 
	#SIOCADDDLCI
 0x8980

	)

103 
	#SIOCDELDLCI
 0x8981

	)

105 
	#SIOCGIFVLAN
 0x8982

	)

106 
	#SIOCSIFVLAN
 0x8983

	)

110 
	#SIOCBONDENSLAVE
 0x8990

	)

111 
	#SIOCBONDRELEASE
 0x8991

	)

112 
	#SIOCBONDSETHWADDR
 0x8992

	)

113 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

114 
	#SIOCBONDINFOQUERY
 0x8994

	)

115 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

128 
	#SIOCDEVPRIVATE
 0x89F0

	)

134 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/spinlock.h

1 #i‚de‡
__LINUX_SPINLOCK_H


2 
	#__LINUX_SPINLOCK_H


	)

	@/usr/include/linux/stat.h

1 #i‚de‡
_LINUX_STAT_H


2 
	#_LINUX_STAT_H


	)

4 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

6 
	#S_IFMT
 00170000

	)

7 
	#S_IFSOCK
 0140000

	)

8 
	#S_IFLNK
 0120000

	)

9 
	#S_IFREG
 0100000

	)

10 
	#S_IFBLK
 0060000

	)

11 
	#S_IFDIR
 0040000

	)

12 
	#S_IFCHR
 0020000

	)

13 
	#S_IFIFO
 0010000

	)

14 
	#S_ISUID
 0004000

	)

15 
	#S_ISGID
 0002000

	)

16 
	#S_ISVTX
 0001000

	)

18 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

19 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

20 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

21 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

22 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

23 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

24 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

26 
	#S_IRWXU
 00700

	)

27 
	#S_IRUSR
 00400

	)

28 
	#S_IWUSR
 00200

	)

29 
	#S_IXUSR
 00100

	)

31 
	#S_IRWXG
 00070

	)

32 
	#S_IRGRP
 00040

	)

33 
	#S_IWGRP
 00020

	)

34 
	#S_IXGRP
 00010

	)

36 
	#S_IRWXO
 00007

	)

37 
	#S_IROTH
 00004

	)

38 
	#S_IWOTH
 00002

	)

39 
	#S_IXOTH
 00001

	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

4 #unde‡
NULL


5 #i‡
deföed
(
__˝lu•lus
)

6 
	#NULL
 0

	)

8 
	#NULL
 ((*)0)

	)

11 #unde‡
off£tof


12 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

	@/usr/include/linux/sysctl.h

24 #i‚de‡
_LINUX_SYSCTL_H


25 
	#_LINUX_SYSCTL_H


	)

27 
	~<löux/kî√l.h
>

28 
	~<löux/ty≥s.h
>

29 
	~<löux/li°.h
>

31 
	gfûe
;

33 
	#CTL_MAXNAME
 10

	)

35 
	s__sys˘l_¨gs
 {

36 *
	m«me
;

37 
	m∆í
;

38 *
	mﬁdvÆ
;

39 
size_t
 *
	mﬁdÀ≈
;

40 *
	m√wvÆ
;

41 
size_t
 
	m√wÀn
;

42 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9

66 
	mBUS_ISA
=1

72 
	mKERN_OSTYPE
=1,

73 
	mKERN_OSRELEASE
=2,

74 
	mKERN_OSREV
=3,

75 
	mKERN_VERSION
=4,

76 
	mKERN_SECUREMASK
=5,

77 
	mKERN_PROF
=6,

78 
	mKERN_NODENAME
=7,

79 
	mKERN_DOMAINNAME
=8,

81 
	mKERN_CAP_BSET
=14,

82 
	mKERN_PANIC
=15,

83 
	mKERN_REALROOTDEV
=16,

85 
	mKERN_SPARC_REBOOT
=21,

86 
	mKERN_CTLALTDEL
=22,

87 
	mKERN_PRINTK
=23,

88 
	mKERN_NAMETRANS
=24,

89 
	mKERN_PPC_HTABRECLAIM
=25,

90 
	mKERN_PPC_ZEROPAGED
=26,

91 
	mKERN_PPC_POWERSAVE_NAP
=27,

92 
	mKERN_MODPROBE
=28,

93 
	mKERN_SG_BIG_BUFF
=29,

94 
	mKERN_ACCT
=30,

95 
	mKERN_PPC_L2CR
=31,

97 
	mKERN_RTSIGNR
=32,

98 
	mKERN_RTSIGMAX
=33,

100 
	mKERN_SHMMAX
=34,

101 
	mKERN_MSGMAX
=35,

102 
	mKERN_MSGMNB
=36,

103 
	mKERN_MSGPOOL
=37,

104 
	mKERN_SYSRQ
=38,

105 
	mKERN_MAX_THREADS
=39,

106 
	mKERN_RANDOM
=40,

107 
	mKERN_SHMALL
=41,

108 
	mKERN_MSGMNI
=42,

109 
	mKERN_SEM
=43,

110 
	mKERN_SPARC_STOP_A
=44,

111 
	mKERN_SHMMNI
=45,

112 
	mKERN_OVERFLOWUID
=46,

113 
	mKERN_OVERFLOWGID
=47,

114 
	mKERN_SHMPATH
=48,

115 
	mKERN_HOTPLUG
=49,

116 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

117 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

118 
	mKERN_CORE_USES_PID
=52,

119 
	mKERN_PROF_PID
=53,

120 
	mKERN_CADPID
=54,

121 
	mKERN_TAINTED
=55,

128 
	mVM_SWAPCTL
=1,

129 
	mVM_SWAPOUT
=2,

130 
	mVM_FREEPG
=3,

131 
	mVM_BDFLUSH
=4,

132 
	mVM_OVERCOMMIT_MEMORY
=5,

133 
	mVM_BUFFERMEM
=6,

134 
	mVM_PAGECACHE
=7,

135 
	mVM_PAGERDAEMON
=8,

136 
	mVM_PGT_CACHE
=9,

137 
	mVM_PAGE_CLUSTER
=10,

138 
	mVM_MAX_MAP_COUNT
=11,

139 
	mVM_MIN_READAHEAD
=12,

140 
	mVM_MAX_READAHEAD
=13,

141 
	mVM_AGING_TACTIC
=14,

142 
	mVM_INACTIVE_TARGET
=15,

143 
	mVM_DROP_BEHIND
=16,

150 
	mNET_CORE
=1,

151 
	mNET_ETHER
=2,

152 
	mNET_802
=3,

153 
	mNET_UNIX
=4,

154 
	mNET_IPV4
=5,

155 
	mNET_IPX
=6,

156 
	mNET_ATALK
=7,

157 
	mNET_NETROM
=8,

158 
	mNET_AX25
=9,

159 
	mNET_BRIDGE
=10,

160 
	mNET_ROSE
=11,

161 
	mNET_IPV6
=12,

162 
	mNET_X25
=13,

163 
	mNET_TR
=14,

164 
	mNET_DECNET
=15,

165 
	mNET_ECONET
=16,

166 
	mNET_KHTTPD
=17,

167 
	mNET_TUX
=18

173 
	mRANDOM_POOLSIZE
=1,

174 
	mRANDOM_ENTROPY_COUNT
=2,

175 
	mRANDOM_READ_THRESH
=3,

176 
	mRANDOM_WRITE_THRESH
=4,

177 
	mRANDOM_BOOT_ID
=5,

178 
	mRANDOM_UUID
=6

184 
	mBUS_ISA_MEM_BASE
=1,

185 
	mBUS_ISA_PORT_BASE
=2,

186 
	mBUS_ISA_PORT_SHIFT
=3

192 
	mNET_CORE_WMEM_MAX
=1,

193 
	mNET_CORE_RMEM_MAX
=2,

194 
	mNET_CORE_WMEM_DEFAULT
=3,

195 
	mNET_CORE_RMEM_DEFAULT
=4,

197 
	mNET_CORE_MAX_BACKLOG
=6,

198 
	mNET_CORE_FASTROUTE
=7,

199 
	mNET_CORE_MSG_COST
=8,

200 
	mNET_CORE_MSG_BURST
=9,

201 
	mNET_CORE_OPTMEM_MAX
=10,

202 
	mNET_CORE_HOT_LIST_LENGTH
=11,

203 
	mNET_CORE_DIVERT_VERSION
=12,

204 
	mNET_CORE_NO_CONG_THRESH
=13,

205 
	mNET_CORE_NO_CONG
=14,

206 
	mNET_CORE_LO_CONG
=15,

207 
	mNET_CORE_MOD_CONG
=16

218 
	mNET_UNIX_DESTROY_DELAY
=1,

219 
	mNET_UNIX_DELETE_DELAY
=2,

220 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

227 
	mNET_IPV4_FORWARD
=8,

228 
	mNET_IPV4_DYNADDR
=9,

230 
	mNET_IPV4_CONF
=16,

231 
	mNET_IPV4_NEIGH
=17,

232 
	mNET_IPV4_ROUTE
=18,

233 
	mNET_IPV4_FIB_HASH
=19,

235 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

236 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

237 
	mNET_IPV4_TCP_SACK
=35,

238 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

239 
	mNET_IPV4_DEFAULT_TTL
=37,

240 
	mNET_IPV4_AUTOCONFIG
=38,

241 
	mNET_IPV4_NO_PMTU_DISC
=39,

242 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

243 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

244 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

245 
	mNET_IPV4_IPFRAG_TIME
=43,

246 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

247 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

248 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

249 
	mNET_IPV4_TCP_RETRIES1
=47,

250 
	mNET_IPV4_TCP_RETRIES2
=48,

251 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

252 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

253 
	mNET_TCP_SYNCOOKIES
=51,

254 
	mNET_TCP_STDURG
=52,

255 
	mNET_TCP_RFC1337
=53,

256 
	mNET_TCP_SYN_TAILDROP
=54,

257 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

258 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

259 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

260 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

261 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

262 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

263 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

264 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

265 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

266 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

267 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

268 
	mNET_TCP_TW_RECYCLE
=66,

269 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

270 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

271 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

272 
	mNET_IPV4_INET_PEER_MINTTL
=70,

273 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

274 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

275 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

276 
	mNET_TCP_ORPHAN_RETRIES
=74,

277 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

278 
	mNET_TCP_SYNACK_RETRIES
=76,

279 
	mNET_TCP_MAX_ORPHANS
=77,

280 
	mNET_TCP_MAX_TW_BUCKETS
=78,

281 
	mNET_TCP_FACK
=79,

282 
	mNET_TCP_REORDERING
=80,

283 
	mNET_TCP_ECN
=81,

284 
	mNET_TCP_DSACK
=82,

285 
	mNET_TCP_MEM
=83,

286 
	mNET_TCP_WMEM
=84,

287 
	mNET_TCP_RMEM
=85,

288 
	mNET_TCP_APP_WIN
=86,

289 
	mNET_TCP_ADV_WIN_SCALE
=87,

290 
	mNET_IPV4_NONLOCAL_BIND
=88,

291 
	mNET_IPV4_ICMP_RATELIMIT
=89,

292 
	mNET_IPV4_ICMP_RATEMASK
=90

296 
	mNET_IPV4_ROUTE_FLUSH
=1,

297 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

298 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

299 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

300 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

301 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

302 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

303 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

304 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

305 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

306 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

307 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

308 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

309 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

310 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

311 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

312 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17

317 
	mNET_PROTO_CONF_ALL
=-2,

318 
	mNET_PROTO_CONF_DEFAULT
=-3

325 
	mNET_IPV4_CONF_FORWARDING
=1,

326 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

327 
	mNET_IPV4_CONF_PROXY_ARP
=3,

328 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

329 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

330 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

331 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

332 
	mNET_IPV4_CONF_RP_FILTER
=8,

333 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

334 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

335 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

336 
	mNET_IPV4_CONF_TAG
=12,

337 
	mNET_IPV4_CONF_ARPFILTER
=13

342 
	mNET_IPV6_CONF
=16,

343 
	mNET_IPV6_NEIGH
=17,

344 
	mNET_IPV6_ROUTE
=18

348 
	mNET_IPV6_ROUTE_FLUSH
=1,

349 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

350 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

351 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

352 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

353 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

354 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

355 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

356 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9

360 
	mNET_IPV6_FORWARDING
=1,

361 
	mNET_IPV6_HOP_LIMIT
=2,

362 
	mNET_IPV6_MTU
=3,

363 
	mNET_IPV6_ACCEPT_RA
=4,

364 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

365 
	mNET_IPV6_AUTOCONF
=6,

366 
	mNET_IPV6_DAD_TRANSMITS
=7,

367 
	mNET_IPV6_RTR_SOLICITS
=8,

368 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

369 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10

374 
	mNET_NEIGH_MCAST_SOLICIT
=1,

375 
	mNET_NEIGH_UCAST_SOLICIT
=2,

376 
	mNET_NEIGH_APP_SOLICIT
=3,

377 
	mNET_NEIGH_RETRANS_TIME
=4,

378 
	mNET_NEIGH_REACHABLE_TIME
=5,

379 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

380 
	mNET_NEIGH_GC_STALE_TIME
=7,

381 
	mNET_NEIGH_UNRES_QLEN
=8,

382 
	mNET_NEIGH_PROXY_QLEN
=9,

383 
	mNET_NEIGH_ANYCAST_DELAY
=10,

384 
	mNET_NEIGH_PROXY_DELAY
=11,

385 
	mNET_NEIGH_LOCKTIME
=12,

386 
	mNET_NEIGH_GC_INTERVAL
=13,

387 
	mNET_NEIGH_GC_THRESH1
=14,

388 
	mNET_NEIGH_GC_THRESH2
=15,

389 
	mNET_NEIGH_GC_THRESH3
=16

394 
	mNET_IPX_PPROP_BROADCASTING
=1,

395 
	mNET_IPX_FORWARDING
=2

401 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

402 
	mNET_ATALK_AARP_TICK_TIME
=2,

403 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

404 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

410 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

411 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

412 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

413 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

414 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

415 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

416 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

417 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

418 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

419 
	mNET_NETROM_ROUTING_CONTROL
=10,

420 
	mNET_NETROM_LINK_FAILS_COUNT
=11

425 
	mNET_AX25_IP_DEFAULT_MODE
=1,

426 
	mNET_AX25_DEFAULT_MODE
=2,

427 
	mNET_AX25_BACKOFF_TYPE
=3,

428 
	mNET_AX25_CONNECT_MODE
=4,

429 
	mNET_AX25_STANDARD_WINDOW
=5,

430 
	mNET_AX25_EXTENDED_WINDOW
=6,

431 
	mNET_AX25_T1_TIMEOUT
=7,

432 
	mNET_AX25_T2_TIMEOUT
=8,

433 
	mNET_AX25_T3_TIMEOUT
=9,

434 
	mNET_AX25_IDLE_TIMEOUT
=10,

435 
	mNET_AX25_N2
=11,

436 
	mNET_AX25_PACLEN
=12,

437 
	mNET_AX25_PROTOCOL
=13,

438 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

443 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

444 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

445 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

446 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

447 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

448 
	mNET_ROSE_ROUTING_CONTROL
=6,

449 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

450 
	mNET_ROSE_MAX_VCS
=8,

451 
	mNET_ROSE_WINDOW_SIZE
=9,

452 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

457 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

458 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

459 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

460 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

461 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5

467 
	mNET_TR_RIF_TIMEOUT
=1

472 
	mNET_DECNET_NODE_TYPE
 = 1,

473 
	mNET_DECNET_NODE_ADDRESS
 = 2,

474 
	mNET_DECNET_NODE_NAME
 = 3,

475 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

476 
	mNET_DECNET_TIME_WAIT
 = 5,

477 
	mNET_DECNET_DN_COUNT
 = 6,

478 
	mNET_DECNET_DI_COUNT
 = 7,

479 
	mNET_DECNET_DR_COUNT
 = 8,

480 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

481 
	mNET_DECNET_CONF
 = 10,

482 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

483 
	mNET_DECNET_DEBUG_LEVEL
 = 255

488 
	mNET_TUX_DOCROOT
 = 1,

489 
	mNET_TUX_LOGFILE
 = 2,

490 
	mNET_TUX_EXTCGI
 = 3,

491 
	mNET_TUX_STOP
 = 4,

492 
	mNET_TUX_CLIENTPORT
 = 5,

493 
	mNET_TUX_LOGGING
 = 6,

494 
	mNET_TUX_SERVERPORT
 = 7,

495 
	mNET_TUX_THREADS
 = 8,

496 
	mNET_TUX_KEEPALIVE_TIMEOUT
 = 9,

497 
	mNET_TUX_MAX_KEEPALIVE_BW
 = 10,

498 
	mNET_TUX_DEFER_ACCEPT
 = 11,

499 
	mNET_TUX_MAX_FREE_REQUESTS
 = 12,

500 
	mNET_TUX_MAX_CONNECT
 = 13,

501 
	mNET_TUX_MAX_BACKLOG
 = 14,

502 
	mNET_TUX_MODE_FORBIDDEN
 = 15,

503 
	mNET_TUX_MODE_ALLOWED
 = 16,

504 
	mNET_TUX_MODE_USERSPACE
 = 17,

505 
	mNET_TUX_MODE_CGI
 = 18,

506 
	mNET_TUX_CGI_UID
 = 19,

507 
	mNET_TUX_CGI_GID
 = 20,

508 
	mNET_TUX_CGIROOT
 = 21,

509 
	mNET_TUX_LOGENTRY_ALIGN_ORDER
 = 22,

510 
	mNET_TUX_NONAGLE
 = 23,

511 
	mNET_TUX_ACK_PINGPONG
 = 24,

512 
	mNET_TUX_PUSH_ALL
 = 25,

513 
	mNET_TUX_ZEROCOPY_PARSE
 = 26,

514 
	mNET_CONFIG_TUX_DEBUG_BLOCKING
 = 27,

515 
	mNET_TUX_PAGE_AGE_START
 = 28,

516 
	mNET_TUX_PAGE_AGE_ADV
 = 29,

517 
	mNET_TUX_PAGE_AGE_MAX
 = 30,

518 
	mNET_TUX_VIRTUAL_SERVER
 = 31,

519 
	mNET_TUX_MAX_OBJECT_SIZE
 = 32,

520 
	mNET_TUX_COMPRESSION
 = 33,

521 
	mNET_TUX_NOID
 = 34,

522 
	mNET_TUX_CGI_INHERIT_CPU
 = 35,

523 
	mNET_TUX_CGI_CPU_MASK
 = 36,

524 
	mNET_TUX_ZEROCOPY_HEADER
 = 37,

525 
	mNET_TUX_ZEROCOPY_SENDFILE
 = 38,

526 
	mNET_TUX_ALL_USERSPACE
 = 39,

527 
	mNET_TUX_REDIRECT_LOGGING
 = 40,

528 
	mNET_TUX_REFERER_LOGGING
 = 41,

529 
	mNET_TUX_MAX_HEADER_LEN
 = 42,

530 
	mNET_TUX_404_PAGE
 = 43,

531 
	mNET_TUX_APPLICATION_PROTOCOL
 = 44,

532 
	mNET_TUX_MAX_KEEPALIVES
 = 45,

537 
	mNET_KHTTPD_DOCROOT
 = 1,

538 
	mNET_KHTTPD_START
 = 2,

539 
	mNET_KHTTPD_STOP
 = 3,

540 
	mNET_KHTTPD_UNLOAD
 = 4,

541 
	mNET_KHTTPD_CLIENTPORT
 = 5,

542 
	mNET_KHTTPD_PERMREQ
 = 6,

543 
	mNET_KHTTPD_PERMFORBID
 = 7,

544 
	mNET_KHTTPD_LOGGING
 = 8,

545 
	mNET_KHTTPD_SERVERPORT
 = 9,

546 
	mNET_KHTTPD_DYNAMICSTRING
= 10,

547 
	mNET_KHTTPD_SLOPPYMIME
 = 11,

548 
	mNET_KHTTPD_THREADS
 = 12,

549 
	mNET_KHTTPD_MAXCONNECT
 = 13

554 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

555 
	mNET_DECNET_CONF_DDCMP
 = -3,

556 
	mNET_DECNET_CONF_PPP
 = -4,

557 
	mNET_DECNET_CONF_X25
 = -5,

558 
	mNET_DECNET_CONF_GRE
 = -6,

559 
	mNET_DECNET_CONF_ETHER
 = -7

566 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

567 
	mNET_DECNET_CONF_DEV_T1
 = 2,

568 
	mNET_DECNET_CONF_DEV_T2
 = 3,

569 
	mNET_DECNET_CONF_DEV_T3
 = 4,

570 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

571 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

572 
	mNET_DECNET_CONF_DEV_STATE
 = 7

580 
	mFS_NRINODE
=1,

581 
	mFS_STATINODE
=2,

582 
	mFS_MAXINODE
=3,

583 
	mFS_NRDQUOT
=4,

584 
	mFS_MAXDQUOT
=5,

585 
	mFS_NRFILE
=6,

586 
	mFS_MAXFILE
=7,

587 
	mFS_DENTRY
=8,

588 
	mFS_NRSUPER
=9,

589 
	mFS_MAXSUPER
=10,

590 
	mFS_OVERFLOWUID
=11,

591 
	mFS_OVERFLOWGID
=12,

592 
	mFS_LEASES
=13,

593 
	mFS_DIR_NOTIFY
=14,

594 
	mFS_LEASE_TIME
=15,

601 
	mDEV_CDROM
=1,

602 
	mDEV_HWMON
=2,

603 
	mDEV_PARPORT
=3,

604 
	mDEV_RAID
=4,

605 
	mDEV_MAC_HID
=5

610 
	mDEV_CDROM_INFO
=1,

611 
	mDEV_CDROM_AUTOCLOSE
=2,

612 
	mDEV_CDROM_AUTOEJECT
=3,

613 
	mDEV_CDROM_DEBUG
=4,

614 
	mDEV_CDROM_LOCK
=5,

615 
	mDEV_CDROM_CHECK_MEDIA
=6

620 
	mDEV_PARPORT_DEFAULT
=-3

625 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

626 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

631 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

632 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

637 
	mDEV_PARPORT_SPINTIME
=1,

638 
	mDEV_PARPORT_BASE_ADDR
=2,

639 
	mDEV_PARPORT_IRQ
=3,

640 
	mDEV_PARPORT_DMA
=4,

641 
	mDEV_PARPORT_MODES
=5,

642 
	mDEV_PARPORT_DEVICES
=6,

643 
	mDEV_PARPORT_AUTOPROBE
=16

648 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

653 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

658 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

659 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

660 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

661 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

662 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

663 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

669 
	mABI_DEFHANDLER_COFF
=1,

670 
	mABI_DEFHANDLER_ELF
=2,

671 
	mABI_DEFHANDLER_LCALL7
=3,

672 
	mABI_DEFHANDLER_LIBCSO
=4,

673 
	mABI_TRACE
=5,

674 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/linux/tcp.h

17 #i‚de‡
_LINUX_TCP_H


18 
	#_LINUX_TCP_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<asm/byã‹dî.h
>

23 
	st˝hdr
 {

24 
__u16
 
	msour˚
;

25 
__u16
 
	mde°
;

26 
__u32
 
	m£q
;

27 
__u32
 
	mack_£q
;

28 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

29 
__u16
 
	mªs1
:4,

30 
	mdoff
:4,

31 
	mfö
:1,

32 
	msyn
:1,

33 
	mr°
:1,

34 
	mpsh
:1,

35 
	mack
:1,

36 
	murg
:1,

37 
	me˚
:1,

38 
	mcwr
:1;

39 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

40 
__u16
 
	mdoff
:4,

41 
	mªs1
:4,

42 
	mcwr
:1,

43 
	me˚
:1,

44 
	murg
:1,

45 
	mack
:1,

46 
	mpsh
:1,

47 
	mr°
:1,

48 
	msyn
:1,

49 
	mfö
:1;

53 
__u16
 
	mwödow
;

54 
__u16
 
	mcheck
;

55 
__u16
 
	murg_±r
;

60 
	mTCP_ESTABLISHED
 = 1,

61 
	mTCP_SYN_SENT
,

62 
	mTCP_SYN_RECV
,

63 
	mTCP_FIN_WAIT1
,

64 
	mTCP_FIN_WAIT2
,

65 
	mTCP_TIME_WAIT
,

66 
	mTCP_CLOSE
,

67 
	mTCP_CLOSE_WAIT
,

68 
	mTCP_LAST_ACK
,

69 
	mTCP_LISTEN
,

70 
	mTCP_CLOSING
,

72 
	mTCP_MAX_STATES


75 
	#TCP_STATE_MASK
 0xF

	)

76 
	#TCP_ACTION_FIN
 (1 << 7)

	)

79 
	mTCPF_ESTABLISHED
 = (1 << 1),

80 
	mTCPF_SYN_SENT
 = (1 << 2),

81 
	mTCPF_SYN_RECV
 = (1 << 3),

82 
	mTCPF_FIN_WAIT1
 = (1 << 4),

83 
	mTCPF_FIN_WAIT2
 = (1 << 5),

84 
	mTCPF_TIME_WAIT
 = (1 << 6),

85 
	mTCPF_CLOSE
 = (1 << 7),

86 
	mTCPF_CLOSE_WAIT
 = (1 << 8),

87 
	mTCPF_LAST_ACK
 = (1 << 9),

88 
	mTCPF_LISTEN
 = (1 << 10),

89 
	mTCPF_CLOSING
 = (1 << 11)

97 
	ut˝_w‹d_hdr
 {

98 
t˝hdr
 
	mhdr
;

99 
__u32
 
	mw‹ds
[5];

102 
	#t˝_Êag_w‹d
(
ç
Ë–((
t˝_w‹d_hdr
 *)—p))->
w‹ds
 [3])

	)

105 
	mTCP_FLAG_CWR
 = 
ht⁄l
(0x00800000),

106 
	mTCP_FLAG_ECE
 = 
ht⁄l
(0x00400000),

107 
	mTCP_FLAG_URG
 = 
ht⁄l
(0x00200000),

108 
	mTCP_FLAG_ACK
 = 
ht⁄l
(0x00100000),

109 
	mTCP_FLAG_PSH
 = 
ht⁄l
(0x00080000),

110 
	mTCP_FLAG_RST
 = 
ht⁄l
(0x00040000),

111 
	mTCP_FLAG_SYN
 = 
ht⁄l
(0x00020000),

112 
	mTCP_FLAG_FIN
 = 
ht⁄l
(0x00010000),

113 
	mTCP_RESERVED_BITS
 = 
ht⁄l
(0x0FC00000),

114 
	mTCP_DATA_OFFSET
 = 
ht⁄l
(0xF0000000)

118 
	#TCP_NODELAY
 1

	)

119 
	#TCP_MAXSEG
 2

	)

120 
	#TCP_CORK
 3

	)

121 
	#TCP_KEEPIDLE
 4

	)

122 
	#TCP_KEEPINTVL
 5

	)

123 
	#TCP_KEEPCNT
 6

	)

124 
	#TCP_SYNCNT
 7

	)

125 
	#TCP_LINGER2
 8

	)

126 
	#TCP_DEFER_ACCEPT
 9

	)

127 
	#TCP_WINDOW_CLAMP
 10

	)

128 
	#TCP_INFO
 11

	)

129 
	#TCP_QUICKACK
 12

	)

131 
	#TCPI_OPT_TIMESTAMPS
 1

	)

132 
	#TCPI_OPT_SACK
 2

	)

133 
	#TCPI_OPT_WSCALE
 4

	)

134 
	#TCPI_OPT_ECN
 8

	)

136 
	et˝_ˇ_°©e


138 
	mTCP_CA_O≥n
 = 0,

139 
	#TCPF_CA_O≥n
 (1<<
TCP_CA_O≥n
)

	)

140 
	mTCP_CA_Dis‹dî
 = 1,

141 
	#TCPF_CA_Dis‹dî
 (1<<
TCP_CA_Dis‹dî
)

	)

142 
	mTCP_CA_CWR
 = 2,

143 
	#TCPF_CA_CWR
 (1<<
TCP_CA_CWR
)

	)

144 
	mTCP_CA_Recovîy
 = 3,

145 
	#TCPF_CA_Recovîy
 (1<<
TCP_CA_Recovîy
)

	)

146 
	mTCP_CA_Loss
 = 4

147 
	#TCPF_CA_Loss
 (1<<
TCP_CA_Loss
)

	)

150 
	st˝_öfo


152 
__u8
 
	mt˝i_°©e
;

153 
__u8
 
	mt˝i_ˇ_°©e
;

154 
__u8
 
	mt˝i_ªå™smôs
;

155 
__u8
 
	mt˝i_¥obes
;

156 
__u8
 
	mt˝i_backoff
;

157 
__u8
 
	mt˝i_›ti⁄s
;

158 
__u8
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

160 
__u32
 
	mt˝i_πo
;

161 
__u32
 
	mt˝i_©o
;

162 
__u32
 
	mt˝i_¢d_mss
;

163 
__u32
 
	mt˝i_rcv_mss
;

165 
__u32
 
	mt˝i_u«cked
;

166 
__u32
 
	mt˝i_ßcked
;

167 
__u32
 
	mt˝i_lo°
;

168 
__u32
 
	mt˝i_ªå™s
;

169 
__u32
 
	mt˝i_Áckës
;

172 
__u32
 
	mt˝i_œ°_d©a_£¡
;

173 
__u32
 
	mt˝i_œ°_ack_£¡
;

174 
__u32
 
	mt˝i_œ°_d©a_ªcv
;

175 
__u32
 
	mt˝i_œ°_ack_ªcv
;

178 
__u32
 
	mt˝i_pmtu
;

179 
__u32
 
	mt˝i_rcv_s°hªsh
;

180 
__u32
 
	mt˝i_πt
;

181 
__u32
 
	mt˝i_πtv¨
;

182 
__u32
 
	mt˝i_¢d_s°hªsh
;

183 
__u32
 
	mt˝i_¢d_cwnd
;

184 
__u32
 
	mt˝i_advmss
;

185 
__u32
 
	mt˝i_ª‹dîög
;

	@/usr/include/linux/timer.h

1 #i‚de‡
_LINUX_TIMER_H


2 
	#_LINUX_TIMER_H


	)

14 
	~<löux/c⁄fig.h
>

15 
	~<löux/smp.h
>

16 
	~<löux/thªads.h
>

17 
	~<löux/li°.h
>

18 
	~<löux/•ölock.h
>

23 
	#TVN_BITS
 6

	)

24 
	#TVR_BITS
 8

	)

25 
	#TVN_SIZE
 (1 << 
TVN_BITS
)

	)

26 
	#TVR_SIZE
 (1 << 
TVR_BITS
)

	)

27 
	#TVN_MASK
 (
TVN_SIZE
 - 1)

	)

28 
	#TVR_MASK
 (
TVR_SIZE
 - 1)

	)

30 
	stvec_s
 {

31 
	mödex
;

32 
li°_hód
 
	mvec
[
TVN_SIZE
];

33 } 
	ttvec_t
;

35 
	stvec_roŸ_s
 {

36 
	mödex
;

37 
li°_hód
 
	mvec
[
TVR_SIZE
];

38 } 
	ttvec_roŸ_t
;

40 
	#NOOF_TVECS
 5

	)

42 
timî_li°
 
	ttimî_t
;

44 
	stvec_t_ba£_s
 {

45 
•ölock_t
 
	mlock
;

46 
	mtimî_jiffõs
;

47 vﬁ©ûê
timî_t
 * vﬁ©ûê
	mru¬ög_timî
;

48 
tvec_roŸ_t
 
	mtv1
;

49 
tvec_t
 
	mtv2
;

50 
tvec_t
 
	mtv3
;

51 
tvec_t
 
	mtv4
;

52 
tvec_t
 
	mtv5
;

53 } 
	ttvec_ba£_t
;

62 
	stimî_li°
 {

63 
li°_hód
 
	mli°
;

64 
	mexpúes
;

65 
	md©a
;

66 (*
	mfun˘i⁄
)();

67 
tvec_ba£_t
 *
	mba£
;

70 
add_timî
(
timî_t
 * 
timî
);

71 
dñ_timî
(
timî_t
 * 
timî
);

73 #ifde‡
CONFIG_SMP


74 
dñ_timî_sync
(
timî_t
 * 
timî
);

75 
sync_timîs
();

76 
	#timî_íãr
(
ba£
, 
t
Ëdÿ{ ba£->
ru¬ög_timî
 =Å; 
	`mb
(); } 0)

	)

77 
	#timî_exô
(
ba£
Ëdÿ{ ba£->
ru¬ög_timî
 = 
NULL
; } 0)

	)

78 
	#timî_is_ru¬ög
(
ba£
,
t
Ë(ba£->
ru¬ög_timî
 =t)

	)

79 
	#timî_synchr⁄ize
(
ba£
,
t
Ë
	`timî_is_ru¬ög
(ba£,t)Ë
	`b¨rõr
()

	)

81 
	#dñ_timî_sync
(
t
Ë
	`dñ_timî
—)

	)

82 
	#sync_timîs
(Ëdÿ{ } 0)

	)

83 
	#timî_íãr
(
ba£
,
t
Ëdÿ{ } 0)

	)

84 
	#timî_exô
(
ba£
Ëdÿ{ } 0)

	)

94 
mod_timî
(
timî_t
 *
timî
, 
expúes
);

96 
ô_ªÆ_‚
();

98 
öô_timîs
();

99 
run_loˇl_timîs
();

101 
tvec_ba£_t
 
tvec_ba£s
[
NR_CPUS
];

103 
ölöe
 
	$öô_timî
(
timî_t
 * 
timî
)

105 
timî
->
li°
.
√xt
 =Åimî->li°.
¥ev
 = 
NULL
;

106 
timî
->
ba£
 = 
tvec_ba£s
 + 0;

107 
	}
}

109 
	#TIMER_DEBUG
 0

	)

110 #i‡
TIMER_DEBUG


111 
	#CHECK_BASE
(
ba£
) \

112 i‡(
ba£
 && ((ba£ < 
tvec_ba£s
Ë|| (ba£ >tvec_ba£†+ 
NR_CPUS
))) \

113 
	`BUG
()

	)

115 
	#CHECK_BASE
(
ba£
)

	)

118 
ölöe
 
	$timî_≥ndög
(c⁄° 
timî_t
 * 
timî
)

120 
	`CHECK_BASE
(
timî
->
ba£
);

121  
timî
->
li°
.
√xt
 !
NULL
;

122 
	}
}

135 
	#time_a·î
(
a
,
b
Ë(()(bË- ()◊Ë< 0)

	)

136 
	#time_bef‹e
(
a
,
b
Ë
	`time_a·î
(b,a)

	)

138 
	#time_a·î_eq
(
a
,
b
Ë(()◊Ë- ()(bË>0)

	)

139 
	#time_bef‹e_eq
(
a
,
b
Ë
	`time_a·î_eq
(b,a)

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<löux/posix_ty≥s.h
>

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__KERNEL_STRICT_NAMES


9 
__kî√l_fd_£t
 
	tfd_£t
;

10 
__kî√l_dev_t
 
	tdev_t
;

11 
__kî√l_öo_t
 
	töo_t
;

12 
__kî√l_mode_t
 
	tmode_t
;

13 
__kî√l_∆ök_t
 
	t∆ök_t
;

14 
__kî√l_off_t
 
	toff_t
;

15 
__kî√l_pid_t
 
	tpid_t
;

16 
__kî√l_daddr_t
 
	tdaddr_t
;

17 
__kî√l_key_t
 
	tkey_t
;

18 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

20 
__kî√l_uid_t
 
	tuid_t
;

21 
__kî√l_gid_t
 
	tgid_t
;

24 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

25 
__kî√l_loff_t
 
	tloff_t
;

32 #i‚de‡
_SIZE_T


33 
	#_SIZE_T


	)

34 
__kî√l_size_t
 
	tsize_t
;

37 #i‚de‡
_SSIZE_T


38 
	#_SSIZE_T


	)

39 
__kî√l_ssize_t
 
	tssize_t
;

42 #i‚de‡
_PTRDIFF_T


43 
	#_PTRDIFF_T


	)

44 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

47 #i‚de‡
_TIME_T


48 
	#_TIME_T


	)

49 
__kî√l_time_t
 
	ttime_t
;

52 #i‚de‡
_CLOCK_T


53 
	#_CLOCK_T


	)

54 
__kî√l_˛ock_t
 
	t˛ock_t
;

57 #i‚de‡
_CADDR_T


58 
	#_CADDR_T


	)

59 
__kî√l_ˇddr_t
 
	tˇddr_t
;

63 
	tu_ch¨
;

64 
	tu_sh‹t
;

65 
	tu_öt
;

66 
	tu_l⁄g
;

69 
	tunch¨
;

70 
	tush‹t
;

71 
	tuöt
;

72 
	tul⁄g
;

74 #i‚de‡
__BIT_TYPES_DEFINED__


75 
	#__BIT_TYPES_DEFINED__


	)

77 
__u8
 
	tu_öt8_t
;

78 
__s8
 
	töt8_t
;

79 
__u16
 
	tu_öt16_t
;

80 
__s16
 
	töt16_t
;

81 
__u32
 
	tu_öt32_t
;

82 
__s32
 
	töt32_t
;

86 
__u8
 
	tuöt8_t
;

87 
__u16
 
	tuöt16_t
;

88 
__u32
 
	tuöt32_t
;

90 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

91 
__u64
 
	tuöt64_t
;

92 
__u64
 
	tu_öt64_t
;

93 
__s64
 
	töt64_t
;

103 
	su°©
 {

104 
__kî√l_daddr_t
 
	mf_t‰ì
;

105 
__kî√l_öo_t
 
	mf_töode
;

106 
	mf_‚ame
[6];

107 
	mf_Âack
[6];

	@/usr/include/linux/udp.h

17 #i‚de‡
_LINUX_UDP_H


18 
	#_LINUX_UDP_H


	)

21 
	sudphdr
 {

22 
__u16
 
	msour˚
;

23 
__u16
 
	mde°
;

24 
__u16
 
	mÀn
;

25 
__u16
 
	mcheck
;

	@/usr/include/linux/version.h

1 
	#UTS_RELEASE
 "2.4.20"

	)

2 
	#LINUX_VERSION_CODE
 132116

	)

3 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/net/route.h

21 #i‚de‡
_NET_ROUTE_H


22 
	#_NET_ROUTE_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<sys/sockë.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/w‹dsize.h
>

32 
	sπíåy


34 
	mπ_∑d1
;

35 
sockaddr
 
	mπ_d°
;

36 
sockaddr
 
	mπ_g©eway
;

37 
sockaddr
 
	mπ_gímask
;

38 
	mπ_Êags
;

39 
	mπ_∑d2
;

40 
	mπ_∑d3
;

41 
	mπ_tos
;

42 
	mπ_˛ass
;

43 #i‡
__WORDSIZE
 == 64

44 
	mπ_∑d4
[3];

46 
	mπ_∑d4
;

48 
	mπ_mëric
;

49 *
	mπ_dev
;

50 
	mπ_mtu
;

51 
	mπ_wödow
;

52 
	mπ_úâ
;

55 
	#π_mss
 
π_mtu


	)

58 
	sö6_πmsg


60 
ö6_addr
 
	mπmsg_d°
;

61 
ö6_addr
 
	mπmsg_§c
;

62 
ö6_addr
 
	mπmsg_g©eway
;

63 
u_öt32_t
 
	mπmsg_ty≥
;

64 
u_öt16_t
 
	mπmsg_d°_Àn
;

65 
u_öt16_t
 
	mπmsg_§c_Àn
;

66 
u_öt32_t
 
	mπmsg_mëric
;

67 
	mπmsg_öfo
;

68 
u_öt32_t
 
	mπmsg_Êags
;

69 
	mπmsg_ifödex
;

73 
	#RTF_UP
 0x0001

	)

74 
	#RTF_GATEWAY
 0x0002

	)

76 
	#RTF_HOST
 0x0004

	)

77 
	#RTF_REINSTATE
 0x0008

	)

78 
	#RTF_DYNAMIC
 0x0010

	)

79 
	#RTF_MODIFIED
 0x0020

	)

80 
	#RTF_MTU
 0x0040

	)

81 
	#RTF_MSS
 
RTF_MTU


	)

82 
	#RTF_WINDOW
 0x0080

	)

83 
	#RTF_IRTT
 0x0100

	)

84 
	#RTF_REJECT
 0x0200

	)

85 
	#RTF_STATIC
 0x0400

	)

86 
	#RTF_XRESOLVE
 0x0800

	)

87 
	#RTF_NOFORWARD
 0x1000

	)

88 
	#RTF_THROW
 0x2000

	)

89 
	#RTF_NOPMTUDISC
 0x4000

	)

92 
	#RTF_DEFAULT
 0x00010000

	)

93 
	#RTF_ALLONLINK
 0x00020000

	)

94 
	#RTF_ADDRCONF
 0x00040000

	)

96 
	#RTF_LINKRT
 0x00100000

	)

97 
	#RTF_NONEXTHOP
 0x00200000

	)

99 
	#RTF_CACHE
 0x01000000

	)

100 
	#RTF_FLOW
 0x02000000

	)

101 
	#RTF_POLICY
 0x04000000

	)

103 
	#RTCF_VALVE
 0x00200000

	)

104 
	#RTCF_MASQ
 0x00400000

	)

105 
	#RTCF_NAT
 0x00800000

	)

106 
	#RTCF_DOREDIRECT
 0x01000000

	)

107 
	#RTCF_LOG
 0x02000000

	)

108 
	#RTCF_DIRECTSRC
 0x04000000

	)

110 
	#RTF_LOCAL
 0x80000000

	)

111 
	#RTF_INTERFACE
 0x40000000

	)

112 
	#RTF_MULTICAST
 0x20000000

	)

113 
	#RTF_BROADCAST
 0x10000000

	)

114 
	#RTF_NAT
 0x08000000

	)

116 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

117 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

119 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

121 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

122 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

124 
	#RT_CLASS_UNSPEC
 0

	)

125 
	#RT_CLASS_DEFAULT
 253

	)

127 
	#RT_CLASS_MAIN
 254

	)

128 
	#RT_CLASS_LOCAL
 255

	)

129 
	#RT_CLASS_MAX
 255

	)

132 
	#RTMSG_ACK
 
NLMSG_ACK


	)

133 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

135 
	#RTMSG_NEWDEVICE
 0x11

	)

136 
	#RTMSG_DELDEVICE
 0x12

	)

137 
	#RTMSG_NEWROUTE
 0x21

	)

138 
	#RTMSG_DELROUTE
 0x22

	)

139 
	#RTMSG_NEWRULE
 0x31

	)

140 
	#RTMSG_DELRULE
 0x32

	)

141 
	#RTMSG_CONTROL
 0x40

	)

143 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/asm/bitops.h

1 #i‚de‡
_I386_BITOPS_H


2 
	#_I386_BITOPS_H


	)

8 
	~<löux/c⁄fig.h
>

18 
	#ADDR
 (*(vﬁ©ûê*Ë
addr
)

	)

30 
__ölöe__
 
	$£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

32 
__asm__
 
	`__vﬁ©ûe__
(

34 :"=m" (
ADDR
)

35 :"Ir" (
ƒ
));

36 
	}
}

47 
__ölöe__
 
	$__£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

49 
	`__asm__
(

51 :"=m" (
ADDR
)

52 :"Ir" (
ƒ
));

53 
	}
}

65 
__ölöe__
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

67 
__asm__
 
	`__vﬁ©ûe__
(

69 :"=m" (
ADDR
)

70 :"Ir" (
ƒ
));

71 
	}
}

72 
	#smp_mb__bef‹e_˛ór_bô
(Ë
	`b¨rõr
()

	)

73 
	#smp_mb__a·î_˛ór_bô
(Ë
	`b¨rõr
()

	)

84 
__ölöe__
 
	$__ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

86 
__asm__
 
	`__vﬁ©ûe__
(

88 :"=m" (
ADDR
)

89 :"Ir" (
ƒ
));

90 
	}
}

101 
__ölöe__
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

103 
__asm__
 
	`__vﬁ©ûe__
(

105 :"=m" (
ADDR
)

106 :"Ir" (
ƒ
));

107 
	}
}

117 
__ölöe__
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

119 
ﬁdbô
;

121 
__asm__
 
	`__vﬁ©ûe__
(

123 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

124 :"Ir" (
ƒ
) : "memory");

125  
ﬁdbô
;

126 
	}
}

137 
__ölöe__
 
	$__ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

139 
ﬁdbô
;

141 
	`__asm__
(

143 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

144 :"Ir" (
ƒ
));

145  
ﬁdbô
;

146 
	}
}

156 
__ölöe__
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

158 
ﬁdbô
;

160 
__asm__
 
	`__vﬁ©ûe__
(

162 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

163 :"Ir" (
ƒ
) : "memory");

164  
ﬁdbô
;

165 
	}
}

176 
__ölöe__
 
	$__ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

178 
ﬁdbô
;

180 
	`__asm__
(

182 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

183 :"Ir" (
ƒ
));

184  
ﬁdbô
;

185 
	}
}

188 
__ölöe__
 
	$__ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

190 
ﬁdbô
;

192 
__asm__
 
	`__vﬁ©ûe__
(

194 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

195 :"Ir" (
ƒ
) : "memory");

196  
ﬁdbô
;

197 
	}
}

207 
__ölöe__
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

209 
ﬁdbô
;

211 
__asm__
 
	`__vﬁ©ûe__
(

213 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

214 :"Ir" (
ƒ
) : "memory");

215  
ﬁdbô
;

216 
	}
}

224 
ã°_bô
(
ƒ
, c⁄° vﬁ©ûê* 
addr
);

227 
__ölöe__
 
	$c⁄°™t_ã°_bô
(
ƒ
, c⁄° vﬁ©ûê* 
addr
)

229  ((1UL << (
ƒ
 & 31)Ë& (((c⁄° vﬁ©ûê*Ë
addr
)[nr >> 5])) != 0;

230 
	}
}

232 
__ölöe__
 
	$v¨übÀ_ã°_bô
(
ƒ
, vﬁ©ûê* 
addr
)

234 
ﬁdbô
;

236 
__asm__
 
	`__vﬁ©ûe__
(

238 :"Ù" (
ﬁdbô
)

239 :"m" (
ADDR
),"Ir" (
ƒ
));

240  
ﬁdbô
;

241 
	}
}

243 
	#ã°_bô
(
ƒ
,
addr
) \

244 (
	`__buûtö_c⁄°™t_p
(
ƒ
) ? \

245 
	`c⁄°™t_ã°_bô
((
ƒ
),(
addr
)) : \

246 
	`v¨übÀ_ã°_bô
((
ƒ
),(
addr
)))

	)

256 
__ölöe__
 
	$föd_fú°_zîo_bô
(* 
addr
, 
size
)

258 
d0
, 
d1
, 
d2
;

259 
ªs
;

261 i‡(!
size
)

264 
__asm__
 
	`__vﬁ©ûe__
(

275 :"=d" (
ªs
), "=&c" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

276 :"1" ((
size
 + 31Ë>> 5), "2" (
addr
), "b" (addr));

277  
ªs
;

278 
	}
}

286 
__ölöe__
 
	$föd_√xt_zîo_bô
 (* 
addr
, 
size
, 
off£t
)

288 * 
p
 = ((*Ë
addr
Ë+ (
off£t
 >> 5);

289 
£t
 = 0, 
bô
 = 
off£t
 & 31, 
ªs
;

291 i‡(
bô
) {

295 
	`__asm__
("bsfl %1,%0\n\t"

299 : "Ù" (
£t
)

300 : "r" (~(*
p
 >> 
bô
)));

301 i‡(
£t
 < (32 - 
bô
))

302  
£t
 + 
off£t
;

303 
£t
 = 32 - 
bô
;

304 
p
++;

309 
ªs
 = 
	`föd_fú°_zîo_bô
 (
p
, 
size
 - 32 * (∞- (*Ë
addr
));

310  (
off£t
 + 
£t
 + 
ªs
);

311 
	}
}

319 
__ölöe__
 
	$ffz
(
w‹d
)

321 
	`__asm__
("bsfl %1,%0"

322 :"Ù" (
w‹d
)

323 :"r" (~
w‹d
));

324  
w‹d
;

325 
	}
}

327 #w¨nög 
This
 
ö˛udefûe
 
is
 
nŸ
 
avaûabÀ
 
⁄
 
Æl
 
¨chôe˘uªs
.

328 #w¨nög 
Usög
 
kî√l
 
hódîs
 
ö
 
u£r•a˚
: 
©omicôy
 
nŸ
 
gu¨™ãed


	@/usr/include/asm/byteorder.h

1 #i‚de‡
_I386_BYTEORDER_H


2 
	#_I386_BYTEORDER_H


	)

4 
	~<asm/ty≥s.h
>

6 #w¨nög 
usög
 
¥iv©e
 
kî√l
 
hódî
; 
ö˛ude
 <
ídün
.
h
> 
ö°ód
!

7 #ifde‡
__GNUC__


11 
__ölöe__
 
__c⁄°__
 
__u32
 
	$___¨ch__swab32
(
__u32
 
x
)

13 
	`__asm__
("bsw≠ %0" : "Ù" (
x
) : "0" (x));

14  
x
;

15 
	}
}

17 
__ölöe__
 
__c⁄°__
 
__u16
 
	$___¨ch__swab16
(
__u16
 
x
)

19 
	`__asm__
("xchgb %b0,%h0" \

20 : "=q" (
x
) \

21 : "0" (
x
)); \

22  
x
;

23 
	}
}

25 
	#__¨ch__swab32
(
x
Ë
	`___¨ch__swab32
(x)

	)

26 
	#__¨ch__swab16
(
x
Ë
	`___¨ch__swab16
(x)

	)

28 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| deföed(
__KERNEL__
)

29 
	#__BYTEORDER_HAS_U64__


	)

30 
	#__SWAB_64_THRU_32__


	)

35 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/cache.h

4 #i‚de‡
__ARCH_I386_CACHE_H


5 
	#__ARCH_I386_CACHE_H


	)

7 
	~<löux/c⁄fig.h
>

10 
	#L1_CACHE_SHIFT
 (
CONFIG_X86_L1_CACHE_SHIFT
)

	)

11 
	#L1_CACHE_BYTES
 (1 << 
L1_CACHE_SHIFT
)

	)

	@/usr/include/asm/errno.h

1 #i‚de‡
_I386_ERRNO_H


2 
	#_I386_ERRNO_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

38 
	#EDEADLK
 35

	)

39 
	#ENAMETOOLONG
 36

	)

40 
	#ENOLCK
 37

	)

41 
	#ENOSYS
 38

	)

42 
	#ENOTEMPTY
 39

	)

43 
	#ELOOP
 40

	)

44 
	#EWOULDBLOCK
 
EAGAIN


	)

45 
	#ENOMSG
 42

	)

46 
	#EIDRM
 43

	)

47 
	#ECHRNG
 44

	)

48 
	#EL2NSYNC
 45

	)

49 
	#EL3HLT
 46

	)

50 
	#EL3RST
 47

	)

51 
	#ELNRNG
 48

	)

52 
	#EUNATCH
 49

	)

53 
	#ENOCSI
 50

	)

54 
	#EL2HLT
 51

	)

55 
	#EBADE
 52

	)

56 
	#EBADR
 53

	)

57 
	#EXFULL
 54

	)

58 
	#ENOANO
 55

	)

59 
	#EBADRQC
 56

	)

60 
	#EBADSLT
 57

	)

62 
	#EDEADLOCK
 
EDEADLK


	)

64 
	#EBFONT
 59

	)

65 
	#ENOSTR
 60

	)

66 
	#ENODATA
 61

	)

67 
	#ETIME
 62

	)

68 
	#ENOSR
 63

	)

69 
	#ENONET
 64

	)

70 
	#ENOPKG
 65

	)

71 
	#EREMOTE
 66

	)

72 
	#ENOLINK
 67

	)

73 
	#EADV
 68

	)

74 
	#ESRMNT
 69

	)

75 
	#ECOMM
 70

	)

76 
	#EPROTO
 71

	)

77 
	#EMULTIHOP
 72

	)

78 
	#EDOTDOT
 73

	)

79 
	#EBADMSG
 74

	)

80 
	#EOVERFLOW
 75

	)

81 
	#ENOTUNIQ
 76

	)

82 
	#EBADFD
 77

	)

83 
	#EREMCHG
 78

	)

84 
	#ELIBACC
 79

	)

85 
	#ELIBBAD
 80

	)

86 
	#ELIBSCN
 81

	)

87 
	#ELIBMAX
 82

	)

88 
	#ELIBEXEC
 83

	)

89 
	#EILSEQ
 84

	)

90 
	#ERESTART
 85

	)

91 
	#ESTRPIPE
 86

	)

92 
	#EUSERS
 87

	)

93 
	#ENOTSOCK
 88

	)

94 
	#EDESTADDRREQ
 89

	)

95 
	#EMSGSIZE
 90

	)

96 
	#EPROTOTYPE
 91

	)

97 
	#ENOPROTOOPT
 92

	)

98 
	#EPROTONOSUPPORT
 93

	)

99 
	#ESOCKTNOSUPPORT
 94

	)

100 
	#EOPNOTSUPP
 95

	)

101 
	#EPFNOSUPPORT
 96

	)

102 
	#EAFNOSUPPORT
 97

	)

103 
	#EADDRINUSE
 98

	)

104 
	#EADDRNOTAVAIL
 99

	)

105 
	#ENETDOWN
 100

	)

106 
	#ENETUNREACH
 101

	)

107 
	#ENETRESET
 102

	)

108 
	#ECONNABORTED
 103

	)

109 
	#ECONNRESET
 104

	)

110 
	#ENOBUFS
 105

	)

111 
	#EISCONN
 106

	)

112 
	#ENOTCONN
 107

	)

113 
	#ESHUTDOWN
 108

	)

114 
	#ETOOMANYREFS
 109

	)

115 
	#ETIMEDOUT
 110

	)

116 
	#ECONNREFUSED
 111

	)

117 
	#EHOSTDOWN
 112

	)

118 
	#EHOSTUNREACH
 113

	)

119 
	#EALREADY
 114

	)

120 
	#EINPROGRESS
 115

	)

121 
	#ESTALE
 116

	)

122 
	#EUCLEAN
 117

	)

123 
	#ENOTNAM
 118

	)

124 
	#ENAVAIL
 119

	)

125 
	#EISNAM
 120

	)

126 
	#EREMOTEIO
 121

	)

127 
	#EDQUOT
 122

	)

129 
	#ENOMEDIUM
 123

	)

130 
	#EMEDIUMTYPE
 124

	)

	@/usr/include/asm/mmu.h

1 #i‚de‡
__i386_MMU_H


2 
	#__i386_MMU_H


	)

9 *
	m£gmíts
;

10 
	m˝uvÆid
;

11 } 
	tmm_c⁄ãxt_t
;

	@/usr/include/asm/page.h

1 #i‚de‡
_I386_PAGE_H


2 
	#_I386_PAGE_H


	)

5 
	#PAGE_SHIFT
 12

	)

6 
	#PAGE_SIZE
 (1UL << 
PAGE_SHIFT
)

	)

7 
	#PAGE_MASK
 (~(
PAGE_SIZE
-1))

	)

	@/usr/include/asm/param.h

1 #i‚de‡
_ASMi386_PARAM_H


2 
	#_ASMi386_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 
	`sysc⁄f
(
_SC_CLK_TCK
)

	)

8 
	#EXEC_PAGESIZE
 4096

	)

10 #i‚de‡
NGROUPS


11 
	#NGROUPS
 32

	)

14 #i‚de‡
NOGROUP


15 
	#NOGROUP
 (-1)

	)

18 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/processor.h

7 #i‚de‡
__ASM_I386_PROCESSOR_H


8 
	#__ASM_I386_PROCESSOR_H


	)

10 
	~<asm/vm86.h
>

11 
	~<asm/m©h_emu.h
>

12 
	~<asm/£gmít.h
>

13 
	~<asm/∑ge.h
>

14 
	~<asm/ty≥s.h
>

15 
	~<asm/sigc⁄ãxt.h
>

16 
	~<asm/˝u„©uª.h
>

17 
	~<löux/c⁄fig.h
>

18 
	~<löux/thªads.h
>

24 
	#cuºít_ãxt_addr
(Ë({ *
pc
; 
	`__asm__
("mov»$1f,%0\n1:":"=g" (pc));Öc; })

	)

32 
	s˝uöfo_x86
 {

33 
__u8
 
	mx86
;

34 
__u8
 
	mx86_víd‹
;

35 
__u8
 
	mx86_modñ
;

36 
__u8
 
	mx86_mask
;

37 
	mwp_w‹ks_ok
;

38 
	mh…_w‹ks_ok
;

39 
	mh¨d_m©h
;

40 
	mrfu
;

41 
	m˝uid_Àvñ
;

42 
__u32
 
	mx86_ˇ∑bûôy
[
NCAPINTS
];

43 
	mx86_víd‹_id
[16];

44 
	mx86_modñ_id
[64];

45 
	mx86_ˇche_size
;

47 
__u16
 
	m˛ockmul
;

48 
	mfdiv_bug
;

49 
	mf00f_bug
;

50 
	mcoma_bug
;

51 
	mlo›s_≥r_jiffy
;

52 *
	mpgd_quick
;

53 *
	mpmd_quick
;

54 *
	m±e_quick
;

55 
	mpgèbÀ_ˇche_sz
;

58 
	#X86_VENDOR_INTEL
 0

	)

59 
	#X86_VENDOR_CYRIX
 1

	)

60 
	#X86_VENDOR_AMD
 2

	)

61 
	#X86_VENDOR_UMC
 3

	)

62 
	#X86_VENDOR_NEXGEN
 4

	)

63 
	#X86_VENDOR_CENTAUR
 5

	)

64 
	#X86_VENDOR_RISE
 6

	)

65 
	#X86_VENDOR_TRANSMETA
 7

	)

66 
	#X86_VENDOR_UNKNOWN
 0xff

	)

72 
˝uöfo_x86
 
boŸ_˝u_d©a
;

73 
tss_°ru˘
 
öô_tss
[
NR_CPUS
];

75 #ifde‡
CONFIG_SMP


76 
˝uöfo_x86
 
˝u_d©a
[];

77 
	#cuºít_˝u_d©a
 
˝u_d©a
[
	`smp_¥o˚ss‹_id
()]

	)

79 
	#˝u_d©a
 &
boŸ_˝u_d©a


	)

80 
	#cuºít_˝u_d©a
 
boŸ_˝u_d©a


	)

83 
	#˝u_has_pge
 (
	`ã°_bô
(
X86_FEATURE_PGE
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

84 
	#˝u_has_p£
 (
	`ã°_bô
(
X86_FEATURE_PSE
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

85 
	#˝u_has_∑e
 (
	`ã°_bô
(
X86_FEATURE_PAE
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

86 
	#˝u_has_tsc
 (
	`ã°_bô
(
X86_FEATURE_TSC
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

87 
	#˝u_has_de
 (
	`ã°_bô
(
X86_FEATURE_DE
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

88 
	#˝u_has_vme
 (
	`ã°_bô
(
X86_FEATURE_VME
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

89 
	#˝u_has_fx§
 (
	`ã°_bô
(
X86_FEATURE_FXSR
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

90 
	#˝u_has_xmm
 (
	`ã°_bô
(
X86_FEATURE_XMM
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

91 
	#˝u_has_Âu
 (
	`ã°_bô
(
X86_FEATURE_FPU
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

92 
	#˝u_has_≠ic
 (
	`ã°_bô
(
X86_FEATURE_APIC
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

94 
ign‹e_úq13
;

96 
idítify_˝u
(
˝uöfo_x86
 *);

97 
¥öt_˝u_öfo
(
˝uöfo_x86
 *);

98 
dodgy_tsc
();

103 
	#X86_EFLAGS_CF
 0x00000001

	)

104 
	#X86_EFLAGS_PF
 0x00000004

	)

105 
	#X86_EFLAGS_AF
 0x00000010

	)

106 
	#X86_EFLAGS_ZF
 0x00000040

	)

107 
	#X86_EFLAGS_SF
 0x00000080

	)

108 
	#X86_EFLAGS_TF
 0x00000100

	)

109 
	#X86_EFLAGS_IF
 0x00000200

	)

110 
	#X86_EFLAGS_DF
 0x00000400

	)

111 
	#X86_EFLAGS_OF
 0x00000800

	)

112 
	#X86_EFLAGS_IOPL
 0x00003000

	)

113 
	#X86_EFLAGS_NT
 0x00004000

	)

114 
	#X86_EFLAGS_RF
 0x00010000

	)

115 
	#X86_EFLAGS_VM
 0x00020000

	)

116 
	#X86_EFLAGS_AC
 0x00040000

	)

117 
	#X86_EFLAGS_VIF
 0x00080000

	)

118 
	#X86_EFLAGS_VIP
 0x00100000

	)

119 
	#X86_EFLAGS_ID
 0x00200000

	)

124 
ölöe
 
	$˝uid
(
›
, *
óx
, *
ebx
, *
ecx
, *
edx
)

126 
	`__asm__
("cpuid"

127 : "˜" (*
óx
),

128 "=b" (*
ebx
),

129 "=c" (*
ecx
),

130 "=d" (*
edx
)

131 : "0" (
›
));

132 
	}
}

137 
ölöe
 
	$˝uid_óx
(
›
)

139 
óx
;

141 
	`__asm__
("cpuid"

142 : "˜" (
óx
)

143 : "0" (
›
)

145  
óx
;

146 
	}
}

147 
ölöe
 
	$˝uid_ebx
(
›
)

149 
óx
, 
ebx
;

151 
	`__asm__
("cpuid"

152 : "˜" (
óx
), "=b" (
ebx
)

153 : "0" (
›
)

155  
ebx
;

156 
	}
}

157 
ölöe
 
	$˝uid_ecx
(
›
)

159 
óx
, 
ecx
;

161 
	`__asm__
("cpuid"

162 : "˜" (
óx
), "=c" (
ecx
)

163 : "0" (
›
)

165  
ecx
;

166 
	}
}

167 
ölöe
 
	$˝uid_edx
(
›
)

169 
óx
, 
edx
;

171 
	`__asm__
("cpuid"

172 : "˜" (
óx
), "=d" (
edx
)

173 : "0" (
›
)

175  
edx
;

176 
	}
}

181 
	#X86_CR4_VME
 0x0001

	)

182 
	#X86_CR4_PVI
 0x0002

	)

183 
	#X86_CR4_TSD
 0x0004

	)

184 
	#X86_CR4_DE
 0x0008

	)

185 
	#X86_CR4_PSE
 0x0010

	)

186 
	#X86_CR4_PAE
 0x0020

	)

187 
	#X86_CR4_MCE
 0x0040

	)

188 
	#X86_CR4_PGE
 0x0080

	)

189 
	#X86_CR4_PCE
 0x0100

	)

190 
	#X86_CR4_OSFXSR
 0x0200

	)

191 
	#X86_CR4_OSXMMEXCPT
 0x0400

	)

199 
mmu_¸4_„©uªs
;

201 
ölöe
 
	$£t_ö_¸4
 (
mask
)

203 
mmu_¸4_„©uªs
 |
mask
;

204 
	`__asm__
("movl %%cr4,%%eax\n\t"

207 : : "úg" (
mask
)

209 
	}
}

211 
ölöe
 
	$˛ór_ö_¸4
 (
mask
)

213 
mmu_¸4_„©uªs
 &~
mask
;

214 
	`__asm__
("movl %%cr4,%%eax\n\t"

217 : : "úg" (~
mask
)

219 
	}
}

224 
	#CX86_CCR0
 0xc0

	)

225 
	#CX86_CCR1
 0xc1

	)

226 
	#CX86_CCR2
 0xc2

	)

227 
	#CX86_CCR3
 0xc3

	)

228 
	#CX86_CCR4
 0xe8

	)

229 
	#CX86_CCR5
 0xe9

	)

230 
	#CX86_CCR6
 0xó

	)

231 
	#CX86_CCR7
 0xeb

	)

232 
	#CX86_DIR0
 0x„

	)

233 
	#CX86_DIR1
 0xff

	)

234 
	#CX86_ARR_BASE
 0xc4

	)

235 
	#CX86_RCR_BASE
 0xdc

	)

241 
	#gëCx86
(
ªg
Ë({ 
	`outb
(‘eg), 0x22); 
	`öb
(0x23); })

	)

243 
	#£tCx86
(
ªg
, 
d©a
) do { \

244 
	`outb
((
ªg
), 0x22); \

245 
	`outb
((
d©a
), 0x23); \

246 } 0)

	)

251 #ifde‡
CONFIG_EISA


252 
EISA_bus
;

254 
	#EISA_bus
 (0)

	)

256 
MCA_bus
;

260 
machöe_id
;

261 
machöe_submodñ_id
;

262 
BIOS_ªvisi⁄
;

263 
mˇ_≥¡ium_Êag
;

268 
	#TASK_SIZE
 (
PAGE_OFFSET
)

	)

273 
	#TASK_UNMAPPED_BASE
 (
TASK_SIZE
 / 3)

	)

278 
	#IO_BITMAP_SIZE
 32

	)

279 
	#IO_BITMAP_OFFSET
 
	`off£tof
(
tss_°ru˘
,
io_bôm≠
)

	)

280 
	#INVALID_IO_BITMAP_OFFSET
 0x8000

	)

282 
	si387_fßve_°ru˘
 {

283 
	mcwd
;

284 
	mswd
;

285 
	mtwd
;

286 
	mfù
;

287 
	mfcs
;

288 
	mfoo
;

289 
	mfos
;

290 
	m°_•a˚
[20];

291 
	m°©us
;

294 
	si387_fxßve_°ru˘
 {

295 
	mcwd
;

296 
	mswd
;

297 
	mtwd
;

298 
	mf›
;

299 
	mfù
;

300 
	mfcs
;

301 
	mfoo
;

302 
	mfos
;

303 
	mmxc§
;

304 
	mª£rved
;

305 
	m°_•a˚
[32];

306 
	mxmm_•a˚
[32];

307 
	m∑ddög
[56];

308 } 
__©åibuã__
 ((
Æig√d
 (16)));

310 
	si387_so·_°ru˘
 {

311 
	mcwd
;

312 
	mswd
;

313 
	mtwd
;

314 
	mfù
;

315 
	mfcs
;

316 
	mfoo
;

317 
	mfos
;

318 
	m°_•a˚
[20];

319 
	m·›
, 
	mch™ged
, 
	mlookahód
, 
	mno_upd©e
, 
	mrm
, 
	mÆimô
;

320 
öfo
 *
	möfo
;

321 
	míåy_eù
;

324 
	ui387_uni⁄
 {

325 
i387_fßve_°ru˘
 
	mfßve
;

326 
i387_fxßve_°ru˘
 
	mfxßve
;

327 
i387_so·_°ru˘
 
	mso·
;

331 
	m£g
;

332 } 
	tmm_£gmít_t
;

334 
	stss_°ru˘
 {

335 
	mback_lök
,
	m__blh
;

336 
	me•0
;

337 
	mss0
,
	m__ss0h
;

338 
	me•1
;

339 
	mss1
,
	m__ss1h
;

340 
	me•2
;

341 
	mss2
,
	m__ss2h
;

342 
	m__¸3
;

343 
	meù
;

344 
	meÊags
;

345 
	móx
,
	mecx
,
	medx
,
	mebx
;

346 
	me•
;

347 
	mebp
;

348 
	mesi
;

349 
	medi
;

350 
	mes
, 
	m__esh
;

351 
	mcs
, 
	m__csh
;

352 
	mss
, 
	m__ssh
;

353 
	mds
, 
	m__dsh
;

354 
	mfs
, 
	m__fsh
;

355 
	mgs
, 
	m__gsh
;

356 
	mldt
, 
	m__ldth
;

357 
	måa˚
, 
	mbôm≠
;

358 
	mio_bôm≠
[
IO_BITMAP_SIZE
+1];

362 
	m__ˇchñöe_fûÀr
[5];

365 
	sthªad_°ru˘
 {

366 
	me•0
;

367 
	meù
;

368 
	me•
;

369 
	mfs
;

370 
	mgs
;

372 
	mdebugªg
[8];

374 
	m¸2
, 
	må≠_no
, 
	mîr‹_code
;

376 
i387_uni⁄
 
	mi387
;

378 
vm86_°ru˘
 * 
	mvm86_öfo
;

379 
	ms¸ìn_bôm≠
;

380 
	mv86Êags
, 
	mv86mask
, 
	mv86mode
, 
	mßved_e•0
;

382 
	mi›îm
;

383 
	mio_bôm≠
[
IO_BITMAP_SIZE
+1];

386 
	#INIT_THREAD
 { \

394 }

	)

396 
	#INIT_MMAP
 \

397 { &
öô_mm
, 0, 0, 
NULL
, 
PAGE_SHARED
, 
VM_READ
 | 
VM_WRITE
 | 
VM_EXEC
, 1, NULL, NULL }

	)

399 
	#INIT_TSS
 { \

401 (
öô_°ack
) + () &init_stack, \

402 
__KERNEL_DS
, 0, \

410 
	`__LDT
(0),0, \

411 0, 
INVALID_IO_BITMAP_OFFSET
, \

413 }

	)

415 
	#°¨t_thªad
(
ªgs
, 
√w_eù
, 
√w_e•
) do { \

416 
	`__asm__
("movl %0,%%fs ; movl %0,%%gs": :"r" (0)); \

417 
	`£t_fs
(
USER_DS
); \

418 
ªgs
->
xds
 = 
__USER_DS
; \

419 
ªgs
->
xes
 = 
__USER_DS
; \

420 
ªgs
->
xss
 = 
__USER_DS
; \

421 
ªgs
->
xcs
 = 
__USER_CS
; \

422 
ªgs
->
eù
 = 
√w_eù
; \

423 
ªgs
->
e•
 = 
√w_e•
; \

424 } 0)

	)

427 
	gèsk_°ru˘
;

428 
	gmm_°ru˘
;

431 
ªÀa£_thªad
(
èsk_°ru˘
 *);

435 
kî√l_thªad
((*
‚
)(*), * 
¨g
, 
Êags
);

438 
	`c›y_£gmíts
(
èsk_°ru˘
 *
p
, 
mm_°ru˘
 * 
mm
);

439 
	`ªÀa£_£gmíts
(
mm_°ru˘
 * 
mm
);

444 
ölöe
 
	$thªad_ßved_pc
(
thªad_°ru˘
 *
t
)

446  ((*)
t
->
e•
)[3];

447 
	}
}

449 
gë_wch™
(
èsk_°ru˘
 *
p
);

450 
	#KSTK_EIP
(
tsk
Ë(((*)(4096+()—sk)))[1019])

	)

451 
	#KSTK_ESP
(
tsk
Ë(((*)(4096+()—sk)))[1022])

	)

453 
	#THREAD_SIZE
 (2*
PAGE_SIZE
)

	)

454 
	#Æloc_èsk_°ru˘
(Ë((
èsk_°ru˘
 *Ë
	`__gë_‰ì_∑ges
(
GFP_KERNEL
,1))

	)

455 
	#‰ì_èsk_°ru˘
(
p
Ë
	`‰ì_∑ges
((Ë’), 1)

	)

456 
	#gë_èsk_°ru˘
(
tsk
Ë
	`©omic_öc
(&
	`vút_to_∑ge
—sk)->
cou¡
)

	)

458 
	#öô_èsk
 (
öô_èsk_uni⁄
.
èsk
)

	)

459 
	#öô_°ack
 (
öô_èsk_uni⁄
.
°ack
)

	)

461 
	smi¸ocode
 {

462 
	mhdrvî
;

463 
	mªv
;

464 
	md©e
;

465 
	msig
;

466 
	mcksum
;

467 
	mldrvî
;

468 
	mpf
;

469 
	mª£rved
[5];

470 
	mbôs
[500];

474 
	#MICROCODE_IOCFREE
 
	`_IO
('6',0)

	)

477 
ölöe
 
	$ªp_n›
()

479 
__asm__
 
	`__vﬁ©ûe__
("rep;nop");

480 
	}
}

	@/usr/include/asm/ptrace.h

1 #i‚de‡
_I386_PTRACE_H


2 
	#_I386_PTRACE_H


	)

4 
	#EBX
 0

	)

5 
	#ECX
 1

	)

6 
	#EDX
 2

	)

7 
	#ESI
 3

	)

8 
	#EDI
 4

	)

9 
	#EBP
 5

	)

10 
	#EAX
 6

	)

11 
	#DS
 7

	)

12 
	#ES
 8

	)

13 
	#FS
 9

	)

14 
	#GS
 10

	)

15 
	#ORIG_EAX
 11

	)

16 
	#EIP
 12

	)

17 
	#CS
 13

	)

18 
	#EFL
 14

	)

19 
	#UESP
 15

	)

20 
	#SS
 16

	)

21 
	#FRAME_SIZE
 17

	)

26 
	s±_ªgs
 {

27 
	mebx
;

28 
	mecx
;

29 
	medx
;

30 
	mesi
;

31 
	medi
;

32 
	mebp
;

33 
	móx
;

34 
	mxds
;

35 
	mxes
;

36 
	m‹ig_óx
;

37 
	meù
;

38 
	mxcs
;

39 
	meÊags
;

40 
	me•
;

41 
	mxss
;

45 
	#PTRACE_GETREGS
 12

	)

46 
	#PTRACE_SETREGS
 13

	)

47 
	#PTRACE_GETFPREGS
 14

	)

48 
	#PTRACE_SETFPREGS
 15

	)

49 
	#PTRACE_GETFPXREGS
 18

	)

50 
	#PTRACE_SETFPXREGS
 19

	)

52 
	#PTRACE_SETOPTIONS
 21

	)

55 
	#PTRACE_O_TRACESYSGOOD
 0x00000001

	)

	@/usr/include/asm/segment.h

1 #i‚de‡
_ASM_SEGMENT_H


2 
	#_ASM_SEGMENT_H


	)

4 
	#__KERNEL_CS
 0x10

	)

5 
	#__KERNEL_DS
 0x18

	)

7 
	#__USER_CS
 0x23

	)

8 
	#__USER_DS
 0x2B

	)

	@/usr/include/asm/socket.h

1 #i‚de‡
_ASM_SOCKET_H


2 
	#_ASM_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_KEEPALIVE
 9

	)

18 
	#SO_OOBINLINE
 10

	)

19 
	#SO_NO_CHECK
 11

	)

20 
	#SO_PRIORITY
 12

	)

21 
	#SO_LINGER
 13

	)

22 
	#SO_BSDCOMPAT
 14

	)

24 
	#SO_PASSCRED
 16

	)

25 
	#SO_PEERCRED
 17

	)

26 
	#SO_RCVLOWAT
 18

	)

27 
	#SO_SNDLOWAT
 19

	)

28 
	#SO_RCVTIMEO
 20

	)

29 
	#SO_SNDTIMEO
 21

	)

32 
	#SO_SECURITY_AUTHENTICATION
 22

	)

33 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

34 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

36 
	#SO_BINDTODEVICE
 25

	)

39 
	#SO_ATTACH_FILTER
 26

	)

40 
	#SO_DETACH_FILTER
 27

	)

42 
	#SO_PEERNAME
 28

	)

43 
	#SO_TIMESTAMP
 29

	)

44 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

46 
	#SO_ACCEPTCONN
 30

	)

49 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

51 
	#SOCK_STREAM
 1

	)

52 
	#SOCK_DGRAM
 2

	)

53 
	#SOCK_RAW
 3

	)

54 
	#SOCK_RDM
 4

	)

55 
	#SOCK_SEQPACKET
 5

	)

56 
	#SOCK_PACKET
 10

	)

61 
	#SOCK_MAX
 (
SOCK_PACKET
+1)

	)

	@/usr/include/asm/sockios.h

1 #i‚de‡
__ARCH_I386_SOCKIOS__


2 
	#__ARCH_I386_SOCKIOS__


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

	@/usr/include/asm/types.h

1 #i‚de‡
_I386_TYPES_H


2 
	#_I386_TYPES_H


	)

4 
	tumode_t
;

11 
__sig√d__
 
	t__s8
;

12 
	t__u8
;

14 
__sig√d__
 
	t__s16
;

15 
	t__u16
;

17 
__sig√d__
 
	t__s32
;

18 
	t__u32
;

20 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

21 
__sig√d__
 
	t__s64
;

22 
	t__u64
;

28 #ifde‡
__KERNEL__


30 
	~<löux/c⁄fig.h
>

32 sig√d 
	ts8
;

33 
	tu8
;

35 sig√d 
	ts16
;

36 
	tu16
;

38 sig√d 
	ts32
;

39 
	tu32
;

41 sig√d 
	ts64
;

42 
	tu64
;

44 
	#BITS_PER_LONG
 32

	)

48 #ifde‡
CONFIG_HIGHMEM


49 
u64
 
	tdma_addr_t
;

51 
u32
 
	tdma_addr_t
;

53 
u64
 
	tdma64_addr_t
;

	@/usr/include/bits/wordsize.h

19 
	#__WORDSIZE
 32

	)

	@/usr/include/byteswap.h

19 #i‚de‡
_BYTESWAP_H


20 
	#_BYTESWAP_H
 1

	)

23 
	~<bôs/byãsw≠.h
>

30 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

33 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

35 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

86 #unde‡
__USE_ISOC99


87 #unde‡
__USE_POSIX


88 #unde‡
__USE_POSIX2


89 #unde‡
__USE_POSIX199309


90 #unde‡
__USE_POSIX199506


91 #unde‡
__USE_XOPEN


92 #unde‡
__USE_XOPEN_EXTENDED


93 #unde‡
__USE_UNIX98


94 #unde‡
__USE_XOPEN2K


95 #unde‡
__USE_LARGEFILE


96 #unde‡
__USE_LARGEFILE64


97 #unde‡
__USE_FILE_OFFSET64


98 #unde‡
__USE_BSD


99 #unde‡
__USE_SVID


100 #unde‡
__USE_MISC


101 #unde‡
__USE_GNU


102 #unde‡
__USE_REENTRANT


103 #unde‡
__FAVOR_BSD


104 #unde‡
__KERNEL_STRICT_NAMES


108 #i‚de‡
_LOOSE_KERNEL_NAMES


109 
	#__KERNEL_STRICT_NAMES


	)

113 
	#__USE_ANSI
 1

	)

117 #i‡
deföed
 
_BSD_SOURCE
 && \

118 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

119 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

120 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

121 
	#__FAVOR_BSD
 1

	)

125 #ifde‡
_GNU_SOURCE


126 #unde‡
_ISOC99_SOURCE


127 
	#_ISOC99_SOURCE
 1

	)

128 #unde‡
_POSIX_SOURCE


129 
	#_POSIX_SOURCE
 1

	)

130 #unde‡
_POSIX_C_SOURCE


131 
	#_POSIX_C_SOURCE
 199506L

	)

132 #unde‡
_XOPEN_SOURCE


133 
	#_XOPEN_SOURCE
 600

	)

134 #unde‡
_XOPEN_SOURCE_EXTENDED


135 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

136 #unde‡
_LARGEFILE64_SOURCE


137 
	#_LARGEFILE64_SOURCE
 1

	)

138 #unde‡
_BSD_SOURCE


139 
	#_BSD_SOURCE
 1

	)

140 #unde‡
_SVID_SOURCE


141 
	#_SVID_SOURCE
 1

	)

146 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

147 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

148 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

149 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

150 
	#_BSD_SOURCE
 1

	)

151 
	#_SVID_SOURCE
 1

	)

158 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

159 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

160 
	#__USE_ISOC99
 1

	)

165 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_POSIX_SOURCE
 && \

166 !
deföed
 
_POSIX_C_SOURCE
)

167 
	#_POSIX_SOURCE
 1

	)

168 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

169 
	#_POSIX_C_SOURCE
 2

	)

171 
	#_POSIX_C_SOURCE
 199506L

	)

175 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


176 
	#__USE_POSIX
 1

	)

179 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


180 
	#__USE_POSIX2
 1

	)

183 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

184 
	#__USE_POSIX199309
 1

	)

187 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

188 
	#__USE_POSIX199506
 1

	)

191 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

192 
	#__USE_XOPEN2K
 1

	)

195 #ifdef 
_XOPEN_SOURCE


196 
	#__USE_XOPEN
 1

	)

197 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

198 
	#__USE_XOPEN_EXTENDED
 1

	)

199 
	#__USE_UNIX98
 1

	)

200 #unde‡
_LARGEFILE_SOURCE


201 
	#_LARGEFILE_SOURCE
 1

	)

202 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

203 
	#__USE_XOPEN2K
 1

	)

204 #unde‡
__USE_ISOC99


205 
	#__USE_ISOC99
 1

	)

208 #ifde‡
_XOPEN_SOURCE_EXTENDED


209 
	#__USE_XOPEN_EXTENDED
 1

	)

214 #ifde‡
_LARGEFILE_SOURCE


215 
	#__USE_LARGEFILE
 1

	)

218 #ifde‡
_LARGEFILE64_SOURCE


219 
	#__USE_LARGEFILE64
 1

	)

222 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

223 
	#__USE_FILE_OFFSET64
 1

	)

226 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


227 
	#__USE_MISC
 1

	)

230 #ifdef 
_BSD_SOURCE


231 
	#__USE_BSD
 1

	)

234 #ifdef 
_SVID_SOURCE


235 
	#__USE_SVID
 1

	)

238 #ifdef 
_GNU_SOURCE


239 
	#__USE_GNU
 1

	)

242 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


243 
	#__USE_REENTRANT
 1

	)

247 
	#__STDC_IEC_559__
 1

	)

248 
	#__STDC_IEC_559_COMPLEX__
 1

	)

251 
	#__STDC_ISO_10646__
 200009L

	)

259 #unde‡
__GNU_LIBRARY__


260 
	#__GNU_LIBRARY__
 6

	)

264 
	#__GLIBC__
 2

	)

265 
	#__GLIBC_MINOR__
 3

	)

274 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


275 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

276 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

278 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

281 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

282 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

285 #i‡
deföed
 
__GNUC__
 \

286 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

287 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

288 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

289 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

293 #i‚de‡
__ASSEMBLER__


294 #i‚de‡
_SYS_CDEFS_H


295 
	~<sys/cdefs.h
>

300 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


301 
	#__USE_LARGEFILE
 1

	)

302 
	#__USE_LARGEFILE64
 1

	)

308 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

309 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__


310 
	#__USE_EXTERN_INLINES
 1

	)

318 
	~<gnu/°ubs.h
>

	@/usr/include/linux/binfmts.h

1 #i‚de‡
_LINUX_BINFMTS_H


2 
	#_LINUX_BINFMTS_H


	)

4 
	~<löux/±ø˚.h
>

5 
	~<löux/ˇ∑bûôy.h
>

12 
	#MAX_ARG_PAGES
 32

	)

15 
	#BINPRM_BUF_SIZE
 128

	)

	@/usr/include/linux/dcache.h

1 #i‚de‡
__LINUX_DCACHE_H


2 
	#__LINUX_DCACHE_H


	)

	@/usr/include/linux/fs_struct.h

1 #i‚de‡
_LINUX_FS_STRUCT_H


2 
	#_LINUX_FS_STRUCT_H


	)

	@/usr/include/linux/highmem.h

1 #i‚de‡
_LINUX_HIGHMEM_H


2 
	#_LINUX_HIGHMEM_H


	)

4 
	~<löux/c⁄fig.h
>

5 
	~<asm/pgÆloc.h
>

7 #ifde‡
CONFIG_HIGHMEM


9 
∑ge
 *
highmem_°¨t_∑ge
;

11 
	~<asm/highmem.h
>

14 
FASTCALL
(
ƒ_‰ì_high∑ges
());

16 
buf„r_hód
 *
¸óã_boun˚
(
rw
, buf„r_hód * 
bh_‹ig
);

18 
ölöe
 *
	$bh_km≠
(
buf„r_hód
 *
bh
)

20  
	`km≠
(
bh
->
b_∑ge
Ë+ 
	`bh_off£t
(bh);

21 
	}
}

23 
ölöe
 
	$bh_kunm≠
(
buf„r_hód
 *
bh
)

25 
	`kunm≠
(
bh
->
b_∑ge
);

26 
	}
}

32 
ölöe
 *
	$bh_km≠_úq
(
buf„r_hód
 *
bh
, *
Êags
)

34 
addr
;

36 
	`__ßve_Êags
(*
Êags
);

41 i‡(!
	`PageHighMem
(
bh
->
b_∑ge
))

42  
bh
->
b_d©a
;

47 
	`__˛i
();

48 
addr
 = (Ë
	`km≠_©omic
(
bh
->
b_∑ge
, 
KM_BH_IRQ
);

50 i‡(
addr
 & ~
PAGE_MASK
)

51 
	`BUG
();

53  (*Ë
addr
 + 
	`bh_off£t
(
bh
);

54 
	}
}

56 
ölöe
 
	$bh_kunm≠_úq
(*
buf„r
, *
Êags
)

58 
±r
 = (Ë
buf„r
 & 
PAGE_MASK
;

60 
	`kunm≠_©omic
((*Ë
±r
, 
KM_BH_IRQ
);

61 
	`__ª°‹e_Êags
(*
Êags
);

62 
	}
}

66 
ölöe
 
	$ƒ_‰ì_high∑ges
(Ë{  0; 
	}
}

68 
ölöe
 *
	$km≠
(
∑ge
 *∑geË{  
	`∑ge_addªss
’age); 
	}
}

70 
	#kunm≠
(
∑ge
Ëdÿ{ } 0)

	)

72 
	#km≠_©omic
(
∑ge
,
idx
Ë
	`km≠
’age)

	)

73 
	#kunm≠_©omic
(
∑ge
,
idx
Ë
	`kunm≠
’age)

	)

75 
	#bh_km≠
(
bh
Ë((bh)->
b_d©a
)

	)

76 
	#bh_kunm≠
(
bh
Ëdÿ{ } 0)

	)

77 
	#bh_km≠_úq
(
bh
, 
Êags
Ë((bh)->
b_d©a
)

	)

78 
	#bh_kunm≠_úq
(
bh
, 
Êags
Ëdÿ{ } 0)

	)

83 
ölöe
 
	$˛ór_u£r_high∑ge
(
∑ge
 *∑ge, 
vaddr
)

85 *
addr
 = 
	`km≠_©omic
(
∑ge
, 
KM_USER0
);

86 
	`˛ór_u£r_∑ge
(
addr
, 
vaddr
);

87 
	`kunm≠_©omic
(
addr
, 
KM_USER0
);

88 
	}
}

90 
ölöe
 
	$˛ór_high∑ge
(
∑ge
 *page)

92 
	`˛ór_∑ge
(
	`km≠
(
∑ge
));

93 
	`kunm≠
(
∑ge
);

94 
	}
}

96 
ölöe
 
	$mem˛ór_high∑ge
(
∑ge
 *∑ge, 
off£t
, 
size
)

98 *
kaddr
;

100 i‡(
off£t
 + 
size
 > 
PAGE_SIZE
)

101 
	`BUG
();

102 
kaddr
 = 
	`km≠
(
∑ge
);

103 
	`mem£t
(
kaddr
 + 
off£t
, 0, 
size
);

104 
	`kunm≠
(
∑ge
);

105 
	}
}

110 
ölöe
 
	$mem˛ór_high∑ge_Êush
(
∑ge
 *∑ge, 
off£t
, 
size
)

112 *
kaddr
;

114 i‡(
off£t
 + 
size
 > 
PAGE_SIZE
)

115 
	`BUG
();

116 
kaddr
 = 
	`km≠
(
∑ge
);

117 
	`mem£t
(
kaddr
 + 
off£t
, 0, 
size
);

118 
	`Êush_∑ge_to_øm
(
∑ge
);

119 
	`kunm≠
(
∑ge
);

120 
	}
}

122 
ölöe
 
	$c›y_u£r_high∑ge
(
∑ge
 *
to
, ∑gê*
‰om
, 
vaddr
)

124 *
v‰om
, *
vto
;

126 
v‰om
 = 
	`km≠_©omic
(
‰om
, 
KM_USER0
);

127 
vto
 = 
	`km≠_©omic
(
to
, 
KM_USER1
);

128 
	`c›y_u£r_∑ge
(
vto
, 
v‰om
, 
vaddr
);

129 
	`kunm≠_©omic
(
v‰om
, 
KM_USER0
);

130 
	`kunm≠_©omic
(
vto
, 
KM_USER1
);

131 
	}
}

133 
ölöe
 
	$c›y_high∑ge
(
∑ge
 *
to
, ∑gê*
‰om
)

135 *
v‰om
, *
vto
;

137 
v‰om
 = 
	`km≠
(
‰om
);

138 
vto
 = 
	`km≠
(
to
);

139 
	`c›y_∑ge
(
vto
, 
v‰om
);

140 
	`kunm≠
(
‰om
);

141 
	`kunm≠
(
to
);

142 
	}
}

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/kdev_t.h

1 #i‚de‡
_LINUX_KDEV_T_H


2 
	#_LINUX_KDEV_T_H


	)

3 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
_LVM_H_INCLUDE
)

64 
	#MINORBITS
 8

	)

65 
	#MINORMASK
 ((1U << 
MINORBITS
Ë- 1)

	)

67 
	tkdev_t
;

69 
	#MAJOR
(
dev
Ë((Ë((devË>> 
MINORBITS
))

	)

70 
	#MINOR
(
dev
Ë((Ë((devË& 
MINORMASK
))

	)

71 
	#HASHDEV
(
dev
Ë((Ë(dev))

	)

72 
	#NODEV
 0

	)

73 
	#MKDEV
(
ma
,
mi
Ë(((maË<< 
MINORBITS
Ë| (mi))

	)

74 
	#B_FREE
 0xfff‡

	)

76 c⁄° * 
kdev«me
(
kdev_t
);

83 
ölöe
 
	$kdev_t_to_ƒ
(
kdev_t
 
dev
) {

84  (
	`MAJOR
(
dev
)<<8Ë| 
	`MINOR
(dev);

85 
	}
}

87 
ölöe
 
kdev_t
 
	$to_kdev_t
(
dev
)

89 
maj‹
, 
mö‹
;

91 
maj‹
 = (
dev
 >> 16);

92 i‡(!
maj‹
) {

93 
maj‹
 = (
dev
 >> 8);

94 
mö‹
 = (
dev
 & 0xff);

96 
mö‹
 = (
dev
 & 0xffff);

98 
maj‹
 = (
dev
 >> 8);

99 
mö‹
 = (
dev
 & 0xff);

101  
	`MKDEV
(
maj‹
, 
mö‹
);

102 
	}
}

110 
	#MAJOR
(
dev
Ë((dev)>>8)

	)

111 
	#MINOR
(
dev
Ë((devË& 0xff)

	)

112 
	#MKDEV
(
ma
,
mi
Ë((ma)<<8 | (mi))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 32

	)

7 
	#ARG_MAX
 131072

	)

8 
	#CHILD_MAX
 999

	)

9 
	#OPEN_MAX
 256

	)

10 
	#LINK_MAX
 127

	)

11 
	#MAX_CANON
 255

	)

12 
	#MAX_INPUT
 255

	)

13 
	#NAME_MAX
 255

	)

14 
	#PATH_MAX
 4096

	)

15 
	#PIPE_BUF
 4096

	)

17 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/linkage.h

1 #i‚de‡
_LINUX_LINKAGE_H


2 
	#_LINUX_LINKAGE_H


	)

4 
	~<löux/c⁄fig.h
>

6 #ifde‡
__˝lu•lus


7 
	#CPP_ASMLINKAGE
 "C"

	)

9 
	#CPP_ASMLINKAGE


	)

12 #i‡
deföed
 
__i386__


13 
	#asmlökage
 
CPP_ASMLINKAGE
 
	`__©åibuã__
((
	`ªg∑rm
(0)))

	)

14 #ñi‡
deföed
 
__ü64__


15 
	#asmlökage
 
CPP_ASMLINKAGE
 
	`__©åibuã__
((
sysˇŒ_lökage
))

	)

17 
	#asmlökage
 
CPP_ASMLINKAGE


	)

20 
	#SYMBOL_NAME_STR
(
X
Ë#X

	)

21 
	#SYMBOL_NAME
(
X
Ë
	)
X

22 #ifde‡
__STDC__


23 
	#SYMBOL_NAME_LABEL
(
X
ËX##:

	)

25 
	#SYMBOL_NAME_LABEL
(
X
ËX :

	)

28 #ifde‡
__¨m__


29 
	#__ALIGN
 .
Æign
 0

	)

30 
	#__ALIGN_STR
 ".Æig¿0"

	)

32 #ifde‡
__mc68000__


33 
	#__ALIGN
 .
Æign
 4

	)

34 
	#__ALIGN_STR
 ".Æig¿4"

	)

36 #ifde‡
__sh__


37 
	#__ALIGN
 .
bÆign
 4

	)

38 
	#__ALIGN_STR
 ".bÆig¿4"

	)

40 #i‡
deföed
(
__i386__
Ë&& deföed(
CONFIG_X86_ALIGNMENT_16
)

41 
	#__ALIGN
 .
Æign
 16,0x90

	)

42 
	#__ALIGN_STR
 ".Æig¿16,0x90"

	)

44 
	#__ALIGN
 .
Æign
 4,0x90

	)

45 
	#__ALIGN_STR
 ".Æig¿4,0x90"

	)

51 #ifde‡
__ASSEMBLY__


53 
	#ALIGN
 
__ALIGN


	)

54 
	#ALIGN_STR
 
__ALIGN_STR


	)

56 
	#ENTRY
(
«me
) \

57 .
globl
 
	`SYMBOL_NAME
(
«me
); \

58 
ALIGN
; \

59 
	`SYMBOL_NAME_LABEL
(
«me
)

	)

	@/usr/include/linux/modversions.h

1 #îr‹ 
ModuÀs
 
should
 
√vî
 
u£
 
kî√l
-
hódîs
 
sy°em
 headers,

2 #îr‹ 
but
 
øthî
 
hódîs
 
‰om
 
™
 
≠¥›rüã
 
kî√l
-
sour˚
 
∑ckage
.

3 #îr‹ 
Ch™ge
 -
I
/
u§
/
§c
/
löux
/
ö˛ude
 (
‹
 
simû¨
Ë
to


4 #îr‹ -
I
/
lib
/
moduÀs
/
$
(
u«me
 -
r
)/
buûd
/
ö˛ude


5 #îr‹ 
to
 
buûd
 
agaö°
 
the
 
cuºíéy
-
ru¬ög
 
kî√l
.

	@/usr/include/linux/net.h

18 #i‚de‡
_LINUX_NET_H


19 
	#_LINUX_NET_H


	)

21 
	~<löux/c⁄fig.h
>

22 
	~<löux/sockë.h
>

23 
	~<löux/waô.h
>

25 
	gpﬁl_èbÀ_°ru˘
;

27 
	#NPROTO
 32

	)

30 
	#SYS_SOCKET
 1

	)

31 
	#SYS_BIND
 2

	)

32 
	#SYS_CONNECT
 3

	)

33 
	#SYS_LISTEN
 4

	)

34 
	#SYS_ACCEPT
 5

	)

35 
	#SYS_GETSOCKNAME
 6

	)

36 
	#SYS_GETPEERNAME
 7

	)

37 
	#SYS_SOCKETPAIR
 8

	)

38 
	#SYS_SEND
 9

	)

39 
	#SYS_RECV
 10

	)

40 
	#SYS_SENDTO
 11

	)

41 
	#SYS_RECVFROM
 12

	)

42 
	#SYS_SHUTDOWN
 13

	)

43 
	#SYS_SETSOCKOPT
 14

	)

44 
	#SYS_GETSOCKOPT
 15

	)

45 
	#SYS_SENDMSG
 16

	)

46 
	#SYS_RECVMSG
 17

	)

50 
	mSS_FREE
 = 0,

51 
	mSS_UNCONNECTED
,

52 
	mSS_CONNECTING
,

53 
	mSS_CONNECTED
,

54 
	mSS_DISCONNECTING


55 } 
	tsockë_°©e
;

57 
	#__SO_ACCEPTCON
 (1<<16Ë

	)

	@/usr/include/linux/netfilter_arp.h

1 #i‚de‡
__LINUX_ARP_NETFILTER_H


2 
	#__LINUX_ARP_NETFILTER_H


	)

8 
	~<löux/c⁄fig.h
>

9 
	~<löux/√tfûãr.h
>

12 
	#NF_ARP
 0

	)

15 
	#NF_ARP_IN
 0

	)

16 
	#NF_ARP_OUT
 1

	)

17 
	#NF_ARP_NUMHOOKS
 2

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

46 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/prefetch.h

10 #i‚de‡
_LINUX_PREFETCH_H


11 
	#_LINUX_PREFETCH_H


	)

13 
	~<asm/¥o˚ss‹.h
>

14 
	~<asm/ˇche.h
>

41 #i‚de‡
ARCH_HAS_PREFETCH


42 
	#ARCH_HAS_PREFETCH


	)

43 
ölöe
 
	$¥e„tch
(c⁄° *
x
Ë{;
	}
}

46 #i‚de‡
ARCH_HAS_PREFETCHW


47 
	#ARCH_HAS_PREFETCHW


	)

48 
ölöe
 
	$¥e„tchw
(c⁄° *
x
Ë{;
	}
}

51 #i‚de‡
ARCH_HAS_SPINLOCK_PREFETCH


52 
	#ARCH_HAS_SPINLOCK_PREFETCH


	)

53 
	#•ö_lock_¥e„tch
(
x
Ë
	`¥e„tchw
(x)

	)

56 #i‚de‡
PREFETCH_STRIDE


57 
	#PREFETCH_STRIDE
 (4*
L1_CACHE_BYTES
)

	)

	@/usr/include/linux/resource.h

1 #i‚de‡
_LINUX_RESOURCE_H


2 
	#_LINUX_RESOURCE_H


	)

4 
	~<löux/time.h
>

17 
	#RUSAGE_SELF
 0

	)

18 
	#RUSAGE_CHILDREN
 (-1)

	)

19 
	#RUSAGE_BOTH
 (-2Ë

	)

21 
	srußge
 {

22 
timevÆ
 
	mru_utime
;

23 
timevÆ
 
	mru_°ime
;

24 
	mru_maxrss
;

25 
	mru_ixrss
;

26 
	mru_idrss
;

27 
	mru_i§ss
;

28 
	mru_möÊt
;

29 
	mru_majÊt
;

30 
	mru_nsw≠
;

31 
	mru_öblock
;

32 
	mru_oublock
;

33 
	mru_msg¢d
;

34 
	mru_msgrcv
;

35 
	mru_nsig«ls
;

36 
	mru_nvcsw
;

37 
	mru_nivcsw
;

40 
	sæimô
 {

41 
	mæim_cur
;

42 
	mæim_max
;

45 
	#PRIO_MIN
 (-20)

	)

46 
	#PRIO_MAX
 20

	)

48 
	#PRIO_PROCESS
 0

	)

49 
	#PRIO_PGRP
 1

	)

50 
	#PRIO_USER
 2

	)

56 
	~<asm/ªsour˚.h
>

	@/usr/include/linux/securebits.h

1 #i‚de‡
_LINUX_SECUREBITS_H


2 
	#_LINUX_SECUREBITS_H
 1

	)

4 
	#SECUREBITS_DEFAULT
 0x00000000

	)

6 
£cuªbôs
;

14 
	#SECURE_NOROOT
 0

	)

19 
	#SECURE_NO_SETUID_FIXUP
 2

	)

26 
	#is£cuª
(
X
Ë–(1 << (X+1)Ë& 
SECUREBITS_DEFAULT
 ? \

27 (1 << (
X
)Ë& 
SECUREBITS_DEFAULT
 : \

28 (1 << (
X
)Ë& 
£cuªbôs
 )

	)

	@/usr/include/linux/sem.h

1 #i‚de‡
_LINUX_SEM_H


2 
	#_LINUX_SEM_H


	)

4 
	~<löux/ùc.h
>

7 
	#SEM_UNDO
 0x1000

	)

10 
	#GETPID
 11

	)

11 
	#GETVAL
 12

	)

12 
	#GETALL
 13

	)

13 
	#GETNCNT
 14

	)

14 
	#GETZCNT
 15

	)

15 
	#SETVAL
 16

	)

16 
	#SETALL
 17

	)

19 
	#SEM_STAT
 18

	)

20 
	#SEM_INFO
 19

	)

23 
	s£mid_ds
 {

24 
ùc_≥rm
 
	m£m_≥rm
;

25 
__kî√l_time_t
 
	m£m_Ÿime
;

26 
__kî√l_time_t
 
	m£m_˘ime
;

27 
£m
 *
	m£m_ba£
;

28 
£m_queue
 *
	m£m_≥ndög
;

29 
£m_queue
 **
	m£m_≥ndög_œ°
;

30 
£m_undo
 *
	mundo
;

31 
	m£m_n£ms
;

35 
	~<asm/£mbuf.h
>

38 
	s£mbuf
 {

39 
	m£m_num
;

40 
	m£m_›
;

41 
	m£m_Êg
;

45 
	u£mun
 {

46 
	mvÆ
;

47 
£mid_ds
 *
	mbuf
;

48 *
	m¨øy
;

49 
£möfo
 *
	m__buf
;

50 *
	m__∑d
;

53 
	s£möfo
 {

54 
	m£mm≠
;

55 
	m£mmni
;

56 
	m£mmns
;

57 
	m£mmnu
;

58 
	m£mm¶
;

59 
	m£m›m
;

60 
	m£mume
;

61 
	m£musz
;

62 
	m£mvmx
;

63 
	m£m´m
;

66 
	#SEMMNI
 128

	)

67 
	#SEMMSL
 250

	)

68 
	#SEMMNS
 (
SEMMNI
*
SEMMSL
Ë

	)

69 
	#SEMOPM
 32

	)

70 
	#SEMVMX
 32767

	)

73 
	#SEMUME
 
SEMOPM


	)

74 
	#SEMMNU
 
SEMMNS


	)

75 
	#SEMAEM
 (
SEMVMX
 >> 1Ë

	)

76 
	#SEMMAP
 
SEMMNS


	)

77 
	#SEMUSZ
 20

	)

	@/usr/include/linux/signal.h

1 #i‚de‡
_LINUX_SIGNAL_H


2 
	#_LINUX_SIGNAL_H


	)

4 
	~<asm/sig«l.h
>

5 
	~<asm/sigöfo.h
>

	@/usr/include/linux/smp.h

1 #i‚de‡
__LINUX_SMP_H


2 
	#__LINUX_SMP_H


	)

9 
	~<löux/c⁄fig.h
>

11 #ifde‡
CONFIG_SMP


13 
	~<löux/kî√l.h
>

14 
	~<asm/smp.h
>

24 
smp_£nd_°›
();

29 
FASTCALL
(
smp_£nd_ªscheduÀ
(
˝u
));

35 
smp_boŸ_˝us
();

40 
smp_ˇŒö
();

45 
smp_commí˚
();

50 
smp_ˇŒ_fun˘i⁄
 ((*
func
Ë(*
öfo
), *info,

51 
ªåy
, 
waô
);

56 
smp_thªads_ªady
;

58 
smp_num_˝us
;

60 vﬁ©ûê
smp_msg_d©a
;

61 vﬁ©ûê
smp_§c_˝u
;

62 vﬁ©ûê
smp_msg_id
;

64 
	#MSG_ALL_BUT_SELF
 0x8000

	)

65 
	#MSG_ALL
 0x8001

	)

67 
	#MSG_INVALIDATE_TLB
 0x0001

	)

68 
	#MSG_STOP_CPU
 0x0002

	)

71 
	#MSG_RESCHEDULE
 0x0003

	)

72 
	#MSG_CALL_FUNCTION
 0x0004

	)

80 
	#NR_CPUS
 1

	)

81 
	#smp_num_˝us
 1

	)

82 
	#smp_¥o˚ss‹_id
(Ë0

	)

83 
	#h¨d_smp_¥o˚ss‹_id
(Ë0

	)

84 
	#smp_thªads_ªady
 1

	)

85 
	#kî√l_lock
()

	)

86 
	#˝u_logiˇl_m≠
(
˝u
Ë0

	)

87 
	#˝u_numbî_m≠
(
˝u
Ë0

	)

88 
	#smp_ˇŒ_fun˘i⁄
(
func
,
öfo
,
ªåy
,
waô
Ë({ 0; 
	}
})

	)

89 
	#˝u_⁄löe_m≠
 1

	)

	@/usr/include/linux/threads.h

1 #i‚de‡
_LINUX_THREADS_H


2 
	#_LINUX_THREADS_H


	)

4 
	~<löux/c⁄fig.h
>

11 #ifde‡
CONFIG_SMP


12 
	#NR_CPUS
 32

	)

14 
	#NR_CPUS
 1

	)

17 
	#MIN_THREADS_LEFT_FOR_ROOT
 4

	)

22 
	#PID_MAX
 0x8000

	)

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<asm/∑øm.h
>

5 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

17 
	stimevÆ
 {

18 
time_t
 
	mtv_£c
;

19 
su£c⁄ds_t
 
	mtv_u£c
;

22 
	stimez⁄e
 {

23 
	mtz_möuãswe°
;

24 
	mtz_d°time
;

27 
	#NFDBITS
 
__NFDBITS


	)

29 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

30 
	#FD_SET
(
fd
,
fd£ç
Ë
	`__FD_SET
(fd,fd£ç)

	)

31 
	#FD_CLR
(
fd
,
fd£ç
Ë
	`__FD_CLR
(fd,fd£ç)

	)

32 
	#FD_ISSET
(
fd
,
fd£ç
Ë
	`__FD_ISSET
(fd,fd£ç)

	)

33 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
(fd£ç)

	)

39 
	#ITIMER_REAL
 0

	)

40 
	#ITIMER_VIRTUAL
 1

	)

41 
	#ITIMER_PROF
 2

	)

43 
	sôimî•ec
 {

44 
time•ec
 
	mô_öãrvÆ
;

45 
time•ec
 
	mô_vÆue
;

48 
	sôimîvÆ
 {

49 
timevÆ
 
	mô_öãrvÆ
;

50 
timevÆ
 
	mô_vÆue
;

	@/usr/include/linux/times.h

1 #i‚de‡
_LINUX_TIMES_H


2 
	#_LINUX_TIMES_H


	)

4 
	stms
 {

5 
˛ock_t
 
	mtms_utime
;

6 
˛ock_t
 
	mtms_°ime
;

7 
˛ock_t
 
	mtms_cutime
;

8 
˛ock_t
 
	mtms_c°ime
;

	@/usr/include/linux/timex.h

51 #i‚de‡
_LINUX_TIMEX_H


52 
	#_LINUX_TIMEX_H


	)

54 
	~<asm/∑øm.h
>

56 * 
SHIFT_KG
 
™d
 
SHIFT_KF
 
e°ablish
 
the
 
dampög
 
of
Åhê
PLL
ánd 
¨e
 
cho£n


57 * 
a
 
¶ighéy
 
undîdam≥d
 
c⁄vîgí˚
 
	gch¨a˘îi°ic
. 
SHIFT_KH


58 * 
e°ablishes
 
the
 
dampög
 
of
Åhê
FLL
 
™d
 
is
 
cho£n
 
by
 
wisdom
ánd 
bœck


59 * 
	g¨t
.

61 * 
MAXTC
 
e°ablishes
 
the
 
maximum
 
time
 
c⁄°™t
 
of
Åhê
	gPLL
. 
Wôh
Åhe

62 * 
SHIFT_KG
 
™d
 
SHIFT_KF
 
vÆues
 
giví
ánd 
a
 
time
 
c⁄°™t
 
ønge
 
‰om


63 * 
zîo
 
to
 
	gMAXTC
, 
the
 
PLL
 
wûl
 
c⁄vîge
 
	gö
 15 
möuãs
 
	gto
 16 
	ghours
,

64 * 
	gª•e˘ivñy
.

66 
	#SHIFT_KG
 6

	)

67 
	#SHIFT_KF
 16

	)

68 
	#SHIFT_KH
 2

	)

69 
	#MAXTC
 6

	)

85 
	#SHIFT_SCALE
 22

	)

86 
	#SHIFT_UPDATE
 (
SHIFT_KG
 + 
MAXTC
Ë

	)

87 
	#SHIFT_USEC
 16

	)

88 
	#FINEUSEC
 (1L << 
SHIFT_SCALE
Ë

	)

90 
	#MAXPHASE
 512000L

	)

91 
	#MAXFREQ
 (512L << 
SHIFT_USEC
Ë

	)

92 
	#MAXTIME
 (200L << 
PPS_AVG
Ë

	)

93 
	#MINSEC
 16L

	)

94 
	#MAXSEC
 1200L

	)

95 
	#NTP_PHASE_LIMIT
 (
MAXPHASE
 << 5Ë

	)

117 
	#PPS_AVG
 2

	)

118 
	#PPS_SHIFT
 2

	)

119 
	#PPS_SHIFTMAX
 8

	)

120 
	#PPS_VALID
 120

	)

121 
	#MAXGLITCH
 30

	)

126 
	~<asm/timex.h
>

129 
	#LATCH
 ((
CLOCK_TICK_RATE
 + 
HZ
/2Ë/ HZË

	)

135 
	stimex
 {

136 
	mmodes
;

137 
	moff£t
;

138 
	m‰eq
;

139 
	mmaxîr‹
;

140 
	me°îr‹
;

141 
	m°©us
;

142 
	mc⁄°™t
;

143 
	m¥ecisi⁄
;

144 
	mtﬁî™˚
;

147 
timevÆ
 
	mtime
;

148 
	mtick
;

150 
	mµs‰eq
;

151 
	mjôãr
;

152 
	mshi·
;

153 
	m°abû
;

154 
	mjô˙t
;

155 
	mˇl˙t
;

156 
	mîr˙t
;

157 
	m°b˙t
;

167 
	#ADJ_OFFSET
 0x0001

	)

168 
	#ADJ_FREQUENCY
 0x0002

	)

169 
	#ADJ_MAXERROR
 0x0004

	)

170 
	#ADJ_ESTERROR
 0x0008

	)

171 
	#ADJ_STATUS
 0x0010

	)

172 
	#ADJ_TIMECONST
 0x0020

	)

173 
	#ADJ_TICK
 0x4000

	)

174 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

177 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

178 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

179 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

180 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

181 
	#MOD_STATUS
 
ADJ_STATUS


	)

182 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

183 
	#MOD_CLKB
 
ADJ_TICK


	)

184 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

190 
	#STA_PLL
 0x0001

	)

191 
	#STA_PPSFREQ
 0x0002

	)

192 
	#STA_PPSTIME
 0x0004

	)

193 
	#STA_FLL
 0x0008

	)

195 
	#STA_INS
 0x0010

	)

196 
	#STA_DEL
 0x0020

	)

197 
	#STA_UNSYNC
 0x0040

	)

198 
	#STA_FREQHOLD
 0x0080

	)

200 
	#STA_PPSSIGNAL
 0x0100

	)

201 
	#STA_PPSJITTER
 0x0200

	)

202 
	#STA_PPSWANDER
 0x0400

	)

203 
	#STA_PPSERROR
 0x0800

	)

205 
	#STA_CLOCKERR
 0x1000

	)

207 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

208 
STA_PPSERROR
 | 
STA_CLOCKERR
Ë

	)

213 
	#TIME_OK
 0

	)

214 
	#TIME_INS
 1

	)

215 
	#TIME_DEL
 2

	)

216 
	#TIME_OOP
 3

	)

217 
	#TIME_WAIT
 4

	)

218 
	#TIME_ERROR
 5

	)

219 
	#TIME_BAD
 
TIME_ERROR


	)

	@/usr/include/linux/tty.h

1 #i‚de‡
_LINUX_TTY_H


2 
	#_LINUX_TTY_H


	)

12 
	#MIN_NR_CONSOLES
 1

	)

13 
	#MAX_NR_CONSOLES
 63

	)

14 
	#MAX_NR_USER_CONSOLES
 63

	)

	@/usr/include/linux/uio.h

1 #i‚de‡
__LINUX_UIO_H


2 
	#__LINUX_UIO_H


	)

4 
	~<löux/ty≥s.h
>

19 
	siovec


21 *
	miov_ba£
;

22 
__kî√l_size_t
 
	miov_Àn
;

29 
	#UIO_FASTIOV
 8

	)

30 
	#UIO_MAXIOV
 1024

	)

32 
	#UIO_MAXIOV
 16

	)

	@/usr/include/linux/vfs.h

1 #i‚de‡
_LINUX_VFS_H


2 
	#_LINUX_VFS_H


	)

4 
	~<asm/°©fs.h
>

	@/usr/include/linux/wait.h

1 #i‚de‡
_LINUX_WAIT_H


2 
	#_LINUX_WAIT_H


	)

4 
	#WNOHANG
 0x00000001

	)

5 
	#WUNTRACED
 0x00000002

	)

7 
	#__WNOTHREAD
 0x20000000

	)

8 
	#__WALL
 0x40000000

	)

9 
	#__WCLONE
 0x80000000

	)

	@/usr/include/netinet/in.h

19 #i‚def 
_NETINET_IN_H


20 
	#_NETINET_IN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°döt.h
>

24 
	~<sys/sockë.h
>

25 
	~<bôs/ty≥s.h
>

28 
__BEGIN_DECLS


33 
	mIPPROTO_IP
 = 0,

34 
	#IPPROTO_IP
 
IPPROTO_IP


	)

35 
	mIPPROTO_HOPOPTS
 = 0,

36 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

37 
	mIPPROTO_ICMP
 = 1,

38 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

39 
	mIPPROTO_IGMP
 = 2,

40 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

41 
	mIPPROTO_IPIP
 = 4,

42 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

43 
	mIPPROTO_TCP
 = 6,

44 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

45 
	mIPPROTO_EGP
 = 8,

46 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

47 
	mIPPROTO_PUP
 = 12,

48 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

49 
	mIPPROTO_UDP
 = 17,

50 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

51 
	mIPPROTO_IDP
 = 22,

52 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

53 
	mIPPROTO_TP
 = 29,

54 
	#IPPROTO_TP
 
IPPROTO_TP


	)

55 
	mIPPROTO_IPV6
 = 41,

56 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

57 
	mIPPROTO_ROUTING
 = 43,

58 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

59 
	mIPPROTO_FRAGMENT
 = 44,

60 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

61 
	mIPPROTO_RSVP
 = 46,

62 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

63 
	mIPPROTO_GRE
 = 47,

64 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

65 
	mIPPROTO_ESP
 = 50,

66 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

67 
	mIPPROTO_AH
 = 51,

68 
	#IPPROTO_AH
 
IPPROTO_AH


	)

69 
	mIPPROTO_ICMPV6
 = 58,

70 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

71 
	mIPPROTO_NONE
 = 59,

72 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

73 
	mIPPROTO_DSTOPTS
 = 60,

74 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

75 
	mIPPROTO_MTP
 = 92,

76 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

77 
	mIPPROTO_ENCAP
 = 98,

78 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

79 
	mIPPROTO_PIM
 = 103,

80 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

81 
	mIPPROTO_COMP
 = 108,

82 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

83 
	mIPPROTO_SCTP
 = 132,

84 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

85 
	mIPPROTO_RAW
 = 255,

86 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

87 
	mIPPROTO_MAX


92 
uöt16_t
 
	tö_p‹t_t
;

97 
	mIPPORT_ECHO
 = 7,

98 
	mIPPORT_DISCARD
 = 9,

99 
	mIPPORT_SYSTAT
 = 11,

100 
	mIPPORT_DAYTIME
 = 13,

101 
	mIPPORT_NETSTAT
 = 15,

102 
	mIPPORT_FTP
 = 21,

103 
	mIPPORT_TELNET
 = 23,

104 
	mIPPORT_SMTP
 = 25,

105 
	mIPPORT_TIMESERVER
 = 37,

106 
	mIPPORT_NAMESERVER
 = 42,

107 
	mIPPORT_WHOIS
 = 43,

108 
	mIPPORT_MTP
 = 57,

110 
	mIPPORT_TFTP
 = 69,

111 
	mIPPORT_RJE
 = 77,

112 
	mIPPORT_FINGER
 = 79,

113 
	mIPPORT_TTYLINK
 = 87,

114 
	mIPPORT_SUPDUP
 = 95,

117 
	mIPPORT_EXECSERVER
 = 512,

118 
	mIPPORT_LOGINSERVER
 = 513,

119 
	mIPPORT_CMDSERVER
 = 514,

120 
	mIPPORT_EFSSERVER
 = 520,

123 
	mIPPORT_BIFFUDP
 = 512,

124 
	mIPPORT_WHOSERVER
 = 513,

125 
	mIPPORT_ROUTESERVER
 = 520,

128 
	mIPPORT_RESERVED
 = 1024,

131 
	mIPPORT_USERRESERVED
 = 5000

136 
uöt32_t
 
	tö_addr_t
;

137 
	sö_addr


139 
ö_addr_t
 
	ms_addr
;

148 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

149 
	#IN_CLASSA_NET
 0xff000000

	)

150 
	#IN_CLASSA_NSHIFT
 24

	)

151 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

152 
	#IN_CLASSA_MAX
 128

	)

154 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

155 
	#IN_CLASSB_NET
 0xffff0000

	)

156 
	#IN_CLASSB_NSHIFT
 16

	)

157 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

158 
	#IN_CLASSB_MAX
 65536

	)

160 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

161 
	#IN_CLASSC_NET
 0xffffff00

	)

162 
	#IN_CLASSC_NSHIFT
 8

	)

163 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

165 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

166 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

168 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

169 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

172 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

174 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

176 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

179 
	#IN_LOOPBACKNET
 127

	)

181 #i‚de‡
INADDR_LOOPBACK


182 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

186 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

187 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

188 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

189 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

193 
	sö6_addr


197 
uöt8_t
 
	mu6_addr8
[16];

198 
uöt16_t
 
	mu6_addr16
[8];

199 
uöt32_t
 
	mu6_addr32
[4];

200 } 
	mö6_u
;

201 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

202 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

203 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

206 c⁄° 
ö6_addr
 
ö6addr_™y
;

207 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

208 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

209 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

211 
	#INET_ADDRSTRLEN
 16

	)

212 
	#INET6_ADDRSTRLEN
 46

	)

215 
	~<bôs/sockë.h
>

219 
	ssockaddr_ö


221 
__SOCKADDR_COMMON
 (
sö_
);

222 
ö_p‹t_t
 
	msö_p‹t
;

223 
ö_addr
 
	msö_addr
;

226 
	msö_zîo
[ (
sockaddr
) -

227 
__SOCKADDR_COMMON_SIZE
 -

228  (
ö_p‹t_t
) -

229  (
ö_addr
)];

233 
	ssockaddr_ö6


235 
__SOCKADDR_COMMON
 (
sö6_
);

236 
ö_p‹t_t
 
	msö6_p‹t
;

237 
uöt32_t
 
	msö6_Êowöfo
;

238 
ö6_addr
 
	msö6_addr
;

239 
uöt32_t
 
	msö6_sc›e_id
;

243 
	sùv6_mªq


246 
ö6_addr
 
	mùv6mr_mu…üddr
;

249 
	mùv6mr_öãrÁ˚
;

253 
	~<bôs/ö.h
>

262 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

263 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

264 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

265 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

266 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

267 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

268 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	~<ídün.h
>

273 
	~<bôs/byãsw≠.h
>

275 #ifde‡
__OPTIMIZE__


279 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


282 
	#¡ohl
(
x
Ë(x)

	)

283 
	#¡ohs
(
x
Ë(x)

	)

284 
	#ht⁄l
(
x
Ë(x)

	)

285 
	#ht⁄s
(
x
Ë(x)

	)

287 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


288 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

289 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

290 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

291 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

296 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

297 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

298 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

299 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

300 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

302 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

303 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

304 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

305 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

306 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

308 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

310 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

311 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

312 =
	`ht⁄l
 (0x„800000))

	)

314 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

315 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

316 =
	`ht⁄l
 (0x„c00000))

	)

318 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

319 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

320 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

321 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

323 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

324 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

325 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

326 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

327 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

329 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

330 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

331 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

332 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

333 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

336 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

339 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

340 
__THROW
;

343 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

344 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

345 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

347 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

348 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

349 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

351 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

352 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

353 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

355 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

356 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

357 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

359 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

360 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

361 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

364 
	sö6_pktöfo


366 
ö6_addr
 
ùi6_addr
;

367 
ùi6_ifödex
;

371 #ifde‡
__USE_GNU


373 
	`öë6_›ti⁄_•a˚
 (
__nbyãs
);

374 
	`öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

375 
__ty≥
);

376 
	`öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

377 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

378 
__∂usy
);

379 
uöt8_t
 *
	`öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

380 
__mu…x
, 
__∂usy
);

381 
	`öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

382 
uöt8_t
 **
__çåp
);

383 
	`öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

384 
uöt8_t
 **
__çåp
, 
__ty≥
);

387 
__END_DECLS


	@/usr/include/sys/socket.h

20 #i‚def 
_SYS_SOCKET_H


21 
	#_SYS_SOCKET_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


27 
	~<sys/uio.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

35 
	~<bôs/sockë.h
>

37 #ifde‡
__USE_BSD


40 
	sosockaddr


42 
	mß_Ámûy
;

43 
	mß_d©a
[14];

51 
	mSHUT_RD
 = 0,

52 
	#SHUT_RD
 
SHUT_RD


	)

53 
	mSHUT_WR
,

54 
	#SHUT_WR
 
SHUT_WR


	)

55 
	mSHUT_RDWR


56 
	#SHUT_RDWR
 
SHUT_RDWR


	)

65 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


66 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

67 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

71 
	#__SOCKADDR_ALLTYPES
 \

72 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

73 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

74 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

86 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

87 uni⁄ { 
	m__SOCKADDR_ALLTYPES


88 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

89 #unde‡
__SOCKADDR_ONETYPE


90 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

91 uni⁄ { 
	m__SOCKADDR_ALLTYPES


92 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

93 #unde‡
__SOCKADDR_ONETYPE


100 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

106 
	`sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

107 
__fds
[2]Ë
__THROW
;

110 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

111 
__THROW
;

114 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

115 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

124 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

128 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

129 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

136 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

143 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

150 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

151 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

152 
sockÀn_t
 
__addr_Àn
);

161 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

162 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

163 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

171 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

172 
__Êags
);

179 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

185 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

186 *
__ª°ri˘
 
__›tvÆ
,

187 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

192 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

193 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

199 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

209 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

210 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

218 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

221 #ifde‡
__USE_XOPEN2K


223 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

227 #ifde‡
__USE_MISC


231 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

234 
__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__GLIBC_HAVE_LONG_LONG


167 
__exãnsi⁄__
 
	töt64_t
;

172 
	tu_öt8_t
;

173 
	tu_öt16_t
;

174 
	tu_öt32_t
;

175 #i‡
__GLIBC_HAVE_LONG_LONG


176 
__exãnsi⁄__
 
	tu_öt64_t
;

179 
	tªgi°î_t
;

184 
	#__ötN_t
(
N
, 
MODE
) \

185 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

186 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

187 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 #i‚de‡
	t__öt8_t_deföed


190 
	t__öt8_t_deföed


	)

191 
	t__ötN_t
 (8, 
	t__QI__
);

192 
__ötN_t
 (16, 
__HI__
);

193 
__ötN_t
 (32, 
__SI__
);

194 
__ötN_t
 (64, 
__DI__
);

197 
__u_ötN_t
 (8, 
__QI__
);

198 
__u_ötN_t
 (16, 
__HI__
);

199 
__u_ötN_t
 (32, 
__SI__
);

200 
__u_ötN_t
 (64, 
__DI__
);

202 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

208 
	#__BIT_TYPES_DEFINED__
 1

	)

211 #ifdef 
__USE_BSD


213 
	~<ídün.h
>

216 
	~<sys/£À˘.h
>

219 
	~<sys/sysma¸os.h
>

223 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


224 
__blksize_t
 
	tblksize_t
;

225 
	#__blksize_t_deföed


	)

229 #i‚de‡
__USE_FILE_OFFSET64


230 #i‚de‡
__blk˙t_t_deföed


231 
__blk˙t_t
 
	tblk˙t_t
;

232 
	#__blk˙t_t_deföed


	)

234 #i‚de‡
__fsblk˙t_t_deföed


235 
__fsblk˙t_t
 
	tfsblk˙t_t
;

236 
	#__fsblk˙t_t_deföed


	)

238 #i‚de‡
__fsfû˙t_t_deföed


239 
__fsfû˙t_t
 
	tfsfû˙t_t
;

240 
	#__fsfû˙t_t_deföed


	)

243 #i‚de‡
__blk˙t_t_deföed


244 
__blk˙t64_t
 
	tblk˙t_t
;

245 
	#__blk˙t_t_deföed


	)

247 #i‚de‡
__fsblk˙t_t_deföed


248 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

249 
	#__fsblk˙t_t_deföed


	)

251 #i‚de‡
__fsfû˙t_t_deföed


252 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

253 
	#__fsfû˙t_t_deföed


	)

257 #ifde‡
__USE_LARGEFILE64


258 
__blk˙t64_t
 
	tblk˙t64_t
;

259 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

260 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

265 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


266 
	~<bôs/±hªadty≥s.h
>

269 
	g__END_DECLS


	@/usr/include/asm/cpufeature.h

7 #i‚de‡
__ASM_I386_CPUFEATURE_H


8 
	#__ASM_I386_CPUFEATURE_H


	)

11 
	#CPU_FEATURE_P
(
CAP
, 
FEATURE
Ë
	`ã°_bô
(CAP, 
X86_FEATURE_
##FEATURE ##
_BIT
)

	)

13 
	#NCAPINTS
 4

	)

16 
	#X86_FEATURE_FPU
 (0*32+ 0Ë

	)

17 
	#X86_FEATURE_VME
 (0*32+ 1Ë

	)

18 
	#X86_FEATURE_DE
 (0*32+ 2Ë

	)

19 
	#X86_FEATURE_PSE
 (0*32+ 3Ë

	)

20 
	#X86_FEATURE_TSC
 (0*32+ 4Ë

	)

21 
	#X86_FEATURE_MSR
 (0*32+ 5Ë

	)

22 
	#X86_FEATURE_PAE
 (0*32+ 6Ë

	)

23 
	#X86_FEATURE_MCE
 (0*32+ 7Ë

	)

24 
	#X86_FEATURE_CX8
 (0*32+ 8Ë

	)

25 
	#X86_FEATURE_APIC
 (0*32+ 9Ë

	)

26 
	#X86_FEATURE_SEP
 (0*32+11Ë

	)

27 
	#X86_FEATURE_MTRR
 (0*32+12Ë

	)

28 
	#X86_FEATURE_PGE
 (0*32+13Ë

	)

29 
	#X86_FEATURE_MCA
 (0*32+14Ë

	)

30 
	#X86_FEATURE_CMOV
 (0*32+15Ë

	)

31 
	#X86_FEATURE_PAT
 (0*32+16Ë

	)

32 
	#X86_FEATURE_PSE36
 (0*32+17Ë

	)

33 
	#X86_FEATURE_PN
 (0*32+18Ë

	)

34 
	#X86_FEATURE_CLFLSH
 (0*32+19Ë

	)

35 
	#X86_FEATURE_DTES
 (0*32+21Ë

	)

36 
	#X86_FEATURE_ACPI
 (0*32+22Ë

	)

37 
	#X86_FEATURE_MMX
 (0*32+23Ë

	)

38 
	#X86_FEATURE_FXSR
 (0*32+24Ë

	)

40 
	#X86_FEATURE_XMM
 (0*32+25Ë

	)

41 
	#X86_FEATURE_XMM2
 (0*32+26Ë

	)

42 
	#X86_FEATURE_SELFSNOOP
 (0*32+27Ë

	)

43 
	#X86_FEATURE_ACC
 (0*32+29Ë

	)

44 
	#X86_FEATURE_IA64
 (0*32+30Ë

	)

48 
	#X86_FEATURE_SYSCALL
 (1*32+11Ë

	)

49 
	#X86_FEATURE_MMXEXT
 (1*32+22Ë

	)

50 
	#X86_FEATURE_LM
 (1*32+29Ë

	)

51 
	#X86_FEATURE_3DNOWEXT
 (1*32+30Ë

	)

52 
	#X86_FEATURE_3DNOW
 (1*32+31Ë

	)

55 
	#X86_FEATURE_RECOVERY
 (2*32+ 0Ë

	)

56 
	#X86_FEATURE_LONGRUN
 (2*32+ 1Ë

	)

57 
	#X86_FEATURE_LRTI
 (2*32+ 3Ë

	)

61 
	#X86_FEATURE_CXMMX
 (3*32+ 0Ë

	)

62 
	#X86_FEATURE_K6_MTRR
 (3*32+ 1Ë

	)

63 
	#X86_FEATURE_CYRIX_ARR
 (3*32+ 2Ë

	)

64 
	#X86_FEATURE_CENTAUR_MCR
 (3*32+ 3Ë

	)

	@/usr/include/asm/highmem.h

18 #i‚de‡
_ASM_HIGHMEM_H


19 
	#_ASM_HIGHMEM_H


	)

	@/usr/include/asm/ioctl.h

6 #i‚de‡
_ASMI386_IOCTL_H


7 
	#_ASMI386_IOCTL_H


	)

27 
	#_IOC_NRBITS
 8

	)

28 
	#_IOC_TYPEBITS
 8

	)

29 
	#_IOC_SIZEBITS
 14

	)

30 
	#_IOC_DIRBITS
 2

	)

32 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

33 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

34 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

35 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

37 
	#_IOC_NRSHIFT
 0

	)

38 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

39 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

40 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

45 
	#_IOC_NONE
 0U

	)

46 
	#_IOC_WRITE
 1U

	)

47 
	#_IOC_READ
 2U

	)

49 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

50 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

51 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

52 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

53 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

56 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

57 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

58 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

59 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

62 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

63 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

64 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

65 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

69 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

70 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

71 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

72 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

73 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm/math_emu.h

1 #i‚de‡
_I386_MATH_EMU_H


2 
	#_I386_MATH_EMU_H


	)

4 
	~<asm/sigc⁄ãxt.h
>

6 
ª°‹e_i387_so·
(*
s387
, 
_Â°©e
 *
buf
);

7 
ßve_i387_so·
(*
s387
, 
_Â°©e
 * 
buf
);

13 
	söfo
 {

14 
	m___‹ig_eù
;

15 
	m___ebx
;

16 
	m___ecx
;

17 
	m___edx
;

18 
	m___esi
;

19 
	m___edi
;

20 
	m___ebp
;

21 
	m___óx
;

22 
	m___ds
;

23 
	m___es
;

24 
	m___‹ig_óx
;

25 
	m___eù
;

26 
	m___cs
;

27 
	m___eÊags
;

28 
	m___e•
;

29 
	m___ss
;

30 
	m___vm86_es
;

31 
	m___vm86_ds
;

32 
	m___vm86_fs
;

33 
	m___vm86_gs
;

	@/usr/include/asm/pgalloc.h

1 #i‚de‡
_I386_PGALLOC_H


2 
	#_I386_PGALLOC_H


	)

4 
	~<löux/c⁄fig.h
>

5 
	~<asm/¥o˚ss‹.h
>

6 
	~<asm/fixm≠.h
>

7 
	~<löux/thªads.h
>

9 
	#pgd_quickli°
 (
cuºít_˝u_d©a
.
pgd_quick
)

	)

10 
	#pmd_quickli°
 (
cuºít_˝u_d©a
.
pmd_quick
)

	)

11 
	#±e_quickli°
 (
cuºít_˝u_d©a
.
±e_quick
)

	)

12 
	#pgèbÀ_ˇche_size
 (
cuºít_˝u_d©a
.
pgèbÀ_ˇche_sz
)

	)

14 
	#pmd_p›uœã
(
mm
, 
pmd
, 
±e
) \

15 
	`£t_pmd
(
pmd
, 
	`__pmd
(
_PAGE_TABLE
 + 
	`__∑
(
±e
)))

	)

21 #i‡
CONFIG_X86_PAE


23 
	gkmem_ˇche_s
;

25 
kmem_ˇche_s
 *
∑e_pgd_ˇchï
;

27 *
kmem_ˇche_Æloc
(
kmem_ˇche_s
 *, );

28 
kmem_ˇche_‰ì
(
kmem_ˇche_s
 *, *);

30 
öô_∑e_pgd_ˇche
();

32 
ölöe
 
pgd_t
 *
	$gë_pgd_¶ow
()

34 
i
;

35 
pgd_t
 *
pgd
 = 
	`kmem_ˇche_Æloc
(
∑e_pgd_ˇchï
, 
GFP_KERNEL
);

37 i‡(
pgd
) {

38 
i
 = 0; i < 
USER_PTRS_PER_PGD
; i++) {

39 
pmd
 = 
	`__gë_‰ì_∑ge
(
GFP_KERNEL
);

40 i‡(!
pmd
)

41 
out_oom
;

42 
	`˛ór_∑ge
(
pmd
);

43 
	`£t_pgd
(
pgd
 + 
i
, 
	`__pgd
(1 + 
	`__∑
(
pmd
)));

45 
	`mem˝y
(
pgd
 + 
USER_PTRS_PER_PGD
, 
sw≠≥r_pg_dú
 + USER_PTRS_PER_PGD, (
PTRS_PER_PGD
 - USER_PTRS_PER_PGDË* (
pgd_t
));

47  
pgd
;

48 
out_oom
:

49 
i
--; i >= 0; i--)

50 
	`‰ì_∑ge
(()
	`__va
(
	`pgd_vÆ
(
pgd
[
i
])-1));

51 
	`kmem_ˇche_‰ì
(
∑e_pgd_ˇchï
, 
pgd
);

52  
NULL
;

53 
	}
}

57 
ölöe
 
pgd_t
 *
	$gë_pgd_¶ow
()

59 
pgd_t
 *
pgd
 = (pgd_à*)
	`__gë_‰ì_∑ge
(
GFP_KERNEL
);

61 i‡(
pgd
) {

62 
	`mem£t
(
pgd
, 0, 
USER_PTRS_PER_PGD
 * (
pgd_t
));

63 
	`mem˝y
(
pgd
 + 
USER_PTRS_PER_PGD
, 
sw≠≥r_pg_dú
 + USER_PTRS_PER_PGD, (
PTRS_PER_PGD
 - USER_PTRS_PER_PGDË* (
pgd_t
));

65  
pgd
;

66 
	}
}

70 
ölöe
 
pgd_t
 *
	$gë_pgd_Á°
()

72 *
ªt
;

74 i‡((
ªt
 = 
pgd_quickli°
Ë!
NULL
) {

75 
pgd_quickli°
 = (*)(*
ªt
);

76 
ªt
[0] = 0;

77 
pgèbÀ_ˇche_size
--;

79 
ªt
 = (*)
	`gë_pgd_¶ow
();

80  (
pgd_t
 *)
ªt
;

81 
	}
}

83 
ölöe
 
	$‰ì_pgd_Á°
(
pgd_t
 *
pgd
)

85 *(*)
pgd
 = (Ë
pgd_quickli°
;

86 
pgd_quickli°
 = (*Ë
pgd
;

87 
pgèbÀ_ˇche_size
++;

88 
	}
}

90 
ölöe
 
	$‰ì_pgd_¶ow
(
pgd_t
 *
pgd
)

92 #i‡
CONFIG_X86_PAE


93 
i
;

95 
i
 = 0; i < 
USER_PTRS_PER_PGD
; i++)

96 
	`‰ì_∑ge
(()
	`__va
(
	`pgd_vÆ
(
pgd
[
i
])-1));

97 
	`kmem_ˇche_‰ì
(
∑e_pgd_ˇchï
, 
pgd
);

99 
	`‰ì_∑ge
(()
pgd
);

101 
	}
}

103 
ölöe
 
±e_t
 *
	$±e_Æloc_⁄e
(
mm_°ru˘
 *
mm
, 
addªss
)

105 
±e_t
 *
±e
=
NULL
;

106 
cou¡
 = 0;

109 
±e
 = (
±e_t
 *Ë
	`__gë_‰ì_∑ge
(
GFP_KERNEL
);

110 i‡(
±e
)

111 
	`˛ór_∑ge
(
±e
);

113 
	`scheduÀ_timeout
(
HZ
);

114 } (
±e
==
NULL
)&&(
cou¡
++<10));

115  
±e
;

116 
	}
}

118 
ölöe
 
±e_t
 *
	$±e_Æloc_⁄e_Á°
(
mm_°ru˘
 *
mm
, 
addªss
)

120 *
ªt
;

122 i‡((
ªt
 = (*)
±e_quickli°
Ë!
NULL
) {

123 
±e_quickli°
 = (*)(*
ªt
);

124 
ªt
[0] =Ñet[1];

125 
pgèbÀ_ˇche_size
--;

127  (
±e_t
 *)
ªt
;

128 
	}
}

130 
ölöe
 
	$±e_‰ì_Á°
(
±e_t
 *
±e
)

132 *(*)
±e
 = (Ë
±e_quickli°
;

133 
±e_quickli°
 = (*Ë
±e
;

134 
pgèbÀ_ˇche_size
++;

135 
	}
}

137 
ölöe
 
	$±e_‰ì_¶ow
(
±e_t
 *
±e
)

139 
	`‰ì_∑ge
(()
±e
);

140 
	}
}

142 
	#±e_‰ì
(
±e
Ë
	`±e_‰ì_¶ow
’ã)

	)

143 
	#pgd_‰ì
(
pgd
Ë
	`‰ì_pgd_¶ow
’gd)

	)

144 
	#pgd_Æloc
(
mm
Ë
	`gë_pgd_Á°
()

	)

152 
	#pmd_Æloc_⁄e_Á°
(
mm
, 
addr
Ë({ 
	`BUG
(); ((
pmd_t
 *)1); })

	)

153 
	#pmd_Æloc_⁄e
(
mm
, 
addr
Ë({ 
	`BUG
(); ((
pmd_t
 *)2); })

	)

154 
	#pmd_‰ì_¶ow
(
x
Ëdÿ{ } 0)

	)

155 
	#pmd_‰ì_Á°
(
x
Ëdÿ{ } 0)

	)

156 
	#pmd_‰ì
(
x
Ëdÿ{ } 0)

	)

157 
	#pgd_p›uœã
(
mm
, 
pmd
, 
±e
Ë
	`BUG
()

	)

159 
do_check_pgt_ˇche
(, );

175 #i‚de‡
CONFIG_SMP


177 
	#Êush_éb
(Ë
	`__Êush_éb
()

	)

178 
	#Êush_éb_Æl
(Ë
	`__Êush_éb_Æl
()

	)

179 
	#loˇl_Êush_éb
(Ë
	`__Êush_éb
()

	)

181 
ölöe
 
	$Êush_éb_mm
(
mm_°ru˘
 *
mm
)

183 i‡(
mm
 =
cuºít
->
a˘ive_mm
)

184 
	`__Êush_éb
();

185 
	}
}

187 
ölöe
 
	$Êush_éb_∑ge
(
vm_¨ó_°ru˘
 *
vma
,

188 
addr
)

190 i‡(
vma
->
vm_mm
 =
cuºít
->
a˘ive_mm
)

191 
	`__Êush_éb_⁄e
(
addr
);

192 
	}
}

194 
ölöe
 
	$Êush_éb_ønge
(
mm_°ru˘
 *
mm
,

195 
°¨t
, 
íd
)

197 i‡(
mm
 =
cuºít
->
a˘ive_mm
)

198 
	`__Êush_éb
();

199 
	}
}

203 
	~<asm/smp.h
>

205 
	#loˇl_Êush_éb
() \

206 
	`__Êush_éb
()

	)

208 
Êush_éb_Æl
();

209 
Êush_éb_cuºít_èsk
();

210 
Êush_éb_mm
(
mm_°ru˘
 *);

211 
Êush_éb_∑ge
(
vm_¨ó_°ru˘
 *, );

213 
	#Êush_éb
(Ë
	`Êush_éb_cuºít_èsk
()

	)

215 
ölöe
 
	$Êush_éb_ønge
(
mm_°ru˘
 * 
mm
, 
°¨t
, 
íd
)

217 
	`Êush_éb_mm
(
mm
);

218 
	}
}

220 
	#TLBSTATE_OK
 1

	)

221 
	#TLBSTATE_LAZY
 2

	)

223 
	séb_°©e


225 
mm_°ru˘
 *
	ma˘ive_mm
;

226 
	m°©e
;

228 
éb_°©e
 
˝u_éb°©e
[
NR_CPUS
];

233 
ölöe
 
	$Êush_éb_pgèbÀs
(
mm_°ru˘
 *
mm
,

234 
°¨t
, 
íd
)

237 
	}
}

	@/usr/include/asm/posix_types.h

1 #i‚de‡
__ARCH_I386_POSIX_TYPES_H


2 
	#__ARCH_I386_POSIX_TYPES_H


	)

10 
	t__kî√l_dev_t
;

11 
	t__kî√l_öo_t
;

12 
	t__kî√l_mode_t
;

13 
	t__kî√l_∆ök_t
;

14 
	t__kî√l_off_t
;

15 
	t__kî√l_pid_t
;

16 
	t__kî√l_ùc_pid_t
;

17 
	t__kî√l_uid_t
;

18 
	t__kî√l_gid_t
;

19 
	t__kî√l_size_t
;

20 
	t__kî√l_ssize_t
;

21 
	t__kî√l_±rdiff_t
;

22 
	t__kî√l_time_t
;

23 
	t__kî√l_su£c⁄ds_t
;

24 
	t__kî√l_˛ock_t
;

25 
	t__kî√l_daddr_t
;

26 * 
	t__kî√l_ˇddr_t
;

27 
	t__kî√l_uid16_t
;

28 
	t__kî√l_gid16_t
;

29 
	t__kî√l_uid32_t
;

30 
	t__kî√l_gid32_t
;

32 
	t__kî√l_ﬁd_uid_t
;

33 
	t__kî√l_ﬁd_gid_t
;

35 #ifde‡
__GNUC__


36 
	t__kî√l_loff_t
;

40 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__USE_ALL
)

41 
	mvÆ
[2];

43 
	m__vÆ
[2];

45 } 
	t__kî√l_fsid_t
;

47 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

49 #unde‡
__FD_SET


50 
	#__FD_SET
(
fd
,
fd£ç
) \

51 
__asm__
 
	`__vﬁ©ûe__
("btsl %1,%0": \

52 "=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)):"r" ((Ë(
fd
)))

	)

54 #unde‡
__FD_CLR


55 
	#__FD_CLR
(
fd
,
fd£ç
) \

56 
__asm__
 
	`__vﬁ©ûe__
("btrl %1,%0": \

57 "=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)):"r" ((Ë(
fd
)))

	)

59 #unde‡
__FD_ISSET


60 
	#__FD_ISSET
(
fd
,
fd£ç
Ë(
	`__exãnsi⁄__
 ({ \

61 
__ªsu…
; \

62 
__asm__
 
	`__vﬁ©ûe__
("btl %1,%2 ; setb %0" \

63 :"=q" (
__ªsu…
Ë:"r" ((Ë(
fd
)), \

64 "m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
))); \

65 
__ªsu…
; }))

	)

67 #unde‡
__FD_ZERO


68 
	#__FD_ZERO
(
fd£ç
) \

70 
__d0
, 
__d1
; \

71 
__asm__
 
	`__vﬁ©ûe__
("cld ;Ñep ; stosl" \

72 :"=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)), \

73 "=&c" (
__d0
), "=&D" (
__d1
) \

74 :"a" (0), "1" (
__FDSET_LONGS
), \

75 "2" ((
__kî√l_fd_£t
 *Ë(
fd£ç
)) : "memory"); \

76 } 0)

	)

	@/usr/include/asm/resource.h

1 #i‚de‡
_I386_RESOURCE_H


2 
	#_I386_RESOURCE_H


	)

8 
	#RLIMIT_CPU
 0

	)

9 
	#RLIMIT_FSIZE
 1

	)

10 
	#RLIMIT_DATA
 2

	)

11 
	#RLIMIT_STACK
 3

	)

12 
	#RLIMIT_CORE
 4

	)

13 
	#RLIMIT_RSS
 5

	)

14 
	#RLIMIT_NPROC
 6

	)

15 
	#RLIMIT_NOFILE
 7

	)

16 
	#RLIMIT_MEMLOCK
 8

	)

17 
	#RLIMIT_AS
 9

	)

18 
	#RLIMIT_LOCKS
 10

	)

20 
	#RLIM_NLIMITS
 11

	)

26 
	#RLIM_INFINITY
 (~0UL)

	)

	@/usr/include/asm/sembuf.h

1 #i‚de‡
_I386_SEMBUF_H


2 
	#_I386_SEMBUF_H


	)

14 
	s£mid64_ds
 {

15 
ùc64_≥rm
 
	m£m_≥rm
;

16 
__kî√l_time_t
 
	m£m_Ÿime
;

17 
	m__unu£d1
;

18 
__kî√l_time_t
 
	m£m_˘ime
;

19 
	m__unu£d2
;

20 
	m£m_n£ms
;

21 
	m__unu£d3
;

22 
	m__unu£d4
;

	@/usr/include/asm/sigcontext.h

1 #i‚de‡
_ASMi386_SIGCONTEXT_H


2 
	#_ASMi386_SIGCONTEXT_H


	)

18 
	s_Âªg
 {

19 
	msignifiˇnd
[4];

20 
	mexp⁄ít
;

23 
	s_Âxªg
 {

24 
	msignifiˇnd
[4];

25 
	mexp⁄ít
;

26 
	m∑ddög
[3];

29 
	s_xmmªg
 {

30 
	mñemít
[4];

33 
	s_Â°©e
 {

35 
	mcw
;

36 
	msw
;

37 
	mèg
;

38 
	mùoff
;

39 
	mcs£l
;

40 
	md©aoff
;

41 
	md©a£l
;

42 
_Âªg
 
	m_°
[8];

43 
	m°©us
;

44 
	mmagic
;

47 
	m_fx§_ív
[6];

48 
	mmxc§
;

49 
	mª£rved
;

50 
_Âxªg
 
	m_fx§_°
[8];

51 
_xmmªg
 
	m_xmm
[8];

52 
	m∑ddög
[56];

55 
	#X86_FXSR_MAGIC
 0x0000

	)

57 
	ssigc⁄ãxt
 {

58 
	mgs
, 
	m__gsh
;

59 
	mfs
, 
	m__fsh
;

60 
	mes
, 
	m__esh
;

61 
	mds
, 
	m__dsh
;

62 
	medi
;

63 
	mesi
;

64 
	mebp
;

65 
	me•
;

66 
	mebx
;

67 
	medx
;

68 
	mecx
;

69 
	móx
;

70 
	må≠no
;

71 
	mîr
;

72 
	meù
;

73 
	mcs
, 
	m__csh
;

74 
	meÊags
;

75 
	me•_©_sig«l
;

76 
	mss
, 
	m__ssh
;

77 
_Â°©e
 * 
	mÂ°©e
;

78 
	mﬁdmask
;

79 
	m¸2
;

	@/usr/include/asm/siginfo.h

1 #i‚de‡
_I386_SIGINFO_H


2 
	#_I386_SIGINFO_H


	)

4 
	~<löux/ty≥s.h
>

8 
	usigvÆ
 {

9 
	msivÆ_öt
;

10 *
	msivÆ_±r
;

11 } 
	tsigvÆ_t
;

13 
	#SI_MAX_SIZE
 128

	)

14 
	#SI_PAD_SIZE
 ((
SI_MAX_SIZE
/()Ë- 3)

	)

16 
	ssigöfo
 {

17 
	msi_signo
;

18 
	msi_î∫o
;

19 
	msi_code
;

22 
	m_∑d
[
SI_PAD_SIZE
];

26 
pid_t
 
	m_pid
;

27 
uid_t
 
	m_uid
;

28 } 
	m_kûl
;

32 
	m_timî1
;

33 
	m_timî2
;

34 } 
	m_timî
;

38 
pid_t
 
	m_pid
;

39 
uid_t
 
	m_uid
;

40 
sigvÆ_t
 
	m_sigvÆ
;

41 } 
	m_π
;

45 
pid_t
 
	m_pid
;

46 
uid_t
 
	m_uid
;

47 
	m_°©us
;

48 
˛ock_t
 
	m_utime
;

49 
˛ock_t
 
	m_°ime
;

50 } 
	m_sigchld
;

54 *
	m_addr
;

55 } 
	m_sigÁu…
;

59 
	m_b™d
;

60 
	m_fd
;

61 } 
	m_sigpﬁl
;

62 } 
	m_sifõlds
;

63 } 
	tsigöfo_t
;

68 
	#si_pid
 
_sifõlds
.
_kûl
.
_pid


	)

69 
	#si_uid
 
_sifõlds
.
_kûl
.
_uid


	)

70 
	#si_°©us
 
_sifõlds
.
_sigchld
.
_°©us


	)

71 
	#si_utime
 
_sifõlds
.
_sigchld
.
_utime


	)

72 
	#si_°ime
 
_sifõlds
.
_sigchld
.
_°ime


	)

73 
	#si_vÆue
 
_sifõlds
.
_π
.
_sigvÆ


	)

74 
	#si_öt
 
_sifõlds
.
_π
.
_sigvÆ
.
sivÆ_öt


	)

75 
	#si_±r
 
_sifõlds
.
_π
.
_sigvÆ
.
sivÆ_±r


	)

76 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
_addr


	)

77 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
_b™d


	)

78 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
_fd


	)

80 #ifde‡
__KERNEL__


81 
	#__SI_MASK
 0xffff0000

	)

82 
	#__SI_KILL
 (0 << 16)

	)

83 
	#__SI_TIMER
 (1 << 16)

	)

84 
	#__SI_POLL
 (2 << 16)

	)

85 
	#__SI_FAULT
 (3 << 16)

	)

86 
	#__SI_CHLD
 (4 << 16)

	)

87 
	#__SI_RT
 (5 << 16)

	)

88 
	#__SI_CODE
(
T
,
N
Ë((TË<< 16 | ((NË& 0xffff))

	)

90 
	#__SI_KILL
 0

	)

91 
	#__SI_TIMER
 0

	)

92 
	#__SI_POLL
 0

	)

93 
	#__SI_FAULT
 0

	)

94 
	#__SI_CHLD
 0

	)

95 
	#__SI_RT
 0

	)

96 
	#__SI_CODE
(
T
,
N
Ë(N)

	)

103 
	#SI_USER
 0

	)

104 
	#SI_KERNEL
 0x80

	)

105 
	#SI_QUEUE
 -1

	)

106 
	#SI_TIMER
 
	`__SI_CODE
(
__SI_TIMER
,-2Ë

	)

107 
	#SI_MESGQ
 -3

	)

108 
	#SI_ASYNCIO
 -4

	)

109 
	#SI_SIGIO
 -5

	)

111 
	#SI_FROMUSER
(
sùå
Ë((sùå)->
si_code
 <0)

	)

112 
	#SI_FROMKERNEL
(
sùå
Ë((sùå)->
si_code
 > 0)

	)

117 
	#ILL_ILLOPC
 (
__SI_FAULT
|1Ë

	)

118 
	#ILL_ILLOPN
 (
__SI_FAULT
|2Ë

	)

119 
	#ILL_ILLADR
 (
__SI_FAULT
|3Ë

	)

120 
	#ILL_ILLTRP
 (
__SI_FAULT
|4Ë

	)

121 
	#ILL_PRVOPC
 (
__SI_FAULT
|5Ë

	)

122 
	#ILL_PRVREG
 (
__SI_FAULT
|6Ë

	)

123 
	#ILL_COPROC
 (
__SI_FAULT
|7Ë

	)

124 
	#ILL_BADSTK
 (
__SI_FAULT
|8Ë

	)

125 
	#NSIGILL
 8

	)

130 
	#FPE_INTDIV
 (
__SI_FAULT
|1Ë

	)

131 
	#FPE_INTOVF
 (
__SI_FAULT
|2Ë

	)

132 
	#FPE_FLTDIV
 (
__SI_FAULT
|3Ë

	)

133 
	#FPE_FLTOVF
 (
__SI_FAULT
|4Ë

	)

134 
	#FPE_FLTUND
 (
__SI_FAULT
|5Ë

	)

135 
	#FPE_FLTRES
 (
__SI_FAULT
|6Ë

	)

136 
	#FPE_FLTINV
 (
__SI_FAULT
|7Ë

	)

137 
	#FPE_FLTSUB
 (
__SI_FAULT
|8Ë

	)

138 
	#NSIGFPE
 8

	)

143 
	#SEGV_MAPERR
 (
__SI_FAULT
|1Ë

	)

144 
	#SEGV_ACCERR
 (
__SI_FAULT
|2Ë

	)

145 
	#NSIGSEGV
 2

	)

150 
	#BUS_ADRALN
 (
__SI_FAULT
|1Ë

	)

151 
	#BUS_ADRERR
 (
__SI_FAULT
|2Ë

	)

152 
	#BUS_OBJERR
 (
__SI_FAULT
|3Ë

	)

153 
	#NSIGBUS
 3

	)

158 
	#TRAP_BRKPT
 (
__SI_FAULT
|1Ë

	)

159 
	#TRAP_TRACE
 (
__SI_FAULT
|2Ë

	)

160 
	#NSIGTRAP
 2

	)

165 
	#CLD_EXITED
 (
__SI_CHLD
|1Ë

	)

166 
	#CLD_KILLED
 (
__SI_CHLD
|2Ë

	)

167 
	#CLD_DUMPED
 (
__SI_CHLD
|3Ë

	)

168 
	#CLD_TRAPPED
 (
__SI_CHLD
|4Ë

	)

169 
	#CLD_STOPPED
 (
__SI_CHLD
|5Ë

	)

170 
	#CLD_CONTINUED
 (
__SI_CHLD
|6Ë

	)

171 
	#NSIGCHLD
 6

	)

176 
	#POLL_IN
 (
__SI_POLL
|1Ë

	)

177 
	#POLL_OUT
 (
__SI_POLL
|2Ë

	)

178 
	#POLL_MSG
 (
__SI_POLL
|3Ë

	)

179 
	#POLL_ERR
 (
__SI_POLL
|4Ë

	)

180 
	#POLL_PRI
 (
__SI_POLL
|5Ë

	)

181 
	#POLL_HUP
 (
__SI_POLL
|6Ë

	)

182 
	#NSIGPOLL
 6

	)

192 
	#SIGEV_SIGNAL
 0

	)

193 
	#SIGEV_NONE
 1

	)

194 
	#SIGEV_THREAD
 2

	)

196 
	#SIGEV_MAX_SIZE
 64

	)

197 
	#SIGEV_PAD_SIZE
 ((
SIGEV_MAX_SIZE
/()Ë- 3)

	)

199 
	ssigevít
 {

200 
sigvÆ_t
 
	msigev_vÆue
;

201 
	msigev_signo
;

202 
	msigev_nŸify
;

204 
	m_∑d
[
SIGEV_PAD_SIZE
];

207 (*
	m_fun˘i⁄
)(
	msigvÆ_t
);

208 *
	m_©åibuã
;

209 } 
	m_sigev_thªad
;

210 } 
	m_sigev_un
;

211 } 
	tsigevít_t
;

213 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

214 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

	@/usr/include/asm/signal.h

1 #i‚de‡
_ASMi386_SIGNAL_H


2 
	#_ASMi386_SIGNAL_H


	)

4 
	~<löux/ty≥s.h
>

7 
	gsigöfo
;

9 
	#SIGHUP
 1

	)

10 
	#SIGINT
 2

	)

11 
	#SIGQUIT
 3

	)

12 
	#SIGILL
 4

	)

13 
	#SIGTRAP
 5

	)

14 
	#SIGABRT
 6

	)

15 
	#SIGIOT
 6

	)

16 
	#SIGBUS
 7

	)

17 
	#SIGFPE
 8

	)

18 
	#SIGKILL
 9

	)

19 
	#SIGUSR1
 10

	)

20 
	#SIGSEGV
 11

	)

21 
	#SIGUSR2
 12

	)

22 
	#SIGPIPE
 13

	)

23 
	#SIGALRM
 14

	)

24 
	#SIGTERM
 15

	)

25 
	#SIGSTKFLT
 16

	)

26 
	#SIGCHLD
 17

	)

27 
	#SIGCONT
 18

	)

28 
	#SIGSTOP
 19

	)

29 
	#SIGTSTP
 20

	)

30 
	#SIGTTIN
 21

	)

31 
	#SIGTTOU
 22

	)

32 
	#SIGURG
 23

	)

33 
	#SIGXCPU
 24

	)

34 
	#SIGXFSZ
 25

	)

35 
	#SIGVTALRM
 26

	)

36 
	#SIGPROF
 27

	)

37 
	#SIGWINCH
 28

	)

38 
	#SIGIO
 29

	)

39 
	#SIGPOLL
 
SIGIO


	)

43 
	#SIGPWR
 30

	)

44 
	#SIGSYS
 31

	)

45 
	#SIGUNUSED
 31

	)

48 
	#SIGRTMIN
 32

	)

49 
	#SIGRTMAX
 (
_NSIG
-1)

	)

65 
	#SA_NOCLDSTOP
 0x00000001

	)

66 
	#SA_NOCLDWAIT
 0x00000002

	)

67 
	#SA_SIGINFO
 0x00000004

	)

68 
	#SA_ONSTACK
 0x08000000

	)

69 
	#SA_RESTART
 0x10000000

	)

70 
	#SA_NODEFER
 0x40000000

	)

71 
	#SA_RESETHAND
 0x80000000

	)

73 
	#SA_NOMASK
 
SA_NODEFER


	)

74 
	#SA_ONESHOT
 
SA_RESETHAND


	)

75 
	#SA_INTERRUPT
 0x20000000

	)

77 
	#SA_RESTORER
 0x04000000

	)

82 
	#SS_ONSTACK
 1

	)

83 
	#SS_DISABLE
 2

	)

85 
	#MINSIGSTKSZ
 2048

	)

86 
	#SIGSTKSZ
 8192

	)

89 
	#SIG_BLOCK
 0

	)

90 
	#SIG_UNBLOCK
 1

	)

91 
	#SIG_SETMASK
 2

	)

94 (*
	t__sigh™dÀr_t
)();

96 
	#SIG_DFL
 ((
__sigh™dÀr_t
)0Ë

	)

97 
	#SIG_IGN
 ((
__sigh™dÀr_t
)1Ë

	)

98 
	#SIG_ERR
 ((
__sigh™dÀr_t
)-1Ë

	)

102 
	ssiga˘i⁄
 {

104 
__sigh™dÀr_t
 
_ß_h™dÀr
;

105 (*
_ß_siga˘i⁄
)(, 
sigöfo
 *, *);

106 } 
_u
;

107 
sig£t_t
 
ß_mask
;

108 
ß_Êags
;

109 (*
ß_ª°‹î
)();

112 
	#ß_h™dÀr
 
_u
.
_ß_h™dÀr


	)

113 
	#ß_siga˘i⁄
 
_u
.
_ß_siga˘i⁄


	)

116 
	ssigÆt°ack
 {

117 *
ss_•
;

118 
ss_Êags
;

119 
size_t
 
ss_size
;

120 } 
	t°ack_t
;

	@/usr/include/asm/smp.h

1 #i‚de‡
__ASM_SMP_H


2 
	#__ASM_SMP_H


	)

7 #i‚de‡
ASSEMBLY


8 
	~<löux/c⁄fig.h
>

9 
	~<löux/thªads.h
>

10 
	~<löux/±ø˚.h
>

13 #ifde‡
CONFIG_X86_LOCAL_APIC


14 #i‚de‡
ASSEMBLY


15 
	~<asm/fixm≠.h
>

16 
	~<asm/bô›s.h
>

17 
	~<asm/mp•ec.h
>

18 #ifde‡
CONFIG_X86_IO_APIC


19 
	~<asm/io_≠ic.h
>

21 
	~<asm/≠ic.h
>

25 #ifde‡
CONFIG_SMP


26 #i‚de‡
ASSEMBLY


32 
smp_Æloc_mem‹y
();

33 
phys_˝u_¥e£¡_m≠
;

34 
˝u_⁄löe_m≠
;

35 vﬁ©ûê
smp_övÆid©e_√eded
;

36 
pic_mode
;

37 
smp_Êush_éb
();

38 
smp_mesßge_úq
(
˝l
, *
dev_id
, 
±_ªgs
 *
ªgs
);

39 
smp_£nd_ªscheduÀ
(
˝u
);

40 
smp_övÆid©e_rcv
();

41 (*
mår_hook
) ();

42 
	`z≠_low_m≠pögs
 ();

49 
ölöe
 
	$˝u_logiˇl_m≠
(
˝u
)

51  
˝u
;

52 
	}
}

53 
ölöe
 
	$˝u_numbî_m≠
(
˝u
)

55  
˝u
;

56 
	}
}

62 vﬁ©ûê
x86_≠icid_to_˝u
[
NR_CPUS
];

63 vﬁ©ûê
x86_˝u_to_≠icid
[
NR_CPUS
];

69 
smp_boŸ_˝us
();

70 
smp_°‹e_˝u_öfo
(
id
);

78 
	#smp_¥o˚ss‹_id
(Ë(
cuºít
->
¥o˚ss‹
)

	)

80 
__ölöe
 
	$h¨d_smp_¥o˚ss‹_id
()

83  
	`GET_APIC_ID
(*(*)(
APIC_BASE
+
APIC_ID
));

84 
	}
}

88 
	#NO_PROC_ID
 0xFF

	)

100 
	#PROC_CHANGE_PENALTY
 15

	)

	@/usr/include/asm/statfs.h

1 #i‚de‡
_I386_STATFS_H


2 
	#_I386_STATFS_H


	)

4 #i‚de‡
__KERNEL_STRICT_NAMES


6 
	~<löux/ty≥s.h
>

8 
__kî√l_fsid_t
 
	tfsid_t
;

12 
	s°©fs
 {

13 
	mf_ty≥
;

14 
	mf_bsize
;

15 
	mf_blocks
;

16 
	mf_b‰ì
;

17 
	mf_bavaû
;

18 
	mf_fûes
;

19 
	mf_f‰ì
;

20 
__kî√l_fsid_t
 
	mf_fsid
;

21 
	mf_«mñí
;

22 
	mf_•¨e
[6];

	@/usr/include/asm/timex.h

6 #i‚de‡
_ASMi386_TIMEX_H


7 
	#_ASMi386_TIMEX_H


	)

9 
	~<löux/c⁄fig.h
>

11 
	#CLOCK_TICK_RATE
 1193180

	)

12 
	#CLOCK_TICK_FACTOR
 20

	)

13 
	#FINETUNE
 (((((()
LATCH
 * 
HZ
 - 
CLOCK_TICK_RATE
Ë<< 
SHIFT_HZ
) * \

14 (1000000/
CLOCK_TICK_FACTOR
Ë/ (
CLOCK_TICK_RATE
/CLOCK_TICK_FACTOR)) \

15 << (
SHIFT_SCALE
-
SHIFT_HZ
)Ë/ 
HZ
)

	)

31 
	tcy˛es_t
;

33 
cy˛es_t
 
ˇcheÊush_time
;

35 
ölöe
 
cy˛es_t
 
	$gë_cy˛es
 ()

37 #i‚de‡
CONFIG_X86_TSC


40 
ªt
;

42 
	`rdts˛l
(
ªt
);

43  
ªt
;

45 
	}
}

47 
˝u_khz
;

	@/usr/include/asm/vm86.h

1 #i‚de‡
_LINUX_VM86_H


2 
	#_LINUX_VM86_H


	)

15 
	#TF_MASK
 0x00000100

	)

16 
	#IF_MASK
 0x00000200

	)

17 
	#IOPL_MASK
 0x00003000

	)

18 
	#NT_MASK
 0x00004000

	)

19 
	#VM_MASK
 0x00020000

	)

20 
	#AC_MASK
 0x00040000

	)

21 
	#VIF_MASK
 0x00080000

	)

22 
	#VIP_MASK
 0x00100000

	)

23 
	#ID_MASK
 0x00200000

	)

25 
	#BIOSSEG
 0x0f000

	)

27 
	#CPU_086
 0

	)

28 
	#CPU_186
 1

	)

29 
	#CPU_286
 2

	)

30 
	#CPU_386
 3

	)

31 
	#CPU_486
 4

	)

32 
	#CPU_586
 5

	)

37 
	#VM86_TYPE
(
ªtvÆ
Ë(‘ëvÆË& 0xff)

	)

38 
	#VM86_ARG
(
ªtvÆ
Ë(‘ëvÆË>> 8)

	)

40 
	#VM86_SIGNAL
 0

	)

41 
	#VM86_UNKNOWN
 1

	)

42 
	#VM86_INTx
 2

	)

43 
	#VM86_STI
 3

	)

48 
	#VM86_PICRETURN
 4

	)

49 
	#VM86_TRAP
 6

	)

54 
	#VM86_PLUS_INSTALL_CHECK
 0

	)

55 
	#VM86_ENTER
 1

	)

56 
	#VM86_ENTER_NO_BYPASS
 2

	)

57 
	#VM86_REQUEST_IRQ
 3

	)

58 
	#VM86_FREE_IRQ
 4

	)

59 
	#VM86_GET_IRQ_BITS
 5

	)

60 
	#VM86_GET_AND_RESET_IRQ
 6

	)

68 
	svm86_ªgs
 {

72 
	mebx
;

73 
	mecx
;

74 
	medx
;

75 
	mesi
;

76 
	medi
;

77 
	mebp
;

78 
	móx
;

79 
	m__nuŒ_ds
;

80 
	m__nuŒ_es
;

81 
	m__nuŒ_fs
;

82 
	m__nuŒ_gs
;

83 
	m‹ig_óx
;

84 
	meù
;

85 
	mcs
, 
	m__csh
;

86 
	meÊags
;

87 
	me•
;

88 
	mss
, 
	m__ssh
;

92 
	mes
, 
	m__esh
;

93 
	mds
, 
	m__dsh
;

94 
	mfs
, 
	m__fsh
;

95 
	mgs
, 
	m__gsh
;

98 
	sªve˘‹ed_°ru˘
 {

99 
	m__m≠
[8];

102 
	svm86_°ru˘
 {

103 
vm86_ªgs
 
	mªgs
;

104 
	mÊags
;

105 
	ms¸ìn_bôm≠
;

106 
	m˝u_ty≥
;

107 
ªve˘‹ed_°ru˘
 
	möt_ªve˘‹ed
;

108 
ªve˘‹ed_°ru˘
 
	möt21_ªve˘‹ed
;

114 
	#VM86_SCREEN_BITMAP
 0x0001

	)

116 
	svm86∂us_öfo_°ru˘
 {

117 
	mf‹˚_ªtu∫_f‹_pic
:1;

118 
	mvm86dbg_a˘ive
:1;

119 
	mvm86dbg_TF≥ndig
:1;

120 
	munu£d
:28;

121 
	mis_vm86pus
:1;

122 
	mvm86dbg_ötxxèb
[32];

125 
	svm86∂us_°ru˘
 {

126 
vm86_ªgs
 
	mªgs
;

127 
	mÊags
;

128 
	ms¸ìn_bôm≠
;

129 
	m˝u_ty≥
;

130 
ªve˘‹ed_°ru˘
 
	möt_ªve˘‹ed
;

131 
ªve˘‹ed_°ru˘
 
	möt21_ªve˘‹ed
;

132 
vm86∂us_öfo_°ru˘
 
	mvm86∂us
;

	@/usr/include/bits/byteswap.h

20 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H


24 #i‚de‡
_BITS_BYTESWAP_H


25 
	#_BITS_BYTESWAP_H
 1

	)

28 
	#__bsw≠_c⁄°™t_16
(
x
) \

29 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

31 #ifde‡
__GNUC__


32 #i‡
__GNUC__
 >= 2

33 
	#__bsw≠_16
(
x
) \

34 (
__exãnsi⁄__
 \

35 ({ 
__v
, 
__x
 = (
x
); \

36 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

37 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

39 
	`__asm__
 ("rorw $8, %w0" \

40 : "Ù" (
__v
) \

41 : "0" (
__x
) \

43 
__v
; }))

	)

46 
	#__bsw≠_16
(
x
) \

47 (
__exãnsi⁄__
 \

48 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

51 
__ölöe
 

52 
	$__bsw≠_16
 (
__bsx
)

54  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

55 
	}
}

59 
	#__bsw≠_c⁄°™t_32
(
x
) \

60 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

61 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

63 #ifde‡
__GNUC__


64 #i‡
__GNUC__
 >= 2

67 #i‡!
deföed
 
__i486__
 && !deföed 
__≥¡ium__
 && !deföed 
__≥¡ium¥o__
 \

68 && !
deföed
 
	g__≥¡ium4__


69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("rorw $8, %w0;" \

78 : "Ù" (
__v
) \

79 : "0" (
__x
) \

81 
__v
; }))

	)

83 
	#__bsw≠_32
(
x
) \

84 (
__exãnsi⁄__
 \

85 ({ 
__v
, 
__x
 = (
x
); \

86 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

87 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

89 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 
__ölöe
 

99 
	$__bsw≠_32
 (
__bsx
)

101  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

102 
	}
}

106 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

108 
	#__bsw≠_c⁄°™t_64
(
x
) \

109 ((((
x
) & 0xff00000000000000ull) >> 56) \

110 | (((
x
) & 0x00ff000000000000ull) >> 40) \

111 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

112 | (((
x
) & 0x000000ff00000000ull) >> 8) \

113 | (((
x
) & 0x00000000ff000000ull) << 8) \

114 | (((
x
) & 0x0000000000ff0000ull) << 24) \

115 | (((
x
) & 0x000000000000ff00ull) << 40) \

116 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

118 
	#__bsw≠_64
(
x
) \

119 (
__exãnsi⁄__
 \

120 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

121 
__l
[2]; } 
__w
, 
__r
; \

122 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

123 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

126 
__w
.
__Œ
 = (
x
); \

127 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

128 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

130 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_TOS
 1

	)

29 
	#IP_TTL
 2

	)

30 
	#IP_HDRINCL
 3

	)

31 
	#IP_OPTIONS
 4

	)

32 
	#IP_ROUTER_ALERT
 5

	)

33 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RETOPTS
 7

	)

35 
	#IP_PKTINFO
 8

	)

36 
	#IP_PKTOPTIONS
 9

	)

37 
	#IP_PMTUDISC
 10

	)

38 
	#IP_MTU_DISCOVER
 10

	)

39 
	#IP_RECVERR
 11

	)

40 
	#IP_RECVTTL
 12

	)

41 
	#IP_RECVTOS
 13

	)

42 
	#IP_MULTICAST_IF
 32

	)

43 
	#IP_MULTICAST_TTL
 33

	)

44 
	#IP_MULTICAST_LOOP
 34

	)

45 
	#IP_ADD_MEMBERSHIP
 35

	)

46 
	#IP_DROP_MEMBERSHIP
 36

	)

49 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

52 
	#IP_PMTUDISC_DONT
 0

	)

53 
	#IP_PMTUDISC_WANT
 1

	)

54 
	#IP_PMTUDISC_DO
 2

	)

57 
	#SOL_IP
 0

	)

59 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

60 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

61 
	#IP_MAX_MEMBERSHIPS
 20

	)

66 
	sù_›ts


68 
ö_addr
 
	mù_d°
;

69 
	mù_›ts
[40];

73 
	sù_mªq


75 
ö_addr
 
	mimr_mu…üddr
;

76 
ö_addr
 
	mimr_öãrÁ˚
;

80 
	sù_mªqn


82 
ö_addr
 
	mimr_mu…üddr
;

83 
ö_addr
 
	mimr_addªss
;

84 
	mimr_ifödex
;

88 
	sö_pktöfo


90 
	mùi_ifödex
;

91 
ö_addr
 
	mùi_•ec_d°
;

92 
ö_addr
 
	mùi_addr
;

98 
	#IPV6_ADDRFORM
 1

	)

99 
	#IPV6_PKTINFO
 2

	)

100 
	#IPV6_HOPOPTS
 3

	)

101 
	#IPV6_DSTOPTS
 4

	)

102 
	#IPV6_RTHDR
 5

	)

103 
	#IPV6_PKTOPTIONS
 6

	)

104 
	#IPV6_CHECKSUM
 7

	)

105 
	#IPV6_HOPLIMIT
 8

	)

106 
	#IPV6_NEXTHOP
 9

	)

107 
	#IPV6_AUTHHDR
 10

	)

108 
	#IPV6_UNICAST_HOPS
 16

	)

109 
	#IPV6_MULTICAST_IF
 17

	)

110 
	#IPV6_MULTICAST_HOPS
 18

	)

111 
	#IPV6_MULTICAST_LOOP
 19

	)

112 
	#IPV6_JOIN_GROUP
 20

	)

113 
	#IPV6_LEAVE_GROUP
 21

	)

114 
	#IPV6_ROUTER_ALERT
 22

	)

115 
	#IPV6_MTU_DISCOVER
 23

	)

116 
	#IPV6_MTU
 24

	)

117 
	#IPV6_RECVERR
 25

	)

118 
	#IPV6_V6ONLY
 26

	)

119 
	#IPV6_JOIN_ANYCAST
 27

	)

120 
	#IPV6_LEAVE_ANYCAST
 28

	)

121 
	#IPV6_IPSEC_POLICY
 34

	)

122 
	#IPV6_XFRM_POLICY
 35

	)

124 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

127 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

128 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

129 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

130 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

134 
	#IPV6_PMTUDISC_DONT
 0

	)

135 
	#IPV6_PMTUDISC_WANT
 1

	)

136 
	#IPV6_PMTUDISC_DO
 2

	)

139 
	#SOL_IPV6
 41

	)

140 
	#SOL_ICMPV6
 58

	)

143 
	#IPV6_RTHDR_LOOSE
 0

	)

144 
	#IPV6_RTHDR_STRICT
 1

	)

146 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/pthreadtypes.h

15 #i‡!
deföed
 
_BITS_TYPES_H
 && !deföed 
_PTHREAD_H


19 #i‚de‡
_BITS_PTHREADTYPES_H


20 
	#_BITS_PTHREADTYPES_H
 1

	)

22 
	#__√ed_sched∑øm


	)

23 
	~<bôs/sched.h
>

26 
	s_±hªad_Á°lock


28 
	m__°©us
;

29 
	m__•ölock
;

33 #i‚de‡
_PTHREAD_DESCR_DEFINED


35 
_±hªad_des¸_°ru˘
 *
	t_±hªad_des¸
;

36 
	#_PTHREAD_DESCR_DEFINED


	)

41 
	s__±hªad_©å_s


43 
	m__dëach°©e
;

44 
	m__schedpﬁicy
;

45 
__sched_∑øm
 
	m__sched∑øm
;

46 
	m__öhîôsched
;

47 
	m__sc›e
;

48 
size_t
 
	m__gu¨dsize
;

49 
	m__°ackaddr_£t
;

50 *
	m__°ackaddr
;

51 
size_t
 
	m__°acksize
;

52 } 
	t±hªad_©å_t
;

57 #ifde‡
__GLIBC_HAVE_LONG_LONG


58 
__exãnsi⁄__
 
	t__±hªad_c⁄d_Æign_t
;

60 
	t__±hªad_c⁄d_Æign_t
;

65 
_±hªad_Á°lock
 
	m__c_lock
;

66 
_±hªad_des¸
 
	m__c_waôög
;

67 
	m__∑ddög
[48 -  (
_±hªad_Á°lock
)

68 -  (
_±hªad_des¸
Ë-  (
__±hªad_c⁄d_Æign_t
)];

69 
__±hªad_c⁄d_Æign_t
 
	m__Æign
;

70 } 
	t±hªad_c⁄d_t
;

76 
	m__dummy
;

77 } 
	t±hªad_c⁄d©å_t
;

80 
	t±hªad_key_t
;

88 
	m__m_ª£rved
;

89 
	m__m_cou¡
;

90 
_±hªad_des¸
 
	m__m_ow√r
;

91 
	m__m_köd
;

92 
_±hªad_Á°lock
 
	m__m_lock
;

93 } 
	t±hªad_muãx_t
;

99 
	m__muãxköd
;

100 } 
	t±hªad_muãx©å_t
;

104 
	t±hªad_⁄˚_t
;

107 #ifde‡
__USE_UNIX98


109 
	s_±hªad_rwlock_t


111 
_±hªad_Á°lock
 
	m__rw_lock
;

112 
	m__rw_ªadîs
;

113 
_±hªad_des¸
 
	m__rw_wrôî
;

114 
_±hªad_des¸
 
	m__rw_ªad_waôög
;

115 
_±hªad_des¸
 
	m__rw_wrôe_waôög
;

116 
	m__rw_köd
;

117 
	m__rw_psh¨ed
;

118 } 
	t±hªad_rwlock_t
;

124 
	m__lockköd
;

125 
	m__psh¨ed
;

126 } 
	t±hªad_rwlock©å_t
;

129 #ifde‡
__USE_XOPEN2K


131 vﬁ©ûê
	t±hªad_•ölock_t
;

135 
_±hªad_Á°lock
 
	m__ba_lock
;

136 
	m__ba_ªquúed
;

137 
	m__ba_¥e£¡
;

138 
_±hªad_des¸
 
	m__ba_waôög
;

139 } 
	t±hªad_b¨rõr_t
;

143 
	m__psh¨ed
;

144 } 
	t±hªad_b¨rõøâr_t
;

150 
	t±hªad_t
;

	@/usr/include/bits/socket.h

20 #i‚de‡
__BITS_SOCKET_H


21 
	#__BITS_SOCKET_H


	)

23 #i‡!
deföed
 
_SYS_SOCKET_H
 && !deföed 
_NETINET_IN_H


27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<limôs.h
>

32 
	~<sys/ty≥s.h
>

35 #i‚de‡
__sockÀn_t_deföed


36 
__sockÀn_t
 
	tsockÀn_t
;

37 
	#__sockÀn_t_deföed


	)

41 
	e__sockë_ty≥


43 
	mSOCK_STREAM
 = 1,

45 
	#SOCK_STREAM
 
SOCK_STREAM


	)

46 
	mSOCK_DGRAM
 = 2,

48 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

49 
	mSOCK_RAW
 = 3,

50 
	#SOCK_RAW
 
SOCK_RAW


	)

51 
	mSOCK_RDM
 = 4,

52 
	#SOCK_RDM
 
SOCK_RDM


	)

53 
	mSOCK_SEQPACKET
 = 5,

55 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

56 
	mSOCK_PACKET
 = 10

59 
	#SOCK_PACKET
 
SOCK_PACKET


	)

63 
	#PF_UNSPEC
 0

	)

64 
	#PF_LOCAL
 1

	)

65 
	#PF_UNIX
 
PF_LOCAL


	)

66 
	#PF_FILE
 
PF_LOCAL


	)

67 
	#PF_INET
 2

	)

68 
	#PF_AX25
 3

	)

69 
	#PF_IPX
 4

	)

70 
	#PF_APPLETALK
 5

	)

71 
	#PF_NETROM
 6

	)

72 
	#PF_BRIDGE
 7

	)

73 
	#PF_ATMPVC
 8

	)

74 
	#PF_X25
 9

	)

75 
	#PF_INET6
 10

	)

76 
	#PF_ROSE
 11

	)

77 
	#PF_DEC√t
 12

	)

78 
	#PF_NETBEUI
 13

	)

79 
	#PF_SECURITY
 14

	)

80 
	#PF_KEY
 15

	)

81 
	#PF_NETLINK
 16

	)

82 
	#PF_ROUTE
 
PF_NETLINK


	)

83 
	#PF_PACKET
 17

	)

84 
	#PF_ASH
 18

	)

85 
	#PF_ECONET
 19

	)

86 
	#PF_ATMSVC
 20

	)

87 
	#PF_SNA
 22

	)

88 
	#PF_IRDA
 23

	)

89 
	#PF_PPPOX
 24

	)

90 
	#PF_WANPIPE
 25

	)

91 
	#PF_BLUETOOTH
 31

	)

92 
	#PF_MAX
 32

	)

95 
	#AF_UNSPEC
 
PF_UNSPEC


	)

96 
	#AF_LOCAL
 
PF_LOCAL


	)

97 
	#AF_UNIX
 
PF_UNIX


	)

98 
	#AF_FILE
 
PF_FILE


	)

99 
	#AF_INET
 
PF_INET


	)

100 
	#AF_AX25
 
PF_AX25


	)

101 
	#AF_IPX
 
PF_IPX


	)

102 
	#AF_APPLETALK
 
PF_APPLETALK


	)

103 
	#AF_NETROM
 
PF_NETROM


	)

104 
	#AF_BRIDGE
 
PF_BRIDGE


	)

105 
	#AF_ATMPVC
 
PF_ATMPVC


	)

106 
	#AF_X25
 
PF_X25


	)

107 
	#AF_INET6
 
PF_INET6


	)

108 
	#AF_ROSE
 
PF_ROSE


	)

109 
	#AF_DEC√t
 
PF_DEC√t


	)

110 
	#AF_NETBEUI
 
PF_NETBEUI


	)

111 
	#AF_SECURITY
 
PF_SECURITY


	)

112 
	#AF_KEY
 
PF_KEY


	)

113 
	#AF_NETLINK
 
PF_NETLINK


	)

114 
	#AF_ROUTE
 
PF_ROUTE


	)

115 
	#AF_PACKET
 
PF_PACKET


	)

116 
	#AF_ASH
 
PF_ASH


	)

117 
	#AF_ECONET
 
PF_ECONET


	)

118 
	#AF_ATMSVC
 
PF_ATMSVC


	)

119 
	#AF_SNA
 
PF_SNA


	)

120 
	#AF_IRDA
 
PF_IRDA


	)

121 
	#AF_PPPOX
 
PF_PPPOX


	)

122 
	#AF_WANPIPE
 
PF_WANPIPE


	)

123 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

124 
	#AF_MAX
 
PF_MAX


	)

130 
	#SOL_RAW
 255

	)

131 
	#SOL_DECNET
 261

	)

132 
	#SOL_X25
 262

	)

133 
	#SOL_PACKET
 263

	)

134 
	#SOL_ATM
 264

	)

135 
	#SOL_AAL
 265

	)

136 
	#SOL_IRDA
 266

	)

139 
	#SOMAXCONN
 128

	)

142 
	~<bôs/sockaddr.h
>

145 
	ssockaddr


147 
__SOCKADDR_COMMON
 (
ß_
);

148 
	mß_d©a
[14];

154 #i‡
ULONG_MAX
 > 0xffffffff

155 
	#__ss_Æig¡y≥
 
__uöt64_t


	)

157 
	#__ss_Æig¡y≥
 
__uöt32_t


	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

162 
	ssockaddr_°‹age


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_Æig¡y≥
 
	m__ss_Æign
;

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifde‡
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000

209 
	#MSG_MORE
 
MSG_MORE


	)

215 
	smsghdr


217 *
	mmsg_«me
;

218 
sockÀn_t
 
	mmsg_«mñí
;

220 
iovec
 *
	mmsg_iov
;

221 
size_t
 
	mmsg_iovÀn
;

223 *
	mmsg_c⁄åﬁ
;

224 
size_t
 
	mmsg_c⁄åﬁÀn
;

226 
	mmsg_Êags
;

230 
	scmsghdr


232 
size_t
 
	mcmsg_Àn
;

234 
	mcmsg_Àvñ
;

235 
	mcmsg_ty≥
;

236 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

237 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

242 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

243 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

245 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

247 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

248 
	#CMSG_FIRSTHDR
(
mhdr
) \

249 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

250 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë
NULL
)

	)

251 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

252 & (
size_t
Ë~( (size_tË- 1))

	)

253 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

254 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

255 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

257 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

258 
cmsghdr
 *
__cmsg
Ë
__THROW
;

259 #ifde‡
__USE_EXTERN_INLINES


260 #i‚de‡
_EXTERN_INLINE


261 
	#_EXTERN_INLINE
 
__ölöe


	)

263 
_EXTERN_INLINE
 
cmsghdr
 *

264 
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
Ë
__THROW


266 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

270 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

271 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

272 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


273 + 
__mhdr
->
msg_c⁄åﬁÀn
)

274 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

275 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

278  
__cmsg
;

279 
	}
}

286 
SCM_RIGHTS
 = 0x01,

287 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

288 #ifde‡
__USE_BSD


289 
SCM_CREDENTIALS
 = 0x02,

290 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

292 
__SCM_CONNECT
 = 0x03

297 
	su¸ed


299 
pid_t
 
	mpid
;

300 
uid_t
 
	muid
;

301 
gid_t
 
	mgid
;

305 
	~<asm/sockë.h
>

309 
	slögî


311 
	ml_⁄off
;

312 
	ml_lögî
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	t__u_ch¨
;

35 
	t__u_sh‹t
;

36 
	t__u_öt
;

37 
	t__u_l⁄g
;

40 sig√d 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 sig√d 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 sig√d 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 #i‡
__WORDSIZE
 == 64

47 sig√d 
	t__öt64_t
;

48 
	t__uöt64_t
;

49 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


50 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

51 
__exãnsi⁄__
 
	t__uöt64_t
;

55 #i‡
__WORDSIZE
 == 64

56 
	t__quad_t
;

57 
	t__u_quad_t
;

58 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


59 
__exãnsi⁄__
 
	t__quad_t
;

60 
__exãnsi⁄__
 
	t__u_quad_t
;

64 
	m__vÆ
[2];

65 } 
	t__quad_t
;

68 
__u_l⁄g
 
	m__vÆ
[2];

69 } 
	t__u_quad_t
;

102 
	#__S16_TYPE
 

	)

103 
	#__U16_TYPE
 

	)

104 
	#__S32_TYPE
 

	)

105 
	#__U32_TYPE
 

	)

106 
	#__SLONGWORD_TYPE
 

	)

107 
	#__ULONGWORD_TYPE
 

	)

108 #i‡
__WORDSIZE
 == 32

109 
	#__SQUAD_TYPE
 

	)

110 
	#__UQUAD_TYPE
 

	)

111 
	#__SWORD_TYPE
 

	)

112 
	#__UWORD_TYPE
 

	)

113 
	#__SLONG32_TYPE
 

	)

114 
	#__ULONG32_TYPE
 

	)

115 
	#__S64_TYPE
 
__quad_t


	)

116 
	#__U64_TYPE
 
__u_quad_t


	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	#__SQUAD_TYPE
 

	)

119 
	#__UQUAD_TYPE
 

	)

120 
	#__SWORD_TYPE
 

	)

121 
	#__UWORD_TYPE
 

	)

122 
	#__SLONG32_TYPE
 

	)

123 
	#__ULONG32_TYPE
 

	)

124 
	#__S64_TYPE
 

	)

125 
	#__U64_TYPE
 

	)

129 
	~<bôs/ty≥sizes.h
>

133 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

136 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

137 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

138 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

139 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

140 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

141 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

142 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

143 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

144 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

145 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

146 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

147 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

148 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

149 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

150 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

151 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

152 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

153 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

155 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

156 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

157 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

160 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

163 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

166 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

171 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

172 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

175 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

176 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

179 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

180 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

182 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

186 
__off64_t
 
	t__loff_t
;

187 
__quad_t
 *
	t__qaddr_t
;

188 *
	t__ˇddr_t
;

191 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

194 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

197 #unde‡
__STD_TYPE


	@/usr/include/gnu/stubs.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_lutimes


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/byã‹dî/swab.h
>

13 
	#__c⁄°™t_ht⁄l
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

14 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

15 
	#__c⁄°™t_ht⁄s
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

16 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

17 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

18 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

19 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

20 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

21 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

22 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

23 
	#__c⁄°™t_˝u_to_be64
(
x
Ë
	`___c⁄°™t_swab64
((x))

	)

24 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((x))

	)

25 
	#__c⁄°™t_˝u_to_be32
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

26 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

27 
	#__c⁄°™t_˝u_to_be16
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

28 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

29 
	#__˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

30 
	#__À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

31 
	#__˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

32 
	#__À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

33 
	#__˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

34 
	#__À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

35 
	#__˝u_to_be64
(
x
Ë
	`__swab64
((x))

	)

36 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((x))

	)

37 
	#__˝u_to_be32
(
x
Ë
	`__swab32
((x))

	)

38 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((x))

	)

39 
	#__˝u_to_be16
(
x
Ë
	`__swab16
((x))

	)

40 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((x))

	)

41 
	#__˝u_to_À64p
(
x
Ë(*(
__u64
*)(x))

	)

42 
	#__À64_to_˝up
(
x
Ë(*(
__u64
*)(x))

	)

43 
	#__˝u_to_À32p
(
x
Ë(*(
__u32
*)(x))

	)

44 
	#__À32_to_˝up
(
x
Ë(*(
__u32
*)(x))

	)

45 
	#__˝u_to_À16p
(
x
Ë(*(
__u16
*)(x))

	)

46 
	#__À16_to_˝up
(
x
Ë(*(
__u16
*)(x))

	)

47 
	#__˝u_to_be64p
(
x
Ë
	`__swab64p
((x))

	)

48 
	#__be64_to_˝up
(
x
Ë
	`__swab64p
((x))

	)

49 
	#__˝u_to_be32p
(
x
Ë
	`__swab32p
((x))

	)

50 
	#__be32_to_˝up
(
x
Ë
	`__swab32p
((x))

	)

51 
	#__˝u_to_be16p
(
x
Ë
	`__swab16p
((x))

	)

52 
	#__be16_to_˝up
(
x
Ë
	`__swab16p
((x))

	)

53 
	#__˝u_to_À64s
(
x
Ëdÿ{} 0)

	)

54 
	#__À64_to_˝us
(
x
Ëdÿ{} 0)

	)

55 
	#__˝u_to_À32s
(
x
Ëdÿ{} 0)

	)

56 
	#__À32_to_˝us
(
x
Ëdÿ{} 0)

	)

57 
	#__˝u_to_À16s
(
x
Ëdÿ{} 0)

	)

58 
	#__À16_to_˝us
(
x
Ëdÿ{} 0)

	)

59 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

60 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

61 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

62 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

63 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

64 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

66 
	~<löux/byã‹dî/gíîic.h
>

	@/usr/include/linux/capability.h

13 #i‚de‡
_LINUX_CAPABILITY_H


14 
	#_LINUX_CAPABILITY_H


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/fs.h
>

30 
	#_LINUX_CAPABILITY_VERSION
 0x19980330

	)

32 
	s__u£r_ˇp_hódî_°ru˘
 {

33 
__u32
 
	mvîsi⁄
;

34 
	mpid
;

35 } *
	tˇp_u£r_hódî_t
;

37 
	s__u£r_ˇp_d©a_°ru˘
 {

38 
__u32
 
	mef„˘ive
;

39 
__u32
 
	m≥rmôãd
;

40 
__u32
 
	möhîôabÀ
;

41 } *
	tˇp_u£r_d©a_t
;

51 
	#CAP_CHOWN
 0

	)

57 
	#CAP_DAC_OVERRIDE
 1

	)

63 
	#CAP_DAC_READ_SEARCH
 2

	)

69 
	#CAP_FOWNER
 3

	)

78 
	#CAP_FSETID
 4

	)

82 
	#CAP_FS_MASK
 0x1f

	)

88 
	#CAP_KILL
 5

	)

94 
	#CAP_SETGID
 6

	)

99 
	#CAP_SETUID
 7

	)

109 
	#CAP_SETPCAP
 8

	)

113 
	#CAP_LINUX_IMMUTABLE
 9

	)

118 
	#CAP_NET_BIND_SERVICE
 10

	)

122 
	#CAP_NET_BROADCAST
 11

	)

138 
	#CAP_NET_ADMIN
 12

	)

143 
	#CAP_NET_RAW
 13

	)

149 
	#CAP_IPC_LOCK
 14

	)

153 
	#CAP_IPC_OWNER
 15

	)

157 
	#CAP_SYS_MODULE
 16

	)

162 
	#CAP_SYS_RAWIO
 17

	)

166 
	#CAP_SYS_CHROOT
 18

	)

170 
	#CAP_SYS_PTRACE
 19

	)

174 
	#CAP_SYS_PACCT
 20

	)

213 
	#CAP_SYS_ADMIN
 21

	)

217 
	#CAP_SYS_BOOT
 22

	)

225 
	#CAP_SYS_NICE
 23

	)

239 
	#CAP_SYS_RESOURCE
 24

	)

245 
	#CAP_SYS_TIME
 25

	)

250 
	#CAP_SYS_TTY_CONFIG
 26

	)

254 
	#CAP_MKNOD
 27

	)

258 
	#CAP_LEASE
 28

	)

	@/usr/include/linux/ipc.h

1 #i‚de‡
_LINUX_IPC_H


2 
	#_LINUX_IPC_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#IPC_PRIVATE
 ((
__kî√l_key_t
Ë0)

	)

9 
	sùc_≥rm


11 
__kî√l_key_t
 
	mkey
;

12 
__kî√l_uid_t
 
	muid
;

13 
__kî√l_gid_t
 
	mgid
;

14 
__kî√l_uid_t
 
	mcuid
;

15 
__kî√l_gid_t
 
	mcgid
;

16 
__kî√l_mode_t
 
	mmode
;

17 
	m£q
;

21 
	~<asm/ùcbuf.h
>

24 
	#IPC_CREAT
 00001000

	)

25 
	#IPC_EXCL
 00002000

	)

26 
	#IPC_NOWAIT
 00004000

	)

31 
	#IPC_DIPC
 00010000

	)

32 
	#IPC_OWN
 00020000

	)

38 
	#IPC_RMID
 0

	)

39 
	#IPC_SET
 1

	)

40 
	#IPC_STAT
 2

	)

41 
	#IPC_INFO
 3

	)

47 
	#IPC_OLD
 0

	)

49 
	#IPC_64
 0x0100

	)

	@/usr/include/linux/ptrace.h

1 #i‚de‡
_LINUX_PTRACE_H


2 
	#_LINUX_PTRACE_H


	)

8 
	#PTRACE_TRACEME
 0

	)

9 
	#PTRACE_PEEKTEXT
 1

	)

10 
	#PTRACE_PEEKDATA
 2

	)

11 
	#PTRACE_PEEKUSR
 3

	)

12 
	#PTRACE_POKETEXT
 4

	)

13 
	#PTRACE_POKEDATA
 5

	)

14 
	#PTRACE_POKEUSR
 6

	)

15 
	#PTRACE_CONT
 7

	)

16 
	#PTRACE_KILL
 8

	)

17 
	#PTRACE_SINGLESTEP
 9

	)

19 
	#PTRACE_ATTACH
 0x10

	)

20 
	#PTRACE_DETACH
 0x11

	)

22 
	#PTRACE_SYSCALL
 24

	)

24 
	~<asm/±ø˚.h
>

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë¯## 
U


	)

301 
	#UINT16_C
(
c
Ë¯## 
U


	)

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


43 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

44 
	#__THROW
 
	`throw
 ()

	)

46 
	#__THROW


	)

48 
	#__P
(
¨gs
Ë¨g†
__THROW


	)

51 
	#__PMT
(
¨gs
Ë
	)
args

55 
	#__ölöe


	)

57 
	#__THROW


	)

58 
	#__P
(
¨gs
Ë
	)
args

59 
	#__PMT
(
¨gs
Ë
	)
args

61 
	#__c⁄°
 c⁄°

	)

62 
	#__sig√d
 sig√d

	)

63 
	#__vﬁ©ûe
 vﬁ©ûe

	)

70 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

71 
	#__STRING
(
x
Ë#x

	)

74 
	#__±r_t
 *

	)

75 
	#__l⁄g_doubÀ_t
 

	)

79 #ifdef 
__˝lu•lus


80 
	#__BEGIN_DECLS
 "C" {

	)

81 
	#__END_DECLS
 }

	)

83 
	#__BEGIN_DECLS


	)

84 
	#__END_DECLS


	)

93 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


94 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

95 
	#__END_NAMESPACE_STD
 }

	)

96 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

97 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

98 
	#__END_NAMESPACE_C99
 }

	)

99 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

104 
	#__BEGIN_NAMESPACE_STD


	)

105 
	#__END_NAMESPACE_STD


	)

106 
	#__USING_NAMESPACE_STD
(
«me
)

	)

107 
	#__BEGIN_NAMESPACE_C99


	)

108 
	#__END_NAMESPACE_C99


	)

109 
	#__USING_NAMESPACE_C99
(
«me
)

	)

114 #i‚de‡
__BOUNDED_POINTERS__


115 
	#__bounded


	)

116 
	#__unbounded


	)

117 
	#__±rvÆue


	)

122 #i‡
__GNUC_PREREQ
 (2,97)

124 
	#__Êex¨r
 []

	)

126 #ifde‡
__GNUC__


127 
	#__Êex¨r
 [0]

	)

129 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

130 
	#__Êex¨r
 []

	)

133 
	#__Êex¨r
 [1]

	)

149 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

151 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

152 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

153 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

166 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

167 
	#__©åibuã__
(
xyz
Ë

	)

173 #i‡
__GNUC_PREREQ
 (2,96)

174 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

176 
	#__©åibuã_mÆloc__


	)

182 #i‡
__GNUC_PREREQ
 (2,96)

183 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

185 
	#__©åibuã_puª__


	)

191 #i‡
__GNUC_PREREQ
 (3,1)

192 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

193 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

195 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

196 
	#__©åibuã_noölöe__


	)

200 #i‡
__GNUC_PREREQ
 (3,2)

201 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

203 
	#__©åibuã_dïªˇãd__


	)

212 #i‡
__GNUC_PREREQ
 (2,8)

213 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

215 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

222 #i‡
__GNUC_PREREQ
 (2,97)

223 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

224 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

226 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

233 #i‡!
__GNUC_PREREQ
 (2,8)

234 
	#__exãnsi⁄__


	)

238 #i‡!
__GNUC_PREREQ
 (2,92)

239 
	#__ª°ri˘


	)

245 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


246 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

248 #ifde‡
__GNUC__


249 
	#__ª°ri˘_¨r


	)

251 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

252 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

255 
	#__ª°ri˘_¨r


	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__exãnsi⁄__


30 
__ölöe
 
	$gnu_dev_maj‹
 (
__dev
)

31 
__THROW
;

32 
__exãnsi⁄__


33 
__ölöe
 
	$gnu_dev_mö‹
 (
__dev
)

34 
__THROW
;

35 
__exãnsi⁄__


36 
__ölöe
 
	$gnu_dev_makedev
 (
__maj‹
,

37 
__mö‹
)

38 
__THROW
;

40 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

41 
__exãnsi⁄__
 
__ölöe
 

42 
	$gnu_dev_maj‹
 (
__dev
Ë
__THROW


44  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

45 
	}
}

47 
__exãnsi⁄__
 
__ölöe
 

48 
	$gnu_dev_mö‹
 (
__dev
Ë
__THROW


50  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

51 
	}
}

53 
__exãnsi⁄__
 
__ölöe
 

54 
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
Ë
__THROW


56  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

57 | (((Ë(
__mö‹
 & ~0xff)) << 12)

58 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

59 
	}
}

64 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

65 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

66 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__ve˘‹
, 
__cou¡
);

50 
ssize_t
 
wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__ve˘‹
, 
__cou¡
);

52 
	g__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

118 
	stime•ec


120 
__time_t
 
tv_£c
;

121 
tv_n£c
;

125 #unde‡
__√ed_time•ec


128 #ifdef 
_TIME_H


129 
__BEGIN_NAMESPACE_STD


131 
	stm


133 
tm_£c
;

134 
tm_mö
;

135 
tm_hour
;

136 
tm_mday
;

137 
tm_m⁄
;

138 
tm_yór
;

139 
tm_wday
;

140 
tm_yday
;

141 
tm_isd°
;

143 #ifdef 
__USE_BSD


144 
tm_gmtoff
;

145 
__c⁄°
 *
tm_z⁄e
;

147 
__tm_gmtoff
;

148 
__c⁄°
 *
__tm_z⁄e
;

151 
__END_NAMESPACE_STD


152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


153 
	$__USING_NAMESPACE_STD
(
tm
)

157 #ifde‡
__USE_POSIX199309


159 
	sôimî•ec


161 
time•ec
 
ô_öãrvÆ
;

162 
time•ec
 
ô_vÆue
;

166 
sigevít
;

170 #ifde‡
__USE_XOPEN2K


171 #i‚de‡
__pid_t_deföed


172 
__pid_t
 
	tpid_t
;

173 
	#__pid_t_deföed


	)

178 
__BEGIN_NAMESPACE_STD


181 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

184 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

187 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

188 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

191 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

197 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

198 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

199 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

200 
__END_NAMESPACE_STD


202 #ifde‡
__USE_XOPEN


205 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

207 
__THROW
;

210 #ifde‡
__USE_GNU


213 
	~<xloˇÀ.h
>

215 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

216 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

217 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

218 
__loˇÀ_t
 
__loc
Ë
__THROW
;

220 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

221 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

222 
__loˇÀ_t
 
__loc
Ë
__THROW
;

226 
__BEGIN_NAMESPACE_STD


229 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

233 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

234 
__END_NAMESPACE_STD


236 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


239 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

240 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

244 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

245 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
__BEGIN_NAMESPACE_STD


251 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

254 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

255 
__END_NAMESPACE_STD


257 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


262 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

263 *
__ª°ri˘
 
__buf
Ë
__THROW
;

266 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

272 *
__tz«me
[2];

273 
__daylight
;

274 
__timez⁄e
;

277 #ifdef 
__USE_POSIX


279 *
tz«me
[2];

283 
	$tz£t
 (Ë
__THROW
;

286 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


287 
daylight
;

288 
timez⁄e
;

291 #ifde‡
__USE_SVID


294 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

300 
	#__i¶óp
(
yór
) \

301 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

304 #ifde‡
__USE_MISC


309 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

312 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

315 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

319 #ifde‡
__USE_POSIX199309


324 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

325 
time•ec
 *
__ªmaöög
);

329 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

332 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

335 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

336 
__THROW
;

338 #ifde‡
__USE_XOPEN2K


343 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

344 
__c⁄°
 
time•ec
 *
__ªq
,

345 
time•ec
 *
__ªm
);

348 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

353 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

354 
sigevít
 *
__ª°ri˘
 
__evp
,

355 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

358 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

361 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

362 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

363 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

366 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

367 
__THROW
;

370 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

374 #ifde‡
__USE_XOPEN_EXTENDED


386 
gëd©e_îr
;

395 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

398 #ifde‡
__USE_GNU


409 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

410 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

413 
__END_DECLS


	@/usr/include/asm/ipcbuf.h

1 #i‚de‡
__i386_IPCBUF_H__


2 
	#__i386_IPCBUF_H__


	)

14 
	sùc64_≥rm


16 
__kî√l_key_t
 
	mkey
;

17 
__kî√l_uid32_t
 
	muid
;

18 
__kî√l_gid32_t
 
	mgid
;

19 
__kî√l_uid32_t
 
	mcuid
;

20 
__kî√l_gid32_t
 
	mcgid
;

21 
__kî√l_mode_t
 
	mmode
;

22 
	m__∑d1
;

23 
	m£q
;

24 
	m__∑d2
;

25 
	m__unu£d1
;

26 
	m__unu£d2
;

	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_MISC


35 
	#CSIGNAL
 0x000000f‡

	)

36 
	#CLONE_VM
 0x00000100

	)

37 
	#CLONE_FS
 0x00000200

	)

38 
	#CLONE_FILES
 0x00000400

	)

39 
	#CLONE_SIGHAND
 0x00000800

	)

40 
	#CLONE_PTRACE
 0x00002000

	)

41 
	#CLONE_VFORK
 0x00004000

	)

43 
	#CLONE_PARENT
 0x00008000

	)

45 
	#CLONE_THREAD
 0x00010000

	)

46 
	#CLONE_NEWNS
 0x00020000

	)

47 
	#CLONE_SYSVSEM
 0x00040000

	)

48 
	#CLONE_SETTLS
 0x00080000

	)

49 
	#CLONE_PARENT_SETTID
 0x00100000

	)

51 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

53 
	#CLONE_DETACHED
 0x00400000

	)

54 
	#CLONE_UNTRACED
 0x00800000

	)

56 
	#CLONE_CHILD_SETTID
 0x01000000

	)

58 
	#CLONE_STOPPED
 0x02000000

	)

62 
	ssched_∑øm


64 
	m__sched_¥i‹ôy
;

67 
	g__BEGIN_DECLS


70 #ifde‡
__USE_MISC


71 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

72 
__Êags
, *
__¨g
Ë
__THROW
;

75 
__END_DECLS


79 #i‡!
deföed
 
__deföed_sched∑øm
 \

80 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

81 
	#__deföed_sched∑øm
 1

	)

83 
	s__sched_∑øm


85 
__sched_¥i‹ôy
;

87 #unde‡
__√ed_sched∑øm


91 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


92 
	#__˝u_£t_t_deföed


	)

94 
	#__CPU_SETSIZE
 1024

	)

95 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

98 
	t__˝u_mask
;

101 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

102 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

107 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

108 } 
	t˝u_£t_t
;

111 
	#__CPU_ZERO
(
˝u£ç
) \

113 
__i
; \

114 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

115 
__i
 = 0; __ò<  (
˝u_£t_t
Ë/  (
__˝u_mask
); ++__i) \

116 
__¨r
->
__bôs
[
__i
] = 0; \

117 
	}
} 0)

	)

118 
	#__CPU_SET
(
˝u
, 
˝u£ç
) \

119 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] |
	`__CPUMASK
 (˝u))

	)

120 
	#__CPU_CLR
(
˝u
, 
˝u£ç
) \

121 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] &~
	`__CPUMASK
 (˝u))

	)

122 
	#__CPU_ISSET
(
˝u
, 
˝u£ç
) \

123 (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] & 
	`__CPUMASK
 (˝u)Ë!0)

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


24 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

26 
	#__FD_ZERO
(
fd•
) \

28 
__d0
, 
__d1
; \

29 
__asm__
 
	`__vﬁ©ûe__
 ("cld;Ñep; stosl" \

30 : "=c" (
__d0
), "=D" (
__d1
) \

31 : "a" (0), "0" ( (
fd_£t
) \

32 /  (
__fd_mask
)), \

33 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

35 } 0)

	)

37 
	#__FD_SET
(
fd
, 
fd•
) \

38 
__asm__
 
	`__vﬁ©ûe__
 ("btsl %1,%0" \

39 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

40 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

41 : "cc","mem‹y")

	)

42 
	#__FD_CLR
(
fd
, 
fd•
) \

43 
__asm__
 
	`__vﬁ©ûe__
 ("btrl %1,%0" \

44 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

45 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

46 : "cc","mem‹y")

	)

47 
	#__FD_ISSET
(
fd
, 
fd•
) \

48 (
__exãnsi⁄__
 \

49 ({
__ªsu…
; \

50 
__asm__
 
	`__vﬁ©ûe__
 ("btl %1,%2 ; setcb %b0" \

51 : "=q" (
__ªsu…
) \

52 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
), \

53 "m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

55 
__ªsu…
; }))

	)

61 
	#__FD_ZERO
(
£t
) \

63 
__i
; \

64 
fd_£t
 *
__¨r
 = (
£t
); \

65 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

66 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

67 } 0)

	)

68 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

69 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

70 
	#__FD_ISSET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] & 
	`__FDMASK
 (d))

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 
__S32_TYPE


	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‚de‡
_SYS_UIO_H


24 
	~<sys/ty≥s.h
>

38 
	#UIO_MAXIOV
 1024

	)

42 
	siovec


44 *
	miov_ba£
;

45 
size_t
 
	miov_Àn
;

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

24 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/limits.h

23 #i‚de‡
_LIBC_LIMITS_H_


24 
	#_LIBC_LIMITS_H_
 1

	)

26 
	~<„©uªs.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

129 #ifde‡
__USE_ISOC99


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 
LONG_LONG_MIN


	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
LONG_LONG_MAX


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 
ULONG_LONG_MAX


	)

142 #ifdef 
__USE_POSIX


144 
	~<bôs/posix1_lim.h
>

147 #ifdef 
__USE_POSIX2


148 
	~<bôs/posix2_lim.h
>

151 #ifdef 
__USE_XOPEN


152 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/byteorder/generic.h

1 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


2 
	#_LINUX_BYTEORDER_GENERIC_H


	)

82 #i‡
deföed
(
__KERNEL__
)

87 
	#˝u_to_À64
 
__˝u_to_À64


	)

88 
	#À64_to_˝u
 
__À64_to_˝u


	)

89 
	#˝u_to_À32
 
__˝u_to_À32


	)

90 
	#À32_to_˝u
 
__À32_to_˝u


	)

91 
	#˝u_to_À16
 
__˝u_to_À16


	)

92 
	#À16_to_˝u
 
__À16_to_˝u


	)

93 
	#˝u_to_be64
 
__˝u_to_be64


	)

94 
	#be64_to_˝u
 
__be64_to_˝u


	)

95 
	#˝u_to_be32
 
__˝u_to_be32


	)

96 
	#be32_to_˝u
 
__be32_to_˝u


	)

97 
	#˝u_to_be16
 
__˝u_to_be16


	)

98 
	#be16_to_˝u
 
__be16_to_˝u


	)

99 
	#˝u_to_À64p
 
__˝u_to_À64p


	)

100 
	#À64_to_˝up
 
__À64_to_˝up


	)

101 
	#˝u_to_À32p
 
__˝u_to_À32p


	)

102 
	#À32_to_˝up
 
__À32_to_˝up


	)

103 
	#˝u_to_À16p
 
__˝u_to_À16p


	)

104 
	#À16_to_˝up
 
__À16_to_˝up


	)

105 
	#˝u_to_be64p
 
__˝u_to_be64p


	)

106 
	#be64_to_˝up
 
__be64_to_˝up


	)

107 
	#˝u_to_be32p
 
__˝u_to_be32p


	)

108 
	#be32_to_˝up
 
__be32_to_˝up


	)

109 
	#˝u_to_be16p
 
__˝u_to_be16p


	)

110 
	#be16_to_˝up
 
__be16_to_˝up


	)

111 
	#˝u_to_À64s
 
__˝u_to_À64s


	)

112 
	#À64_to_˝us
 
__À64_to_˝us


	)

113 
	#˝u_to_À32s
 
__˝u_to_À32s


	)

114 
	#À32_to_˝us
 
__À32_to_˝us


	)

115 
	#˝u_to_À16s
 
__˝u_to_À16s


	)

116 
	#À16_to_˝us
 
__À16_to_˝us


	)

117 
	#˝u_to_be64s
 
__˝u_to_be64s


	)

118 
	#be64_to_˝us
 
__be64_to_˝us


	)

119 
	#˝u_to_be32s
 
__˝u_to_be32s


	)

120 
	#be32_to_˝us
 
__be32_to_˝us


	)

121 
	#˝u_to_be16s
 
__˝u_to_be16s


	)

122 
	#be16_to_˝us
 
__be16_to_˝us


	)

140 #unde‡
¡ohl


141 #unde‡
¡ohs


142 #unde‡
ht⁄l


143 #unde‡
ht⁄s


149 #i‡
deföed
(
__KERNEL__
Ë|| (deföed (
__GLIBC__
) && __GLIBC__ >= 2)

150 
__u32
 
¡ohl
(__u32);

151 
__u32
 
ht⁄l
(__u32);

153 
¡ohl
();

154 
ht⁄l
();

156 
¡ohs
();

157 
ht⁄s
();

160 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >2Ë&& deföed(
__OPTIMIZE__
)

162 
	#___ht⁄l
(
x
Ë
	`__˝u_to_be32
(x)

	)

163 
	#___ht⁄s
(
x
Ë
	`__˝u_to_be16
(x)

	)

164 
	#___¡ohl
(
x
Ë
	`__be32_to_˝u
(x)

	)

165 
	#___¡ohs
(
x
Ë
	`__be16_to_˝u
(x)

	)

167 #i‡
deföed
(
__KERNEL__
Ë|| (deföed (
__GLIBC__
) && __GLIBC__ >= 2)

168 
	#ht⁄l
(
x
Ë
	`___ht⁄l
(x)

	)

169 
	#¡ohl
(
x
Ë
	`___¡ohl
(x)

	)

171 
	#ht⁄l
(
x
Ë(()
	`___ht⁄l
(x))

	)

172 
	#¡ohl
(
x
Ë(()
	`___¡ohl
(x))

	)

174 
	#ht⁄s
(
x
Ë
	`___ht⁄s
(x)

	)

175 
	#¡ohs
(
x
Ë
	`___¡ohs
(x)

	)

	@/usr/include/linux/byteorder/swab.h

1 #i‚de‡
_LINUX_BYTEORDER_SWAB_H


2 
	#_LINUX_BYTEORDER_SWAB_H


	)

21 
	#___swab16
(
x
) \

23 
__u16
 
__x
 = (
x
); \

24 ((
__u16
)( \

25 (((
__u16
)(
__x
) & (__u16)0x00ffU) << 8) | \

26 (((
__u16
)(
__x
) & (__u16)0xff00U) >> 8) )); \

27 })

	)

29 
	#___swab32
(
x
) \

31 
__u32
 
__x
 = (
x
); \

32 ((
__u32
)( \

33 (((
__u32
)(
__x
) & (__u32)0x000000ffUL) << 24) | \

34 (((
__u32
)(
__x
) & (__u32)0x0000ff00UL) << 8) | \

35 (((
__u32
)(
__x
) & (__u32)0x00ff0000UL) >> 8) | \

36 (((
__u32
)(
__x
) & (__u32)0xff000000UL) >> 24) )); \

37 })

	)

39 
	#___swab64
(
x
) \

41 
__u64
 
__x
 = (
x
); \

42 ((
__u64
)( \

43 (
__u64
)(((__u64)(
__x
) & (__u64)0x00000000000000ffULL) << 56) | \

44 (
__u64
)(((__u64)(
__x
) & (__u64)0x000000000000ff00ULL) << 40) | \

45 (
__u64
)(((__u64)(
__x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

46 (
__u64
)(((__u64)(
__x
) & (__u64)0x00000000ff000000ULL) << 8) | \

47 (
__u64
)(((__u64)(
__x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

48 (
__u64
)(((__u64)(
__x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

49 (
__u64
)(((__u64)(
__x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

50 (
__u64
)(((__u64)(
__x
) & (__u64)0xff00000000000000ULL) >> 56) )); \

51 })

	)

53 
	#___c⁄°™t_swab16
(
x
) \

54 ((
__u16
)( \

55 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

56 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8Ë))

	)

57 
	#___c⁄°™t_swab32
(
x
) \

58 ((
__u32
)( \

59 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

60 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

61 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

62 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24Ë))

	)

63 
	#___c⁄°™t_swab64
(
x
) \

64 ((
__u64
)( \

65 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

66 (
__u64
)(((__u64)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

67 (
__u64
)(((__u64)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

68 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

69 (
__u64
)(((__u64)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

70 (
__u64
)(((__u64)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

71 (
__u64
)(((__u64)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

72 (
__u64
)(((__u64)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56Ë))

	)

77 #i‚de‡
__¨ch__swab16


78 
	#__¨ch__swab16
(
x
Ë({ 
__u16
 
__tmp
 = (xË; 
	`___swab16
(__tmp); })

	)

80 #i‚de‡
__¨ch__swab32


81 
	#__¨ch__swab32
(
x
Ë({ 
__u32
 
__tmp
 = (xË; 
	`___swab32
(__tmp); })

	)

83 #i‚de‡
__¨ch__swab64


84 
	#__¨ch__swab64
(
x
Ë({ 
__u64
 
__tmp
 = (xË; 
	`___swab64
(__tmp); })

	)

87 #i‚de‡
__¨ch__swab16p


88 
	#__¨ch__swab16p
(
x
Ë
	`__¨ch__swab16
(*(x))

	)

90 #i‚de‡
__¨ch__swab32p


91 
	#__¨ch__swab32p
(
x
Ë
	`__¨ch__swab32
(*(x))

	)

93 #i‚de‡
__¨ch__swab64p


94 
	#__¨ch__swab64p
(
x
Ë
	`__¨ch__swab64
(*(x))

	)

97 #i‚de‡
__¨ch__swab16s


98 
	#__¨ch__swab16s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab16p
((x)); } 0)

	)

100 #i‚de‡
__¨ch__swab32s


101 
	#__¨ch__swab32s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab32p
((x)); } 0)

	)

103 #i‚de‡
__¨ch__swab64s


104 
	#__¨ch__swab64s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab64p
((x)); } 0)

	)

111 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >2Ë&& deföed(
__OPTIMIZE__
)

112 
	#__swab16
(
x
) \

113 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

114 
	`___swab16
((
x
)) : \

115 
	`__fswab16
((
x
)))

	)

116 
	#__swab32
(
x
) \

117 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

118 
	`___swab32
((
x
)) : \

119 
	`__fswab32
((
x
)))

	)

120 
	#__swab64
(
x
) \

121 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

122 
	`___swab64
((
x
)) : \

123 
	`__fswab64
((
x
)))

	)

125 
	#__swab16
(
x
Ë
	`__fswab16
(x)

	)

126 
	#__swab32
(
x
Ë
	`__fswab32
(x)

	)

127 
	#__swab64
(
x
Ë
	`__fswab64
(x)

	)

131 
__ölöe__
 
__c⁄°__
 
__u16
 
	$__fswab16
(
__u16
 
x
)

133  
	`__¨ch__swab16
(
x
);

134 
	}
}

135 
__ölöe__
 
__u16
 
	$__swab16p
(
__u16
 *
x
)

137  
	`__¨ch__swab16p
(
x
);

138 
	}
}

139 
__ölöe__
 
	$__swab16s
(
__u16
 *
addr
)

141 
	`__¨ch__swab16s
(
addr
);

142 
	}
}

144 
__ölöe__
 
__c⁄°__
 
__u32
 
	$__fswab32
(
__u32
 
x
)

146  
	`__¨ch__swab32
(
x
);

147 
	}
}

148 
__ölöe__
 
__u32
 
	$__swab32p
(
__u32
 *
x
)

150  
	`__¨ch__swab32p
(
x
);

151 
	}
}

152 
__ölöe__
 
	$__swab32s
(
__u32
 *
addr
)

154 
	`__¨ch__swab32s
(
addr
);

155 
	}
}

157 #ifde‡
__BYTEORDER_HAS_U64__


158 
__ölöe__
 
__c⁄°__
 
__u64
 
	$__fswab64
(
__u64
 
x
)

160 #ifde‡
__SWAB_64_THRU_32__


161 
__u32
 
h
 = 
x
 >> 32;

162 
__u32
 
l
 = 
x
 & ((1ULL<<32)-1);

163  (((
__u64
)
	`__swab32
(
l
)Ë<< 32Ë| ((__u64)(__swab32(
h
)));

165  
	`__¨ch__swab64
(
x
);

167 
	}
}

168 
__ölöe__
 
__u64
 
	$__swab64p
(
__u64
 *
x
)

170  
	`__¨ch__swab64p
(
x
);

171 
	}
}

172 
__ölöe__
 
	$__swab64s
(
__u64
 *
addr
)

174 
	`__¨ch__swab64s
(
addr
);

175 
	}
}

178 #i‡
deföed
(
__KERNEL__
)

179 
	#swab16
 
__swab16


	)

180 
	#swab32
 
__swab32


	)

181 
	#swab64
 
__swab64


	)

182 
	#swab16p
 
__swab16p


	)

183 
	#swab32p
 
__swab32p


	)

184 
	#swab64p
 
__swab64p


	)

185 
	#swab16s
 
__swab16s


	)

186 
	#swab32s
 
__swab32s


	)

187 
	#swab64s
 
__swab64s


	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 
	#_POSIX_CHILD_MAX
 6

	)

44 
	#_POSIX_DELAYTIMER_MAX
 32

	)

47 
	#_POSIX_LINK_MAX
 8

	)

50 
	#_POSIX_MAX_CANON
 255

	)

54 
	#_POSIX_MAX_INPUT
 255

	)

57 
	#_POSIX_MQ_OPEN_MAX
 8

	)

60 
	#_POSIX_MQ_PRIO_MAX
 32

	)

63 #ifde‡
__USE_XOPEN2K


64 
	#_POSIX_NGROUPS_MAX
 8

	)

66 
	#_POSIX_NGROUPS_MAX
 0

	)

70 
	#_POSIX_OPEN_MAX
 16

	)

74 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

77 
	#_POSIX_NAME_MAX
 14

	)

80 
	#_POSIX_PATH_MAX
 256

	)

83 
	#_POSIX_PIPE_BUF
 512

	)

86 
	#_POSIX_RTSIG_MAX
 8

	)

89 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

92 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

95 
	#_POSIX_SIGQUEUE_MAX
 32

	)

98 
	#_POSIX_SSIZE_MAX
 32767

	)

101 
	#_POSIX_STREAM_MAX
 8

	)

104 
	#_POSIX_TZNAME_MAX
 6

	)

107 
	#_POSIX_QLIMIT
 1

	)

111 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

114 
	#_POSIX_UIO_MAXIOV
 16

	)

117 
	#_POSIX_TTY_NAME_MAX
 9

	)

120 
	#_POSIX_TIMER_MAX
 32

	)

123 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

126 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

130 
	~<bôs/loˇl_lim.h
>

133 #i‚def 
SSIZE_MAX


134 
	#SSIZE_MAX
 
LONG_MAX


	)

141 #i‚def 
NGROUPS_MAX


142 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

36 
	~<löux/limôs.h
>

39 #ifde‡
__undef_NR_OPEN


40 #unde‡
NR_OPEN


41 #unde‡
__undef_NR_OPEN


44 #ifde‡
__undef_LINK_MAX


45 #unde‡
LINK_MAX


46 #unde‡
__undef_LINK_MAX


49 #ifde‡
__undef_OPEN_MAX


50 #unde‡
OPEN_MAX


51 #unde‡
__undef_OPEN_MAX


55 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

57 
	#PTHREAD_KEYS_MAX
 1024

	)

60 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

62 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

65 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

67 
	#PTHREAD_THREADS_MAX
 16384

	)

71 
	#AIO_PRIO_DELTA_MAX
 20

	)

74 
	#PTHREAD_STACK_MIN
 16384

	)

77 
	#TIMER_MAX
 256

	)

80 
	#DELAYTIMER_MAX
 2147483647

	)

83 
	#TTY_NAME_MAX
 32

	)

86 
	#LOGIN_NAME_MAX
 256

	)

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@
1
.
1
/usr/include
322
8600
arp_tables.c
arpt_mangle.c
arptable_filter.c
broadcom/ip_conntrack_dtx8.c
broadcom/ip_conntrack_ipsec.c
broadcom/ip_conntrack_ipsec.mod.c
broadcom/ip_conntrack_pt.c
broadcom/ip_conntrack_pt.mod.c
broadcom/ip_conntrack_wm.c
broadcom/ip_conntrack_wm.mod.c
broadcom/ip_nat_dtx8.c
broadcom/ip_nat_ipsec.c
broadcom/ip_nat_ipsec.mod.c
broadcom/ip_nat_pt.c
broadcom/ip_nat_pt.mod.c
broadcom/ip_nat_wm.c
broadcom/ip_nat_wm.mod.c
ip_conntrack.mod.c
ip_conntrack_amanda.c
ip_conntrack_core.c
ip_conntrack_ftp.c
ip_conntrack_ftp.mod.c
ip_conntrack_gre.c
ip_conntrack_gre.mod.c
ip_conntrack_h323.c
ip_conntrack_h323.mod.c
ip_conntrack_irc.c
ip_conntrack_irc.mod.c
ip_conntrack_pptp.c
ip_conntrack_pptp.mod.c
ip_conntrack_proto_esp.c
ip_conntrack_proto_generic.c
ip_conntrack_proto_icmp.c
ip_conntrack_proto_tcp.c
ip_conntrack_proto_udp.c
ip_conntrack_rtsp.c
ip_conntrack_standalone.c
ip_conntrack_tftp.c
ip_conntrack_tftp.mod.c
ip_fw_compat.c
ip_fw_compat.h
ip_fw_compat_masq.c
ip_fw_compat_redir.c
ip_nat_amanda.c
ip_nat_core.c
ip_nat_ftp.c
ip_nat_ftp.mod.c
ip_nat_gre.c
ip_nat_gre.mod.c
ip_nat_h323.c
ip_nat_h323.mod.c
ip_nat_helper.c
ip_nat_irc.c
ip_nat_irc.mod.c
ip_nat_pptp.c
ip_nat_pptp.mod.c
ip_nat_proto_esp.c
ip_nat_proto_icmp.c
ip_nat_proto_tcp.c
ip_nat_proto_udp.c
ip_nat_proto_unknown.c
ip_nat_rtsp.c
ip_nat_rule.c
ip_nat_snmp_basic.c
ip_nat_standalone.c
ip_nat_tftp.c
ip_nat_tftp.mod.c
ip_queue.c
ip_queue.mod.c
ip_tables.c
ip_tables.mod.c
ip_traffic.mod.c
ip_traffic_standalone.c
ipchains_core.c
ipfwadm_core.c
ipt_CLASSIFY.c
ipt_DSCP.c
ipt_ECN.c
ipt_FTOS.c
ipt_LOG.c
ipt_LOG.mod.c
ipt_MARK.c
ipt_MARK.mod.c
ipt_MASQUERADE.c
ipt_MASQUERADE.mod.c
ipt_NETMAP.c
ipt_NOTRACK.c
ipt_REDIRECT.c
ipt_REDIRECT.mod.c
ipt_REJECT.c
ipt_SAME.c
ipt_TCPMSS.c
ipt_TCPMSS.mod.c
ipt_TOS.c
ipt_ULOG.c
ipt_addrtype.c
ipt_ah.c
ipt_conntrack.c
ipt_dscp.c
ipt_ecn.c
ipt_esp.c
ipt_helper.c
ipt_iprange.c
ipt_length.c
ipt_limit.c
ipt_limit.mod.c
ipt_mac.c
ipt_mark.c
ipt_mark.mod.c
ipt_multiport.c
ipt_owner.c
ipt_physdev.c
ipt_pkttype.c
ipt_realm.c
ipt_recent.c
ipt_state.c
ipt_state.mod.c
ipt_tcpmss.c
ipt_tos.c
ipt_ttl.c
iptable_filter.c
iptable_filter.mod.c
iptable_mangle.c
iptable_mangle.mod.c
iptable_nat.mod.c
iptable_raw.c
/usr/include/asm/semaphore.h
/usr/include/asm/system.h
/usr/include/linux/bitops.h
/usr/include/linux/cache.h
/usr/include/linux/compiler.h
/usr/include/linux/config.h
/usr/include/linux/ctype.h
/usr/include/linux/errno.h
/usr/include/linux/file.h
/usr/include/linux/fs.h
/usr/include/linux/icmp.h
/usr/include/linux/if.h
/usr/include/linux/if_arp.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_packet.h
/usr/include/linux/in.h
/usr/include/linux/inet.h
/usr/include/linux/inetdevice.h
/usr/include/linux/init.h
/usr/include/linux/interrupt.h
/usr/include/linux/ip.h
/usr/include/linux/kernel.h
/usr/include/linux/kmod.h
/usr/include/linux/list.h
/usr/include/linux/mm.h
/usr/include/linux/module.h
/usr/include/linux/netdevice.h
/usr/include/linux/netfilter.h
/usr/include/linux/netfilter_arp/arp_tables.h
/usr/include/linux/netfilter_arp/arpt_mangle.h
/usr/include/linux/netfilter_bridge.h
/usr/include/linux/netfilter_ipv4.h
/usr/include/linux/netfilter_ipv4/compat_firewall.h
/usr/include/linux/netfilter_ipv4/ip_conntrack.h
/usr/include/linux/netfilter_ipv4/ip_conntrack_amanda.h
/usr/include/linux/netfilter_ipv4/ip_conntrack_core.h
/usr/include/linux/netfilter_ipv4/ip_conntrack_ftp.h
/usr/include/linux/netfilter_ipv4/ip_conntrack_helper.h
/usr/include/linux/netfilter_ipv4/ip_conntrack_irc.h
/usr/include/linux/netfilter_ipv4/ip_conntrack_protocol.h
/usr/include/linux/netfilter_ipv4/ip_conntrack_tftp.h
/usr/include/linux/netfilter_ipv4/ip_conntrack_tuple.h
/usr/include/linux/netfilter_ipv4/ip_nat.h
/usr/include/linux/netfilter_ipv4/ip_nat_core.h
/usr/include/linux/netfilter_ipv4/ip_nat_helper.h
/usr/include/linux/netfilter_ipv4/ip_nat_protocol.h
/usr/include/linux/netfilter_ipv4/ip_nat_rule.h
/usr/include/linux/netfilter_ipv4/ip_queue.h
/usr/include/linux/netfilter_ipv4/ip_tables.h
/usr/include/linux/netfilter_ipv4/ipchains_core.h
/usr/include/linux/netfilter_ipv4/ipfwadm_core.h
/usr/include/linux/netfilter_ipv4/ipt_DSCP.h
/usr/include/linux/netfilter_ipv4/ipt_ECN.h
/usr/include/linux/netfilter_ipv4/ipt_LOG.h
/usr/include/linux/netfilter_ipv4/ipt_MARK.h
/usr/include/linux/netfilter_ipv4/ipt_REJECT.h
/usr/include/linux/netfilter_ipv4/ipt_TCPMSS.h
/usr/include/linux/netfilter_ipv4/ipt_TOS.h
/usr/include/linux/netfilter_ipv4/ipt_ULOG.h
/usr/include/linux/netfilter_ipv4/ipt_ah.h
/usr/include/linux/netfilter_ipv4/ipt_conntrack.h
/usr/include/linux/netfilter_ipv4/ipt_dscp.h
/usr/include/linux/netfilter_ipv4/ipt_ecn.h
/usr/include/linux/netfilter_ipv4/ipt_esp.h
/usr/include/linux/netfilter_ipv4/ipt_helper.h
/usr/include/linux/netfilter_ipv4/ipt_length.h
/usr/include/linux/netfilter_ipv4/ipt_limit.h
/usr/include/linux/netfilter_ipv4/ipt_mac.h
/usr/include/linux/netfilter_ipv4/ipt_mark.h
/usr/include/linux/netfilter_ipv4/ipt_multiport.h
/usr/include/linux/netfilter_ipv4/ipt_owner.h
/usr/include/linux/netfilter_ipv4/ipt_pkttype.h
/usr/include/linux/netfilter_ipv4/ipt_recent.h
/usr/include/linux/netfilter_ipv4/ipt_state.h
/usr/include/linux/netfilter_ipv4/ipt_tcpmss.h
/usr/include/linux/netfilter_ipv4/ipt_tos.h
/usr/include/linux/netfilter_ipv4/ipt_ttl.h
/usr/include/linux/netfilter_ipv4/listhelp.h
/usr/include/linux/netfilter_ipv4/lockhelp.h
/usr/include/linux/netlink.h
/usr/include/linux/notifier.h
/usr/include/linux/proc_fs.h
/usr/include/linux/random.h
/usr/include/linux/sched.h
/usr/include/linux/skbuff.h
/usr/include/linux/slab.h
/usr/include/linux/socket.h
/usr/include/linux/sockios.h
/usr/include/linux/spinlock.h
/usr/include/linux/stat.h
/usr/include/linux/stddef.h
/usr/include/linux/string.h
/usr/include/linux/sysctl.h
/usr/include/linux/tcp.h
/usr/include/linux/timer.h
/usr/include/linux/types.h
/usr/include/linux/udp.h
/usr/include/linux/version.h
/usr/include/net/route.h
/usr/include/asm/bitops.h
/usr/include/asm/byteorder.h
/usr/include/asm/cache.h
/usr/include/asm/errno.h
/usr/include/asm/mmu.h
/usr/include/asm/page.h
/usr/include/asm/param.h
/usr/include/asm/processor.h
/usr/include/asm/ptrace.h
/usr/include/asm/segment.h
/usr/include/asm/socket.h
/usr/include/asm/sockios.h
/usr/include/asm/types.h
/usr/include/bits/wordsize.h
/usr/include/byteswap.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/linux/binfmts.h
/usr/include/linux/dcache.h
/usr/include/linux/fs_struct.h
/usr/include/linux/highmem.h
/usr/include/linux/ioctl.h
/usr/include/linux/kdev_t.h
/usr/include/linux/limits.h
/usr/include/linux/linkage.h
/usr/include/linux/modversions.h
/usr/include/linux/net.h
/usr/include/linux/netfilter_arp.h
/usr/include/linux/param.h
/usr/include/linux/posix_types.h
/usr/include/linux/prefetch.h
/usr/include/linux/resource.h
/usr/include/linux/securebits.h
/usr/include/linux/sem.h
/usr/include/linux/signal.h
/usr/include/linux/smp.h
/usr/include/linux/threads.h
/usr/include/linux/time.h
/usr/include/linux/times.h
/usr/include/linux/timex.h
/usr/include/linux/tty.h
/usr/include/linux/uio.h
/usr/include/linux/vfs.h
/usr/include/linux/wait.h
/usr/include/netinet/in.h
/usr/include/sys/socket.h
/usr/include/sys/types.h
/usr/include/asm/cpufeature.h
/usr/include/asm/highmem.h
/usr/include/asm/ioctl.h
/usr/include/asm/math_emu.h
/usr/include/asm/pgalloc.h
/usr/include/asm/posix_types.h
/usr/include/asm/resource.h
/usr/include/asm/sembuf.h
/usr/include/asm/sigcontext.h
/usr/include/asm/siginfo.h
/usr/include/asm/signal.h
/usr/include/asm/smp.h
/usr/include/asm/statfs.h
/usr/include/asm/timex.h
/usr/include/asm/vm86.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/in.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/socket.h
/usr/include/bits/types.h
/usr/include/gnu/stubs.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/capability.h
/usr/include/linux/ipc.h
/usr/include/linux/ptrace.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/asm/ipcbuf.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/sockaddr.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/limits.h
/usr/include/linux/byteorder/generic.h
/usr/include/linux/byteorder/swab.h
/usr/include/xlocale.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/xopen_lim.h
/usr/include/bits/local_lim.h
/usr/include/bits/stdio_lim.h
